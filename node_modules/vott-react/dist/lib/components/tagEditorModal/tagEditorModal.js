"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_jsonschema_form_1 = __importDefault(require("react-jsonschema-form"));
const reactstrap_1 = require("reactstrap");
const tagColors_1 = require("../common/tagColors");
const defaultValues = {
    tagColors: tagColors_1.tagColors,
    tagNameText: "Tag",
    editTagText: "Edit Tag",
    tagColorText: "Color",
    saveText: "Save",
    cancelText: "Cancel",
};
/**
 * Simple modal for editing the name and color of project tags
 */
class TagEditorModal extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            originalTag: null,
            currentTag: null,
            isOpen: this.props.show,
            formSchema: TagEditorModal.createFormSchema(this.props.tagColors || defaultValues.tagColors, this.props.tagNameText || defaultValues.tagNameText, this.props.tagColorText || defaultValues.tagColorText),
        };
        /**
         * Open editor modal with tag
         * @param tag Tag to be edited
         */
        this.open = (tag) => {
            console.log("aaaaaaa");
            this.setState({
                isOpen: true,
                originalTag: tag,
                currentTag: tag,
            });
        };
        /**
         * Close editor modal and call `onCancel` if provided
         */
        this.close = () => {
            this.setState({
                isOpen: false,
            }, () => {
                if (this.props.onCancel) {
                    this.props.onCancel();
                }
            });
        };
        /**
         * Called when change made to modal form
         */
        this.handleFormChange = (args) => {
            var rgb_name = args.formData.name;
            let hex = [];
            var rgb
            var num1 = 0;
            if(rgb_name === undefined){

            }else{
                rgb = rgb_name.split(":");
                num1 = rgb.length;
            }
             
            //if(rgb == undefined){
            //    rgb = "120,0,0"
            //}
            console.log("num1:" + num1);
            var color_num = "128,128,128";
            if(Number(num1) === 2){
                color_num = rgb[1];
            }
            console.error(color_num);
            color_num.split(',').map(color => {hex.push(this.coverNumToHex(color));});
            var color_hex= '#'+hex.join('');
            console.error("aa:" + color_hex)
            this.setState({
                currentTag: {
                    name: args.formData.name,
                    color: color_hex,
                },
            });
        };
        /**
         * convert color rgb to hex
         */
        this.coverNumToHex = (num) => {
            var n = Number(num)
            if(!isNaN(n)){
                return (n | 1 << 8).toString(16).slice(1);
            }else{
                num;
            }
            
        }
        /**
         * Called when "Ok" is clicked
         */
        this.handleOk = (e) => {
            this.props.onOk(this.state.originalTag, this.state.currentTag);
        };
    }
    render() {
        const closeBtn = React.createElement("button", { className: "close", onClick: this.close }, "\u00D7");
        return (React.createElement("div", null,
            React.createElement(reactstrap_1.Modal, { isOpen: this.state.isOpen, centered: true },
                React.createElement(reactstrap_1.ModalHeader, { toggle: this.close, close: closeBtn }, this.props.editTagText || defaultValues.editTagText),
                React.createElement(reactstrap_1.ModalBody, null,
                    React.createElement(react_jsonschema_form_1.default, { idPrefix: "modal-form", schema: this.state.formSchema, formData: this.state.currentTag, onChange: this.handleFormChange },
                        React.createElement("button", { style: {
                                display: "none",
                            }, type: "submit" }))),
                React.createElement(reactstrap_1.ModalFooter, null,
                    React.createElement(reactstrap_1.Button, { color: "success", onClick: this.handleOk }, this.props.saveText || defaultValues.saveText),
                    React.createElement(reactstrap_1.Button, { color: "secondary", onClick: this.close }, this.props.cancelText || defaultValues.cancelText)))));
    }
}
TagEditorModal.createFormSchema = (colors, tagNameText, tagColorText) => {
    const keys = Object.keys(colors);
    const values = [];
    for (const key of keys) {
        values.push(colors[key]);
    }
    console.log(values[0])
    return {
        type: "object",
        properties: {
            name: {
                title: tagNameText,
                type: "string",
            },
            color: {
                title: tagColorText,
                type: "string",
                //enum: values,
                //default: values[0],
                //enumNames: keys,
            },
        },
    };
};
exports.TagEditorModal = TagEditorModal;

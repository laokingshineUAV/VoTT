{"version":3,"file":"applicationinsights-properties-js.min.js","sources":["../../../shared/AppInsightsCore/dist-esm/JavaScriptSDK/CoreUtils.js","../../../shared/AppInsightsCore/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js","../../../shared/AppInsightsCommon/dist-esm/Enums.js","../../../shared/AppInsightsCore/dist-esm/JavaScriptSDK/DiagnosticLogger.js","../../../shared/AppInsightsCore/dist-esm/JavaScriptSDK/AppInsightsCore.js","../../../shared/AppInsightsCommon/dist-esm/Telemetry/Common/DataSanitizer.js","../../../shared/AppInsightsCommon/dist-esm/Util.js","../../../common/temp/node_modules/tslib/tslib.es6.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/Base.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/DataPointType.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/Data.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/Domain.js","../../../shared/AppInsightsCommon/dist-esm/Telemetry/Common/Envelope.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/Envelope.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/EventData.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/StackFrame.js","../../../shared/AppInsightsCommon/dist-esm/Telemetry/Event.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/ExceptionDetails.js","../../../shared/AppInsightsCommon/dist-esm/Telemetry/Exception.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/ExceptionData.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/MetricData.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/DataPoint.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/SeverityLevel.js","../../../shared/AppInsightsCommon/dist-esm/Telemetry/Common/DataPoint.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/PageViewData.js","../../../shared/AppInsightsCommon/dist-esm/Telemetry/Metric.js","../../../shared/AppInsightsCommon/dist-esm/Telemetry/PageView.js","../../../shared/AppInsightsCommon/dist-esm/Telemetry/RemoteDependencyData.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/RemoteDependencyData.js","../../../shared/AppInsightsCommon/dist-esm/Telemetry/Trace.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/MessageData.js","../../../shared/AppInsightsCommon/dist-esm/Telemetry/PageViewPerformance.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/PageViewPerfData.js","../../../shared/AppInsightsCommon/dist-esm/Telemetry/Common/Data.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/IConfig.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/ContextTagKeys.js","../../../shared/AppInsightsCommon/dist-esm/Interfaces/PartAExtensions.js","../dist-esm/Context/Session.js","../dist-esm/Context/Application.js","../dist-esm/Context/Device.js","../dist-esm/Context/Internal.js","../dist-esm/HashCodeScoreGenerator.js","../dist-esm/SamplingScoreGenerator.js","../dist-esm/Context/Sample.js","../dist-esm/Context/User.js","../dist-esm/Context/Location.js","../dist-esm/Context/TelemetryTrace.js","../dist-esm/TelemetryContext.js","../dist-esm/PropertiesPlugin.js","../../../shared/AppInsightsCommon/dist-esm/applicationinsights-common.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nvar CoreUtils = /** @class */ (function () {\r\n    function CoreUtils() {\r\n    }\r\n    CoreUtils.isNullOrUndefined = function (input) {\r\n        return input === null || input === undefined;\r\n    };\r\n    /**\r\n* Creates a new GUID.\r\n* @return {string} A GUID.\r\n*/\r\n    CoreUtils.newGuid = function () {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(GuidRegex, function (c) {\r\n            // tslint:disable-next-line:insecure-random\r\n            var r = (Math.random() * 16 | 0), v = (c === 'x' ? r : r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    };\r\n    return CoreUtils;\r\n}());\r\nexport { CoreUtils };\r\nvar GuidRegex = /[xy]/g;\r\n//# sourceMappingURL=CoreUtils.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport var LoggingSeverity;\r\n(function (LoggingSeverity) {\r\n    /**\r\n     * Error will be sent as internal telemetry\r\n     */\r\n    LoggingSeverity[LoggingSeverity[\"CRITICAL\"] = 1] = \"CRITICAL\";\r\n    /**\r\n     * Error will NOT be sent as internal telemetry, and will only be shown in browser console\r\n     */\r\n    LoggingSeverity[LoggingSeverity[\"WARNING\"] = 2] = \"WARNING\";\r\n})(LoggingSeverity || (LoggingSeverity = {}));\r\n/**\r\n * Internal message ID. Please create a new one for every conceptually different message. Please keep alphabetically ordered\r\n */\r\nexport var _InternalMessageId = {\r\n    // Non user actionable\r\n    BrowserDoesNotSupportLocalStorage: 0,\r\n    BrowserCannotReadLocalStorage: 1,\r\n    BrowserCannotReadSessionStorage: 2,\r\n    BrowserCannotWriteLocalStorage: 3,\r\n    BrowserCannotWriteSessionStorage: 4,\r\n    BrowserFailedRemovalFromLocalStorage: 5,\r\n    BrowserFailedRemovalFromSessionStorage: 6,\r\n    CannotSendEmptyTelemetry: 7,\r\n    ClientPerformanceMathError: 8,\r\n    ErrorParsingAISessionCookie: 9,\r\n    ErrorPVCalc: 10,\r\n    ExceptionWhileLoggingError: 11,\r\n    FailedAddingTelemetryToBuffer: 12,\r\n    FailedMonitorAjaxAbort: 13,\r\n    FailedMonitorAjaxDur: 14,\r\n    FailedMonitorAjaxOpen: 15,\r\n    FailedMonitorAjaxRSC: 16,\r\n    FailedMonitorAjaxSend: 17,\r\n    FailedMonitorAjaxGetCorrelationHeader: 18,\r\n    FailedToAddHandlerForOnBeforeUnload: 19,\r\n    FailedToSendQueuedTelemetry: 20,\r\n    FailedToReportDataLoss: 21,\r\n    FlushFailed: 22,\r\n    MessageLimitPerPVExceeded: 23,\r\n    MissingRequiredFieldSpecification: 24,\r\n    NavigationTimingNotSupported: 25,\r\n    OnError: 26,\r\n    SessionRenewalDateIsZero: 27,\r\n    SenderNotInitialized: 28,\r\n    StartTrackEventFailed: 29,\r\n    StopTrackEventFailed: 30,\r\n    StartTrackFailed: 31,\r\n    StopTrackFailed: 32,\r\n    TelemetrySampledAndNotSent: 33,\r\n    TrackEventFailed: 34,\r\n    TrackExceptionFailed: 35,\r\n    TrackMetricFailed: 36,\r\n    TrackPVFailed: 37,\r\n    TrackPVFailedCalc: 38,\r\n    TrackTraceFailed: 39,\r\n    TransmissionFailed: 40,\r\n    FailedToSetStorageBuffer: 41,\r\n    FailedToRestoreStorageBuffer: 42,\r\n    InvalidBackendResponse: 43,\r\n    FailedToFixDepricatedValues: 44,\r\n    InvalidDurationValue: 45,\r\n    TelemetryEnvelopeInvalid: 46,\r\n    CreateEnvelopeError: 47,\r\n    // User actionable\r\n    CannotSerializeObject: 48,\r\n    CannotSerializeObjectNonSerializable: 49,\r\n    CircularReferenceDetected: 50,\r\n    ClearAuthContextFailed: 51,\r\n    ExceptionTruncated: 52,\r\n    IllegalCharsInName: 53,\r\n    ItemNotInArray: 54,\r\n    MaxAjaxPerPVExceeded: 55,\r\n    MessageTruncated: 56,\r\n    NameTooLong: 57,\r\n    SampleRateOutOfRange: 58,\r\n    SetAuthContextFailed: 59,\r\n    SetAuthContextFailedAccountName: 60,\r\n    StringValueTooLong: 61,\r\n    StartCalledMoreThanOnce: 62,\r\n    StopCalledWithoutStart: 63,\r\n    TelemetryInitializerFailed: 64,\r\n    TrackArgumentsNotSpecified: 65,\r\n    UrlTooLong: 66,\r\n    SessionStorageBufferFull: 67,\r\n    CannotAccessCookie: 68,\r\n    IdTooLong: 69,\r\n};\r\n//# sourceMappingURL=LoggingEnums.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n* Type of storage to differentiate between local storage and session storage\r\n*/\r\nexport var StorageType;\r\n(function (StorageType) {\r\n    StorageType[StorageType[\"LocalStorage\"] = 0] = \"LocalStorage\";\r\n    StorageType[StorageType[\"SessionStorage\"] = 1] = \"SessionStorage\";\r\n})(StorageType || (StorageType = {}));\r\n/**\r\n * Enum is used in aiDataContract to describe how fields are serialized.\r\n * For instance: (Fieldtype.Required | FieldType.Array) will mark the field as required and indicate it's an array\r\n */\r\nexport var FieldType;\r\n(function (FieldType) {\r\n    FieldType[FieldType[\"Default\"] = 0] = \"Default\";\r\n    FieldType[FieldType[\"Required\"] = 1] = \"Required\";\r\n    FieldType[FieldType[\"Array\"] = 2] = \"Array\";\r\n    FieldType[FieldType[\"Hidden\"] = 4] = \"Hidden\";\r\n})(FieldType || (FieldType = {}));\r\n;\r\n//# sourceMappingURL=Enums.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nimport { _InternalMessageId, LoggingSeverity } from \"../JavaScriptSDK.Enums/LoggingEnums\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nvar _InternalLogMessage = /** @class */ (function () {\r\n    function _InternalLogMessage(msgId, msg, isUserAct, properties) {\r\n        if (isUserAct === void 0) { isUserAct = false; }\r\n        this.messageId = msgId;\r\n        this.message =\r\n            (isUserAct ? _InternalLogMessage.AiUserActionablePrefix : _InternalLogMessage.AiNonUserActionablePrefix) +\r\n                msgId;\r\n        var diagnosticText = (msg ? \" message:\" + _InternalLogMessage.sanitizeDiagnosticText(msg) : \"\") +\r\n            (properties ? \" props:\" + _InternalLogMessage.sanitizeDiagnosticText(JSON.stringify(properties)) : \"\");\r\n        this.message += diagnosticText;\r\n    }\r\n    _InternalLogMessage.sanitizeDiagnosticText = function (text) {\r\n        return \"\\\"\" + text.replace(/\\\"/g, \"\") + \"\\\"\";\r\n    };\r\n    _InternalLogMessage.dataType = \"MessageData\";\r\n    /**\r\n     * For user non actionable traces use AI Internal prefix.\r\n     */\r\n    _InternalLogMessage.AiNonUserActionablePrefix = \"AI (Internal): \";\r\n    /**\r\n     * Prefix of the traces in portal.\r\n     */\r\n    _InternalLogMessage.AiUserActionablePrefix = \"AI: \";\r\n    return _InternalLogMessage;\r\n}());\r\nexport { _InternalLogMessage };\r\nvar DiagnosticLogger = /** @class */ (function () {\r\n    function DiagnosticLogger(config) {\r\n        /**\r\n        *  Session storage key for the prefix for the key indicating message type already logged\r\n        */\r\n        this.AIInternalMessagePrefix = \"AITR_\";\r\n        /**\r\n         * When this is true the SDK will throw exceptions to aid in debugging.\r\n         */\r\n        this.enableDebugExceptions = function () { return false; };\r\n        /**\r\n         * 0: OFF\r\n         * 1: CRITICAL (default)\r\n         * 2: >= WARNING\r\n         */\r\n        this.consoleLoggingLevel = function () { return 1; };\r\n        /**\r\n         * 0: OFF (default)\r\n         * 1: CRITICAL\r\n         * 2: >= WARNING\r\n         */\r\n        this.telemetryLoggingLevel = function () { return 0; };\r\n        /**\r\n         * The maximum number of internal messages allowed to be sent per page view\r\n         */\r\n        this.maxInternalMessageLimit = function () { return 25; };\r\n        /**\r\n         * The internal logging queue\r\n         */\r\n        this.queue = [];\r\n        /**\r\n         * Count of internal messages sent\r\n         */\r\n        this._messageCount = 0;\r\n        /**\r\n         * Holds information about what message types were already logged to console or sent to server.\r\n         */\r\n        this._messageLogged = {};\r\n        if (CoreUtils.isNullOrUndefined(config)) {\r\n            // TODO: Use default config\r\n            // config = AppInsightsCore.defaultConfig;\r\n            // For now, use defaults specified in DiagnosticLogger members;\r\n            return;\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.loggingLevelConsole)) {\r\n            this.consoleLoggingLevel = function () { return config.loggingLevelConsole; };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.loggingLevelTelemetry)) {\r\n            this.telemetryLoggingLevel = function () { return config.loggingLevelTelemetry; };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.maxMessageLimit)) {\r\n            this.maxInternalMessageLimit = function () { return config.maxMessageLimit; };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.enableDebugExceptions)) {\r\n            this.enableDebugExceptions = function () { return config.enableDebugExceptions; };\r\n        }\r\n    }\r\n    /**\r\n     * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n     * @param severity {LoggingSeverity} - The severity of the log message\r\n     * @param message {_InternalLogMessage} - The log message.\r\n     */\r\n    DiagnosticLogger.prototype.throwInternal = function (severity, msgId, msg, properties, isUserAct) {\r\n        if (isUserAct === void 0) { isUserAct = false; }\r\n        var message = new _InternalLogMessage(msgId, msg, isUserAct, properties);\r\n        if (this.enableDebugExceptions()) {\r\n            throw message;\r\n        }\r\n        else {\r\n            if (typeof (message) !== \"undefined\" && !!message) {\r\n                if (typeof (message.message) !== \"undefined\") {\r\n                    if (isUserAct) {\r\n                        // check if this message type was already logged to console for this page view and if so, don't log it again\r\n                        var messageKey = +message.messageId;\r\n                        if (!this._messageLogged[messageKey] || this.consoleLoggingLevel() >= LoggingSeverity.WARNING) {\r\n                            this.warnToConsole(message.message);\r\n                            this._messageLogged[messageKey] = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // don't log internal AI traces in the console, unless the verbose logging is enabled\r\n                        if (this.consoleLoggingLevel() >= LoggingSeverity.WARNING) {\r\n                            this.warnToConsole(message.message);\r\n                        }\r\n                    }\r\n                    this.logInternalMessage(severity, message);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This will write a warning to the console if possible\r\n     * @param message {string} - The warning message\r\n     */\r\n    DiagnosticLogger.prototype.warnToConsole = function (message) {\r\n        if (typeof console !== \"undefined\" && !!console) {\r\n            if (typeof console.warn === \"function\") {\r\n                console.warn(message);\r\n            }\r\n            else if (typeof console.log === \"function\") {\r\n                console.log(message);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Resets the internal message count\r\n     */\r\n    DiagnosticLogger.prototype.resetInternalMessageCount = function () {\r\n        this._messageCount = 0;\r\n        this._messageLogged = {};\r\n    };\r\n    /**\r\n     * Logs a message to the internal queue.\r\n     * @param severity {LoggingSeverity} - The severity of the log message\r\n     * @param message {_InternalLogMessage} - The message to log.\r\n     */\r\n    DiagnosticLogger.prototype.logInternalMessage = function (severity, message) {\r\n        if (this._areInternalMessagesThrottled()) {\r\n            return;\r\n        }\r\n        // check if this message type was already logged for this session and if so, don't log it again\r\n        var logMessage = true;\r\n        var messageKey = this.AIInternalMessagePrefix + message.messageId;\r\n        // if the session storage is not available, limit to only one message type per page view\r\n        if (this._messageLogged[messageKey]) {\r\n            logMessage = false;\r\n        }\r\n        else {\r\n            this._messageLogged[messageKey] = true;\r\n        }\r\n        if (logMessage) {\r\n            // Push the event in the internal queue\r\n            if (severity <= this.telemetryLoggingLevel()) {\r\n                this.queue.push(message);\r\n                this._messageCount++;\r\n            }\r\n            // When throttle limit reached, send a special event\r\n            if (this._messageCount == this.maxInternalMessageLimit()) {\r\n                var throttleLimitMessage = \"Internal events throttle limit per PageView reached for this app.\";\r\n                var throttleMessage = new _InternalLogMessage(_InternalMessageId.MessageLimitPerPVExceeded, throttleLimitMessage, false);\r\n                this.queue.push(throttleMessage);\r\n                this.warnToConsole(throttleLimitMessage);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Indicates whether the internal events are throttled\r\n     */\r\n    DiagnosticLogger.prototype._areInternalMessagesThrottled = function () {\r\n        return this._messageCount >= this.maxInternalMessageLimit();\r\n    };\r\n    return DiagnosticLogger;\r\n}());\r\nexport { DiagnosticLogger };\r\n//# sourceMappingURL=DiagnosticLogger.js.map","import { EventsDiscardedReason } from \"../JavaScriptSDK.Enums/EventsDiscardedReason\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { NotificationManager } from \"./NotificationManager\";\r\nimport { _InternalLogMessage, DiagnosticLogger } from \"./DiagnosticLogger\";\r\n\"use strict\";\r\nvar AppInsightsCore = /** @class */ (function () {\r\n    function AppInsightsCore() {\r\n        this._isInitialized = false;\r\n        this._extensions = new Array();\r\n        this._channelController = new ChannelController();\r\n    }\r\n    AppInsightsCore.prototype.initialize = function (config, extensions) {\r\n        var _this = this;\r\n        // Make sure core is only initialized once\r\n        if (this._isInitialized) {\r\n            throw Error(\"Core should not be initialized more than once\");\r\n        }\r\n        if (!config || CoreUtils.isNullOrUndefined(config.instrumentationKey)) {\r\n            throw Error(\"Please provide instrumentation key\");\r\n        }\r\n        this.config = config;\r\n        this._notificationManager = new NotificationManager();\r\n        this.config.extensions = CoreUtils.isNullOrUndefined(this.config.extensions) ? [] : this.config.extensions;\r\n        // add notification to the extensions in the config so other plugins can access it\r\n        this.config.extensionConfig = CoreUtils.isNullOrUndefined(this.config.extensionConfig) ? {} : this.config.extensionConfig;\r\n        this.config.extensionConfig.NotificationManager = this._notificationManager;\r\n        this.logger = new DiagnosticLogger(config);\r\n        // Initial validation\r\n        extensions.forEach(function (extension) {\r\n            if (CoreUtils.isNullOrUndefined(extension.initialize)) {\r\n                throw Error(validationError);\r\n            }\r\n        });\r\n        if (this.config.extensions.length > 0) {\r\n            var isValid_1 = true;\r\n            var containsChannels_1 = false;\r\n            this.config.extensions.forEach(function (item) {\r\n                if (CoreUtils.isNullOrUndefined(item)) {\r\n                    isValid_1 = false;\r\n                }\r\n                if (item.priority > ChannelControllerPriority) {\r\n                    containsChannels_1 = true;\r\n                }\r\n            });\r\n            if (!isValid_1) {\r\n                throw Error(validationError);\r\n            }\r\n            if (containsChannels_1) {\r\n                throw Error(validationErrorInExt);\r\n            }\r\n        }\r\n        // Initial validation complete\r\n        // Concat all available extensions before sorting by priority\r\n        (_a = this._extensions).push.apply(_a, [this._channelController].concat(extensions, this.config.extensions));\r\n        this._extensions = this._extensions.sort(function (a, b) {\r\n            var extA = a;\r\n            var extB = b;\r\n            var typeExtA = typeof extA.processTelemetry;\r\n            var typeExtB = typeof extB.processTelemetry;\r\n            if (typeExtA === 'function' && typeExtB === 'function') {\r\n                return extA.priority - extB.priority;\r\n            }\r\n            if (typeExtA === 'function' && typeExtB !== 'function') {\r\n                // keep non telemetryplugin specific extensions at start\r\n                return 1;\r\n            }\r\n            if (typeExtA !== 'function' && typeExtB === 'function') {\r\n                return -1;\r\n            }\r\n        });\r\n        // sort complete\r\n        // Check if any two extensions have the same priority, then warn to console\r\n        var priority = {};\r\n        this._extensions.forEach(function (ext) {\r\n            var t = ext;\r\n            if (t && t.priority) {\r\n                if (!CoreUtils.isNullOrUndefined(priority[t.priority])) {\r\n                    _this.logger.warnToConsole(\"Two extensions have same priority\" + priority[t.priority] + \", \" + t.identifier);\r\n                }\r\n                else {\r\n                    priority[t.priority] = t.identifier; // set a value\r\n                }\r\n            }\r\n        });\r\n        var c = -1;\r\n        // Set next plugin for all until channel controller\r\n        for (var idx = 0; idx < this._extensions.length - 1; idx++) {\r\n            var curr = (this._extensions[idx]);\r\n            if (curr && typeof curr.processTelemetry !== 'function') {\r\n                // these are initialized only, allowing an entry point for extensions to be initialized when SDK initializes\r\n                continue;\r\n            }\r\n            if (curr.priority === ChannelControllerPriority) {\r\n                c = idx + 1;\r\n                break; // channel controller will set remaining pipeline\r\n            }\r\n            this._extensions[idx].setNextPlugin(this._extensions[idx + 1]); // set next plugin\r\n        }\r\n        // initialize channel controller first, this will initialize all channel plugins\r\n        this._channelController.initialize(this.config, this, this._extensions);\r\n        // initialize remaining regular plugins\r\n        this._extensions.forEach(function (ext) {\r\n            var e = ext;\r\n            if (e && e.priority < ChannelControllerPriority) {\r\n                ext.initialize(_this.config, _this, _this._extensions); // initialize\r\n            }\r\n        });\r\n        // Remove sender channels from main list\r\n        if (c < this._extensions.length) {\r\n            this._extensions.splice(c);\r\n        }\r\n        if (this.getTransmissionControls().length === 0) {\r\n            throw new Error(\"No channels available\");\r\n        }\r\n        this._isInitialized = true;\r\n        var _a;\r\n    };\r\n    AppInsightsCore.prototype.getTransmissionControls = function () {\r\n        return this._channelController.ChannelControls;\r\n    };\r\n    AppInsightsCore.prototype.track = function (telemetryItem) {\r\n        if (telemetryItem === null) {\r\n            this._notifiyInvalidEvent(telemetryItem);\r\n            // throw error\r\n            throw Error(\"Invalid telemetry item\");\r\n        }\r\n        if (telemetryItem.baseData && !telemetryItem.baseType) {\r\n            this._notifiyInvalidEvent(telemetryItem);\r\n            throw Error(\"Provide data.baseType for data.baseData\");\r\n        }\r\n        if (!telemetryItem.baseType) {\r\n            // Hard coded from Common::Event.ts::Event.dataType\r\n            telemetryItem.baseType = \"EventData\";\r\n        }\r\n        if (!telemetryItem.iKey) {\r\n            // setup default iKey if not passed in\r\n            telemetryItem.iKey = this.config.instrumentationKey;\r\n        }\r\n        if (!telemetryItem.time) {\r\n            // add default timestamp if not passed in\r\n            telemetryItem.time = new Date().toISOString();\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.ver)) {\r\n            // CommonSchema 4.0\r\n            telemetryItem.ver = \"4.0\";\r\n        }\r\n        // do basic validation before sending it through the pipeline\r\n        this._validateTelmetryItem(telemetryItem);\r\n        this._updateSdkVersion(telemetryItem);\r\n        // invoke any common telemetry processors before sending through pipeline\r\n        var i = 0;\r\n        while (i < this._extensions.length) {\r\n            if (this._extensions[i].processTelemetry) {\r\n                this._extensions[i].processTelemetry(telemetryItem); // pass on to first extension that can support processing\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n    };\r\n    /**\r\n     * Adds a notification listener. The SDK calls methods on the listener when an appropriate notification is raised.\r\n     * The added plugins must raise notifications. If the plugins do not implement the notifications, then no methods will be\r\n     * called.\r\n     * @param {INotificationListener} listener - An INotificationListener object.\r\n     */\r\n    AppInsightsCore.prototype.addNotificationListener = function (listener) {\r\n        this._notificationManager.addNotificationListener(listener);\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - INotificationListener to remove.\r\n     */\r\n    AppInsightsCore.prototype.removeNotificationListener = function (listener) {\r\n        this._notificationManager.removeNotificationListener(listener);\r\n    };\r\n    /**\r\n     * Periodically check logger.queue for\r\n     */\r\n    AppInsightsCore.prototype.pollInternalLogs = function () {\r\n        var _this = this;\r\n        var interval = this.config.diagnosticLogInterval;\r\n        if (!(interval > 0)) {\r\n            interval = 10000;\r\n        }\r\n        return setInterval(function () {\r\n            var queue = _this.logger.queue;\r\n            queue.forEach(function (logMessage) {\r\n                var item = {\r\n                    name: \"InternalMessageId: \" + logMessage.messageId,\r\n                    iKey: _this.config.instrumentationKey,\r\n                    time: new Date().toISOString(),\r\n                    baseType: _InternalLogMessage.dataType,\r\n                    baseData: { message: logMessage.message }\r\n                };\r\n                _this.track(item);\r\n            });\r\n            queue.length = 0;\r\n        }, interval);\r\n    };\r\n    AppInsightsCore.prototype._validateTelmetryItem = function (telemetryItem) {\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.name)) {\r\n            this._notifiyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry name required\");\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.time)) {\r\n            this._notifiyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry timestamp required\");\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.iKey)) {\r\n            this._notifiyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry instrumentationKey required\");\r\n        }\r\n    };\r\n    AppInsightsCore.prototype._updateSdkVersion = function (telemetryItem) {\r\n        if (!telemetryItem.ext) {\r\n            telemetryItem.ext = {};\r\n        }\r\n        if (!telemetryItem.ext.sdk) {\r\n            telemetryItem.ext.sdk = {};\r\n        }\r\n        var version = \"\";\r\n        for (var i = 0; i < this._extensions.length; i++) {\r\n            var ext = this._extensions[i];\r\n            if (ext.identifier && ext.version) {\r\n                var str = ext.identifier + \":\" + ext.version + \";\";\r\n                version = version.concat(str);\r\n            }\r\n        }\r\n        if (version != \"\") {\r\n            telemetryItem.ext.sdk['libVer'] = version;\r\n        }\r\n    };\r\n    AppInsightsCore.prototype._notifiyInvalidEvent = function (telemetryItem) {\r\n        this._notificationManager.eventsDiscarded([telemetryItem], EventsDiscardedReason.InvalidEvent);\r\n    };\r\n    return AppInsightsCore;\r\n}());\r\nexport { AppInsightsCore };\r\nvar ChannelController = /** @class */ (function () {\r\n    function ChannelController() {\r\n        this.identifier = \"ChannelControllerPlugin\";\r\n        this.priority = ChannelControllerPriority; // in reserved range 100 to 200\r\n    }\r\n    ChannelController.prototype.processTelemetry = function (item) {\r\n        this.channelQueue.forEach(function (queues) {\r\n            // pass on to first item in queue\r\n            if (queues.length > 0) {\r\n                queues[0].processTelemetry(item);\r\n            }\r\n        });\r\n    };\r\n    Object.defineProperty(ChannelController.prototype, \"ChannelControls\", {\r\n        get: function () {\r\n            return this.channelQueue;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ChannelController.prototype.initialize = function (config, core, extensions) {\r\n        var _this = this;\r\n        this.channelQueue = new Array();\r\n        if (config.channels) {\r\n            var invalidChannelIdentifier_1 = undefined;\r\n            config.channels.forEach(function (queue) {\r\n                if (queue && queue.length > 0) {\r\n                    queue = queue.sort(function (a, b) {\r\n                        return a.priority - b.priority;\r\n                    });\r\n                    // Initialize each plugin\r\n                    queue.forEach(function (queueItem) {\r\n                        if (queueItem.priority < ChannelControllerPriority) {\r\n                            invalidChannelIdentifier_1 = queueItem.identifier;\r\n                        }\r\n                        queueItem.initialize(config, core, extensions);\r\n                    });\r\n                    if (invalidChannelIdentifier_1) {\r\n                        throw Error(ChannelValidationMessage + invalidChannelIdentifier_1);\r\n                    }\r\n                    for (var i = 1; i < queue.length; i++) {\r\n                        queue[i - 1].setNextPlugin(queue[i]); // setup processing chain\r\n                    }\r\n                    _this.channelQueue.push(queue);\r\n                }\r\n            });\r\n        }\r\n        var arr = new Array();\r\n        for (var i = 0; i < extensions.length; i++) {\r\n            var plugin = extensions[i];\r\n            if (plugin.priority > ChannelControllerPriority) {\r\n                arr.push(plugin);\r\n            }\r\n        }\r\n        if (arr.length > 0) {\r\n            // sort if not sorted\r\n            arr = arr.sort(function (a, b) {\r\n                return a.priority - b.priority;\r\n            });\r\n            // Initialize each plugin\r\n            arr.forEach(function (queueItem) { return queueItem.initialize(config, core, extensions); });\r\n            // setup next plugin\r\n            for (var i = 1; i < arr.length; i++) {\r\n                arr[i - 1].setNextPlugin(arr[i]);\r\n            }\r\n            this.channelQueue.push(arr);\r\n        }\r\n    };\r\n    return ChannelController;\r\n}());\r\nvar validationError = \"Extensions must provide callback to initialize\";\r\nvar validationErrorInExt = \"Channels must be provided through config.channels only\";\r\nvar ChannelControllerPriority = 500;\r\nvar ChannelValidationMessage = \"Channel has invalid priority\";\r\n//# sourceMappingURL=AppInsightsCore.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js';\r\nvar DataSanitizer = /** @class */ (function () {\r\n    function DataSanitizer() {\r\n    }\r\n    DataSanitizer.sanitizeKeyAndAddUniqueness = function (logger, key, map) {\r\n        var origLength = key.length;\r\n        var field = DataSanitizer.sanitizeKey(logger, key);\r\n        // validation truncated the length.  We need to add uniqueness\r\n        if (field.length !== origLength) {\r\n            var i = 0;\r\n            var uniqueField = field;\r\n            while (map[uniqueField] !== undefined) {\r\n                i++;\r\n                uniqueField = field.substring(0, DataSanitizer.MAX_NAME_LENGTH - 3) + DataSanitizer.padNumber(i);\r\n            }\r\n            field = uniqueField;\r\n        }\r\n        return field;\r\n    };\r\n    DataSanitizer.sanitizeKey = function (logger, name) {\r\n        if (name) {\r\n            // Remove any leading or trailing whitepace\r\n            name = DataSanitizer.trim(name.toString());\r\n            // truncate the string to 150 chars\r\n            if (name.length > DataSanitizer.MAX_NAME_LENGTH) {\r\n                name = name.substring(0, DataSanitizer.MAX_NAME_LENGTH);\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.NameTooLong, \"name is too long.  It has been truncated to \" + DataSanitizer.MAX_NAME_LENGTH + \" characters.\", { name: name }, true);\r\n            }\r\n        }\r\n        return name;\r\n    };\r\n    DataSanitizer.sanitizeString = function (logger, value, maxLength) {\r\n        if (maxLength === void 0) { maxLength = DataSanitizer.MAX_STRING_LENGTH; }\r\n        if (value) {\r\n            maxLength = maxLength ? maxLength : DataSanitizer.MAX_STRING_LENGTH; // in case default parameters dont work\r\n            value = DataSanitizer.trim(value);\r\n            if (value.toString().length > maxLength) {\r\n                value = value.toString().substring(0, maxLength);\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.StringValueTooLong, \"string value is too long. It has been truncated to \" + maxLength + \" characters.\", { value: value }, true);\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    DataSanitizer.sanitizeUrl = function (logger, url) {\r\n        return DataSanitizer.sanitizeInput(logger, url, DataSanitizer.MAX_URL_LENGTH, _InternalMessageId.UrlTooLong);\r\n    };\r\n    DataSanitizer.sanitizeMessage = function (logger, message) {\r\n        if (message) {\r\n            if (message.length > DataSanitizer.MAX_MESSAGE_LENGTH) {\r\n                message = message.substring(0, DataSanitizer.MAX_MESSAGE_LENGTH);\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.MessageTruncated, \"message is too long, it has been truncated to \" + DataSanitizer.MAX_MESSAGE_LENGTH + \" characters.\", { message: message }, true);\r\n            }\r\n        }\r\n        return message;\r\n    };\r\n    DataSanitizer.sanitizeException = function (logger, exception) {\r\n        if (exception) {\r\n            if (exception.length > DataSanitizer.MAX_EXCEPTION_LENGTH) {\r\n                exception = exception.substring(0, DataSanitizer.MAX_EXCEPTION_LENGTH);\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.ExceptionTruncated, \"exception is too long, it has been truncated to \" + DataSanitizer.MAX_EXCEPTION_LENGTH + \" characters.\", { exception: exception }, true);\r\n            }\r\n        }\r\n        return exception;\r\n    };\r\n    DataSanitizer.sanitizeProperties = function (logger, properties) {\r\n        if (properties) {\r\n            var tempProps = {};\r\n            for (var prop in properties) {\r\n                var value = properties[prop];\r\n                if (typeof value === \"object\" && typeof JSON !== \"undefined\") {\r\n                    // Stringify any part C properties\r\n                    try {\r\n                        value = JSON.stringify(value);\r\n                    }\r\n                    catch (e) {\r\n                        logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotSerializeObjectNonSerializable, \"custom property is not valid\", { exception: e }, true);\r\n                    }\r\n                }\r\n                value = DataSanitizer.sanitizeString(logger, value, DataSanitizer.MAX_PROPERTY_LENGTH);\r\n                prop = DataSanitizer.sanitizeKeyAndAddUniqueness(logger, prop, tempProps);\r\n                tempProps[prop] = value;\r\n            }\r\n            properties = tempProps;\r\n        }\r\n        return properties;\r\n    };\r\n    DataSanitizer.sanitizeMeasurements = function (logger, measurements) {\r\n        if (measurements) {\r\n            var tempMeasurements = {};\r\n            for (var measure in measurements) {\r\n                var value = measurements[measure];\r\n                measure = DataSanitizer.sanitizeKeyAndAddUniqueness(logger, measure, tempMeasurements);\r\n                tempMeasurements[measure] = value;\r\n            }\r\n            measurements = tempMeasurements;\r\n        }\r\n        return measurements;\r\n    };\r\n    DataSanitizer.sanitizeId = function (logger, id) {\r\n        return id ? DataSanitizer.sanitizeInput(logger, id, DataSanitizer.MAX_ID_LENGTH, _InternalMessageId.IdTooLong).toString() : id;\r\n    };\r\n    DataSanitizer.sanitizeInput = function (logger, input, maxLength, _msgId) {\r\n        if (input) {\r\n            input = DataSanitizer.trim(input);\r\n            if (input.length > maxLength) {\r\n                input = input.substring(0, maxLength);\r\n                logger.throwInternal(LoggingSeverity.WARNING, _msgId, \"input is too long, it has been truncated to \" + maxLength + \" characters.\", { data: input }, true);\r\n            }\r\n        }\r\n        return input;\r\n    };\r\n    DataSanitizer.padNumber = function (num) {\r\n        var s = \"00\" + num;\r\n        return s.substr(s.length - 3);\r\n    };\r\n    /**\r\n     * helper method to trim strings (IE8 does not implement String.prototype.trim)\r\n     */\r\n    DataSanitizer.trim = function (str) {\r\n        if (typeof str !== \"string\")\r\n            return str;\r\n        return str.replace(/^\\s+|\\s+$/g, \"\");\r\n    };\r\n    /**\r\n    * Max length allowed for custom names.\r\n    */\r\n    DataSanitizer.MAX_NAME_LENGTH = 150;\r\n    /**\r\n     * Max length allowed for Id field in page views.\r\n     */\r\n    DataSanitizer.MAX_ID_LENGTH = 128;\r\n    /**\r\n     * Max length allowed for custom values.\r\n     */\r\n    DataSanitizer.MAX_PROPERTY_LENGTH = 8192;\r\n    /**\r\n     * Max length allowed for names\r\n     */\r\n    DataSanitizer.MAX_STRING_LENGTH = 1024;\r\n    /**\r\n     * Max length allowed for url.\r\n     */\r\n    DataSanitizer.MAX_URL_LENGTH = 2048;\r\n    /**\r\n     * Max length allowed for messages.\r\n     */\r\n    DataSanitizer.MAX_MESSAGE_LENGTH = 32768;\r\n    /**\r\n     * Max length allowed for exceptions.\r\n     */\r\n    DataSanitizer.MAX_EXCEPTION_LENGTH = 32768;\r\n    return DataSanitizer;\r\n}());\r\nexport { DataSanitizer };\r\n//# sourceMappingURL=DataSanitizer.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { StorageType } from \"./Enums\";\r\nimport { CoreUtils, _InternalMessageId, LoggingSeverity } from \"@microsoft/applicationinsights-core-js\";\r\nimport { RequestHeaders } from \"./RequestResponseHeaders\";\r\nimport { DataSanitizer } from \"./Telemetry/Common/DataSanitizer\";\r\nvar Util = /** @class */ (function () {\r\n    function Util() {\r\n    }\r\n    /*\r\n     * Force the SDK not to use local and session storage\r\n    */\r\n    Util.disableStorage = function () {\r\n        Util._canUseLocalStorage = false;\r\n        Util._canUseSessionStorage = false;\r\n    };\r\n    /**\r\n     * Gets the localStorage object if available\r\n     * @return {Storage} - Returns the storage object if available else returns null\r\n     */\r\n    Util._getLocalStorageObject = function () {\r\n        if (Util.canUseLocalStorage()) {\r\n            return Util._getVerifiedStorageObject(StorageType.LocalStorage);\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Tests storage object (localStorage or sessionStorage) to verify that it is usable\r\n     * More details here: https://mathiasbynens.be/notes/localstorage-pattern\r\n     * @param storageType Type of storage\r\n     * @return {Storage} Returns storage object verified that it is usable\r\n     */\r\n    Util._getVerifiedStorageObject = function (storageType) {\r\n        var storage = null;\r\n        var fail;\r\n        var uid;\r\n        try {\r\n            if (typeof window === 'undefined') {\r\n                return null;\r\n            }\r\n            uid = new Date;\r\n            storage = storageType === StorageType.LocalStorage ? window.localStorage : window.sessionStorage;\r\n            storage.setItem(uid, uid);\r\n            fail = storage.getItem(uid) != uid;\r\n            storage.removeItem(uid);\r\n            if (fail) {\r\n                storage = null;\r\n            }\r\n        }\r\n        catch (exception) {\r\n            storage = null;\r\n        }\r\n        return storage;\r\n    };\r\n    /**\r\n     *  Checks if endpoint URL is application insights internal injestion service URL.\r\n     *\r\n     *  @param endpointUrl Endpoint URL to check.\r\n     *  @returns {boolean} True if if endpoint URL is application insights internal injestion service URL.\r\n     */\r\n    Util.isInternalApplicationInsightsEndpoint = function (endpointUrl) {\r\n        return Util._internalEndpoints.indexOf(endpointUrl.toLowerCase()) !== -1;\r\n    };\r\n    /**\r\n     *  Check if the browser supports local storage.\r\n     *\r\n     *  @returns {boolean} True if local storage is supported.\r\n     */\r\n    Util.canUseLocalStorage = function () {\r\n        if (Util._canUseLocalStorage === undefined) {\r\n            Util._canUseLocalStorage = !!Util._getVerifiedStorageObject(StorageType.LocalStorage);\r\n        }\r\n        return Util._canUseLocalStorage;\r\n    };\r\n    /**\r\n     *  Get an object from the browser's local storage\r\n     *\r\n     *  @param {string} name - the name of the object to get from storage\r\n     *  @returns {string} The contents of the storage object with the given name. Null if storage is not supported.\r\n     */\r\n    Util.getStorage = function (logger, name) {\r\n        var storage = Util._getLocalStorageObject();\r\n        if (storage !== null) {\r\n            try {\r\n                return storage.getItem(name);\r\n            }\r\n            catch (e) {\r\n                Util._canUseLocalStorage = false;\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotReadLocalStorage, \"Browser failed read of local storage. \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     *  Set the contents of an object in the browser's local storage\r\n     *\r\n     *  @param {string} name - the name of the object to set in storage\r\n     *  @param {string} data - the contents of the object to set in storage\r\n     *  @returns {boolean} True if the storage object could be written.\r\n     */\r\n    Util.setStorage = function (logger, name, data) {\r\n        var storage = Util._getLocalStorageObject();\r\n        if (storage !== null) {\r\n            try {\r\n                storage.setItem(name, data);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                Util._canUseLocalStorage = false;\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotWriteLocalStorage, \"Browser failed write to local storage. \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     *  Remove an object from the browser's local storage\r\n     *\r\n     *  @param {string} name - the name of the object to remove from storage\r\n     *  @returns {boolean} True if the storage object could be removed.\r\n     */\r\n    Util.removeStorage = function (logger, name) {\r\n        var storage = Util._getLocalStorageObject();\r\n        if (storage !== null) {\r\n            try {\r\n                storage.removeItem(name);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                Util._canUseLocalStorage = false;\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserFailedRemovalFromLocalStorage, \"Browser failed removal of local storage item. \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Gets the sessionStorage object if available\r\n     * @return {Storage} - Returns the storage object if available else returns null\r\n     */\r\n    Util._getSessionStorageObject = function () {\r\n        if (Util.canUseSessionStorage()) {\r\n            return Util._getVerifiedStorageObject(StorageType.SessionStorage);\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     *  Check if the browser supports session storage.\r\n     *\r\n     *  @returns {boolean} True if session storage is supported.\r\n     */\r\n    Util.canUseSessionStorage = function () {\r\n        if (Util._canUseSessionStorage === undefined) {\r\n            Util._canUseSessionStorage = !!Util._getVerifiedStorageObject(StorageType.SessionStorage);\r\n        }\r\n        return Util._canUseSessionStorage;\r\n    };\r\n    /**\r\n     *  Gets the list of session storage keys\r\n     *\r\n     *  @returns {string[]} List of session storage keys\r\n     */\r\n    Util.getSessionStorageKeys = function () {\r\n        var keys = [];\r\n        if (Util.canUseSessionStorage()) {\r\n            for (var key in window.sessionStorage) {\r\n                keys.push(key);\r\n            }\r\n        }\r\n        return keys;\r\n    };\r\n    /**\r\n     *  Get an object from the browser's session storage\r\n     *\r\n     *  @param {string} name - the name of the object to get from storage\r\n     *  @returns {string} The contents of the storage object with the given name. Null if storage is not supported.\r\n     */\r\n    Util.getSessionStorage = function (logger, name) {\r\n        var storage = Util._getSessionStorageObject();\r\n        if (storage !== null) {\r\n            try {\r\n                return storage.getItem(name);\r\n            }\r\n            catch (e) {\r\n                Util._canUseSessionStorage = false;\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotReadSessionStorage, \"Browser failed read of session storage. \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     *  Set the contents of an object in the browser's session storage\r\n     *\r\n     *  @param {string} name - the name of the object to set in storage\r\n     *  @param {string} data - the contents of the object to set in storage\r\n     *  @returns {boolean} True if the storage object could be written.\r\n     */\r\n    Util.setSessionStorage = function (logger, name, data) {\r\n        var storage = Util._getSessionStorageObject();\r\n        if (storage !== null) {\r\n            try {\r\n                storage.setItem(name, data);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                Util._canUseSessionStorage = false;\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotWriteSessionStorage, \"Browser failed write to session storage. \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     *  Remove an object from the browser's session storage\r\n     *\r\n     *  @param {string} name - the name of the object to remove from storage\r\n     *  @returns {boolean} True if the storage object could be removed.\r\n     */\r\n    Util.removeSessionStorage = function (logger, name) {\r\n        var storage = Util._getSessionStorageObject();\r\n        if (storage !== null) {\r\n            try {\r\n                storage.removeItem(name);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                Util._canUseSessionStorage = false;\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserFailedRemovalFromSessionStorage, \"Browser failed removal of session storage item. \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /*\r\n     * Force the SDK not to store and read any data from cookies\r\n     */\r\n    Util.disableCookies = function () {\r\n        Util._canUseCookies = false;\r\n    };\r\n    /*\r\n     * helper method to tell if document.cookie object is available\r\n     */\r\n    Util.canUseCookies = function (logger) {\r\n        if (Util._canUseCookies === undefined) {\r\n            Util._canUseCookies = false;\r\n            try {\r\n                Util._canUseCookies = Util.document.cookie !== undefined;\r\n            }\r\n            catch (e) {\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotAccessCookie, \"Cannot access document.cookie - \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n            ;\r\n        }\r\n        return Util._canUseCookies;\r\n    };\r\n    /**\r\n     * helper method to set userId and sessionId cookie\r\n     */\r\n    Util.setCookie = function (logger, name, value, domain) {\r\n        var domainAttrib = \"\";\r\n        var secureAttrib = \"\";\r\n        if (domain) {\r\n            domainAttrib = \";domain=\" + domain;\r\n        }\r\n        if (Util.document.location && Util.document.location.protocol === \"https:\") {\r\n            secureAttrib = \";secure\";\r\n        }\r\n        if (Util.canUseCookies(logger)) {\r\n            Util.document.cookie = name + \"=\" + value + domainAttrib + \";path=/\" + secureAttrib;\r\n        }\r\n    };\r\n    Util.stringToBoolOrDefault = function (str, defaultValue) {\r\n        if (defaultValue === void 0) { defaultValue = false; }\r\n        if (str === undefined || str === null) {\r\n            return defaultValue;\r\n        }\r\n        return str.toString().toLowerCase() === \"true\";\r\n    };\r\n    /**\r\n     * helper method to access userId and sessionId cookie\r\n     */\r\n    Util.getCookie = function (logger, name) {\r\n        if (!Util.canUseCookies(logger)) {\r\n            return;\r\n        }\r\n        var value = \"\";\r\n        if (name && name.length) {\r\n            var cookieName = name + \"=\";\r\n            var cookies = Util.document.cookie.split(\";\");\r\n            for (var i = 0; i < cookies.length; i++) {\r\n                var cookie = cookies[i];\r\n                cookie = Util.trim(cookie);\r\n                if (cookie && cookie.indexOf(cookieName) === 0) {\r\n                    value = cookie.substring(cookieName.length, cookies[i].length);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Deletes a cookie by setting it's expiration time in the past.\r\n     * @param name - The name of the cookie to delete.\r\n     */\r\n    Util.deleteCookie = function (logger, name) {\r\n        if (Util.canUseCookies(logger)) {\r\n            // Setting the expiration date in the past immediately removes the cookie\r\n            Util.document.cookie = name + \"=;path=/;expires=Thu, 01 Jan 1970 00:00:01 GMT;\";\r\n        }\r\n    };\r\n    /**\r\n     * helper method to trim strings (IE8 does not implement String.prototype.trim)\r\n     */\r\n    Util.trim = function (str) {\r\n        if (typeof str !== \"string\")\r\n            return str;\r\n        return str.replace(/^\\s+|\\s+$/g, \"\");\r\n    };\r\n    /**\r\n     * generate random id string\r\n     */\r\n    Util.newId = function () {\r\n        var base64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n        var result = \"\";\r\n        // tslint:disable-next-line:insecure-random\r\n        var random = Math.random() * 1073741824; //5 symbols in base64, almost maxint\r\n        while (random > 0) {\r\n            var char = base64chars.charAt(random % 64);\r\n            result += char;\r\n            random = Math.floor(random / 64);\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Check if an object is of type Array\r\n     */\r\n    Util.isArray = function (obj) {\r\n        return Object.prototype.toString.call(obj) === \"[object Array]\";\r\n    };\r\n    /**\r\n     * Check if an object is of type Error\r\n     */\r\n    Util.isError = function (obj) {\r\n        return Object.prototype.toString.call(obj) === \"[object Error]\";\r\n    };\r\n    /**\r\n     * Check if an object is of type Date\r\n     */\r\n    Util.isDate = function (obj) {\r\n        return Object.prototype.toString.call(obj) === \"[object Date]\";\r\n    };\r\n    /**\r\n     * Convert a date to I.S.O. format in IE8\r\n     */\r\n    Util.toISOStringForIE8 = function (date) {\r\n        if (Util.isDate(date)) {\r\n            if (Date.prototype.toISOString) {\r\n                return date.toISOString();\r\n            }\r\n            else {\r\n                var pad = function (num) {\r\n                    var r = String(num);\r\n                    if (r.length === 1) {\r\n                        r = \"0\" + r;\r\n                    }\r\n                    return r;\r\n                };\r\n                return date.getUTCFullYear()\r\n                    + \"-\" + pad(date.getUTCMonth() + 1)\r\n                    + \"-\" + pad(date.getUTCDate())\r\n                    + \"T\" + pad(date.getUTCHours())\r\n                    + \":\" + pad(date.getUTCMinutes())\r\n                    + \":\" + pad(date.getUTCSeconds())\r\n                    + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\r\n                    + \"Z\";\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets IE version if we are running on IE, or null otherwise\r\n     */\r\n    Util.getIEVersion = function (userAgentStr) {\r\n        if (userAgentStr === void 0) { userAgentStr = null; }\r\n        var myNav = userAgentStr ? userAgentStr.toLowerCase() : navigator.userAgent.toLowerCase();\r\n        return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : null;\r\n    };\r\n    /**\r\n     * Convert ms to c# time span format\r\n     */\r\n    Util.msToTimeSpan = function (totalms) {\r\n        if (isNaN(totalms) || totalms < 0) {\r\n            totalms = 0;\r\n        }\r\n        totalms = Math.round(totalms);\r\n        var ms = \"\" + totalms % 1000;\r\n        var sec = \"\" + Math.floor(totalms / 1000) % 60;\r\n        var min = \"\" + Math.floor(totalms / (1000 * 60)) % 60;\r\n        var hour = \"\" + Math.floor(totalms / (1000 * 60 * 60)) % 24;\r\n        var days = Math.floor(totalms / (1000 * 60 * 60 * 24));\r\n        ms = ms.length === 1 ? \"00\" + ms : ms.length === 2 ? \"0\" + ms : ms;\r\n        sec = sec.length < 2 ? \"0\" + sec : sec;\r\n        min = min.length < 2 ? \"0\" + min : min;\r\n        hour = hour.length < 2 ? \"0\" + hour : hour;\r\n        return (days > 0 ? days + \".\" : \"\") + hour + \":\" + min + \":\" + sec + \".\" + ms;\r\n    };\r\n    /**\r\n    * Checks if error has no meaningful data inside. Ususally such errors are received by window.onerror when error\r\n    * happens in a script from other domain (cross origin, CORS).\r\n    */\r\n    Util.isCrossOriginError = function (message, url, lineNumber, columnNumber, error) {\r\n        return (message === \"Script error.\" || message === \"Script error\") && !error;\r\n    };\r\n    /**\r\n    * Returns string representation of an object suitable for diagnostics logging.\r\n    */\r\n    Util.dump = function (object) {\r\n        var objectTypeDump = Object.prototype.toString.call(object);\r\n        var propertyValueDump = JSON.stringify(object);\r\n        if (objectTypeDump === \"[object Error]\") {\r\n            propertyValueDump = \"{ stack: '\" + object.stack + \"', message: '\" + object.message + \"', name: '\" + object.name + \"'\";\r\n        }\r\n        return objectTypeDump + propertyValueDump;\r\n    };\r\n    /**\r\n    * Returns the name of object if it's an Error. Otherwise, returns empty string.\r\n    */\r\n    Util.getExceptionName = function (object) {\r\n        var objectTypeDump = Object.prototype.toString.call(object);\r\n        if (objectTypeDump === \"[object Error]\") {\r\n            return object.name;\r\n        }\r\n        return \"\";\r\n    };\r\n    /**\r\n     * Adds an event handler for the specified event\r\n     * @param eventName {string} - The name of the event\r\n     * @param callback {any} - The callback function that needs to be executed for the given event\r\n     * @return {boolean} - true if the handler was successfully added\r\n     */\r\n    Util.addEventHandler = function (eventName, callback) {\r\n        if (typeof window === 'undefined' || !window || typeof eventName !== 'string' || typeof callback !== 'function') {\r\n            return false;\r\n        }\r\n        // Create verb for the event\r\n        var verbEventName = 'on' + eventName;\r\n        // check if addEventListener is available\r\n        if (window.addEventListener) {\r\n            window.addEventListener(eventName, callback, false);\r\n        }\r\n        else if (window[\"attachEvent\"]) {\r\n            window[\"attachEvent\"](verbEventName, callback);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Tells if a browser supports a Beacon API\r\n     */\r\n    Util.IsBeaconApiSupported = function () {\r\n        return ('sendBeacon' in navigator && navigator.sendBeacon);\r\n    };\r\n    Util.document = typeof document !== \"undefined\" ? document : {};\r\n    Util._canUseCookies = undefined;\r\n    Util._canUseLocalStorage = undefined;\r\n    Util._canUseSessionStorage = undefined;\r\n    // listing only non-geo specific locations \r\n    Util._internalEndpoints = [\r\n        \"https://dc.services.visualstudio.com/v2/track\",\r\n        \"https://breeze.aimon.applicationinsights.io/v2/track\",\r\n        \"https://dc-int.services.visualstudio.com/v2/track\"\r\n    ];\r\n    Util.NotSpecified = \"not_specified\";\r\n    return Util;\r\n}());\r\nexport { Util };\r\nvar UrlHelper = /** @class */ (function () {\r\n    function UrlHelper() {\r\n    }\r\n    UrlHelper.parseUrl = function (url) {\r\n        if (!UrlHelper.htmlAnchorElement) {\r\n            UrlHelper.htmlAnchorElement = !!UrlHelper.document.createElement ? UrlHelper.document.createElement('a') : {};\r\n        }\r\n        UrlHelper.htmlAnchorElement.href = url;\r\n        return UrlHelper.htmlAnchorElement;\r\n    };\r\n    UrlHelper.getAbsoluteUrl = function (url) {\r\n        var result;\r\n        var a = UrlHelper.parseUrl(url);\r\n        if (a) {\r\n            result = a.href;\r\n        }\r\n        return result;\r\n    };\r\n    UrlHelper.getPathName = function (url) {\r\n        var result;\r\n        var a = UrlHelper.parseUrl(url);\r\n        if (a) {\r\n            result = a.pathname;\r\n        }\r\n        return result;\r\n    };\r\n    UrlHelper.getCompleteUrl = function (method, absoluteUrl) {\r\n        if (method) {\r\n            return method.toUpperCase() + \" \" + absoluteUrl;\r\n        }\r\n        else {\r\n            return absoluteUrl;\r\n        }\r\n    };\r\n    UrlHelper.document = typeof document !== \"undefined\" ? document : {};\r\n    return UrlHelper;\r\n}());\r\nexport { UrlHelper };\r\nvar CorrelationIdHelper = /** @class */ (function () {\r\n    function CorrelationIdHelper() {\r\n    }\r\n    /**\r\n    * Checks if a request url is not on a excluded domain list and if it is safe to add correlation headers\r\n    */\r\n    CorrelationIdHelper.canIncludeCorrelationHeader = function (config, requestUrl, currentHost) {\r\n        if (config && config.disableCorrelationHeaders) {\r\n            return false;\r\n        }\r\n        if (!requestUrl) {\r\n            return false;\r\n        }\r\n        var requestHost = UrlHelper.parseUrl(requestUrl).host.toLowerCase();\r\n        if ((!config || !config.enableCorsCorrelation) && requestHost !== currentHost) {\r\n            return false;\r\n        }\r\n        var excludedDomains = config && config.correlationHeaderExcludedDomains;\r\n        if (!excludedDomains || excludedDomains.length == 0) {\r\n            return true;\r\n        }\r\n        for (var i = 0; i < excludedDomains.length; i++) {\r\n            var regex = new RegExp(excludedDomains[i].toLowerCase().replace(/\\./g, \"\\.\").replace(/\\*/g, \".*\"));\r\n            if (regex.test(requestHost)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n    * Combines target appId and target role name from response header.\r\n    */\r\n    CorrelationIdHelper.getCorrelationContext = function (responseHeader) {\r\n        if (responseHeader) {\r\n            var correlationId = CorrelationIdHelper.getCorrelationContextValue(responseHeader, RequestHeaders.requestContextTargetKey);\r\n            if (correlationId && correlationId !== CorrelationIdHelper.correlationIdPrefix) {\r\n                return correlationId;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n    * Gets key from correlation response header\r\n    */\r\n    CorrelationIdHelper.getCorrelationContextValue = function (responseHeader, key) {\r\n        if (responseHeader) {\r\n            var keyValues = responseHeader.split(\",\");\r\n            for (var i = 0; i < keyValues.length; ++i) {\r\n                var keyValue = keyValues[i].split(\"=\");\r\n                if (keyValue.length == 2 && keyValue[0] == key) {\r\n                    return keyValue[1];\r\n                }\r\n            }\r\n        }\r\n    };\r\n    CorrelationIdHelper.correlationIdPrefix = \"cid-v1:\";\r\n    return CorrelationIdHelper;\r\n}());\r\nexport { CorrelationIdHelper };\r\nvar AjaxHelper = /** @class */ (function () {\r\n    function AjaxHelper() {\r\n    }\r\n    AjaxHelper.ParseDependencyPath = function (logger, absoluteUrl, method, commandName) {\r\n        var target, name = commandName, data = commandName;\r\n        if (absoluteUrl && absoluteUrl.length > 0) {\r\n            var parsedUrl = UrlHelper.parseUrl(absoluteUrl);\r\n            target = parsedUrl.host;\r\n            if (!name) {\r\n                if (parsedUrl.pathname != null) {\r\n                    var pathName = (parsedUrl.pathname.length === 0) ? \"/\" : parsedUrl.pathname;\r\n                    if (pathName.charAt(0) !== '/') {\r\n                        pathName = \"/\" + pathName;\r\n                    }\r\n                    data = parsedUrl.pathname;\r\n                    name = DataSanitizer.sanitizeString(logger, method ? method + \" \" + pathName : pathName);\r\n                }\r\n                else {\r\n                    name = DataSanitizer.sanitizeString(logger, absoluteUrl);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            target = commandName;\r\n            name = commandName;\r\n        }\r\n        return {\r\n            target: target,\r\n            name: name,\r\n            data: data\r\n        };\r\n    };\r\n    return AjaxHelper;\r\n}());\r\nexport { AjaxHelper };\r\n/**\r\n * A utility class that helps getting time related parameters\r\n */\r\nvar DateTimeUtils = /** @class */ (function () {\r\n    function DateTimeUtils() {\r\n    }\r\n    /**\r\n     * Get the number of milliseconds since 1970/01/01 in local timezone\r\n     */\r\n    DateTimeUtils.Now = (typeof window === 'undefined') ? function () { return new Date().getTime(); } :\r\n        (window.performance && window.performance.now && window.performance.timing) ?\r\n            function () {\r\n                return window.performance.now() + window.performance.timing.navigationStart;\r\n            }\r\n            :\r\n                function () {\r\n                    return new Date().getTime();\r\n                };\r\n    /**\r\n     * Gets duration between two timestamps\r\n     */\r\n    DateTimeUtils.GetDuration = function (start, end) {\r\n        var result = null;\r\n        if (start !== 0 && end !== 0 && !CoreUtils.isNullOrUndefined(start) && !CoreUtils.isNullOrUndefined(end)) {\r\n            result = end - start;\r\n        }\r\n        return result;\r\n    };\r\n    return DateTimeUtils;\r\n}());\r\nexport { DateTimeUtils };\r\n//# sourceMappingURL=Util.js.map","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// THIS FILE WAS AUTOGENERATED\r\n/**\r\n     * Data struct to contain only C section with custom fields.\r\n     */\r\nvar Base = /** @class */ (function () {\r\n    function Base() {\r\n    }\r\n    return Base;\r\n}());\r\nexport { Base };\r\n//# sourceMappingURL=Base.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// THIS FILE WAS AUTOGENERATED\r\n/**\r\n * Type of the metric data measurement.\r\n */\r\nexport var DataPointType;\r\n(function (DataPointType) {\r\n    DataPointType[DataPointType[\"Measurement\"] = 0] = \"Measurement\";\r\n    DataPointType[DataPointType[\"Aggregation\"] = 1] = \"Aggregation\";\r\n})(DataPointType || (DataPointType = {}));\r\n//# sourceMappingURL=DataPointType.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { Base } from './Base';\r\n/**\r\n * Data struct to contain both B and C sections.\r\n */\r\nvar Data = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Data, _super);\r\n    function Data() {\r\n        return _super.call(this) || this;\r\n    }\r\n    return Data;\r\n}(Base));\r\nexport { Data };\r\n//# sourceMappingURL=Data.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// THIS FILE WAS AUTOGENERATED\r\n/**\r\n * The abstract common base of all domains.\r\n */\r\nvar Domain = /** @class */ (function () {\r\n    function Domain() {\r\n    }\r\n    return Domain;\r\n}());\r\nexport { Domain };\r\n//# sourceMappingURL=Domain.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Envelope as AIEnvelope } from '../../Interfaces/Contracts/Generated/Envelope';\r\nimport { DataSanitizer } from './DataSanitizer';\r\nimport { FieldType } from '../../Enums';\r\nimport { Util } from '../../Util';\r\nvar Envelope = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Envelope, _super);\r\n    /**\r\n     * Constructs a new instance of telemetry data.\r\n     */\r\n    function Envelope(logger, data, name) {\r\n        var _this = _super.call(this) || this;\r\n        _this.name = DataSanitizer.sanitizeString(logger, name) || Util.NotSpecified;\r\n        _this.data = data;\r\n        _this.time = Util.toISOStringForIE8(new Date());\r\n        _this.aiDataContract = {\r\n            time: FieldType.Required,\r\n            iKey: FieldType.Required,\r\n            name: FieldType.Required,\r\n            sampleRate: function () {\r\n                return (_this.sampleRate == 100) ? FieldType.Hidden : FieldType.Required;\r\n            },\r\n            tags: FieldType.Required,\r\n            data: FieldType.Required\r\n        };\r\n        return _this;\r\n    }\r\n    return Envelope;\r\n}(AIEnvelope));\r\nexport { Envelope };\r\n//# sourceMappingURL=Envelope.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * System variables for a telemetry item.\r\n */\r\nvar Envelope = /** @class */ (function () {\r\n    function Envelope() {\r\n        this.ver = 1;\r\n        this.sampleRate = 100.0;\r\n        this.tags = {};\r\n    }\r\n    return Envelope;\r\n}());\r\nexport { Envelope };\r\n//# sourceMappingURL=Envelope.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { Domain } from './Domain';\r\n/**\r\n * Instances of Event represent structured event records that can be grouped and searched by their properties. Event data item also creates a metric of event count by name.\r\n */\r\nvar EventData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(EventData, _super);\r\n    function EventData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return EventData;\r\n}(Domain));\r\nexport { EventData };\r\n//# sourceMappingURL=EventData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// THIS FILE WAS AUTOGENERATED\r\n/**\r\n * Stack frame information.\r\n */\r\nvar StackFrame = /** @class */ (function () {\r\n    function StackFrame() {\r\n    }\r\n    return StackFrame;\r\n}());\r\nexport { StackFrame };\r\n//# sourceMappingURL=StackFrame.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { EventData } from '../Interfaces/Contracts/Generated/EventData';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { Util } from '../Util';\r\nvar Event = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Event, _super);\r\n    /**\r\n     * Constructs a new instance of the EventTelemetry object\r\n     */\r\n    function Event(logger, name, properties, measurements) {\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            ver: FieldType.Required,\r\n            name: FieldType.Required,\r\n            properties: FieldType.Default,\r\n            measurements: FieldType.Default\r\n        };\r\n        _this.name = DataSanitizer.sanitizeString(logger, name) || Util.NotSpecified;\r\n        _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        _this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\r\n        return _this;\r\n    }\r\n    Event.envelopeType = \"Microsoft.ApplicationInsights.{0}.Event\";\r\n    Event.dataType = \"EventData\";\r\n    return Event;\r\n}(EventData));\r\nexport { Event };\r\n//# sourceMappingURL=Event.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * Exception details of the exception in a chain.\r\n */\r\nvar ExceptionDetails = /** @class */ (function () {\r\n    function ExceptionDetails() {\r\n        this.hasFullStack = true;\r\n        this.parsedStack = [];\r\n    }\r\n    return ExceptionDetails;\r\n}());\r\nexport { ExceptionDetails };\r\n//# sourceMappingURL=ExceptionDetails.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { StackFrame } from '../Interfaces/Contracts/Generated/StackFrame';\r\nimport { ExceptionData } from '../Interfaces/Contracts/Generated/ExceptionData';\r\nimport { ExceptionDetails } from '../Interfaces/Contracts/Generated/ExceptionDetails';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { Util } from '../Util';\r\nvar Exception = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Exception, _super);\r\n    /**\r\n    * Constructs a new isntance of the ExceptionTelemetry object\r\n    */\r\n    function Exception(logger, exception, properties, measurements, severityLevel) {\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            ver: FieldType.Required,\r\n            exceptions: FieldType.Required,\r\n            severityLevel: FieldType.Default,\r\n            properties: FieldType.Default,\r\n            measurements: FieldType.Default\r\n        };\r\n        _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        _this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\r\n        _this.exceptions = [new _ExceptionDetails(logger, exception)];\r\n        if (severityLevel) {\r\n            _this.severityLevel = severityLevel;\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n    * Creates a simple exception with 1 stack frame. Useful for manual constracting of exception.\r\n    */\r\n    Exception.CreateSimpleException = function (message, typeName, assembly, fileName, details, line) {\r\n        return {\r\n            exceptions: [\r\n                {\r\n                    hasFullStack: true,\r\n                    message: message,\r\n                    stack: details,\r\n                    typeName: typeName\r\n                }\r\n            ]\r\n        };\r\n    };\r\n    Exception.envelopeType = \"Microsoft.ApplicationInsights.{0}.Exception\";\r\n    Exception.dataType = \"ExceptionData\";\r\n    return Exception;\r\n}(ExceptionData));\r\nexport { Exception };\r\nvar _ExceptionDetails = /** @class */ (function (_super) {\r\n    tslib_1.__extends(_ExceptionDetails, _super);\r\n    function _ExceptionDetails(logger, exception) {\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            id: FieldType.Default,\r\n            outerId: FieldType.Default,\r\n            typeName: FieldType.Required,\r\n            message: FieldType.Required,\r\n            hasFullStack: FieldType.Default,\r\n            stack: FieldType.Default,\r\n            parsedStack: FieldType.Array\r\n        };\r\n        _this.typeName = DataSanitizer.sanitizeString(logger, exception.name) || Util.NotSpecified;\r\n        _this.message = DataSanitizer.sanitizeMessage(logger, exception.message) || Util.NotSpecified;\r\n        var stack = exception[\"stack\"];\r\n        _this.parsedStack = _this.parseStack(stack);\r\n        _this.stack = DataSanitizer.sanitizeException(logger, stack);\r\n        _this.hasFullStack = Util.isArray(_this.parsedStack) && _this.parsedStack.length > 0;\r\n        return _this;\r\n    }\r\n    _ExceptionDetails.prototype.parseStack = function (stack) {\r\n        var parsedStack = undefined;\r\n        if (typeof stack === \"string\") {\r\n            var frames = stack.split('\\n');\r\n            parsedStack = [];\r\n            var level = 0;\r\n            var totalSizeInBytes = 0;\r\n            for (var i = 0; i <= frames.length; i++) {\r\n                var frame = frames[i];\r\n                if (_StackFrame.regex.test(frame)) {\r\n                    var parsedFrame = new _StackFrame(frames[i], level++);\r\n                    totalSizeInBytes += parsedFrame.sizeInBytes;\r\n                    parsedStack.push(parsedFrame);\r\n                }\r\n            }\r\n            // DP Constraint - exception parsed stack must be < 32KB\r\n            // remove frames from the middle to meet the threshold\r\n            var exceptionParsedStackThreshold = 32 * 1024;\r\n            if (totalSizeInBytes > exceptionParsedStackThreshold) {\r\n                var left = 0;\r\n                var right = parsedStack.length - 1;\r\n                var size = 0;\r\n                var acceptedLeft = left;\r\n                var acceptedRight = right;\r\n                while (left < right) {\r\n                    // check size\r\n                    var lSize = parsedStack[left].sizeInBytes;\r\n                    var rSize = parsedStack[right].sizeInBytes;\r\n                    size += lSize + rSize;\r\n                    if (size > exceptionParsedStackThreshold) {\r\n                        // remove extra frames from the middle\r\n                        var howMany = acceptedRight - acceptedLeft + 1;\r\n                        parsedStack.splice(acceptedLeft, howMany);\r\n                        break;\r\n                    }\r\n                    // update pointers\r\n                    acceptedLeft = left;\r\n                    acceptedRight = right;\r\n                    left++;\r\n                    right--;\r\n                }\r\n            }\r\n        }\r\n        return parsedStack;\r\n    };\r\n    return _ExceptionDetails;\r\n}(ExceptionDetails));\r\nvar _StackFrame = /** @class */ (function (_super) {\r\n    tslib_1.__extends(_StackFrame, _super);\r\n    function _StackFrame(frame, level) {\r\n        var _this = _super.call(this) || this;\r\n        _this.sizeInBytes = 0;\r\n        _this.aiDataContract = {\r\n            level: FieldType.Required,\r\n            method: FieldType.Required,\r\n            assembly: FieldType.Default,\r\n            fileName: FieldType.Default,\r\n            line: FieldType.Default\r\n        };\r\n        _this.level = level;\r\n        _this.method = \"<no_method>\";\r\n        _this.assembly = Util.trim(frame);\r\n        var matches = frame.match(_StackFrame.regex);\r\n        if (matches && matches.length >= 5) {\r\n            _this.method = Util.trim(matches[2]) || _this.method;\r\n            _this.fileName = Util.trim(matches[4]);\r\n            _this.line = parseInt(matches[5]) || 0;\r\n        }\r\n        _this.sizeInBytes += _this.method.length;\r\n        _this.sizeInBytes += _this.fileName.length;\r\n        _this.sizeInBytes += _this.assembly.length;\r\n        // todo: these might need to be removed depending on how the back-end settles on their size calculation\r\n        _this.sizeInBytes += _StackFrame.baseSize;\r\n        _this.sizeInBytes += _this.level.toString().length;\r\n        _this.sizeInBytes += _this.line.toString().length;\r\n        return _this;\r\n    }\r\n    // regex to match stack frames from ie/chrome/ff\r\n    // methodName=$2, fileName=$4, lineNo=$5, column=$6\r\n    _StackFrame.regex = /^([\\s]+at)?(.*?)(\\@|\\s\\(|\\s)([^\\(\\@\\n]+):([0-9]+):([0-9]+)(\\)?)$/;\r\n    _StackFrame.baseSize = 58; //'{\"method\":\"\",\"level\":,\"assembly\":\"\",\"fileName\":\"\",\"line\":}'.length\r\n    return _StackFrame;\r\n}(StackFrame));\r\nexport { _StackFrame };\r\n//# sourceMappingURL=Exception.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Domain } from './Domain';\r\n/**\r\n * An instance of Exception represents a handled or unhandled exception that occurred during execution of the monitored application.\r\n */\r\nvar ExceptionData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ExceptionData, _super);\r\n    function ExceptionData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.exceptions = [];\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return ExceptionData;\r\n}(Domain));\r\nexport { ExceptionData };\r\n//# sourceMappingURL=ExceptionData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { Domain } from './Domain';\r\n/**\r\n * An instance of the Metric item is a list of measurements (single data points) and/or aggregations.\r\n */\r\nvar MetricData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MetricData, _super);\r\n    function MetricData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.metrics = [];\r\n        _this.properties = {};\r\n        return _this;\r\n    }\r\n    return MetricData;\r\n}(Domain));\r\nexport { MetricData };\r\n//# sourceMappingURL=MetricData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { DataPointType } from './DataPointType';\r\n/**\r\n * Metric data single measurement.\r\n */\r\nvar DataPoint = /** @class */ (function () {\r\n    function DataPoint() {\r\n        this.kind = DataPointType.Measurement;\r\n    }\r\n    return DataPoint;\r\n}());\r\nexport { DataPoint };\r\n//# sourceMappingURL=DataPoint.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// THIS FILE WAS AUTOGENERATED\r\n/**\r\n* Defines the level of severity for the event.\r\n*/\r\nexport var SeverityLevel;\r\n(function (SeverityLevel) {\r\n    SeverityLevel[SeverityLevel[\"Verbose\"] = 0] = \"Verbose\";\r\n    SeverityLevel[SeverityLevel[\"Information\"] = 1] = \"Information\";\r\n    SeverityLevel[SeverityLevel[\"Warning\"] = 2] = \"Warning\";\r\n    SeverityLevel[SeverityLevel[\"Error\"] = 3] = \"Error\";\r\n    SeverityLevel[SeverityLevel[\"Critical\"] = 4] = \"Critical\";\r\n})(SeverityLevel || (SeverityLevel = {}));\r\n//# sourceMappingURL=SeverityLevel.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { DataPoint as AIDataPoint } from '../../Interfaces/Contracts/Generated/DataPoint';\r\nimport { FieldType } from '../../Enums';\r\nvar DataPoint = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DataPoint, _super);\r\n    function DataPoint() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * The data contract for serializing this object.\r\n         */\r\n        _this.aiDataContract = {\r\n            name: FieldType.Required,\r\n            kind: FieldType.Default,\r\n            value: FieldType.Required,\r\n            count: FieldType.Default,\r\n            min: FieldType.Default,\r\n            max: FieldType.Default,\r\n            stdDev: FieldType.Default\r\n        };\r\n        return _this;\r\n    }\r\n    return DataPoint;\r\n}(AIDataPoint));\r\nexport { DataPoint };\r\n//# sourceMappingURL=DataPoint.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { EventData } from './EventData';\r\n/**\r\n * An instance of PageView represents a generic action on a page like a button click. It is also the base type for PageView.\r\n */\r\nvar PageViewData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PageViewData, _super);\r\n    function PageViewData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return PageViewData;\r\n}(EventData));\r\nexport { PageViewData };\r\n//# sourceMappingURL=PageViewData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { MetricData } from '../Interfaces/Contracts/Generated/MetricData';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { DataPoint } from './Common/DataPoint';\r\nimport { Util } from '../Util';\r\nvar Metric = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Metric, _super);\r\n    /**\r\n     * Constructs a new instance of the MetricTelemetry object\r\n     */\r\n    function Metric(logger, name, value, count, min, max, properties) {\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            ver: FieldType.Required,\r\n            metrics: FieldType.Required,\r\n            properties: FieldType.Default\r\n        };\r\n        var dataPoint = new DataPoint();\r\n        dataPoint.count = count > 0 ? count : undefined;\r\n        dataPoint.max = isNaN(max) || max === null ? undefined : max;\r\n        dataPoint.min = isNaN(min) || min === null ? undefined : min;\r\n        dataPoint.name = DataSanitizer.sanitizeString(logger, name) || Util.NotSpecified;\r\n        dataPoint.value = value;\r\n        _this.metrics = [dataPoint];\r\n        _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        return _this;\r\n    }\r\n    Metric.envelopeType = \"Microsoft.ApplicationInsights.{0}.Metric\";\r\n    Metric.dataType = \"MetricData\";\r\n    return Metric;\r\n}(MetricData));\r\nexport { Metric };\r\n//# sourceMappingURL=Metric.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { PageViewData } from '../Interfaces/Contracts/Generated/PageViewData';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { Util } from '../Util';\r\nvar PageView = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PageView, _super);\r\n    /**\r\n     * Constructs a new instance of the PageEventTelemetry object\r\n     */\r\n    function PageView(logger, name, url, durationMs, properties, measurements, id) {\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            ver: FieldType.Required,\r\n            name: FieldType.Default,\r\n            url: FieldType.Default,\r\n            duration: FieldType.Default,\r\n            properties: FieldType.Default,\r\n            measurements: FieldType.Default,\r\n            id: FieldType.Default\r\n        };\r\n        _this.id = DataSanitizer.sanitizeId(logger, id);\r\n        _this.url = DataSanitizer.sanitizeUrl(logger, url);\r\n        _this.name = DataSanitizer.sanitizeString(logger, name) || Util.NotSpecified;\r\n        if (!isNaN(durationMs)) {\r\n            _this.duration = Util.msToTimeSpan(durationMs);\r\n        }\r\n        _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        _this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\r\n        return _this;\r\n    }\r\n    PageView.envelopeType = \"Microsoft.ApplicationInsights.{0}.Pageview\";\r\n    PageView.dataType = \"PageviewData\";\r\n    return PageView;\r\n}(PageViewData));\r\nexport { PageView };\r\n//# sourceMappingURL=PageView.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { Util } from '../Util';\r\nimport { AjaxHelper } from '../Util';\r\nimport { RemoteDependencyData as GeneratedRemoteDependencyData } from '../Interfaces/Contracts/Generated/RemoteDependencyData';\r\nvar RemoteDependencyData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RemoteDependencyData, _super);\r\n    /**\r\n     * Constructs a new instance of the RemoteDependencyData object\r\n     */\r\n    function RemoteDependencyData(logger, id, absoluteUrl, commandName, value, success, resultCode, method, requestAPI, properties, measurements) {\r\n        if (requestAPI === void 0) { requestAPI = \"Ajax\"; }\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            id: FieldType.Required,\r\n            ver: FieldType.Required,\r\n            name: FieldType.Default,\r\n            resultCode: FieldType.Default,\r\n            duration: FieldType.Default,\r\n            success: FieldType.Default,\r\n            data: FieldType.Default,\r\n            target: FieldType.Default,\r\n            type: FieldType.Default,\r\n            properties: FieldType.Default,\r\n            measurements: FieldType.Default,\r\n            kind: FieldType.Default,\r\n            value: FieldType.Default,\r\n            count: FieldType.Default,\r\n            min: FieldType.Default,\r\n            max: FieldType.Default,\r\n            stdDev: FieldType.Default,\r\n            dependencyKind: FieldType.Default,\r\n            dependencySource: FieldType.Default,\r\n            commandName: FieldType.Default,\r\n            dependencyTypeName: FieldType.Default,\r\n        };\r\n        _this.id = id;\r\n        _this.duration = Util.msToTimeSpan(value);\r\n        _this.success = success;\r\n        _this.resultCode = resultCode + \"\";\r\n        _this.type = DataSanitizer.sanitizeString(logger, requestAPI);\r\n        var dependencyFields = AjaxHelper.ParseDependencyPath(logger, absoluteUrl, method, commandName);\r\n        _this.data = DataSanitizer.sanitizeUrl(logger, commandName) || dependencyFields.data; // get a value from hosturl if commandName not available\r\n        _this.target = dependencyFields.target;\r\n        _this.name = dependencyFields.name;\r\n        _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        _this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\r\n        return _this;\r\n    }\r\n    RemoteDependencyData.envelopeType = \"Microsoft.ApplicationInsights.{0}.RemoteDependency\";\r\n    RemoteDependencyData.dataType = \"RemoteDependencyData\";\r\n    return RemoteDependencyData;\r\n}(GeneratedRemoteDependencyData));\r\nexport { RemoteDependencyData };\r\n//# sourceMappingURL=RemoteDependencyData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { Domain } from './Domain';\r\n/**\r\n * An instance of Remote Dependency represents an interaction of the monitored component with a remote component/service like SQL or an HTTP endpoint.\r\n */\r\nvar RemoteDependencyData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RemoteDependencyData, _super);\r\n    function RemoteDependencyData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.success = true;\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return RemoteDependencyData;\r\n}(Domain));\r\nexport { RemoteDependencyData };\r\n//# sourceMappingURL=RemoteDependencyData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { MessageData } from '../Interfaces/Contracts/Generated/MessageData';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { Util } from '../Util';\r\nvar Trace = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Trace, _super);\r\n    /**\r\n     * Constructs a new instance of the TraceTelemetry object\r\n     */\r\n    function Trace(logger, message, severityLevel, properties) {\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            ver: FieldType.Required,\r\n            message: FieldType.Required,\r\n            severityLevel: FieldType.Default,\r\n            properties: FieldType.Default\r\n        };\r\n        message = message || Util.NotSpecified;\r\n        _this.message = DataSanitizer.sanitizeMessage(logger, message);\r\n        _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        if (severityLevel) {\r\n            _this.severityLevel = severityLevel;\r\n        }\r\n        return _this;\r\n    }\r\n    Trace.envelopeType = \"Microsoft.ApplicationInsights.{0}.Message\";\r\n    Trace.dataType = \"MessageData\";\r\n    return Trace;\r\n}(MessageData));\r\nexport { Trace };\r\n//# sourceMappingURL=Trace.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { Domain } from './Domain';\r\n/**\r\n * Instances of Message represent printf-like trace statements that are text-searched. Log4Net, NLog and other text-based log file entries are translated into intances of this type. The message does not have measurements.\r\n */\r\nvar MessageData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MessageData, _super);\r\n    function MessageData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.properties = {};\r\n        return _this;\r\n    }\r\n    return MessageData;\r\n}(Domain));\r\nexport { MessageData };\r\n//# sourceMappingURL=MessageData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { PageViewPerfData } from '../Interfaces/Contracts/Generated/PageViewPerfData';\r\nimport { FieldType } from '../Enums';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { Util } from '../Util';\r\nvar PageViewPerformance = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PageViewPerformance, _super);\r\n    /**\r\n     * Constructs a new instance of the PageEventTelemetry object\r\n     */\r\n    function PageViewPerformance(logger, name, url, unused, properties, measurements) {\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            ver: FieldType.Required,\r\n            name: FieldType.Default,\r\n            url: FieldType.Default,\r\n            duration: FieldType.Default,\r\n            perfTotal: FieldType.Default,\r\n            networkConnect: FieldType.Default,\r\n            sentRequest: FieldType.Default,\r\n            receivedResponse: FieldType.Default,\r\n            domProcessing: FieldType.Default,\r\n            properties: FieldType.Default,\r\n            measurements: FieldType.Default\r\n        };\r\n        _this.url = DataSanitizer.sanitizeUrl(logger, url);\r\n        _this.name = DataSanitizer.sanitizeString(logger, name) || Util.NotSpecified;\r\n        _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        _this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\r\n        return _this;\r\n    }\r\n    PageViewPerformance.envelopeType = \"Microsoft.ApplicationInsights.{0}.PageviewPerformance\";\r\n    PageViewPerformance.dataType = \"PageviewPerformanceData\";\r\n    return PageViewPerformance;\r\n}(PageViewPerfData));\r\nexport { PageViewPerformance };\r\n//# sourceMappingURL=PageViewPerformance.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { PageViewData } from './PageViewData';\r\n/**\r\n * An instance of PageViewPerf represents: a page view with no performance data, a page view with performance data, or just the performance data of an earlier page request.\r\n */\r\nvar PageViewPerfData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PageViewPerfData, _super);\r\n    function PageViewPerfData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return PageViewPerfData;\r\n}(PageViewData));\r\nexport { PageViewPerfData };\r\n//# sourceMappingURL=PageViewPerfData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Data as AIData } from '../../Interfaces/Contracts/Generated/Data';\r\nimport { FieldType } from '../../Enums';\r\nvar Data = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Data, _super);\r\n    /**\r\n     * Constructs a new instance of telemetry data.\r\n     */\r\n    function Data(baseType, data) {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * The data contract for serializing this object.\r\n         */\r\n        _this.aiDataContract = {\r\n            baseType: FieldType.Required,\r\n            baseData: FieldType.Required\r\n        };\r\n        _this.baseType = baseType;\r\n        _this.baseData = data;\r\n        return _this;\r\n    }\r\n    return Data;\r\n}(AIData));\r\nexport { Data };\r\n//# sourceMappingURL=Data.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { CoreUtils } from '@microsoft/applicationinsights-core-js';\r\nvar ConfigurationManager = /** @class */ (function () {\r\n    function ConfigurationManager() {\r\n    }\r\n    ConfigurationManager.getConfig = function (config, field, identifier, defaultValue) {\r\n        if (defaultValue === void 0) { defaultValue = false; }\r\n        var configValue;\r\n        if (identifier && config.extensionConfig && config.extensionConfig[identifier] && !CoreUtils.isNullOrUndefined(config.extensionConfig[identifier][field])) {\r\n            configValue = config.extensionConfig[identifier][field];\r\n        }\r\n        else {\r\n            configValue = config[field];\r\n        }\r\n        return !CoreUtils.isNullOrUndefined(configValue) ? configValue : defaultValue;\r\n    };\r\n    return ConfigurationManager;\r\n}());\r\nexport { ConfigurationManager };\r\n//# sourceMappingURL=IConfig.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// THIS FILE WAS AUTOGENERATED\r\nvar ContextTagKeys = /** @class */ (function () {\r\n    function ContextTagKeys() {\r\n        this.applicationVersion = \"ai.application.ver\";\r\n        this.applicationBuild = \"ai.application.build\";\r\n        this.applicationTypeId = \"ai.application.typeId\";\r\n        this.applicationId = \"ai.application.applicationId\";\r\n        this.applicationLayer = \"ai.application.layer\";\r\n        this.deviceId = \"ai.device.id\";\r\n        this.deviceIp = \"ai.device.ip\";\r\n        this.deviceLanguage = \"ai.device.language\";\r\n        this.deviceLocale = \"ai.device.locale\";\r\n        this.deviceModel = \"ai.device.model\";\r\n        this.deviceFriendlyName = \"ai.device.friendlyName\";\r\n        this.deviceNetwork = \"ai.device.network\";\r\n        this.deviceNetworkName = \"ai.device.networkName\";\r\n        this.deviceOEMName = \"ai.device.oemName\";\r\n        this.deviceOS = \"ai.device.os\";\r\n        this.deviceOSVersion = \"ai.device.osVersion\";\r\n        this.deviceRoleInstance = \"ai.device.roleInstance\";\r\n        this.deviceRoleName = \"ai.device.roleName\";\r\n        this.deviceScreenResolution = \"ai.device.screenResolution\";\r\n        this.deviceType = \"ai.device.type\";\r\n        this.deviceMachineName = \"ai.device.machineName\";\r\n        this.deviceVMName = \"ai.device.vmName\";\r\n        this.deviceBrowser = \"ai.device.browser\";\r\n        this.deviceBrowserVersion = \"ai.device.browserVersion\";\r\n        this.locationIp = \"ai.location.ip\";\r\n        this.locationCountry = \"ai.location.country\";\r\n        this.locationProvince = \"ai.location.province\";\r\n        this.locationCity = \"ai.location.city\";\r\n        this.operationId = \"ai.operation.id\";\r\n        this.operationName = \"ai.operation.name\";\r\n        this.operationParentId = \"ai.operation.parentId\";\r\n        this.operationRootId = \"ai.operation.rootId\";\r\n        this.operationSyntheticSource = \"ai.operation.syntheticSource\";\r\n        this.operationCorrelationVector = \"ai.operation.correlationVector\";\r\n        this.sessionId = \"ai.session.id\";\r\n        this.sessionIsFirst = \"ai.session.isFirst\";\r\n        this.sessionIsNew = \"ai.session.isNew\";\r\n        this.userAccountAcquisitionDate = \"ai.user.accountAcquisitionDate\";\r\n        this.userAccountId = \"ai.user.accountId\";\r\n        this.userAgent = \"ai.user.userAgent\";\r\n        this.userId = \"ai.user.id\";\r\n        this.userStoreRegion = \"ai.user.storeRegion\";\r\n        this.userAuthUserId = \"ai.user.authUserId\";\r\n        this.userAnonymousUserAcquisitionDate = \"ai.user.anonUserAcquisitionDate\";\r\n        this.userAuthenticatedUserAcquisitionDate = \"ai.user.authUserAcquisitionDate\";\r\n        this.cloudName = \"ai.cloud.name\";\r\n        this.cloudRole = \"ai.cloud.role\";\r\n        this.cloudRoleVer = \"ai.cloud.roleVer\";\r\n        this.cloudRoleInstance = \"ai.cloud.roleInstance\";\r\n        this.cloudEnvironment = \"ai.cloud.environment\";\r\n        this.cloudLocation = \"ai.cloud.location\";\r\n        this.cloudDeploymentUnit = \"ai.cloud.deploymentUnit\";\r\n        this.internalNodeName = \"ai.internal.nodeName\";\r\n        this.internalSdkVersion = \"ai.internal.sdkVersion\";\r\n        this.internalAgentVersion = \"ai.internal.agentVersion\";\r\n    }\r\n    return ContextTagKeys;\r\n}());\r\nexport { ContextTagKeys };\r\n//# sourceMappingURL=ContextTagKeys.js.map","import { ContextTagKeys } from \"./Contracts/Generated/ContextTagKeys\";\r\nvar Extensions = /** @class */ (function () {\r\n    function Extensions() {\r\n    }\r\n    Extensions.UserExt = \"user\";\r\n    Extensions.DeviceExt = \"device\";\r\n    Extensions.TraceExt = \"trace\";\r\n    Extensions.WebExt = \"web\";\r\n    Extensions.AppExt = \"app\";\r\n    Extensions.OSExt = \"os\";\r\n    Extensions.SessionExt = \"ses\";\r\n    Extensions.SDKExt = \"sdk\";\r\n    return Extensions;\r\n}());\r\nexport { Extensions };\r\nvar SDKExtensionKeys = /** @class */ (function () {\r\n    function SDKExtensionKeys() {\r\n    }\r\n    SDKExtensionKeys.libVer = 'libVer';\r\n    return SDKExtensionKeys;\r\n}());\r\nexport { SDKExtensionKeys };\r\nexport var CtxTagKeys = new ContextTagKeys();\r\n//# sourceMappingURL=PartAExtensions.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { Util, DateTimeUtils } from '@microsoft/applicationinsights-common';\r\nimport { _InternalMessageId, LoggingSeverity, CoreUtils, DiagnosticLogger } from '@microsoft/applicationinsights-core-js';\r\nvar Session = /** @class */ (function () {\r\n    function Session() {\r\n    }\r\n    return Session;\r\n}());\r\nexport { Session };\r\nvar _SessionManager = /** @class */ (function () {\r\n    function _SessionManager(config, logger) {\r\n        var _this = this;\r\n        if (CoreUtils.isNullOrUndefined(logger)) {\r\n            this._logger = new DiagnosticLogger();\r\n        }\r\n        else {\r\n            this._logger = logger;\r\n        }\r\n        if (!config) {\r\n            config = {};\r\n        }\r\n        if (!(typeof config.sessionExpirationMs === \"function\")) {\r\n            config.sessionExpirationMs = function () { return _SessionManager.acquisitionSpan; };\r\n        }\r\n        if (!(typeof config.sessionRenewalMs === \"function\")) {\r\n            config.sessionRenewalMs = function () { return _SessionManager.renewalSpan; };\r\n        }\r\n        this.config = config;\r\n        this._storageNamePrefix = function () { return _this.config.namePrefix && _this.config.namePrefix() ? _SessionManager.cookieNameConst + _this.config.namePrefix() : _SessionManager.cookieNameConst; };\r\n        this.automaticSession = new Session();\r\n    }\r\n    _SessionManager.prototype.update = function () {\r\n        if (!this.automaticSession.id) {\r\n            this.initializeAutomaticSession();\r\n        }\r\n        var now = DateTimeUtils.Now();\r\n        var acquisitionExpired = now - this.automaticSession.acquisitionDate > this.config.sessionExpirationMs();\r\n        var renewalExpired = now - this.automaticSession.renewalDate > this.config.sessionRenewalMs();\r\n        // renew if acquisitionSpan or renewalSpan has ellapsed\r\n        if (acquisitionExpired || renewalExpired) {\r\n            // update automaticSession so session state has correct id\r\n            this.renew();\r\n        }\r\n        else {\r\n            // do not update the cookie more often than cookieUpdateInterval\r\n            if (!this.cookieUpdatedTimestamp || now - this.cookieUpdatedTimestamp > _SessionManager.cookieUpdateInterval) {\r\n                this.automaticSession.renewalDate = now;\r\n                this.setCookie(this.automaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewalDate);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *  Record the current state of the automatic session and store it in our cookie string format\r\n     *  into the browser's local storage. This is used to restore the session data when the cookie\r\n     *  expires.\r\n     */\r\n    _SessionManager.prototype.backup = function () {\r\n        this.setStorage(this.automaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewalDate);\r\n    };\r\n    /**\r\n     *  Use config.namePrefix + ai_session cookie data or local storage data (when the cookie is unavailable) to\r\n     *  initialize the automatic session.\r\n     */\r\n    _SessionManager.prototype.initializeAutomaticSession = function () {\r\n        var cookie = Util.getCookie(this._logger, this._storageNamePrefix());\r\n        if (cookie && typeof cookie.split === \"function\") {\r\n            this.initializeAutomaticSessionWithData(cookie);\r\n        }\r\n        else {\r\n            // There's no cookie, but we might have session data in local storage\r\n            // This can happen if the session expired or the user actively deleted the cookie\r\n            // We only want to recover data if the cookie is missing from expiry. We should respect the user's wishes if the cookie was deleted actively.\r\n            // The User class handles this for us and deletes our local storage object if the persistent user cookie was removed.\r\n            var storage = Util.getStorage(this._logger, this._storageNamePrefix());\r\n            if (storage) {\r\n                this.initializeAutomaticSessionWithData(storage);\r\n            }\r\n        }\r\n        if (!this.automaticSession.id) {\r\n            this.renew();\r\n        }\r\n    };\r\n    /**\r\n     *  Extract id, aquisitionDate, and renewalDate from an ai_session payload string and\r\n     *  use this data to initialize automaticSession.\r\n     *\r\n     *  @param {string} sessionData - The string stored in an ai_session cookie or local storage backup\r\n     */\r\n    _SessionManager.prototype.initializeAutomaticSessionWithData = function (sessionData) {\r\n        var params = sessionData.split(\"|\");\r\n        if (params.length > 0) {\r\n            this.automaticSession.id = params[0];\r\n        }\r\n        try {\r\n            if (params.length > 1) {\r\n                var acq = +params[1];\r\n                this.automaticSession.acquisitionDate = +new Date(acq);\r\n                this.automaticSession.acquisitionDate = this.automaticSession.acquisitionDate > 0 ? this.automaticSession.acquisitionDate : 0;\r\n            }\r\n            if (params.length > 2) {\r\n                var renewal = +params[2];\r\n                this.automaticSession.renewalDate = +new Date(renewal);\r\n                this.automaticSession.renewalDate = this.automaticSession.renewalDate > 0 ? this.automaticSession.renewalDate : 0;\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.ErrorParsingAISessionCookie, \"Error parsing ai_session cookie, session will be reset: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n        }\r\n        if (this.automaticSession.renewalDate == 0) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.SessionRenewalDateIsZero, \"AI session renewal date is 0, session will be reset.\");\r\n        }\r\n    };\r\n    _SessionManager.prototype.renew = function () {\r\n        var now = DateTimeUtils.Now();\r\n        this.automaticSession.id = Util.newId();\r\n        this.automaticSession.acquisitionDate = now;\r\n        this.automaticSession.renewalDate = now;\r\n        this.setCookie(this.automaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewalDate);\r\n        // If this browser does not support local storage, fire an internal log to keep track of it at this point\r\n        if (!Util.canUseLocalStorage()) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserDoesNotSupportLocalStorage, \"Browser does not support local storage. Session durations will be inaccurate.\");\r\n        }\r\n    };\r\n    _SessionManager.prototype.setCookie = function (guid, acq, renewal) {\r\n        // Set cookie to expire after the session expiry time passes or the session renewal deadline, whichever is sooner\r\n        // Expiring the cookie will cause the session to expire even if the user isn't on the page\r\n        var acquisitionExpiry = acq + this.config.sessionExpirationMs();\r\n        var renewalExpiry = renewal + this.config.sessionRenewalMs();\r\n        var cookieExpiry = new Date();\r\n        var cookie = [guid, acq, renewal];\r\n        if (acquisitionExpiry < renewalExpiry) {\r\n            cookieExpiry.setTime(acquisitionExpiry);\r\n        }\r\n        else {\r\n            cookieExpiry.setTime(renewalExpiry);\r\n        }\r\n        var cookieDomnain = this.config.cookieDomain ? this.config.cookieDomain() : null;\r\n        Util.setCookie(this._logger, this._storageNamePrefix(), cookie.join('|') + ';expires=' + cookieExpiry.toUTCString(), cookieDomnain);\r\n        this.cookieUpdatedTimestamp = DateTimeUtils.Now();\r\n    };\r\n    _SessionManager.prototype.setStorage = function (guid, acq, renewal) {\r\n        // Keep data in local storage to retain the last session id, allowing us to cleanly end the session when it expires\r\n        // Browsers that don't support local storage won't be able to end sessions cleanly from the client\r\n        // The server will notice this and end the sessions itself, with loss of accurate session duration\r\n        Util.setStorage(this._logger, this._storageNamePrefix(), [guid, acq, renewal].join('|'));\r\n    };\r\n    _SessionManager.acquisitionSpan = 86400000; // 24 hours in ms\r\n    _SessionManager.renewalSpan = 1800000; // 30 minutes in ms\r\n    _SessionManager.cookieUpdateInterval = 60000; // 1 minute in ms\r\n    _SessionManager.cookieNameConst = 'ai_session';\r\n    return _SessionManager;\r\n}());\r\nexport { _SessionManager };\r\n//# sourceMappingURL=Session.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar Application = /** @class */ (function () {\r\n    function Application() {\r\n    }\r\n    return Application;\r\n}());\r\nexport { Application };\r\n//# sourceMappingURL=Application.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar Device = /** @class */ (function () {\r\n    /**\r\n     * Constructs a new instance of the Device class\r\n     */\r\n    function Device() {\r\n        // don't attempt to fingerprint browsers\r\n        this.id = \"browser\";\r\n        // Device type is a dimension in our data platform\r\n        // Setting it to 'Browser' allows to separate client and server dependencies/exceptions\r\n        this.deviceClass = \"Browser\";\r\n    }\r\n    return Device;\r\n}());\r\nexport { Device };\r\n//# sourceMappingURL=Device.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar Version = \"2.0.2-beta\";\r\nvar Internal = /** @class */ (function () {\r\n    /**\r\n    * Constructs a new instance of the internal telemetry data class.\r\n    */\r\n    function Internal(config) {\r\n        this.sdkVersion = (config.sdkExtension && config.sdkExtension() ? config.sdkExtension() + \"_\" : \"\") + \"javascript:\" + Version;\r\n    }\r\n    return Internal;\r\n}());\r\nexport { Internal };\r\n//# sourceMappingURL=Internal.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar HashCodeScoreGenerator = /** @class */ (function () {\r\n    function HashCodeScoreGenerator() {\r\n    }\r\n    HashCodeScoreGenerator.prototype.getHashCodeScore = function (key) {\r\n        var score = this.getHashCode(key) / HashCodeScoreGenerator.INT_MAX_VALUE;\r\n        return score * 100;\r\n    };\r\n    HashCodeScoreGenerator.prototype.getHashCode = function (input) {\r\n        if (input == \"\") {\r\n            return 0;\r\n        }\r\n        while (input.length < HashCodeScoreGenerator.MIN_INPUT_LENGTH) {\r\n            input = input.concat(input);\r\n        }\r\n        // 5381 is a magic number: http://stackoverflow.com/questions/10696223/reason-for-5381-number-in-djb-hash-function\r\n        var hash = 5381;\r\n        for (var i = 0; i < input.length; ++i) {\r\n            hash = ((hash << 5) + hash) + input.charCodeAt(i);\r\n            // 'hash' is of number type which means 53 bit integer (http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types-number-type)\r\n            // 'hash & hash' will keep it 32 bit integer - just to make it clearer what the result is.\r\n            hash = hash & hash;\r\n        }\r\n        return Math.abs(hash);\r\n    };\r\n    // We're using 32 bit math, hence max value is (2^31 - 1)\r\n    HashCodeScoreGenerator.INT_MAX_VALUE = 2147483647;\r\n    // (Magic number) DJB algorithm can't work on shorter strings (results in poor distribution\r\n    HashCodeScoreGenerator.MIN_INPUT_LENGTH = 8;\r\n    return HashCodeScoreGenerator;\r\n}());\r\nexport { HashCodeScoreGenerator };\r\n//# sourceMappingURL=HashCodeScoreGenerator.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { HashCodeScoreGenerator } from './HashCodeScoreGenerator';\r\nimport { ContextTagKeys } from '@microsoft/applicationinsights-common';\r\nvar SamplingScoreGenerator = /** @class */ (function () {\r\n    function SamplingScoreGenerator() {\r\n        this.hashCodeGeneragor = new HashCodeScoreGenerator();\r\n    }\r\n    SamplingScoreGenerator.prototype.getSamplingScore = function (envelope) {\r\n        var tagKeys = new ContextTagKeys();\r\n        var score = 0;\r\n        if (envelope.tags[tagKeys.userId]) {\r\n            score = this.hashCodeGeneragor.getHashCodeScore(envelope.tags[tagKeys.userId]);\r\n        }\r\n        else if (envelope.tags[tagKeys.operationId]) {\r\n            score = this.hashCodeGeneragor.getHashCodeScore(envelope.tags[tagKeys.operationId]);\r\n        }\r\n        else {\r\n            // tslint:disable-next-line:insecure-random\r\n            score = Math.random();\r\n        }\r\n        return score;\r\n    };\r\n    return SamplingScoreGenerator;\r\n}());\r\nexport { SamplingScoreGenerator };\r\n//# sourceMappingURL=SamplingScoreGenerator.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { SamplingScoreGenerator } from '../SamplingScoreGenerator';\r\nimport { _InternalMessageId, LoggingSeverity, DiagnosticLogger, CoreUtils } from '@microsoft/applicationinsights-core-js';\r\nvar Sample = /** @class */ (function () {\r\n    function Sample(sampleRate, logger) {\r\n        // We're using 32 bit math, hence max value is (2^31 - 1)\r\n        this.INT_MAX_VALUE = 2147483647;\r\n        if (CoreUtils.isNullOrUndefined(logger)) {\r\n            this._logger = new DiagnosticLogger();\r\n        }\r\n        else {\r\n            this._logger = logger;\r\n        }\r\n        if (sampleRate > 100 || sampleRate < 0) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.SampleRateOutOfRange, \"Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.\", { samplingRate: sampleRate }, true);\r\n            this.sampleRate = 100;\r\n        }\r\n        this.sampleRate = sampleRate;\r\n        this.samplingScoreGenerator = new SamplingScoreGenerator();\r\n    }\r\n    /**\r\n    * Determines if an envelope is sampled in (i.e. will be sent) or not (i.e. will be dropped).\r\n    */\r\n    Sample.prototype.isSampledIn = function (envelope) {\r\n        // return true as sampling will move to different extension\r\n        return true;\r\n    };\r\n    return Sample;\r\n}());\r\nexport { Sample };\r\n//# sourceMappingURL=Sample.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { Util } from '@microsoft/applicationinsights-common';\r\nimport { _InternalMessageId, LoggingSeverity } from '@microsoft/applicationinsights-core-js';\r\nvar User = /** @class */ (function () {\r\n    function User(config, logger) {\r\n        this._logger = logger;\r\n        //get userId or create new one if none exists\r\n        var cookie = Util.getCookie(this._logger, User.userCookieName);\r\n        if (cookie) {\r\n            var params = cookie.split(User.cookieSeparator);\r\n            if (params.length > 0) {\r\n                this.id = params[0];\r\n            }\r\n        }\r\n        this.config = config;\r\n        if (!this.id) {\r\n            this.id = Util.newId();\r\n            var date = new Date();\r\n            var acqStr = Util.toISOStringForIE8(date);\r\n            this.accountAcquisitionDate = acqStr;\r\n            // without expiration, cookies expire at the end of the session\r\n            // set it to 365 days from now\r\n            // 365 * 24 * 60 * 60 * 1000 = 31536000000 \r\n            date.setTime(date.getTime() + 31536000000);\r\n            var newCookie = [this.id, acqStr];\r\n            var cookieDomain = this.config.cookieDomain ? this.config.cookieDomain() : undefined;\r\n            Util.setCookie(this._logger, User.userCookieName, newCookie.join(User.cookieSeparator) + ';expires=' + date.toUTCString(), cookieDomain);\r\n            // If we have an config.namePrefix() + ai_session in local storage this means the user actively removed our cookies.\r\n            // We should respect their wishes and clear ourselves from local storage\r\n            var name_1 = config.namePrefix && config.namePrefix() ? config.namePrefix() + 'ai_session' : 'ai_session';\r\n            Util.removeStorage(this._logger, name_1);\r\n        }\r\n        // We still take the account id from the ctor param for backward compatibility. \r\n        // But if the the customer set the accountId through the newer setAuthenticatedUserContext API, we will override it.\r\n        this.accountId = config.accountId ? config.accountId() : undefined;\r\n        // Get the auth user id and account id from the cookie if exists\r\n        // Cookie is in the pattern: <authenticatedId>|<accountId>\r\n        var authCookie = Util.getCookie(this._logger, User.authUserCookieName);\r\n        if (authCookie) {\r\n            authCookie = decodeURI(authCookie);\r\n            var authCookieString = authCookie.split(User.cookieSeparator);\r\n            if (authCookieString[0]) {\r\n                this.authenticatedId = authCookieString[0];\r\n            }\r\n            if (authCookieString.length > 1 && authCookieString[1]) {\r\n                this.accountId = authCookieString[1];\r\n            }\r\n        }\r\n    }\r\n    /**\r\n    * Sets the authenticated user id and the account id in this session.\r\n    *\r\n    * @param authenticatedUserId {string} - The authenticated user id. A unique and persistent string that represents each authenticated user in the service.\r\n    * @param accountId {string} - An optional string to represent the account associated with the authenticated user.\r\n    */\r\n    User.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\r\n        if (storeInCookie === void 0) { storeInCookie = false; }\r\n        // Validate inputs to ensure no cookie control characters.\r\n        var isInvalidInput = !this.validateUserInput(authenticatedUserId) || (accountId && !this.validateUserInput(accountId));\r\n        if (isInvalidInput) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.SetAuthContextFailedAccountName, \"Setting auth user context failed. \" +\r\n                \"User auth/account id should be of type string, and not contain commas, semi-colons, equal signs, spaces, or vertical-bars.\", true);\r\n            return;\r\n        }\r\n        // Create cookie string.\r\n        this.authenticatedId = authenticatedUserId;\r\n        var authCookie = this.authenticatedId;\r\n        if (accountId) {\r\n            this.accountId = accountId;\r\n            authCookie = [this.authenticatedId, this.accountId].join(User.cookieSeparator);\r\n        }\r\n        if (storeInCookie) {\r\n            // Set the cookie. No expiration date because this is a session cookie (expires when browser closed).\r\n            // Encoding the cookie to handle unexpected unicode characters.\r\n            Util.setCookie(this._logger, User.authUserCookieName, encodeURI(authCookie), this.config.cookieDomain());\r\n        }\r\n    };\r\n    /**\r\n     * Clears the authenticated user id and the account id from the user context.\r\n     * @returns {}\r\n     */\r\n    User.prototype.clearAuthenticatedUserContext = function () {\r\n        this.authenticatedId = null;\r\n        this.accountId = null;\r\n        Util.deleteCookie(this._logger, User.authUserCookieName);\r\n    };\r\n    User.prototype.validateUserInput = function (id) {\r\n        // Validate:\r\n        // 1. Id is a non-empty string.\r\n        // 2. It does not contain special characters for cookies.\r\n        if (typeof id !== 'string' ||\r\n            !id ||\r\n            id.match(/,|;|=| |\\|/)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    User.cookieSeparator = '|';\r\n    User.userCookieName = 'ai_user';\r\n    User.authUserCookieName = 'ai_authUser';\r\n    return User;\r\n}());\r\nexport { User };\r\n//# sourceMappingURL=User.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar Location = /** @class */ (function () {\r\n    function Location() {\r\n    }\r\n    return Location;\r\n}());\r\nexport { Location };\r\n//# sourceMappingURL=Location.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { Util } from '@microsoft/applicationinsights-common';\r\nvar TelemetryTrace = /** @class */ (function () {\r\n    function TelemetryTrace(id, parentId, name) {\r\n        this.traceID = id || Util.newId();\r\n        this.parentID = parentId;\r\n        this.name = name;\r\n    }\r\n    return TelemetryTrace;\r\n}());\r\nexport { TelemetryTrace };\r\n//# sourceMappingURL=TelemetryTrace.js.map","/**\r\n * PropertiesPlugin.ts\r\n * @copyright Microsoft 2018\r\n */\r\nimport { Session, _SessionManager } from './Context/Session';\r\nimport { Extensions, CtxTagKeys, SDKExtensionKeys } from '@microsoft/applicationinsights-common';\r\nimport { Application } from './Context/Application';\r\nimport { Device } from './Context/Device';\r\nimport { Internal } from './Context/Internal';\r\nimport { Sample } from './Context/Sample';\r\nimport { User } from './Context/User';\r\nimport { Location } from './Context/Location';\r\nimport { TelemetryTrace } from './Context/TelemetryTrace';\r\nvar TelemetryContext = /** @class */ (function () {\r\n    function TelemetryContext(logger, defaultConfig) {\r\n        if (typeof window !== 'undefined') {\r\n            this.sessionManager = new _SessionManager(defaultConfig, logger);\r\n            this.application = new Application();\r\n            this.device = new Device();\r\n            this.internal = new Internal(defaultConfig);\r\n            this.location = new Location();\r\n            this.user = new User(defaultConfig, logger);\r\n            this.telemetryTrace = new TelemetryTrace();\r\n            this.session = new Session();\r\n            this.sample = new Sample(defaultConfig.samplingPercentage(), logger);\r\n        }\r\n    }\r\n    TelemetryContext.prototype.applySessionContext = function (event) {\r\n        var sessionContext = this.session || this.sessionManager.automaticSession;\r\n        if (sessionContext) {\r\n            if (typeof sessionContext.id === \"string\") {\r\n                event.ext.app.sesId = sessionContext.id;\r\n            }\r\n        }\r\n        if (this.session) {\r\n            // If customer set session info, apply his context; otherwise apply context automatically generated \r\n            if (typeof this.session.id === \"string\") {\r\n                event.ext.app.sesId = this.session.id;\r\n            }\r\n            else {\r\n                event.ext.app.sesId = this.sessionManager.automaticSession.id;\r\n            }\r\n        }\r\n    };\r\n    TelemetryContext.prototype.applyOperatingSystemContxt = function (event) {\r\n        if (this.os && this.os.name) {\r\n            event.ext.os = this.os;\r\n        }\r\n    };\r\n    TelemetryContext.prototype.applyApplicationContext = function (event) {\r\n        if (this.application) {\r\n            if (typeof this.application.ver === \"string\") {\r\n                event.tags.push((_a = {}, _a[CtxTagKeys.applicationVersion] = this.application.ver, _a));\r\n            }\r\n            if (typeof this.application.build === \"string\") {\r\n                event.tags.push((_b = {}, _b[CtxTagKeys.applicationBuild] = this.application.build, _b));\r\n            }\r\n        }\r\n        var _a, _b;\r\n    };\r\n    TelemetryContext.prototype.applyDeviceContext = function (event) {\r\n        if (this.device) {\r\n            if (typeof this.device.id === \"string\") {\r\n                event.ext.device.localId = this.device.id;\r\n            }\r\n            if (typeof this.device.ip === \"string\") {\r\n                event.ext.device.ip = this.device.ip;\r\n            }\r\n            if (typeof this.device.model === \"string\") {\r\n                event.ext.device.model = this.device.model;\r\n            }\r\n            if (typeof this.device.deviceClass === \"string\") {\r\n                event.ext.device.deviceClass = this.device.deviceClass;\r\n            }\r\n        }\r\n    };\r\n    TelemetryContext.prototype.applyInternalContext = function (event) {\r\n        if (this.internal) {\r\n            if (typeof this.internal.agentVersion === \"string\") {\r\n                event.tags.push((_a = {}, _a[CtxTagKeys.internalAgentVersion] = this.internal.agentVersion, _a)); // not mapped in CS 4.0\r\n            }\r\n            if (typeof this.internal.sdkVersion === \"string\") {\r\n                event.tags.push((_b = {}, _b[CtxTagKeys.internalSdkVersion] = this.internal.sdkVersion, _b));\r\n            }\r\n            else {\r\n                // store the version provided by core\r\n                if (event[Extensions.SDKExt] && event[Extensions.SDKExt][SDKExtensionKeys.libVer]) {\r\n                    event.tags.push((_c = {}, _c[CtxTagKeys.internalSdkVersion] = event[Extensions.SDKExt][SDKExtensionKeys.libVer], _c)); // map sdk.libVer \r\n                }\r\n            }\r\n        }\r\n        var _a, _b, _c;\r\n    };\r\n    TelemetryContext.prototype.applyLocationContext = function (event) {\r\n        if (this.location) {\r\n            if (typeof this.location.ip === \"string\") {\r\n                event.tags.push((_a = {}, _a[CtxTagKeys.locationIp] = this.location.ip, _a));\r\n            }\r\n        }\r\n        var _a;\r\n    };\r\n    TelemetryContext.prototype.applySampleContext = function (event) {\r\n        if (this.sample) {\r\n            event.tags.push({ SampleRate: this.sample.sampleRate }); // tags.sampleRate -> mapped in CS 4.0\r\n        }\r\n    };\r\n    TelemetryContext.prototype.applyOperationContext = function (event) {\r\n        if (this.telemetryTrace) {\r\n            var trace = event.ext.trace || { traceID: undefined, parentID: undefined };\r\n            if (typeof this.telemetryTrace.traceID === \"string\") {\r\n                trace.traceID = this.telemetryTrace.traceID;\r\n            }\r\n            if (typeof this.telemetryTrace.name === \"string\") {\r\n                trace.name = this.telemetryTrace.name;\r\n            }\r\n            if (typeof this.telemetryTrace.parentID === \"string\") {\r\n                trace.parentID = this.telemetryTrace.parentID;\r\n            }\r\n            event.ext.trace = trace;\r\n        }\r\n    };\r\n    TelemetryContext.prototype.applyWebContext = function (event) {\r\n        if (this.web) {\r\n            event.ext.web = event.ext.web || {};\r\n            event.ext.web = this.web;\r\n        }\r\n    };\r\n    TelemetryContext.prototype.applyUserContext = function (event) {\r\n        if (this.user) {\r\n            if (!event.tags) {\r\n                event.tags = [];\r\n            }\r\n            // stays in tags\r\n            if (typeof this.user.accountId === \"string\") {\r\n                var item = {};\r\n                event.tags.push((_a = {}, _a[CtxTagKeys.userAccountId] = this.user.accountId, _a));\r\n            }\r\n            // CS 4.0            \r\n            if (typeof this.user.id === \"string\") {\r\n                event.ext.user.id = this.user.id;\r\n            }\r\n            if (typeof this.user.authenticatedId === \"string\") {\r\n                event.ext.user.authId = this.user.authenticatedId;\r\n            }\r\n        }\r\n        var _a;\r\n    };\r\n    TelemetryContext.prototype.cleanUp = function (event) {\r\n        if (event.ext[Extensions.DeviceExt] && Object.keys(event.ext[Extensions.DeviceExt]).length === 0) {\r\n            delete event.ext[Extensions.DeviceExt];\r\n        }\r\n        if (event.ext[Extensions.UserExt] && Object.keys(event.ext[Extensions.UserExt]).length === 0) {\r\n            delete event.ext[Extensions.UserExt];\r\n        }\r\n        if (event.ext[Extensions.WebExt] && Object.keys(event.ext[Extensions.WebExt]).length === 0) {\r\n            delete event.ext[Extensions.WebExt];\r\n        }\r\n        if (event.ext[Extensions.OSExt] && Object.keys(event.ext[Extensions.OSExt]).length === 0) {\r\n            delete event.ext[Extensions.OSExt];\r\n        }\r\n        if (event.ext[Extensions.AppExt] && Object.keys(event.ext[Extensions.AppExt]).length === 0) {\r\n            delete event.ext[Extensions.AppExt];\r\n        }\r\n        if (event.ext[Extensions.TraceExt] && Object.keys(event.ext[Extensions.TraceExt]).length === 0) {\r\n            delete event.ext[Extensions.TraceExt];\r\n        }\r\n    };\r\n    return TelemetryContext;\r\n}());\r\nexport { TelemetryContext };\r\n//# sourceMappingURL=TelemetryContext.js.map","/**\r\n * PropertiesPlugin.ts\r\n * @copyright Microsoft 2018\r\n */\r\nimport { CoreUtils } from '@microsoft/applicationinsights-core-js';\r\nimport { TelemetryContext } from './TelemetryContext';\r\nimport { PageView, ConfigurationManager, PropertiesPluginIdentifier, Extensions } from '@microsoft/applicationinsights-common';\r\nvar PropertiesPlugin = /** @class */ (function () {\r\n    function PropertiesPlugin() {\r\n        this.priority = 170;\r\n        this.identifier = PropertiesPluginIdentifier;\r\n    }\r\n    PropertiesPlugin.getDefaultConfig = function () {\r\n        var defaultConfig = {\r\n            instrumentationKey: function () { return undefined; },\r\n            accountId: function () { return null; },\r\n            sessionRenewalMs: function () { return 30 * 60 * 1000; },\r\n            samplingPercentage: function () { return 100; },\r\n            sessionExpirationMs: function () { return 24 * 60 * 60 * 1000; },\r\n            cookieDomain: function () { return null; },\r\n            sdkExtension: function () { return null; },\r\n            isBrowserLinkTrackingEnabled: function () { return false; },\r\n            appId: function () { return null; },\r\n            namePrefix: function () { return undefined; }\r\n        };\r\n        return defaultConfig;\r\n    };\r\n    PropertiesPlugin.prototype.initialize = function (config, core, extensions) {\r\n        var _this = this;\r\n        var defaultConfig = PropertiesPlugin.getDefaultConfig();\r\n        this._extensionConfig = this._extensionConfig || PropertiesPlugin.getDefaultConfig();\r\n        var _loop_1 = function (field) {\r\n            this_1._extensionConfig[field] = function () { return ConfigurationManager.getConfig(config, field, _this.identifier, defaultConfig[field]()); };\r\n        };\r\n        var this_1 = this;\r\n        for (var field in defaultConfig) {\r\n            _loop_1(field);\r\n        }\r\n        this._logger = core.logger;\r\n        this.context = new TelemetryContext(core.logger, this._extensionConfig);\r\n    };\r\n    /**\r\n     * Add Part A fields to the event\r\n     * @param event The event that needs to be processed\r\n     */\r\n    PropertiesPlugin.prototype.processTelemetry = function (event) {\r\n        if (CoreUtils.isNullOrUndefined(event)) {\r\n            // TODO(barustum): throw an internal event once we have support for internal logging\r\n        }\r\n        else {\r\n            // if the event is not sampled in, do not bother going through the pipeline\r\n            if (this.context.sample.isSampledIn(event)) {\r\n                // If the envelope is PageView, reset the internal message count so that we can send internal telemetry for the new page.\r\n                if (event.name === PageView.envelopeType) {\r\n                    this._logger.resetInternalMessageCount();\r\n                }\r\n                if (this.context.session) {\r\n                    // If customer did not provide custom session id update the session manager\r\n                    if (typeof this.context.session.id !== \"string\") {\r\n                        this.context.sessionManager.update();\r\n                    }\r\n                }\r\n                this._processTelemetryInternal(event);\r\n            }\r\n            if (!CoreUtils.isNullOrUndefined(this._nextPlugin)) {\r\n                this._nextPlugin.processTelemetry(event);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the next plugin that comes after this plugin\r\n     * @param nextPlugin The next plugin\r\n     */\r\n    PropertiesPlugin.prototype.setNextPlugin = function (nextPlugin) {\r\n        this._nextPlugin = nextPlugin;\r\n    };\r\n    PropertiesPlugin.prototype._processTelemetryInternal = function (event) {\r\n        // set part A  fields\r\n        if (!event.tags) {\r\n            event.tags = [];\r\n        }\r\n        if (!event.ext) {\r\n            event.ext = {};\r\n        }\r\n        event.ext[Extensions.DeviceExt] = event.ext[Extensions.DeviceExt] || {};\r\n        event.ext[Extensions.WebExt] = event.ext[Extensions.WebExt] || {};\r\n        event.ext[Extensions.UserExt] = event.ext[Extensions.UserExt] || {};\r\n        event.ext[Extensions.OSExt] = event.ext[Extensions.OSExt] || {};\r\n        event.ext[Extensions.AppExt] = event.ext[Extensions.AppExt] || {};\r\n        event.ext[Extensions.TraceExt] = event.ext[Extensions.TraceExt] || {};\r\n        this.context.applySessionContext(event);\r\n        this.context.applyApplicationContext(event);\r\n        this.context.applyDeviceContext(event);\r\n        this.context.applyOperationContext(event);\r\n        this.context.applyUserContext(event);\r\n        this.context.applyOperatingSystemContxt(event);\r\n        this.context.applyWebContext(event);\r\n        this.context.applyLocationContext(event); // legacy tags\r\n        this.context.applySampleContext(event); // legacy tags\r\n        this.context.applyInternalContext(event); // legacy tags\r\n        this.context.cleanUp(event);\r\n    };\r\n    return PropertiesPlugin;\r\n}());\r\nexport default PropertiesPlugin;\r\n//# sourceMappingURL=PropertiesPlugin.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport { Util, CorrelationIdHelper, UrlHelper, DateTimeUtils } from './Util';\r\nexport { FieldType } from './Enums';\r\nexport { RequestHeaders } from './RequestResponseHeaders';\r\nexport { DisabledPropertyName, ProcessLegacy, SampleRate, HttpMethod } from './Constants';\r\nexport { Data as AIData } from './Interfaces/Contracts/Generated/Data';\r\nexport { Base as AIBase } from './Interfaces/Contracts/Generated/Base';\r\nexport { Envelope } from './Telemetry/Common/Envelope';\r\nexport { Event } from './Telemetry/Event';\r\nexport { Exception } from './Telemetry/Exception';\r\nexport { Metric } from './Telemetry/Metric';\r\nexport { PageView } from './Telemetry/PageView';\r\nexport { PageViewData } from './Interfaces/Contracts/Generated/PageViewData';\r\nexport { RemoteDependencyData } from './Telemetry/RemoteDependencyData';\r\nexport { Trace } from './Telemetry/Trace';\r\nexport { PageViewPerformance } from './Telemetry/PageViewPerformance';\r\nexport { Data } from './Telemetry/Common/Data';\r\nexport { SeverityLevel } from './Interfaces/Contracts/Generated/SeverityLevel';\r\nexport { ConfigurationManager } from './Interfaces/IConfig';\r\nexport { ContextTagKeys } from './Interfaces/Contracts/Generated/ContextTagKeys';\r\nexport { DataSanitizer } from './Telemetry/Common/DataSanitizer';\r\nexport { TelemetryItemCreator } from './TelemetryItemCreator';\r\nexport { CtxTagKeys, Extensions, SDKExtensionKeys } from './Interfaces/PartAExtensions';\r\nexport var PropertiesPluginIdentifier = \"AppInsightsPropertiesPlugin\";\r\n//# sourceMappingURL=applicationinsights-common.js.map"],"names":["LoggingSeverity","CoreUtils","isNullOrUndefined","input","newGuid","replace","GuidRegex","c","r","Math","random","toString","StorageType","FieldType","_InternalMessageId","_InternalLogMessage","msgId","msg","isUserAct","properties","this","messageId","message","AiUserActionablePrefix","AiNonUserActionablePrefix","diagnosticText","sanitizeDiagnosticText","JSON","stringify","text","dataType","DiagnosticLogger","config","AIInternalMessagePrefix","enableDebugExceptions","consoleLoggingLevel","telemetryLoggingLevel","maxInternalMessageLimit","queue","_messageCount","_messageLogged","loggingLevelConsole","loggingLevelTelemetry","maxMessageLimit","prototype","throwInternal","severity","messageKey","WARNING","warnToConsole","logInternalMessage","console","warn","log","resetInternalMessageCount","_areInternalMessagesThrottled","logMessage","push","throttleLimitMessage","throttleMessage","ChannelControllerPriority","ChannelController","identifier","priority","processTelemetry","item","channelQueue","forEach","queues","length","Object","defineProperty","get","enumerable","configurable","initialize","core","extensions","_this","Array","channels","invalidChannelIdentifier_1","undefined","sort","a","b","queueItem","Error","ChannelValidationMessage","i","setNextPlugin","arr","plugin","DataSanitizer","sanitizeKeyAndAddUniqueness","logger","key","map","origLength","field","sanitizeKey","uniqueField","substring","MAX_NAME_LENGTH","padNumber","name","trim","sanitizeString","value","maxLength","MAX_STRING_LENGTH","sanitizeUrl","url","sanitizeInput","MAX_URL_LENGTH","sanitizeMessage","MAX_MESSAGE_LENGTH","sanitizeException","exception","MAX_EXCEPTION_LENGTH","sanitizeProperties","tempProps","prop","e","MAX_PROPERTY_LENGTH","sanitizeMeasurements","measurements","tempMeasurements","measure","sanitizeId","id","MAX_ID_LENGTH","_msgId","data","num","s","substr","str","Util","disableStorage","_canUseLocalStorage","_canUseSessionStorage","_getLocalStorageObject","canUseLocalStorage","_getVerifiedStorageObject","LocalStorage","storageType","fail","uid","storage","window","Date","localStorage","sessionStorage","setItem","getItem","removeItem","isInternalApplicationInsightsEndpoint","endpointUrl","_internalEndpoints","indexOf","toLowerCase","getStorage","getExceptionName","dump","setStorage","removeStorage","_getSessionStorageObject","canUseSessionStorage","SessionStorage","getSessionStorageKeys","keys","getSessionStorage","setSessionStorage","removeSessionStorage","disableCookies","_canUseCookies","canUseCookies","document","cookie","setCookie","domain","domainAttrib","secureAttrib","location","protocol","stringToBoolOrDefault","defaultValue","getCookie","cookieName","cookies","split","deleteCookie","newId","result","charAt","floor","isArray","obj","call","isError","isDate","toISOStringForIE8","date","toISOString","pad","String","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","slice","getIEVersion","userAgentStr","myNav","navigator","userAgent","parseInt","msToTimeSpan","totalms","isNaN","ms","round","sec","min","hour","days","isCrossOriginError","lineNumber","columnNumber","error","object","objectTypeDump","propertyValueDump","stack","addEventHandler","eventName","callback","verbEventName","addEventListener","IsBeaconApiSupported","sendBeacon","NotSpecified","UrlHelper","parseUrl","htmlAnchorElement","createElement","href","getAbsoluteUrl","getPathName","pathname","getCompleteUrl","method","absoluteUrl","toUpperCase","AjaxHelper","ParseDependencyPath","commandName","target","parsedUrl","host","pathName","DateTimeUtils","Now","getTime","performance","now","timing","navigationStart","GetDuration","start","end","extendStatics","d","setPrototypeOf","__proto__","p","hasOwnProperty","__extends","__","constructor","create","DataPointType","Data","_super","tslib_1.__extends","Domain","Envelope","time","aiDataContract","Required","iKey","sampleRate","Hidden","tags","ver","EventData","StackFrame","Event","Default","envelopeType","ExceptionDetails","hasFullStack","parsedStack","_ExceptionDetails","Exception","severityLevel","exceptions","CreateSimpleException","typeName","assembly","fileName","details","line","ExceptionData","outerId","parseStack","frames","level","totalSizeInBytes","frame","_StackFrame","regex","test","parsedFrame","sizeInBytes","left","right","size","acceptedLeft","acceptedRight","howMany","splice","matches","match","baseSize","MetricData","metrics","SeverityLevel","DataPoint","apply","arguments","kind","count","max","stdDev","Measurement","PageViewData","Metric","dataPoint","PageView","durationMs","duration","RemoteDependencyData","success","resultCode","requestAPI","type","dependencyKind","dependencySource","dependencyTypeName","dependencyFields","Trace","MessageData","PageViewPerformance","unused","perfTotal","networkConnect","sentRequest","receivedResponse","domProcessing","PageViewPerfData","baseType","baseData","AIData","ConfigurationManager","getConfig","configValue","extensionConfig","ContextTagKeys","applicationVersion","applicationBuild","applicationTypeId","applicationId","applicationLayer","deviceId","deviceIp","deviceLanguage","deviceLocale","deviceModel","deviceFriendlyName","deviceNetwork","deviceNetworkName","deviceOEMName","deviceOS","deviceOSVersion","deviceRoleInstance","deviceRoleName","deviceScreenResolution","deviceType","deviceMachineName","deviceVMName","deviceBrowser","deviceBrowserVersion","locationIp","locationCountry","locationProvince","locationCity","operationId","operationName","operationParentId","operationRootId","operationSyntheticSource","operationCorrelationVector","sessionId","sessionIsFirst","sessionIsNew","userAccountAcquisitionDate","userAccountId","userId","userStoreRegion","userAuthUserId","userAnonymousUserAcquisitionDate","userAuthenticatedUserAcquisitionDate","cloudName","cloudRole","cloudRoleVer","cloudRoleInstance","cloudEnvironment","cloudLocation","cloudDeploymentUnit","internalNodeName","internalSdkVersion","internalAgentVersion","Extensions","UserExt","DeviceExt","TraceExt","WebExt","AppExt","OSExt","SessionExt","SDKExt","SDKExtensionKeys","libVer","CtxTagKeys","Session","_SessionManager","_logger","sessionExpirationMs","acquisitionSpan","sessionRenewalMs","renewalSpan","_storageNamePrefix","namePrefix","cookieNameConst","automaticSession","update","initializeAutomaticSession","acquisitionExpired","acquisitionDate","renewalExpired","renewalDate","renew","cookieUpdatedTimestamp","cookieUpdateInterval","backup","initializeAutomaticSessionWithData","sessionData","params","acq","renewal","CRITICAL","guid","acquisitionExpiry","renewalExpiry","cookieExpiry","setTime","cookieDomnain","cookieDomain","join","toUTCString","Application","Device","deviceClass","Internal","sdkVersion","sdkExtension","HashCodeScoreGenerator","getHashCodeScore","getHashCode","INT_MAX_VALUE","MIN_INPUT_LENGTH","concat","hash","charCodeAt","abs","SamplingScoreGenerator","hashCodeGeneragor","getSamplingScore","envelope","tagKeys","Sample","samplingRate","samplingScoreGenerator","isSampledIn","User","userCookieName","cookieSeparator","acqStr","accountAcquisitionDate","newCookie","name_1","accountId","authCookie","authUserCookieName","authCookieString","decodeURI","authenticatedId","setAuthenticatedUserContext","authenticatedUserId","storeInCookie","validateUserInput","encodeURI","clearAuthenticatedUserContext","Location","TelemetryTrace","parentId","traceID","parentID","TelemetryContext","defaultConfig","sessionManager","application","device","internal","user","telemetryTrace","session","sample","samplingPercentage","applySessionContext","event","sessionContext","ext","app","sesId","applyOperatingSystemContxt","os","applyApplicationContext","_a","_b","build","applyDeviceContext","localId","ip","model","applyInternalContext","_c","agentVersion","applyLocationContext","applySampleContext","SampleRate","applyOperationContext","trace","applyWebContext","web","applyUserContext","authId","cleanUp","PropertiesPlugin","getDefaultConfig","instrumentationKey","isBrowserLinkTrackingEnabled","appId","_extensionConfig","_loop_1","this_1","context","_processTelemetryInternal","_nextPlugin","nextPlugin"],"mappings":"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"}
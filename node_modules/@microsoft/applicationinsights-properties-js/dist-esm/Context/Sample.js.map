{"version":3,"file":"Sample.js","sourceRoot":"","sources":["../../src/Context/Sample.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EAAE,sBAAsB,EAAE,MAAM,2BAA2B,CAAC;AAGnE,OAAO,EAAqC,kBAAkB,EAAE,eAAe,EAAE,gBAAgB,EAAE,SAAS,EAAE,MAAM,wCAAwC,CAAC;AAE7J;IAQI,gBAAY,UAAkB,EAAE,MAA0B;QAH1D,yDAAyD;QAClD,kBAAa,GAAW,UAAU,CAAC;QAGtC,EAAE,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,OAAO,GAAG,IAAI,gBAAgB,EAAE,CAAC;QAC1C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAC1B,CAAC;QACD,EAAE,CAAC,CAAC,UAAU,GAAG,GAAG,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,OAAO,EAC9C,kBAAkB,CAAC,oBAAoB,EACvC,6IAA6I,EAC7I,EAAE,YAAY,EAAE,UAAU,EAAE,EAAE,IAAI,CAAC,CAAC;YACxC,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;QAC1B,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC;IAC/D,CAAC;IAED;;MAEE;IACK,4BAAW,GAAlB,UAAmB,QAAwB;QACvC,2DAA2D;QAC3D,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACL,aAAC;AAAD,CAAC,AAjCD,IAiCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { SamplingScoreGenerator } from '../SamplingScoreGenerator';\r\nimport { ISample } from '@microsoft/applicationinsights-common';\r\nimport { IEnvelope } from '@microsoft/applicationinsights-common';\r\nimport { ITelemetryItem, IDiagnosticLogger, _InternalMessageId, LoggingSeverity, DiagnosticLogger, CoreUtils } from '@microsoft/applicationinsights-core-js';\r\n\r\nexport class Sample implements ISample {\r\n    public sampleRate: number;\r\n    private samplingScoreGenerator: SamplingScoreGenerator;\r\n    private _logger: IDiagnosticLogger;\r\n\r\n    // We're using 32 bit math, hence max value is (2^31 - 1)\r\n    public INT_MAX_VALUE: number = 2147483647;\r\n\r\n    constructor(sampleRate: number, logger?: IDiagnosticLogger) {\r\n        if (CoreUtils.isNullOrUndefined(logger)) {\r\n            this._logger = new DiagnosticLogger();\r\n        } else {\r\n            this._logger = logger;\r\n        }\r\n        if (sampleRate > 100 || sampleRate < 0) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING,\r\n                _InternalMessageId.SampleRateOutOfRange,\r\n                \"Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.\",\r\n                { samplingRate: sampleRate }, true);\r\n            this.sampleRate = 100;\r\n        }\r\n\r\n        this.sampleRate = sampleRate;\r\n        this.samplingScoreGenerator = new SamplingScoreGenerator();\r\n    }\r\n\r\n    /**\r\n    * Determines if an envelope is sampled in (i.e. will be sent) or not (i.e. will be dropped).\r\n    */\r\n    public isSampledIn(envelope: ITelemetryItem): boolean {\r\n        // return true as sampling will move to different extension\r\n        return true;\r\n    }\r\n}"]}
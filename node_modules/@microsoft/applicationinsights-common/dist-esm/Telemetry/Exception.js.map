{"version":3,"file":"Exception.js","sourceRoot":"","sources":["../../src/Telemetry/Exception.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { StackFrame } from '../Interfaces/Contracts/Generated/StackFrame';\r\nimport { ExceptionData } from '../Interfaces/Contracts/Generated/ExceptionData';\r\nimport { ExceptionDetails } from '../Interfaces/Contracts/Generated/ExceptionDetails';\r\nimport { ISerializable } from '../Interfaces/Telemetry/ISerializable';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { SeverityLevel } from '../Interfaces/Contracts/Generated/SeverityLevel';\r\nimport { Util } from '../Util';\r\nimport { IDiagnosticLogger } from '@microsoft/applicationinsights-core-js';\r\n\r\nexport class Exception extends ExceptionData implements ISerializable {\r\n\r\n    public static envelopeType = \"Microsoft.ApplicationInsights.{0}.Exception\";\r\n    public static dataType = \"ExceptionData\";\r\n\r\n\r\n    public aiDataContract = {\r\n        ver: FieldType.Required,\r\n        exceptions: FieldType.Required,\r\n        severityLevel: FieldType.Default,\r\n        properties: FieldType.Default,\r\n        measurements: FieldType.Default\r\n    }\r\n\r\n    /**\r\n    * Constructs a new isntance of the ExceptionTelemetry object\r\n    */\r\n    constructor(logger: IDiagnosticLogger, exception: Error, properties?: {[key: string]: string}, measurements?: {[key: string]: number}, severityLevel?: SeverityLevel) {\r\n        super();\r\n\r\n        this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\r\n\r\n        this.exceptions = [new _ExceptionDetails(logger, exception)];\r\n\r\n        if (severityLevel) {\r\n            this.severityLevel = severityLevel;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * Creates a simple exception with 1 stack frame. Useful for manual constracting of exception.\r\n    */\r\n    public static CreateSimpleException(message: string, typeName: string, assembly: string, fileName: string,\r\n        details: string, line: number): Exception {\r\n\r\n        return <Exception>{\r\n            exceptions: [\r\n                <ExceptionDetails>{\r\n                    hasFullStack: true,\r\n                    message: message,\r\n                    stack: details,\r\n                    typeName: typeName\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n\r\nclass _ExceptionDetails extends ExceptionDetails implements ISerializable {\r\n\r\n    public aiDataContract = {\r\n        id: FieldType.Default,\r\n        outerId: FieldType.Default,\r\n        typeName: FieldType.Required,\r\n        message: FieldType.Required,\r\n        hasFullStack: FieldType.Default,\r\n        stack: FieldType.Default,\r\n        parsedStack: FieldType.Array\r\n    };\r\n\r\n    constructor(logger: IDiagnosticLogger, exception: Error) {\r\n        super();\r\n        this.typeName = DataSanitizer.sanitizeString(logger, exception.name) || Util.NotSpecified;\r\n        this.message = DataSanitizer.sanitizeMessage(logger, exception.message) || Util.NotSpecified;\r\n        var stack = exception[\"stack\"];\r\n        this.parsedStack = this.parseStack(stack);\r\n        this.stack = DataSanitizer.sanitizeException(logger, stack);\r\n        this.hasFullStack = Util.isArray(this.parsedStack) && this.parsedStack.length > 0;\r\n    }\r\n\r\n    private parseStack(stack): _StackFrame[] {\r\n        var parsedStack: _StackFrame[] = undefined;\r\n        if (typeof stack === \"string\") {\r\n            var frames = stack.split('\\n');\r\n            parsedStack = [];\r\n            var level = 0;\r\n\r\n            var totalSizeInBytes = 0;\r\n            for (var i = 0; i <= frames.length; i++) {\r\n                var frame = frames[i];\r\n                if (_StackFrame.regex.test(frame)) {\r\n                    var parsedFrame = new _StackFrame(frames[i], level++);\r\n                    totalSizeInBytes += parsedFrame.sizeInBytes;\r\n                    parsedStack.push(parsedFrame);\r\n                }\r\n            }\r\n\r\n            // DP Constraint - exception parsed stack must be < 32KB\r\n            // remove frames from the middle to meet the threshold\r\n            var exceptionParsedStackThreshold = 32 * 1024;\r\n            if (totalSizeInBytes > exceptionParsedStackThreshold) {\r\n                var left = 0;\r\n                var right = parsedStack.length - 1;\r\n                var size = 0;\r\n                var acceptedLeft = left;\r\n                var acceptedRight = right;\r\n\r\n                while (left < right) {\r\n                    // check size\r\n                    var lSize = parsedStack[left].sizeInBytes;\r\n                    var rSize = parsedStack[right].sizeInBytes;\r\n                    size += lSize + rSize;\r\n\r\n                    if (size > exceptionParsedStackThreshold) {\r\n\r\n                        // remove extra frames from the middle\r\n                        var howMany = acceptedRight - acceptedLeft + 1;\r\n                        parsedStack.splice(acceptedLeft, howMany);\r\n                        break;\r\n                    }\r\n\r\n                    // update pointers\r\n                    acceptedLeft = left;\r\n                    acceptedRight = right;\r\n\r\n                    left++;\r\n                    right--;\r\n                }\r\n            }\r\n        }\r\n\r\n        return parsedStack;\r\n    }\r\n}\r\n\r\nexport class _StackFrame extends StackFrame implements ISerializable {\r\n\r\n    // regex to match stack frames from ie/chrome/ff\r\n    // methodName=$2, fileName=$4, lineNo=$5, column=$6\r\n    public static regex = /^([\\s]+at)?(.*?)(\\@|\\s\\(|\\s)([^\\(\\@\\n]+):([0-9]+):([0-9]+)(\\)?)$/;\r\n    public static baseSize = 58; //'{\"method\":\"\",\"level\":,\"assembly\":\"\",\"fileName\":\"\",\"line\":}'.length\r\n    public sizeInBytes = 0;\r\n\r\n    public aiDataContract = {\r\n        level: FieldType.Required,\r\n        method: FieldType.Required,\r\n        assembly: FieldType.Default,\r\n        fileName: FieldType.Default,\r\n        line: FieldType.Default\r\n    };\r\n\r\n    constructor(frame: string, level: number) {\r\n        super();\r\n        this.level = level;\r\n        this.method = \"<no_method>\";\r\n        this.assembly = Util.trim(frame);\r\n        var matches = frame.match(_StackFrame.regex);\r\n        if (matches && matches.length >= 5) {\r\n            this.method = Util.trim(matches[2]) || this.method;\r\n            this.fileName = Util.trim(matches[4]);\r\n            this.line = parseInt(matches[5]) || 0;\r\n        }\r\n\r\n        this.sizeInBytes += this.method.length;\r\n        this.sizeInBytes += this.fileName.length;\r\n        this.sizeInBytes += this.assembly.length;\r\n\r\n        // todo: these might need to be removed depending on how the back-end settles on their size calculation\r\n        this.sizeInBytes += _StackFrame.baseSize;\r\n        this.sizeInBytes += this.level.toString().length;\r\n        this.sizeInBytes += this.line.toString().length;\r\n    }\r\n}\r\n"]}
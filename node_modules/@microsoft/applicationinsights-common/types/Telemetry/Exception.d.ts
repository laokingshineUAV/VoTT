import { StackFrame } from '../Interfaces/Contracts/Generated/StackFrame';
import { ExceptionData } from '../Interfaces/Contracts/Generated/ExceptionData';
import { ISerializable } from '../Interfaces/Telemetry/ISerializable';
import { FieldType } from '../Enums';
import { SeverityLevel } from '../Interfaces/Contracts/Generated/SeverityLevel';
import { IDiagnosticLogger } from '@microsoft/applicationinsights-core-js';
export declare class Exception extends ExceptionData implements ISerializable {
    static envelopeType: string;
    static dataType: string;
    aiDataContract: {
        ver: FieldType;
        exceptions: FieldType;
        severityLevel: FieldType;
        properties: FieldType;
        measurements: FieldType;
    };
    /**
    * Constructs a new isntance of the ExceptionTelemetry object
    */
    constructor(logger: IDiagnosticLogger, exception: Error, properties?: {
        [key: string]: string;
    }, measurements?: {
        [key: string]: number;
    }, severityLevel?: SeverityLevel);
    /**
    * Creates a simple exception with 1 stack frame. Useful for manual constracting of exception.
    */
    static CreateSimpleException(message: string, typeName: string, assembly: string, fileName: string, details: string, line: number): Exception;
}
export declare class _StackFrame extends StackFrame implements ISerializable {
    static regex: RegExp;
    static baseSize: number;
    sizeInBytes: number;
    aiDataContract: {
        level: FieldType;
        method: FieldType;
        assembly: FieldType;
        fileName: FieldType;
        line: FieldType;
    };
    constructor(frame: string, level: number);
}

{"version":3,"file":"applicationinsights-core-js.min.js","sources":["../dist-esm/JavaScriptSDK.Enums/LoggingEnums.js","../dist-esm/JavaScriptSDK.Enums/EventsDiscardedReason.js","../dist-esm/JavaScriptSDK/CoreUtils.js","../dist-esm/JavaScriptSDK/NotificationManager.js","../dist-esm/JavaScriptSDK/DiagnosticLogger.js","../dist-esm/JavaScriptSDK/AppInsightsCore.js","../dist-esm/JavaScriptSDK.Interfaces/IChannelControls.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport var LoggingSeverity;\r\n(function (LoggingSeverity) {\r\n    /**\r\n     * Error will be sent as internal telemetry\r\n     */\r\n    LoggingSeverity[LoggingSeverity[\"CRITICAL\"] = 1] = \"CRITICAL\";\r\n    /**\r\n     * Error will NOT be sent as internal telemetry, and will only be shown in browser console\r\n     */\r\n    LoggingSeverity[LoggingSeverity[\"WARNING\"] = 2] = \"WARNING\";\r\n})(LoggingSeverity || (LoggingSeverity = {}));\r\n/**\r\n * Internal message ID. Please create a new one for every conceptually different message. Please keep alphabetically ordered\r\n */\r\nexport var _InternalMessageId = {\r\n    // Non user actionable\r\n    BrowserDoesNotSupportLocalStorage: 0,\r\n    BrowserCannotReadLocalStorage: 1,\r\n    BrowserCannotReadSessionStorage: 2,\r\n    BrowserCannotWriteLocalStorage: 3,\r\n    BrowserCannotWriteSessionStorage: 4,\r\n    BrowserFailedRemovalFromLocalStorage: 5,\r\n    BrowserFailedRemovalFromSessionStorage: 6,\r\n    CannotSendEmptyTelemetry: 7,\r\n    ClientPerformanceMathError: 8,\r\n    ErrorParsingAISessionCookie: 9,\r\n    ErrorPVCalc: 10,\r\n    ExceptionWhileLoggingError: 11,\r\n    FailedAddingTelemetryToBuffer: 12,\r\n    FailedMonitorAjaxAbort: 13,\r\n    FailedMonitorAjaxDur: 14,\r\n    FailedMonitorAjaxOpen: 15,\r\n    FailedMonitorAjaxRSC: 16,\r\n    FailedMonitorAjaxSend: 17,\r\n    FailedMonitorAjaxGetCorrelationHeader: 18,\r\n    FailedToAddHandlerForOnBeforeUnload: 19,\r\n    FailedToSendQueuedTelemetry: 20,\r\n    FailedToReportDataLoss: 21,\r\n    FlushFailed: 22,\r\n    MessageLimitPerPVExceeded: 23,\r\n    MissingRequiredFieldSpecification: 24,\r\n    NavigationTimingNotSupported: 25,\r\n    OnError: 26,\r\n    SessionRenewalDateIsZero: 27,\r\n    SenderNotInitialized: 28,\r\n    StartTrackEventFailed: 29,\r\n    StopTrackEventFailed: 30,\r\n    StartTrackFailed: 31,\r\n    StopTrackFailed: 32,\r\n    TelemetrySampledAndNotSent: 33,\r\n    TrackEventFailed: 34,\r\n    TrackExceptionFailed: 35,\r\n    TrackMetricFailed: 36,\r\n    TrackPVFailed: 37,\r\n    TrackPVFailedCalc: 38,\r\n    TrackTraceFailed: 39,\r\n    TransmissionFailed: 40,\r\n    FailedToSetStorageBuffer: 41,\r\n    FailedToRestoreStorageBuffer: 42,\r\n    InvalidBackendResponse: 43,\r\n    FailedToFixDepricatedValues: 44,\r\n    InvalidDurationValue: 45,\r\n    TelemetryEnvelopeInvalid: 46,\r\n    CreateEnvelopeError: 47,\r\n    // User actionable\r\n    CannotSerializeObject: 48,\r\n    CannotSerializeObjectNonSerializable: 49,\r\n    CircularReferenceDetected: 50,\r\n    ClearAuthContextFailed: 51,\r\n    ExceptionTruncated: 52,\r\n    IllegalCharsInName: 53,\r\n    ItemNotInArray: 54,\r\n    MaxAjaxPerPVExceeded: 55,\r\n    MessageTruncated: 56,\r\n    NameTooLong: 57,\r\n    SampleRateOutOfRange: 58,\r\n    SetAuthContextFailed: 59,\r\n    SetAuthContextFailedAccountName: 60,\r\n    StringValueTooLong: 61,\r\n    StartCalledMoreThanOnce: 62,\r\n    StopCalledWithoutStart: 63,\r\n    TelemetryInitializerFailed: 64,\r\n    TrackArgumentsNotSpecified: 65,\r\n    UrlTooLong: 66,\r\n    SessionStorageBufferFull: 67,\r\n    CannotAccessCookie: 68,\r\n    IdTooLong: 69,\r\n};\r\n//# sourceMappingURL=LoggingEnums.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * The EventsDiscardedReason enumeration contains a set of values that specify the reason for discarding an event.\r\n */\r\nexport var EventsDiscardedReason = {\r\n    /**\r\n     * Unknown.\r\n     */\r\n    Unknown: 0,\r\n    /**\r\n     * Status set to non-retryable.\r\n     */\r\n    NonRetryableStatus: 1,\r\n    /**\r\n     * The event is invalid.\r\n     */\r\n    InvalidEvent: 2,\r\n    /**\r\n     * The size of the event is too large.\r\n     */\r\n    SizeLimitExceeded: 3,\r\n    /**\r\n     * The server is not accepting events from this instrumentation key.\r\n     */\r\n    KillSwitch: 4,\r\n    /**\r\n     * The event queue is full.\r\n     */\r\n    QueueFull: 5,\r\n};\r\n//# sourceMappingURL=EventsDiscardedReason.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nvar CoreUtils = /** @class */ (function () {\r\n    function CoreUtils() {\r\n    }\r\n    CoreUtils.isNullOrUndefined = function (input) {\r\n        return input === null || input === undefined;\r\n    };\r\n    /**\r\n* Creates a new GUID.\r\n* @return {string} A GUID.\r\n*/\r\n    CoreUtils.newGuid = function () {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(GuidRegex, function (c) {\r\n            // tslint:disable-next-line:insecure-random\r\n            var r = (Math.random() * 16 | 0), v = (c === 'x' ? r : r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    };\r\n    return CoreUtils;\r\n}());\r\nexport { CoreUtils };\r\nvar GuidRegex = /[xy]/g;\r\n//# sourceMappingURL=CoreUtils.js.map","/**\r\n * Class to manage sending notifications to all the listeners.\r\n */\r\nvar NotificationManager = /** @class */ (function () {\r\n    function NotificationManager() {\r\n        this.listeners = [];\r\n    }\r\n    /**\r\n     * Adds a notification listener.\r\n     * @param {INotificationListener} listener - The notification listener to be added.\r\n     */\r\n    NotificationManager.prototype.addNotificationListener = function (listener) {\r\n        this.listeners.push(listener);\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - AWTNotificationListener to remove.\r\n     */\r\n    NotificationManager.prototype.removeNotificationListener = function (listener) {\r\n        var index = this.listeners.indexOf(listener);\r\n        while (index > -1) {\r\n            this.listeners.splice(index, 1);\r\n            index = this.listeners.indexOf(listener);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events sent.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been sent.\r\n     */\r\n    NotificationManager.prototype.eventsSent = function (events) {\r\n        var _this = this;\r\n        var _loop_1 = function (i) {\r\n            if (this_1.listeners[i].eventsSent) {\r\n                setTimeout(function () { return _this.listeners[i].eventsSent(events); }, 0);\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being discarded.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been discarded by the SDK.\r\n     * @param {number} reason           - The reason for which the SDK discarded the events. The EventsDiscardedReason\r\n     * constant should be used to check the different values.\r\n     */\r\n    NotificationManager.prototype.eventsDiscarded = function (events, reason) {\r\n        var _this = this;\r\n        var _loop_2 = function (i) {\r\n            if (this_2.listeners[i].eventsDiscarded) {\r\n                setTimeout(function () { return _this.listeners[i].eventsDiscarded(events, reason); }, 0);\r\n            }\r\n        };\r\n        var this_2 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_2(i);\r\n        }\r\n    };\r\n    return NotificationManager;\r\n}());\r\nexport { NotificationManager };\r\n//# sourceMappingURL=NotificationManager.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nimport { _InternalMessageId, LoggingSeverity } from \"../JavaScriptSDK.Enums/LoggingEnums\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nvar _InternalLogMessage = /** @class */ (function () {\r\n    function _InternalLogMessage(msgId, msg, isUserAct, properties) {\r\n        if (isUserAct === void 0) { isUserAct = false; }\r\n        this.messageId = msgId;\r\n        this.message =\r\n            (isUserAct ? _InternalLogMessage.AiUserActionablePrefix : _InternalLogMessage.AiNonUserActionablePrefix) +\r\n                msgId;\r\n        var diagnosticText = (msg ? \" message:\" + _InternalLogMessage.sanitizeDiagnosticText(msg) : \"\") +\r\n            (properties ? \" props:\" + _InternalLogMessage.sanitizeDiagnosticText(JSON.stringify(properties)) : \"\");\r\n        this.message += diagnosticText;\r\n    }\r\n    _InternalLogMessage.sanitizeDiagnosticText = function (text) {\r\n        return \"\\\"\" + text.replace(/\\\"/g, \"\") + \"\\\"\";\r\n    };\r\n    _InternalLogMessage.dataType = \"MessageData\";\r\n    /**\r\n     * For user non actionable traces use AI Internal prefix.\r\n     */\r\n    _InternalLogMessage.AiNonUserActionablePrefix = \"AI (Internal): \";\r\n    /**\r\n     * Prefix of the traces in portal.\r\n     */\r\n    _InternalLogMessage.AiUserActionablePrefix = \"AI: \";\r\n    return _InternalLogMessage;\r\n}());\r\nexport { _InternalLogMessage };\r\nvar DiagnosticLogger = /** @class */ (function () {\r\n    function DiagnosticLogger(config) {\r\n        /**\r\n        *  Session storage key for the prefix for the key indicating message type already logged\r\n        */\r\n        this.AIInternalMessagePrefix = \"AITR_\";\r\n        /**\r\n         * When this is true the SDK will throw exceptions to aid in debugging.\r\n         */\r\n        this.enableDebugExceptions = function () { return false; };\r\n        /**\r\n         * 0: OFF\r\n         * 1: CRITICAL (default)\r\n         * 2: >= WARNING\r\n         */\r\n        this.consoleLoggingLevel = function () { return 1; };\r\n        /**\r\n         * 0: OFF (default)\r\n         * 1: CRITICAL\r\n         * 2: >= WARNING\r\n         */\r\n        this.telemetryLoggingLevel = function () { return 0; };\r\n        /**\r\n         * The maximum number of internal messages allowed to be sent per page view\r\n         */\r\n        this.maxInternalMessageLimit = function () { return 25; };\r\n        /**\r\n         * The internal logging queue\r\n         */\r\n        this.queue = [];\r\n        /**\r\n         * Count of internal messages sent\r\n         */\r\n        this._messageCount = 0;\r\n        /**\r\n         * Holds information about what message types were already logged to console or sent to server.\r\n         */\r\n        this._messageLogged = {};\r\n        if (CoreUtils.isNullOrUndefined(config)) {\r\n            // TODO: Use default config\r\n            // config = AppInsightsCore.defaultConfig;\r\n            // For now, use defaults specified in DiagnosticLogger members;\r\n            return;\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.loggingLevelConsole)) {\r\n            this.consoleLoggingLevel = function () { return config.loggingLevelConsole; };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.loggingLevelTelemetry)) {\r\n            this.telemetryLoggingLevel = function () { return config.loggingLevelTelemetry; };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.maxMessageLimit)) {\r\n            this.maxInternalMessageLimit = function () { return config.maxMessageLimit; };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.enableDebugExceptions)) {\r\n            this.enableDebugExceptions = function () { return config.enableDebugExceptions; };\r\n        }\r\n    }\r\n    /**\r\n     * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n     * @param severity {LoggingSeverity} - The severity of the log message\r\n     * @param message {_InternalLogMessage} - The log message.\r\n     */\r\n    DiagnosticLogger.prototype.throwInternal = function (severity, msgId, msg, properties, isUserAct) {\r\n        if (isUserAct === void 0) { isUserAct = false; }\r\n        var message = new _InternalLogMessage(msgId, msg, isUserAct, properties);\r\n        if (this.enableDebugExceptions()) {\r\n            throw message;\r\n        }\r\n        else {\r\n            if (typeof (message) !== \"undefined\" && !!message) {\r\n                if (typeof (message.message) !== \"undefined\") {\r\n                    if (isUserAct) {\r\n                        // check if this message type was already logged to console for this page view and if so, don't log it again\r\n                        var messageKey = +message.messageId;\r\n                        if (!this._messageLogged[messageKey] || this.consoleLoggingLevel() >= LoggingSeverity.WARNING) {\r\n                            this.warnToConsole(message.message);\r\n                            this._messageLogged[messageKey] = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // don't log internal AI traces in the console, unless the verbose logging is enabled\r\n                        if (this.consoleLoggingLevel() >= LoggingSeverity.WARNING) {\r\n                            this.warnToConsole(message.message);\r\n                        }\r\n                    }\r\n                    this.logInternalMessage(severity, message);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This will write a warning to the console if possible\r\n     * @param message {string} - The warning message\r\n     */\r\n    DiagnosticLogger.prototype.warnToConsole = function (message) {\r\n        if (typeof console !== \"undefined\" && !!console) {\r\n            if (typeof console.warn === \"function\") {\r\n                console.warn(message);\r\n            }\r\n            else if (typeof console.log === \"function\") {\r\n                console.log(message);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Resets the internal message count\r\n     */\r\n    DiagnosticLogger.prototype.resetInternalMessageCount = function () {\r\n        this._messageCount = 0;\r\n        this._messageLogged = {};\r\n    };\r\n    /**\r\n     * Logs a message to the internal queue.\r\n     * @param severity {LoggingSeverity} - The severity of the log message\r\n     * @param message {_InternalLogMessage} - The message to log.\r\n     */\r\n    DiagnosticLogger.prototype.logInternalMessage = function (severity, message) {\r\n        if (this._areInternalMessagesThrottled()) {\r\n            return;\r\n        }\r\n        // check if this message type was already logged for this session and if so, don't log it again\r\n        var logMessage = true;\r\n        var messageKey = this.AIInternalMessagePrefix + message.messageId;\r\n        // if the session storage is not available, limit to only one message type per page view\r\n        if (this._messageLogged[messageKey]) {\r\n            logMessage = false;\r\n        }\r\n        else {\r\n            this._messageLogged[messageKey] = true;\r\n        }\r\n        if (logMessage) {\r\n            // Push the event in the internal queue\r\n            if (severity <= this.telemetryLoggingLevel()) {\r\n                this.queue.push(message);\r\n                this._messageCount++;\r\n            }\r\n            // When throttle limit reached, send a special event\r\n            if (this._messageCount == this.maxInternalMessageLimit()) {\r\n                var throttleLimitMessage = \"Internal events throttle limit per PageView reached for this app.\";\r\n                var throttleMessage = new _InternalLogMessage(_InternalMessageId.MessageLimitPerPVExceeded, throttleLimitMessage, false);\r\n                this.queue.push(throttleMessage);\r\n                this.warnToConsole(throttleLimitMessage);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Indicates whether the internal events are throttled\r\n     */\r\n    DiagnosticLogger.prototype._areInternalMessagesThrottled = function () {\r\n        return this._messageCount >= this.maxInternalMessageLimit();\r\n    };\r\n    return DiagnosticLogger;\r\n}());\r\nexport { DiagnosticLogger };\r\n//# sourceMappingURL=DiagnosticLogger.js.map","import { EventsDiscardedReason } from \"../JavaScriptSDK.Enums/EventsDiscardedReason\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { NotificationManager } from \"./NotificationManager\";\r\nimport { _InternalLogMessage, DiagnosticLogger } from \"./DiagnosticLogger\";\r\n\"use strict\";\r\nvar AppInsightsCore = /** @class */ (function () {\r\n    function AppInsightsCore() {\r\n        this._isInitialized = false;\r\n        this._extensions = new Array();\r\n        this._channelController = new ChannelController();\r\n    }\r\n    AppInsightsCore.prototype.initialize = function (config, extensions) {\r\n        var _this = this;\r\n        // Make sure core is only initialized once\r\n        if (this._isInitialized) {\r\n            throw Error(\"Core should not be initialized more than once\");\r\n        }\r\n        if (!config || CoreUtils.isNullOrUndefined(config.instrumentationKey)) {\r\n            throw Error(\"Please provide instrumentation key\");\r\n        }\r\n        this.config = config;\r\n        this._notificationManager = new NotificationManager();\r\n        this.config.extensions = CoreUtils.isNullOrUndefined(this.config.extensions) ? [] : this.config.extensions;\r\n        // add notification to the extensions in the config so other plugins can access it\r\n        this.config.extensionConfig = CoreUtils.isNullOrUndefined(this.config.extensionConfig) ? {} : this.config.extensionConfig;\r\n        this.config.extensionConfig.NotificationManager = this._notificationManager;\r\n        this.logger = new DiagnosticLogger(config);\r\n        // Initial validation\r\n        extensions.forEach(function (extension) {\r\n            if (CoreUtils.isNullOrUndefined(extension.initialize)) {\r\n                throw Error(validationError);\r\n            }\r\n        });\r\n        if (this.config.extensions.length > 0) {\r\n            var isValid_1 = true;\r\n            var containsChannels_1 = false;\r\n            this.config.extensions.forEach(function (item) {\r\n                if (CoreUtils.isNullOrUndefined(item)) {\r\n                    isValid_1 = false;\r\n                }\r\n                if (item.priority > ChannelControllerPriority) {\r\n                    containsChannels_1 = true;\r\n                }\r\n            });\r\n            if (!isValid_1) {\r\n                throw Error(validationError);\r\n            }\r\n            if (containsChannels_1) {\r\n                throw Error(validationErrorInExt);\r\n            }\r\n        }\r\n        // Initial validation complete\r\n        // Concat all available extensions before sorting by priority\r\n        (_a = this._extensions).push.apply(_a, [this._channelController].concat(extensions, this.config.extensions));\r\n        this._extensions = this._extensions.sort(function (a, b) {\r\n            var extA = a;\r\n            var extB = b;\r\n            var typeExtA = typeof extA.processTelemetry;\r\n            var typeExtB = typeof extB.processTelemetry;\r\n            if (typeExtA === 'function' && typeExtB === 'function') {\r\n                return extA.priority - extB.priority;\r\n            }\r\n            if (typeExtA === 'function' && typeExtB !== 'function') {\r\n                // keep non telemetryplugin specific extensions at start\r\n                return 1;\r\n            }\r\n            if (typeExtA !== 'function' && typeExtB === 'function') {\r\n                return -1;\r\n            }\r\n        });\r\n        // sort complete\r\n        // Check if any two extensions have the same priority, then warn to console\r\n        var priority = {};\r\n        this._extensions.forEach(function (ext) {\r\n            var t = ext;\r\n            if (t && t.priority) {\r\n                if (!CoreUtils.isNullOrUndefined(priority[t.priority])) {\r\n                    _this.logger.warnToConsole(\"Two extensions have same priority\" + priority[t.priority] + \", \" + t.identifier);\r\n                }\r\n                else {\r\n                    priority[t.priority] = t.identifier; // set a value\r\n                }\r\n            }\r\n        });\r\n        var c = -1;\r\n        // Set next plugin for all until channel controller\r\n        for (var idx = 0; idx < this._extensions.length - 1; idx++) {\r\n            var curr = (this._extensions[idx]);\r\n            if (curr && typeof curr.processTelemetry !== 'function') {\r\n                // these are initialized only, allowing an entry point for extensions to be initialized when SDK initializes\r\n                continue;\r\n            }\r\n            if (curr.priority === ChannelControllerPriority) {\r\n                c = idx + 1;\r\n                break; // channel controller will set remaining pipeline\r\n            }\r\n            this._extensions[idx].setNextPlugin(this._extensions[idx + 1]); // set next plugin\r\n        }\r\n        // initialize channel controller first, this will initialize all channel plugins\r\n        this._channelController.initialize(this.config, this, this._extensions);\r\n        // initialize remaining regular plugins\r\n        this._extensions.forEach(function (ext) {\r\n            var e = ext;\r\n            if (e && e.priority < ChannelControllerPriority) {\r\n                ext.initialize(_this.config, _this, _this._extensions); // initialize\r\n            }\r\n        });\r\n        // Remove sender channels from main list\r\n        if (c < this._extensions.length) {\r\n            this._extensions.splice(c);\r\n        }\r\n        if (this.getTransmissionControls().length === 0) {\r\n            throw new Error(\"No channels available\");\r\n        }\r\n        this._isInitialized = true;\r\n        var _a;\r\n    };\r\n    AppInsightsCore.prototype.getTransmissionControls = function () {\r\n        return this._channelController.ChannelControls;\r\n    };\r\n    AppInsightsCore.prototype.track = function (telemetryItem) {\r\n        if (telemetryItem === null) {\r\n            this._notifiyInvalidEvent(telemetryItem);\r\n            // throw error\r\n            throw Error(\"Invalid telemetry item\");\r\n        }\r\n        if (telemetryItem.baseData && !telemetryItem.baseType) {\r\n            this._notifiyInvalidEvent(telemetryItem);\r\n            throw Error(\"Provide data.baseType for data.baseData\");\r\n        }\r\n        if (!telemetryItem.baseType) {\r\n            // Hard coded from Common::Event.ts::Event.dataType\r\n            telemetryItem.baseType = \"EventData\";\r\n        }\r\n        if (!telemetryItem.iKey) {\r\n            // setup default iKey if not passed in\r\n            telemetryItem.iKey = this.config.instrumentationKey;\r\n        }\r\n        if (!telemetryItem.time) {\r\n            // add default timestamp if not passed in\r\n            telemetryItem.time = new Date().toISOString();\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.ver)) {\r\n            // CommonSchema 4.0\r\n            telemetryItem.ver = \"4.0\";\r\n        }\r\n        // do basic validation before sending it through the pipeline\r\n        this._validateTelmetryItem(telemetryItem);\r\n        this._updateSdkVersion(telemetryItem);\r\n        // invoke any common telemetry processors before sending through pipeline\r\n        var i = 0;\r\n        while (i < this._extensions.length) {\r\n            if (this._extensions[i].processTelemetry) {\r\n                this._extensions[i].processTelemetry(telemetryItem); // pass on to first extension that can support processing\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n    };\r\n    /**\r\n     * Adds a notification listener. The SDK calls methods on the listener when an appropriate notification is raised.\r\n     * The added plugins must raise notifications. If the plugins do not implement the notifications, then no methods will be\r\n     * called.\r\n     * @param {INotificationListener} listener - An INotificationListener object.\r\n     */\r\n    AppInsightsCore.prototype.addNotificationListener = function (listener) {\r\n        this._notificationManager.addNotificationListener(listener);\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - INotificationListener to remove.\r\n     */\r\n    AppInsightsCore.prototype.removeNotificationListener = function (listener) {\r\n        this._notificationManager.removeNotificationListener(listener);\r\n    };\r\n    /**\r\n     * Periodically check logger.queue for\r\n     */\r\n    AppInsightsCore.prototype.pollInternalLogs = function () {\r\n        var _this = this;\r\n        var interval = this.config.diagnosticLogInterval;\r\n        if (!(interval > 0)) {\r\n            interval = 10000;\r\n        }\r\n        return setInterval(function () {\r\n            var queue = _this.logger.queue;\r\n            queue.forEach(function (logMessage) {\r\n                var item = {\r\n                    name: \"InternalMessageId: \" + logMessage.messageId,\r\n                    iKey: _this.config.instrumentationKey,\r\n                    time: new Date().toISOString(),\r\n                    baseType: _InternalLogMessage.dataType,\r\n                    baseData: { message: logMessage.message }\r\n                };\r\n                _this.track(item);\r\n            });\r\n            queue.length = 0;\r\n        }, interval);\r\n    };\r\n    AppInsightsCore.prototype._validateTelmetryItem = function (telemetryItem) {\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.name)) {\r\n            this._notifiyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry name required\");\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.time)) {\r\n            this._notifiyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry timestamp required\");\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.iKey)) {\r\n            this._notifiyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry instrumentationKey required\");\r\n        }\r\n    };\r\n    AppInsightsCore.prototype._updateSdkVersion = function (telemetryItem) {\r\n        if (!telemetryItem.ext) {\r\n            telemetryItem.ext = {};\r\n        }\r\n        if (!telemetryItem.ext.sdk) {\r\n            telemetryItem.ext.sdk = {};\r\n        }\r\n        var version = \"\";\r\n        for (var i = 0; i < this._extensions.length; i++) {\r\n            var ext = this._extensions[i];\r\n            if (ext.identifier && ext.version) {\r\n                var str = ext.identifier + \":\" + ext.version + \";\";\r\n                version = version.concat(str);\r\n            }\r\n        }\r\n        if (version != \"\") {\r\n            telemetryItem.ext.sdk['libVer'] = version;\r\n        }\r\n    };\r\n    AppInsightsCore.prototype._notifiyInvalidEvent = function (telemetryItem) {\r\n        this._notificationManager.eventsDiscarded([telemetryItem], EventsDiscardedReason.InvalidEvent);\r\n    };\r\n    return AppInsightsCore;\r\n}());\r\nexport { AppInsightsCore };\r\nvar ChannelController = /** @class */ (function () {\r\n    function ChannelController() {\r\n        this.identifier = \"ChannelControllerPlugin\";\r\n        this.priority = ChannelControllerPriority; // in reserved range 100 to 200\r\n    }\r\n    ChannelController.prototype.processTelemetry = function (item) {\r\n        this.channelQueue.forEach(function (queues) {\r\n            // pass on to first item in queue\r\n            if (queues.length > 0) {\r\n                queues[0].processTelemetry(item);\r\n            }\r\n        });\r\n    };\r\n    Object.defineProperty(ChannelController.prototype, \"ChannelControls\", {\r\n        get: function () {\r\n            return this.channelQueue;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ChannelController.prototype.initialize = function (config, core, extensions) {\r\n        var _this = this;\r\n        this.channelQueue = new Array();\r\n        if (config.channels) {\r\n            var invalidChannelIdentifier_1 = undefined;\r\n            config.channels.forEach(function (queue) {\r\n                if (queue && queue.length > 0) {\r\n                    queue = queue.sort(function (a, b) {\r\n                        return a.priority - b.priority;\r\n                    });\r\n                    // Initialize each plugin\r\n                    queue.forEach(function (queueItem) {\r\n                        if (queueItem.priority < ChannelControllerPriority) {\r\n                            invalidChannelIdentifier_1 = queueItem.identifier;\r\n                        }\r\n                        queueItem.initialize(config, core, extensions);\r\n                    });\r\n                    if (invalidChannelIdentifier_1) {\r\n                        throw Error(ChannelValidationMessage + invalidChannelIdentifier_1);\r\n                    }\r\n                    for (var i = 1; i < queue.length; i++) {\r\n                        queue[i - 1].setNextPlugin(queue[i]); // setup processing chain\r\n                    }\r\n                    _this.channelQueue.push(queue);\r\n                }\r\n            });\r\n        }\r\n        var arr = new Array();\r\n        for (var i = 0; i < extensions.length; i++) {\r\n            var plugin = extensions[i];\r\n            if (plugin.priority > ChannelControllerPriority) {\r\n                arr.push(plugin);\r\n            }\r\n        }\r\n        if (arr.length > 0) {\r\n            // sort if not sorted\r\n            arr = arr.sort(function (a, b) {\r\n                return a.priority - b.priority;\r\n            });\r\n            // Initialize each plugin\r\n            arr.forEach(function (queueItem) { return queueItem.initialize(config, core, extensions); });\r\n            // setup next plugin\r\n            for (var i = 1; i < arr.length; i++) {\r\n                arr[i - 1].setNextPlugin(arr[i]);\r\n            }\r\n            this.channelQueue.push(arr);\r\n        }\r\n    };\r\n    return ChannelController;\r\n}());\r\nvar validationError = \"Extensions must provide callback to initialize\";\r\nvar validationErrorInExt = \"Channels must be provided through config.channels only\";\r\nvar ChannelControllerPriority = 500;\r\nvar ChannelValidationMessage = \"Channel has invalid priority\";\r\n//# sourceMappingURL=AppInsightsCore.js.map","\"use strict\";\r\nexport var MinChannelPriorty = 100;\r\n//# sourceMappingURL=IChannelControls.js.map"],"names":["LoggingSeverity","EventsDiscardedReason","Unknown","NonRetryableStatus","InvalidEvent","SizeLimitExceeded","KillSwitch","QueueFull","CoreUtils","isNullOrUndefined","input","newGuid","replace","GuidRegex","c","r","Math","random","toString","NotificationManager","this","listeners","prototype","addNotificationListener","listener","push","removeNotificationListener","index","indexOf","splice","eventsSent","events","_this","_loop_1","i","this_1","setTimeout","length","eventsDiscarded","reason","_loop_2","this_2","_InternalMessageId","BrowserDoesNotSupportLocalStorage","BrowserCannotReadLocalStorage","BrowserCannotReadSessionStorage","BrowserCannotWriteLocalStorage","BrowserCannotWriteSessionStorage","BrowserFailedRemovalFromLocalStorage","BrowserFailedRemovalFromSessionStorage","CannotSendEmptyTelemetry","ClientPerformanceMathError","ErrorParsingAISessionCookie","ErrorPVCalc","ExceptionWhileLoggingError","FailedAddingTelemetryToBuffer","FailedMonitorAjaxAbort","FailedMonitorAjaxDur","FailedMonitorAjaxOpen","FailedMonitorAjaxRSC","FailedMonitorAjaxSend","FailedMonitorAjaxGetCorrelationHeader","FailedToAddHandlerForOnBeforeUnload","FailedToSendQueuedTelemetry","FailedToReportDataLoss","FlushFailed","MessageLimitPerPVExceeded","MissingRequiredFieldSpecification","NavigationTimingNotSupported","OnError","SessionRenewalDateIsZero","SenderNotInitialized","StartTrackEventFailed","StopTrackEventFailed","StartTrackFailed","StopTrackFailed","TelemetrySampledAndNotSent","TrackEventFailed","TrackExceptionFailed","TrackMetricFailed","TrackPVFailed","TrackPVFailedCalc","TrackTraceFailed","TransmissionFailed","FailedToSetStorageBuffer","FailedToRestoreStorageBuffer","InvalidBackendResponse","FailedToFixDepricatedValues","InvalidDurationValue","TelemetryEnvelopeInvalid","CreateEnvelopeError","CannotSerializeObject","CannotSerializeObjectNonSerializable","CircularReferenceDetected","ClearAuthContextFailed","ExceptionTruncated","IllegalCharsInName","ItemNotInArray","MaxAjaxPerPVExceeded","MessageTruncated","NameTooLong","SampleRateOutOfRange","SetAuthContextFailed","SetAuthContextFailedAccountName","StringValueTooLong","StartCalledMoreThanOnce","StopCalledWithoutStart","TelemetryInitializerFailed","TrackArgumentsNotSpecified","UrlTooLong","SessionStorageBufferFull","CannotAccessCookie","IdTooLong","_InternalLogMessage","msgId","msg","isUserAct","properties","messageId","message","AiUserActionablePrefix","AiNonUserActionablePrefix","diagnosticText","sanitizeDiagnosticText","JSON","stringify","text","dataType","DiagnosticLogger","config","AIInternalMessagePrefix","enableDebugExceptions","consoleLoggingLevel","telemetryLoggingLevel","maxInternalMessageLimit","queue","_messageCount","_messageLogged","loggingLevelConsole","loggingLevelTelemetry","maxMessageLimit","throwInternal","severity","messageKey","WARNING","warnToConsole","logInternalMessage","console","warn","log","resetInternalMessageCount","_areInternalMessagesThrottled","logMessage","throttleLimitMessage","throttleMessage","AppInsightsCore","_isInitialized","_extensions","Array","_channelController","ChannelController","initialize","extensions","Error","instrumentationKey","_notificationManager","extensionConfig","logger","forEach","extension","validationError","isValid_1","containsChannels_1","item","priority","ChannelControllerPriority","validationErrorInExt","_a","apply","concat","sort","a","b","extA","extB","typeExtA","processTelemetry","typeExtB","ext","t","identifier","idx","curr","setNextPlugin","getTransmissionControls","ChannelControls","track","telemetryItem","_notifiyInvalidEvent","baseData","baseType","iKey","time","Date","toISOString","ver","_validateTelmetryItem","_updateSdkVersion","pollInternalLogs","interval","diagnosticLogInterval","setInterval","name","sdk","version","str","channelQueue","queues","Object","defineProperty","get","enumerable","configurable","core","channels","invalidChannelIdentifier_1","undefined","queueItem","ChannelValidationMessage","arr","plugin"],"mappings":"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"}
{"ast":null,"code":"import _toConsumableArray from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ActionTypes } from \"../actions/actionTypes\";\n\n// tslint:disable-next-line:no-var-requires\nvar tagColors = require(\"../../react/components/common/tagColors.json\");\n/**\n * Reducer for project. Actions handled:\n * DELETE_PROJECT_SUCCESS\n * CLOSE_PROJECT_SUCCESS\n * LOAD_PROJECT_SUCCESS\n * SAVE_PROJECT_SUCCESS\n * LOAD_PROJECT_ASSETS_SUCCESS\n * SAVE_ASSET_METADATA_SUCCESS\n * @param state - Current project\n * @param action - Action that was dispatched\n */\n\n\nexport var reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ActionTypes.DELETE_PROJECT_SUCCESS:\n    case ActionTypes.CLOSE_PROJECT_SUCCESS:\n      return null;\n\n    case ActionTypes.LOAD_PROJECT_SUCCESS:\n      return _objectSpread({}, action.payload);\n\n    case ActionTypes.LOAD_ASSET_METADATA_SUCCESS:\n      if (!state) {\n        return state;\n      }\n\n      return _objectSpread({}, state, {\n        lastVisitedAssetId: action.payload.asset.id\n      });\n\n    case ActionTypes.SAVE_ASSET_METADATA_SUCCESS:\n      if (!state) {\n        return state;\n      }\n\n      var updatedAssets = _objectSpread({}, state.assets) || {};\n      updatedAssets[action.payload.asset.id] = _objectSpread({}, action.payload.asset);\n      var assetTags = new Set();\n      action.payload.regions.forEach(function (region) {\n        return region.tags.forEach(function (tag) {\n          return assetTags.add(tag);\n        });\n      });\n      var newTags = state.tags ? _toConsumableArray(state.tags) : [];\n      var updateTags = false;\n      assetTags.forEach(function (tag) {\n        if (!state.tags || state.tags.length === 0 || !state.tags.find(function (projectTag) {\n          return tag === projectTag.name;\n        })) {\n          newTags.push({\n            name: tag,\n            color: tagColors[newTags.length % tagColors.length]\n          });\n          updateTags = true;\n        }\n      });\n\n      if (updateTags) {\n        return _objectSpread({}, state, {\n          tags: newTags,\n          assets: updatedAssets\n        });\n      }\n\n      return _objectSpread({}, state, {\n        assets: updatedAssets\n      });\n\n    case ActionTypes.SAVE_CONNECTION_SUCCESS:\n      if (!state) {\n        return state;\n      }\n\n      return _objectSpread({}, state, {\n        sourceConnection: state.sourceConnection.id === action.payload.id ? _objectSpread({}, action.payload) : state.sourceConnection,\n        targetConnection: state.targetConnection.id === action.payload.id ? _objectSpread({}, action.payload) : state.targetConnection\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/redux/reducers/currentProjectReducer.ts"],"names":["ActionTypes","tagColors","require","reducer","state","action","type","DELETE_PROJECT_SUCCESS","CLOSE_PROJECT_SUCCESS","LOAD_PROJECT_SUCCESS","payload","LOAD_ASSET_METADATA_SUCCESS","lastVisitedAssetId","asset","id","SAVE_ASSET_METADATA_SUCCESS","updatedAssets","assets","assetTags","Set","regions","forEach","region","tags","tag","add","newTags","updateTags","length","find","projectTag","name","push","color","SAVE_CONNECTION_SUCCESS","sourceConnection","targetConnection"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport { ActionTypes } from \"../actions/actionTypes\";\nimport { IProject, ITag } from \"../../models/applicationState\";\nimport { AnyAction } from \"../actions/actionCreators\";\n// tslint:disable-next-line:no-var-requires\nconst tagColors = require(\"../../react/components/common/tagColors.json\");\n\n/**\n * Reducer for project. Actions handled:\n * DELETE_PROJECT_SUCCESS\n * CLOSE_PROJECT_SUCCESS\n * LOAD_PROJECT_SUCCESS\n * SAVE_PROJECT_SUCCESS\n * LOAD_PROJECT_ASSETS_SUCCESS\n * SAVE_ASSET_METADATA_SUCCESS\n * @param state - Current project\n * @param action - Action that was dispatched\n */\nexport const reducer = (state: IProject = null, action: AnyAction): IProject => {\n    switch (action.type) {\n        case ActionTypes.DELETE_PROJECT_SUCCESS:\n        case ActionTypes.CLOSE_PROJECT_SUCCESS:\n            return null;\n        case ActionTypes.LOAD_PROJECT_SUCCESS:\n            return { ...action.payload };\n        case ActionTypes.LOAD_ASSET_METADATA_SUCCESS:\n            if (!state) {\n                return state;\n            }\n\n            return {\n                ...state,\n                lastVisitedAssetId: action.payload.asset.id,\n            };\n        case ActionTypes.SAVE_ASSET_METADATA_SUCCESS:\n            if (!state) {\n                return state;\n            }\n\n            const updatedAssets = { ...state.assets } || {};\n            updatedAssets[action.payload.asset.id] = { ...action.payload.asset };\n\n            const assetTags = new Set();\n            action.payload.regions.forEach((region) => region.tags.forEach((tag) => assetTags.add(tag)));\n\n            const newTags: ITag[] = state.tags ? [...state.tags] : [];\n            let updateTags = false;\n\n            assetTags.forEach((tag) => {\n                if (!state.tags || state.tags.length === 0 ||\n                    !state.tags.find((projectTag) => tag === projectTag.name)) {\n                    newTags.push({\n                        name: tag,\n                        color: tagColors[newTags.length % tagColors.length],\n                    });\n                    updateTags = true;\n                }\n            });\n\n            if (updateTags) {\n                return {\n                    ...state,\n                    tags: newTags,\n                    assets: updatedAssets,\n                };\n            }\n\n            return {\n                ...state,\n                assets: updatedAssets,\n            };\n        case ActionTypes.SAVE_CONNECTION_SUCCESS:\n            if (!state) {\n                return state;\n            }\n\n            return {\n                ...state,\n                sourceConnection: state.sourceConnection.id === action.payload.id\n                    ? { ...action.payload }\n                    : state.sourceConnection,\n                targetConnection: state.targetConnection.id === action.payload.id\n                    ? { ...action.payload }\n                    : state.targetConnection,\n            };\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}
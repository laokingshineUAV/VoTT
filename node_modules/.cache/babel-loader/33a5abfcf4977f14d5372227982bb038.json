{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Guard =\n/*#__PURE__*/\nfunction () {\n  function Guard() {\n    _classCallCheck(this, Guard);\n  }\n\n  _createClass(Guard, null, [{\n    key: \"empty\",\n\n    /**\n     * Validates the string express is not null or empty, otherwise throws an exception\n     * @param value - The value to validate\n     * @param paramName - The name of the parameter to validate\n     * @param message - The error message to return on invalid value\n     */\n    value: function empty(value, paramName, message) {\n      if (!!value === false || value.trim().length === 0) {\n        message = message || \"'\".concat(paramName || \"value\", \"' cannot be null or empty\");\n        throw new Error(message);\n      }\n    }\n    /**\n     * Validates the value is not null, otherwise throw an exception\n     * @param value - The value to validate\n     * @param paramName - The name of the parameter to validate\n     * @param message - The error message to return on invalid value\n     */\n\n  }, {\n    key: \"null\",\n    value: function _null(value, paramName, message) {\n      if (!!value === false) {\n        message = message || \"'\".concat(paramName || \"value\", \"' cannot be null or undefined\");\n        throw new Error(message);\n      }\n    }\n    /**\n     * Validates the value meets the specified expectation, otherwise throws an exception\n     * @param value - The value to validate\n     * @param predicate - The predicate used for validation\n     * @param paramName - The name of the parameter to validate\n     * @param message - The error message to return on invalid value\n     */\n\n  }, {\n    key: \"expression\",\n    value: function expression(value, predicate, paramName, message) {\n      if (!!value === false || !predicate(value)) {\n        message = message || \"'\".concat(paramName || \"value\", \"' is not a valid value\");\n        throw new Error(message);\n      }\n    }\n  }]);\n\n  return Guard;\n}();\n\nexport { Guard as default };","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/common/guard.ts"],"names":["Guard","value","paramName","message","trim","length","Error","predicate"],"mappings":";;;IAAqBA,K;;;;;;;;;;AACjB;;;;;;0BAMoBC,K,EAAeC,S,EAAoBC,O,EAAkB;AACrE,UAAK,CAAC,CAACF,KAAF,KAAY,KAAZ,IAAqBA,KAAK,CAACG,IAAN,GAAaC,MAAb,KAAwB,CAAlD,EAAsD;AAClDF,QAAAA,OAAO,GAAGA,OAAO,eAASD,SAAS,IAAI,OAAtB,8BAAjB;AACA,cAAM,IAAII,KAAJ,CAAUH,OAAV,CAAN;AACH;AACJ;AAED;;;;;;;;;0BAMmBF,K,EAAYC,S,EAAoBC,O,EAAkB;AACjE,UAAK,CAAC,CAACF,KAAF,KAAY,KAAjB,EAAyB;AACrBE,QAAAA,OAAO,GAAGA,OAAO,eAASD,SAAS,IAAI,OAAtB,kCAAjB;AACA,cAAM,IAAII,KAAJ,CAAUH,OAAV,CAAN;AACH;AACJ;AAED;;;;;;;;;;+BAO4BF,K,EAAUM,S,EAAkCL,S,EAAoBC,O,EAAkB;AAC1G,UAAI,CAAC,CAACF,KAAF,KAAY,KAAZ,IAAqB,CAACM,SAAS,CAACN,KAAD,CAAnC,EAA4C;AACxCE,QAAAA,OAAO,GAAGA,OAAO,eAASD,SAAS,IAAI,OAAtB,2BAAjB;AACA,cAAM,IAAII,KAAJ,CAAUH,OAAV,CAAN;AACH;AACJ;;;;;;SAvCgBH,K","sourcesContent":["export default class Guard {\n    /**\n     * Validates the string express is not null or empty, otherwise throws an exception\n     * @param value - The value to validate\n     * @param paramName - The name of the parameter to validate\n     * @param message - The error message to return on invalid value\n     */\n    public static empty(value: string, paramName?: string, message?: string) {\n        if ((!!value === false || value.trim().length === 0)) {\n            message = message || (`'${paramName || \"value\"}' cannot be null or empty`);\n            throw new Error(message);\n        }\n    }\n\n    /**\n     * Validates the value is not null, otherwise throw an exception\n     * @param value - The value to validate\n     * @param paramName - The name of the parameter to validate\n     * @param message - The error message to return on invalid value\n     */\n    public static null(value: any, paramName?: string, message?: string) {\n        if ((!!value === false)) {\n            message = message || (`'${paramName || \"value\"}' cannot be null or undefined`);\n            throw new Error(message);\n        }\n    }\n\n    /**\n     * Validates the value meets the specified expectation, otherwise throws an exception\n     * @param value - The value to validate\n     * @param predicate - The predicate used for validation\n     * @param paramName - The name of the parameter to validate\n     * @param message - The error message to return on invalid value\n     */\n    public static expression<T>(value: T, predicate: (value: T) => boolean, paramName?: string, message?: string) {\n        if (!!value === false || !predicate(value)) {\n            message = message || (`'${paramName || \"value\"}' is not a valid value`);\n            throw new Error(message);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
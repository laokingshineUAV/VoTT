{"ast":null,"code":"import { BaseRequestPolicy, HttpHeaders, HttpPipelineLogLevel, RequestPolicyOptions, WebResource } from \"@azure/ms-rest-js\"; // Export following interfaces and types for customers who want to implement their\n// own RequestPolicy or HTTPClient\n\nexport { HttpHeaders, HttpPipelineLogLevel, WebResource, BaseRequestPolicy, RequestPolicyOptions };\n/**\n * A Pipeline class containing HTTP request policies.\n * You can create a default Pipeline by calling StorageURL.newPipeline().\n * Or you can create a Pipeline with your own policies by the constructor of Pipeline.\n * Refer to StorageURL.newPipeline() and provided policies as reference before\n * implementing your customized Pipeline.\n *\n * @export\n * @class Pipeline\n */\n\nvar Pipeline =\n/** @class */\nfunction () {\n  /**\n   * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.\n   *\n   * @param {RequestPolicyFactory[]} factories\n   * @param {IPipelineOptions} [options={}]\n   * @memberof Pipeline\n   */\n  function Pipeline(factories, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.factories = factories;\n    this.options = options;\n  }\n  /**\n   * Transfer Pipeline object to ServiceClientOptions object which required by\n   * ServiceClient constructor.\n   *\n   * @returns {ServiceClientOptions}\n   * @memberof Pipeline\n   */\n\n\n  Pipeline.prototype.toServiceClientOptions = function () {\n    return {\n      httpClient: this.options.HTTPClient,\n      httpPipelineLogger: this.options.logger,\n      requestPolicyFactories: this.factories\n    };\n  };\n\n  return Pipeline;\n}();\n\nexport { Pipeline };","map":null,"metadata":{},"sourceType":"module"}
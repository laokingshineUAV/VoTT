{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Guard from \"../guard\";\n/**\n * Processes items in the array within the specified batch size (default: 5)\n * @param this The array to process\n * @param action The action to perform on each item in the array\n * @param batchSize The batch size for actions to perform in parallel (default: 5)\n */\n\nexport function forEachAsync(_x) {\n  return _forEachAsync.apply(this, arguments);\n}\n/**\n * Maps items in the array in async batches with the specified action\n * @param this The array to process\n * @param action The transformer action to perform on each item in the array\n * @param batchSize The batch size for actions to perform in parallel (default: 5);\n */\n\nfunction _forEachAsync() {\n  _forEachAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(action) {\n    var batchSize,\n        all,\n        batch,\n        tasks,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            batchSize = _args.length > 1 && _args[1] !== undefined ? _args[1] : 5;\n            Guard.null(this);\n            Guard.null(action);\n            Guard.expression(batchSize, function (value) {\n              return value > 0;\n            });\n            all = _toConsumableArray(this);\n\n          case 5:\n            if (!(all.length > 0)) {\n              _context.next = 13;\n              break;\n            }\n\n            batch = [];\n\n            while (all.length > 0 && batch.length < batchSize) {\n              batch.push(all.pop());\n            }\n\n            tasks = batch.map(function (item) {\n              return action(item);\n            });\n            _context.next = 11;\n            return Promise.all(tasks);\n\n          case 11:\n            _context.next = 5;\n            break;\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _forEachAsync.apply(this, arguments);\n}\n\nexport function mapAsync(_x2) {\n  return _mapAsync.apply(this, arguments);\n}\n\nfunction _mapAsync() {\n  _mapAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(action) {\n    var batchSize,\n        results,\n        all,\n        batch,\n        tasks,\n        batchResults,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            batchSize = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 5;\n            Guard.null(this);\n            Guard.null(action);\n            Guard.expression(batchSize, function (value) {\n              return value > 0;\n            });\n            results = [];\n            all = _toConsumableArray(this);\n\n          case 6:\n            if (!(all.length > 0)) {\n              _context2.next = 16;\n              break;\n            }\n\n            batch = [];\n\n            while (all.length > 0 && batch.length < batchSize) {\n              batch.push(all.pop());\n            }\n\n            tasks = batch.map(function (item) {\n              return action(item);\n            });\n            _context2.next = 12;\n            return Promise.all(tasks);\n\n          case 12:\n            batchResults = _context2.sent;\n            results = results.concat(batchResults);\n            _context2.next = 6;\n            break;\n\n          case 16:\n            return _context2.abrupt(\"return\", results);\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _mapAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/common/extensions/array.ts"],"names":["Guard","forEachAsync","action","batchSize","null","expression","value","all","length","batch","push","pop","tasks","map","item","Promise","mapAsync","results","batchResults","concat"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA;;;;;;;AAMA,gBAAsBC,YAAtB;AAAA;AAAA;AAsBA;;;;;;;;;;2BAtBO,iBAEHC,MAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGHC,YAAAA,SAHG,2DAGiB,CAHjB;AAIHH,YAAAA,KAAK,CAACI,IAAN,CAAW,IAAX;AACAJ,YAAAA,KAAK,CAACI,IAAN,CAAWF,MAAX;AACAF,YAAAA,KAAK,CAACK,UAAN,CAAiBF,SAAjB,EAA4B,UAACG,KAAD;AAAA,qBAAWA,KAAK,GAAG,CAAnB;AAAA,aAA5B;AAEMC,YAAAA,GARH,sBAQkB,IARlB;;AAAA;AAAA,kBAUIA,GAAG,CAACC,MAAJ,GAAa,CAVjB;AAAA;AAAA;AAAA;;AAWOC,YAAAA,KAXP,GAWoB,EAXpB;;AAaC,mBAAOF,GAAG,CAACC,MAAJ,GAAa,CAAb,IAAkBC,KAAK,CAACD,MAAN,GAAeL,SAAxC,EAAmD;AAC/CM,cAAAA,KAAK,CAACC,IAAN,CAAWH,GAAG,CAACI,GAAJ,EAAX;AACH;;AAEKC,YAAAA,KAjBP,GAiBeH,KAAK,CAACI,GAAN,CAAU,UAACC,IAAD;AAAA,qBAAUZ,MAAM,CAACY,IAAD,CAAhB;AAAA,aAAV,CAjBf;AAAA;AAAA,mBAkBOC,OAAO,CAACR,GAAR,CAAYK,KAAZ,CAlBP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA4BP,gBAAsBI,QAAtB;AAAA;AAAA;;;;;2BAAO,kBAEHd,MAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGHC,YAAAA,SAHG,8DAGiB,CAHjB;AAIHH,YAAAA,KAAK,CAACI,IAAN,CAAW,IAAX;AACAJ,YAAAA,KAAK,CAACI,IAAN,CAAWF,MAAX;AACAF,YAAAA,KAAK,CAACK,UAAN,CAAiBF,SAAjB,EAA4B,UAACG,KAAD;AAAA,qBAAWA,KAAK,GAAG,CAAnB;AAAA,aAA5B;AAEIW,YAAAA,OARD,GAQgB,EARhB;AASGV,YAAAA,GATH,sBASkB,IATlB;;AAAA;AAAA,kBAWIA,GAAG,CAACC,MAAJ,GAAa,CAXjB;AAAA;AAAA;AAAA;;AAYOC,YAAAA,KAZP,GAYoB,EAZpB;;AAcC,mBAAOF,GAAG,CAACC,MAAJ,GAAa,CAAb,IAAkBC,KAAK,CAACD,MAAN,GAAeL,SAAxC,EAAmD;AAC/CM,cAAAA,KAAK,CAACC,IAAN,CAAWH,GAAG,CAACI,GAAJ,EAAX;AACH;;AAEKC,YAAAA,KAlBP,GAkBeH,KAAK,CAACI,GAAN,CAAU,UAACC,IAAD;AAAA,qBAAUZ,MAAM,CAACY,IAAD,CAAhB;AAAA,aAAV,CAlBf;AAAA;AAAA,mBAmB4BC,OAAO,CAACR,GAAR,CAAYK,KAAZ,CAnB5B;;AAAA;AAmBOM,YAAAA,YAnBP;AAoBCD,YAAAA,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAeD,YAAf,CAAV;AApBD;AAAA;;AAAA;AAAA,8CAuBID,OAvBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import Guard from \"../guard\";\n\n/**\n * Processes items in the array within the specified batch size (default: 5)\n * @param this The array to process\n * @param action The action to perform on each item in the array\n * @param batchSize The batch size for actions to perform in parallel (default: 5)\n */\nexport async function forEachAsync<T>(\n    this: T[],\n    action: (item: T) => Promise<void>,\n    batchSize: number = 5): Promise<void> {\n    Guard.null(this);\n    Guard.null(action);\n    Guard.expression(batchSize, (value) => value > 0);\n\n    const all: T[] = [...this];\n\n    while (all.length > 0) {\n        const batch: T[] = [];\n\n        while (all.length > 0 && batch.length < batchSize) {\n            batch.push(all.pop());\n        }\n\n        const tasks = batch.map((item) => action(item));\n        await Promise.all(tasks);\n    }\n}\n\n/**\n * Maps items in the array in async batches with the specified action\n * @param this The array to process\n * @param action The transformer action to perform on each item in the array\n * @param batchSize The batch size for actions to perform in parallel (default: 5);\n */\nexport async function mapAsync<T, R>(\n    this: T[],\n    action: (item: T) => Promise<R>,\n    batchSize: number = 5): Promise<R[]> {\n    Guard.null(this);\n    Guard.null(action);\n    Guard.expression(batchSize, (value) => value > 0);\n\n    let results: R[] = [];\n    const all: T[] = [...this];\n\n    while (all.length > 0) {\n        const batch: T[] = [];\n\n        while (all.length > 0 && batch.length < batchSize) {\n            batch.push(all.pop());\n        }\n\n        const tasks = batch.map((item) => action(item));\n        const batchResults = await Promise.all(tasks);\n        results = results.concat(batchResults);\n    }\n\n    return results;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as tslib_1 from \"tslib\";\nimport { DataSanitizer } from './Common/DataSanitizer';\nimport { FieldType } from '../Enums';\nimport { Util } from '../Util';\nimport { AjaxHelper } from '../Util';\nimport { RemoteDependencyData as GeneratedRemoteDependencyData } from '../Interfaces/Contracts/Generated/RemoteDependencyData';\n\nvar RemoteDependencyData =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(RemoteDependencyData, _super);\n  /**\r\n   * Constructs a new instance of the RemoteDependencyData object\r\n   */\n\n\n  function RemoteDependencyData(logger, id, absoluteUrl, commandName, value, success, resultCode, method, requestAPI, properties, measurements) {\n    if (requestAPI === void 0) {\n      requestAPI = \"Ajax\";\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.aiDataContract = {\n      id: FieldType.Required,\n      ver: FieldType.Required,\n      name: FieldType.Default,\n      resultCode: FieldType.Default,\n      duration: FieldType.Default,\n      success: FieldType.Default,\n      data: FieldType.Default,\n      target: FieldType.Default,\n      type: FieldType.Default,\n      properties: FieldType.Default,\n      measurements: FieldType.Default,\n      kind: FieldType.Default,\n      value: FieldType.Default,\n      count: FieldType.Default,\n      min: FieldType.Default,\n      max: FieldType.Default,\n      stdDev: FieldType.Default,\n      dependencyKind: FieldType.Default,\n      dependencySource: FieldType.Default,\n      commandName: FieldType.Default,\n      dependencyTypeName: FieldType.Default\n    };\n    _this.id = id;\n    _this.duration = Util.msToTimeSpan(value);\n    _this.success = success;\n    _this.resultCode = resultCode + \"\";\n    _this.type = DataSanitizer.sanitizeString(logger, requestAPI);\n    var dependencyFields = AjaxHelper.ParseDependencyPath(logger, absoluteUrl, method, commandName);\n    _this.data = DataSanitizer.sanitizeUrl(logger, commandName) || dependencyFields.data; // get a value from hosturl if commandName not available\n\n    _this.target = dependencyFields.target;\n    _this.name = dependencyFields.name;\n    _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\n    _this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\n    return _this;\n  }\n\n  RemoteDependencyData.envelopeType = \"Microsoft.ApplicationInsights.{0}.RemoteDependency\";\n  RemoteDependencyData.dataType = \"RemoteDependencyData\";\n  return RemoteDependencyData;\n}(GeneratedRemoteDependencyData);\n\nexport { RemoteDependencyData };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/pages/editorPage/editorToolbar.tsx\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport { ToolbarItemType } from \"../../toolbar/toolbarItem\";\nimport \"./editorToolbar.scss\";\nimport { ToolbarItemName } from \"../../../../registerToolbar\";\n/**\n * Properties for Editor Toolbar\n * @member project - Current project being edited\n * @member actions - Actions to be performed on project\n * @member items - Registered Toolbar items\n */\n\n/**\n * @name - Editor Toolbar\n * @description - Collection of buttons that perform actions in toolbar on editor page\n */\nexport var EditorToolbar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditorToolbar, _React$Component);\n\n  function EditorToolbar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditorToolbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditorToolbar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedItem: ToolbarItemName.SelectCanvas\n    };\n\n    _this.onToolbarItemSelected = function (toolbarItem) {\n      _this.setState({\n        selectedItem: toolbarItem.props.name\n      }, function () {\n        _this.props.onToolbarItemSelected(toolbarItem);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(EditorToolbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var groups = _(this.props.items).groupBy(\"config.group\").values().value();\n\n      return React.createElement(\"div\", {\n        className: \"btn-toolbar\",\n        role: \"toolbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, groups.map(function (items, idx) {\n        return React.createElement(\"div\", {\n          key: idx,\n          className: \"btn-group mr-2\",\n          role: \"group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, items.map(function (registration) {\n          var toolbarItemProps = _objectSpread({}, registration.config, {\n            actions: _this2.props.actions,\n            project: _this2.props.project,\n            active: _this2.isComponentActive(_this2.state.selectedItem, registration),\n            onClick: _this2.onToolbarItemSelected\n          });\n\n          var ToolbarItem = registration.component;\n          return React.createElement(ToolbarItem, Object.assign({\n            key: toolbarItemProps.name\n          }, toolbarItemProps, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61\n            },\n            __self: this\n          }));\n        }));\n      }));\n    }\n  }, {\n    key: \"isComponentActive\",\n    value: function isComponentActive(selected, componentRegistration) {\n      return selected ? selected === componentRegistration.config.name && componentRegistration.config.type === ToolbarItemType.State : false;\n    }\n  }]);\n\n  return EditorToolbar;\n}(React.Component);","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/pages/editorPage/editorToolbar.tsx"],"names":["React","_","ToolbarItemType","ToolbarItemName","EditorToolbar","state","selectedItem","SelectCanvas","onToolbarItemSelected","toolbarItem","setState","props","name","groups","items","groupBy","values","value","map","idx","registration","toolbarItemProps","config","actions","project","active","isComponentActive","onClick","ToolbarItem","component","selected","componentRegistration","type","State","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AAIA,SAAyCC,eAAzC,QAAgE,2BAAhE;AACA,OAAO,sBAAP;AACA,SAASC,eAAT,QAAgC,6BAAhC;AAEA;;;;;;;AAqBA;;;;AAIA,WAAaC,aAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UAEWC,KAFX,GAEmB;AACXC,MAAAA,YAAY,EAAEH,eAAe,CAACI;AADnB,KAFnB;;AAAA,UAkCYC,qBAlCZ,GAkCoC,UAACC,WAAD,EAA8B;AAC1D,YAAKC,QAAL,CAAc;AACVJ,QAAAA,YAAY,EAAEG,WAAW,CAACE,KAAZ,CAAkBC;AADtB,OAAd,EAEG,YAAM;AACL,cAAKD,KAAL,CAAWH,qBAAX,CAAiCC,WAAjC;AACH,OAJD;AAKH,KAxCL;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAMoB;AAAA;;AACZ,UAAMI,MAAM,GAAGZ,CAAC,CAAC,KAAKU,KAAL,CAAWG,KAAZ,CAAD,CACVC,OADU,CACF,cADE,EAEVC,MAFU,GAGVC,KAHU,EAAf;;AAKA,aACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,IAAI,EAAC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKJ,MAAM,CAACK,GAAP,CAAW,UAACJ,KAAD,EAAQK,GAAR;AAAA,eACR;AAAK,UAAA,GAAG,EAAEA,GAAV;AAAe,UAAA,SAAS,EAAC,gBAAzB;AAA0C,UAAA,IAAI,EAAC,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKL,KAAK,CAACI,GAAN,CAAU,UAACE,YAAD,EAAkB;AACzB,cAAMC,gBAAmC,qBAClCD,YAAY,CAACE,MADqB;AAErCC,YAAAA,OAAO,EAAE,MAAI,CAACZ,KAAL,CAAWY,OAFiB;AAGrCC,YAAAA,OAAO,EAAE,MAAI,CAACb,KAAL,CAAWa,OAHiB;AAIrCC,YAAAA,MAAM,EAAE,MAAI,CAACC,iBAAL,CAAuB,MAAI,CAACrB,KAAL,CAAWC,YAAlC,EAAgDc,YAAhD,CAJ6B;AAKrCO,YAAAA,OAAO,EAAE,MAAI,CAACnB;AALuB,YAAzC;;AAOA,cAAMoB,WAAW,GAAGR,YAAY,CAACS,SAAjC;AAEA,iBAAO,oBAAC,WAAD;AAAa,YAAA,GAAG,EAAER,gBAAgB,CAACT;AAAnC,aAA6CS,gBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACH,SAXA,CADL,CADQ;AAAA,OAAX,CADL,CADJ;AAoBH;AAhCL;AAAA;AAAA,sCA0C8BS,QA1C9B,EA0CyDC,qBA1CzD,EA0C0G;AAClG,aAAOD,QAAQ,GACTA,QAAQ,KAAKC,qBAAqB,CAACT,MAAtB,CAA6BV,IAA1C,IACFmB,qBAAqB,CAACT,MAAtB,CAA6BU,IAA7B,KAAsC9B,eAAe,CAAC+B,KAF3C,GAGT,KAHN;AAIH;AA/CL;;AAAA;AAAA,EAAmCjC,KAAK,CAACkC,SAAzC","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport { IToolbarItemRegistration } from \"../../../../providers/toolbar/toolbarItemFactory\";\nimport IProjectActions from \"../../../../redux/actions/projectActions\";\nimport { IProject } from \"../../../../models/applicationState\";\nimport { IToolbarItemProps, ToolbarItem, ToolbarItemType } from \"../../toolbar/toolbarItem\";\nimport \"./editorToolbar.scss\";\nimport { ToolbarItemName } from \"../../../../registerToolbar\";\n\n/**\n * Properties for Editor Toolbar\n * @member project - Current project being edited\n * @member actions - Actions to be performed on project\n * @member items - Registered Toolbar items\n */\nexport interface IEditorToolbarProps {\n    project: IProject;\n    actions: IProjectActions;\n    items: IToolbarItemRegistration[];\n    onToolbarItemSelected: (toolbarItem: ToolbarItem) => void;\n}\n\n/**\n * State of IEditorToolbar\n * @member selectedItem - Item selected from toolbar\n */\nexport interface IEditorToolbarState {\n    selectedItem: ToolbarItemName;\n}\n\n/**\n * @name - Editor Toolbar\n * @description - Collection of buttons that perform actions in toolbar on editor page\n */\nexport class EditorToolbar extends React.Component<IEditorToolbarProps, IEditorToolbarState> {\n\n    public state = {\n        selectedItem: ToolbarItemName.SelectCanvas,\n    };\n\n    public render() {\n        const groups = _(this.props.items)\n            .groupBy(\"config.group\")\n            .values()\n            .value();\n\n        return (\n            <div className=\"btn-toolbar\" role=\"toolbar\">\n                {groups.map((items, idx) =>\n                    <div key={idx} className=\"btn-group mr-2\" role=\"group\">\n                        {items.map((registration) => {\n                            const toolbarItemProps: IToolbarItemProps = {\n                                ...registration.config,\n                                actions: this.props.actions,\n                                project: this.props.project,\n                                active: this.isComponentActive(this.state.selectedItem, registration),\n                                onClick: this.onToolbarItemSelected,\n                            };\n                            const ToolbarItem = registration.component;\n\n                            return <ToolbarItem key={toolbarItemProps.name} {...toolbarItemProps} />;\n                        })}\n                    </div>,\n                )}\n            </div>\n        );\n    }\n\n    private onToolbarItemSelected = (toolbarItem: ToolbarItem) => {\n        this.setState({\n            selectedItem: toolbarItem.props.name,\n        }, () => {\n            this.props.onToolbarItemSelected(toolbarItem);\n        });\n    }\n\n    private isComponentActive(selected: ToolbarItemName, componentRegistration: IToolbarItemRegistration) {\n        return selected\n            ? selected === componentRegistration.config.name &&\n            componentRegistration.config.type === ToolbarItemType.State\n            : false;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
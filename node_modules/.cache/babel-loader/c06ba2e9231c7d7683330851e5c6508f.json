{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Mappers from \"../models/containerMappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class representing a Container. */\n\nvar Container =\n/** @class */\nfunction () {\n  /**\n   * Create a Container.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  function Container(client) {\n    this.client = client;\n  }\n\n  Container.prototype.create = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, createOperationSpec, callback);\n  };\n\n  Container.prototype.getProperties = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, getPropertiesOperationSpec, callback);\n  };\n\n  Container.prototype.deleteMethod = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, deleteMethodOperationSpec, callback);\n  };\n\n  Container.prototype.setMetadata = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, setMetadataOperationSpec, callback);\n  };\n\n  Container.prototype.getAccessPolicy = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, getAccessPolicyOperationSpec, callback);\n  };\n\n  Container.prototype.setAccessPolicy = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, setAccessPolicyOperationSpec, callback);\n  };\n\n  Container.prototype.acquireLease = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, acquireLeaseOperationSpec, callback);\n  };\n\n  Container.prototype.releaseLease = function (leaseId, options, callback) {\n    return this.client.sendOperationRequest({\n      leaseId: leaseId,\n      options: options\n    }, releaseLeaseOperationSpec, callback);\n  };\n\n  Container.prototype.renewLease = function (leaseId, options, callback) {\n    return this.client.sendOperationRequest({\n      leaseId: leaseId,\n      options: options\n    }, renewLeaseOperationSpec, callback);\n  };\n\n  Container.prototype.breakLease = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, breakLeaseOperationSpec, callback);\n  };\n\n  Container.prototype.changeLease = function (leaseId, proposedLeaseId, options, callback) {\n    return this.client.sendOperationRequest({\n      leaseId: leaseId,\n      proposedLeaseId: proposedLeaseId,\n      options: options\n    }, changeLeaseOperationSpec, callback);\n  };\n\n  Container.prototype.listBlobFlatSegment = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, listBlobFlatSegmentOperationSpec, callback);\n  };\n\n  Container.prototype.listBlobHierarchySegment = function (delimiter, options, callback) {\n    return this.client.sendOperationRequest({\n      delimiter: delimiter,\n      options: options\n    }, listBlobHierarchySegmentOperationSpec, callback);\n  };\n\n  Container.prototype.getAccountInfo = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, getAccountInfoOperationSpec, callback);\n  };\n\n  return Container;\n}();\n\nexport { Container }; // Operation Specifications\n\nvar serializer = new msRest.Serializer(Mappers, true);\nvar createOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.restype2],\n  headerParameters: [Parameters.metadata, Parameters.access, Parameters.version, Parameters.requestId],\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar getPropertiesOperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.restype2],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.leaseId0],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar deleteMethodOperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"{containerName}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.restype2],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar setMetadataOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.restype2, Parameters.comp3],\n  headerParameters: [Parameters.metadata, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar getAccessPolicyOperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.restype2, Parameters.comp4],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.leaseId0],\n  responses: {\n    200: {\n      bodyMapper: {\n        xmlElementName: \"SignedIdentifier\",\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedIdentifier\"\n            }\n          }\n        }\n      },\n      headersMapper: Mappers.ContainerGetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar setAccessPolicyOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.restype2, Parameters.comp4],\n  headerParameters: [Parameters.access, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],\n  requestBody: {\n    parameterPath: [\"options\", \"containerAcl\"],\n    mapper: {\n      xmlName: \"SignedIdentifiers\",\n      xmlElementName: \"SignedIdentifier\",\n      serializedName: \"containerAcl\",\n      type: {\n        name: \"Sequence\",\n        element: {\n          type: {\n            name: \"Composite\",\n            className: \"SignedIdentifier\"\n          }\n        }\n      }\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar acquireLeaseOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp5, Parameters.restype2],\n  headerParameters: [Parameters.duration, Parameters.proposedLeaseId0, Parameters.version, Parameters.requestId, Parameters.action0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar releaseLeaseOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp5, Parameters.restype2],\n  headerParameters: [Parameters.leaseId1, Parameters.version, Parameters.requestId, Parameters.action1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar renewLeaseOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp5, Parameters.restype2],\n  headerParameters: [Parameters.leaseId1, Parameters.version, Parameters.requestId, Parameters.action2, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar breakLeaseOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp5, Parameters.restype2],\n  headerParameters: [Parameters.breakPeriod, Parameters.version, Parameters.requestId, Parameters.action3, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar changeLeaseOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp5, Parameters.restype2],\n  headerParameters: [Parameters.leaseId1, Parameters.proposedLeaseId1, Parameters.version, Parameters.requestId, Parameters.action4, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar listBlobFlatSegmentOperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.prefix, Parameters.marker, Parameters.maxresults, Parameters.include1, Parameters.timeout, Parameters.restype2, Parameters.comp2],\n  headerParameters: [Parameters.version, Parameters.requestId],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsFlatSegmentResponse,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar listBlobHierarchySegmentOperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.prefix, Parameters.delimiter, Parameters.marker, Parameters.maxresults, Parameters.include1, Parameters.timeout, Parameters.restype2, Parameters.comp2],\n  headerParameters: [Parameters.version, Parameters.requestId],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar getAccountInfoOperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.restype1, Parameters.comp0],\n  headerParameters: [Parameters.version],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};","map":null,"metadata":{},"sourceType":"module"}
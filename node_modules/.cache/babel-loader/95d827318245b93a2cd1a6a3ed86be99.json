{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Guard from \"../../common/guard\";\nimport { AssetState, AssetType } from \"../../models/applicationState\";\nimport { StorageProviderFactory } from \"../storage/storageProviderFactory\";\nimport { AssetProviderFactory } from \"../storage/assetProviderFactory\";\nimport _ from \"lodash\";\nimport { AssetService } from \"../../services/assetService\";\n/**\n * @name - TF Pascal VOC Records Export Asset State\n * @description - Defines the asset type export option\n * @member All - Specifies that all assets will be exported\n * @member Visited - Specifies that visited (including tagged) assets will be exported\n * @member Tagged - Specifies that only tagged assets will be exported\n */\n\nexport var ExportAssetState;\n\n(function (ExportAssetState) {\n  ExportAssetState[\"All\"] = \"all\";\n  ExportAssetState[\"Visited\"] = \"visited\";\n  ExportAssetState[\"Tagged\"] = \"tagged\";\n})(ExportAssetState || (ExportAssetState = {}));\n\n/**\n * Base class implementation for all VoTT export providers\n * Provides quick access to the configured projects asset & storage providers\n */\nexport var ExportProvider =\n/*#__PURE__*/\nfunction () {\n  function ExportProvider(project, options) {\n    _classCallCheck(this, ExportProvider);\n\n    this.project = project;\n    this.options = options;\n    Guard.null(project);\n    this.assetService = new AssetService(this.project);\n  }\n\n  _createClass(ExportProvider, [{\n    key: \"getAssetsForExport\",\n\n    /**\n     * Gets the assets that are configured to be exported based on the configured asset state\n     */\n    value: function () {\n      var _getAssetsForExport = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var _this = this;\n\n        var predicate, getProjectAssets, getAllAssets, getAssetsFunc;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                predicate = null;\n\n                getProjectAssets = function getProjectAssets() {\n                  return Promise.resolve(_.values(_this.project.assets));\n                };\n\n                getAllAssets =\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee() {\n                    var projectAssets;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return getProjectAssets();\n\n                          case 2:\n                            projectAssets = _context.sent;\n                            _context.t0 = _(projectAssets);\n                            _context.next = 6;\n                            return _this.assetProvider.getAssets();\n\n                          case 6:\n                            _context.t1 = _context.sent;\n\n                            _context.t2 = function (asset) {\n                              return asset.id;\n                            };\n\n                            return _context.abrupt(\"return\", _context.t0.concat.call(_context.t0, _context.t1).uniqBy(_context.t2).value());\n\n                          case 9:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n\n                  return function getAllAssets() {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n\n                getAssetsFunc = getProjectAssets;\n                _context3.t0 = this.options.assetState;\n                _context3.next = _context3.t0 === ExportAssetState.Visited ? 7 : _context3.t0 === ExportAssetState.Tagged ? 9 : _context3.t0 === ExportAssetState.All ? 11 : 11;\n                break;\n\n              case 7:\n                predicate = function predicate(asset) {\n                  return asset.state === AssetState.Visited || asset.state === AssetState.Tagged;\n                };\n\n                return _context3.abrupt(\"break\", 14);\n\n              case 9:\n                predicate = function predicate(asset) {\n                  return asset.state === AssetState.Tagged;\n                };\n\n                return _context3.abrupt(\"break\", 14);\n\n              case 11:\n                getAssetsFunc = getAllAssets;\n\n                predicate = function predicate() {\n                  return true;\n                };\n\n                return _context3.abrupt(\"break\", 14);\n\n              case 14:\n                _context3.next = 16;\n                return getAssetsFunc();\n\n              case 16:\n                _context3.t1 = function (asset) {\n                  return asset.type !== AssetType.Video;\n                };\n\n                _context3.t2 = predicate;\n\n                _context3.t3 =\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee2(asset) {\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return _this.assetService.getAssetMetadata(asset);\n\n                          case 2:\n                            return _context2.abrupt(\"return\", _context2.sent);\n\n                          case 3:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n\n                  return function (_x) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }();\n\n                return _context3.abrupt(\"return\", _context3.sent.filter(_context3.t1).filter(_context3.t2).mapAsync(_context3.t3));\n\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getAssetsForExport() {\n        return _getAssetsForExport.apply(this, arguments);\n      }\n\n      return getAssetsForExport;\n    }()\n    /**\n     * Gets the storage provider for the current project\n     */\n\n  }, {\n    key: \"storageProvider\",\n    get: function get() {\n      if (this.storageProviderInstance) {\n        return this.storageProviderInstance;\n      }\n\n      this.storageProviderInstance = StorageProviderFactory.create(this.project.targetConnection.providerType, this.project.targetConnection.providerOptions);\n      return this.storageProviderInstance;\n    }\n    /**\n     * Gets the asset provider for the current project\n     */\n\n  }, {\n    key: \"assetProvider\",\n    get: function get() {\n      if (this.assetProviderInstance) {\n        return this.assetProviderInstance;\n      }\n\n      this.assetProviderInstance = AssetProviderFactory.create(this.project.sourceConnection.providerType, this.project.sourceConnection.providerOptions);\n      return this.assetProviderInstance;\n    }\n  }]);\n\n  return ExportProvider;\n}();","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/providers/export/exportProvider.ts"],"names":["Guard","AssetState","AssetType","StorageProviderFactory","AssetProviderFactory","_","AssetService","ExportAssetState","ExportProvider","project","options","null","assetService","predicate","getProjectAssets","Promise","resolve","values","assets","getAllAssets","projectAssets","assetProvider","getAssets","asset","id","concat","uniqBy","value","getAssetsFunc","assetState","Visited","Tagged","All","state","type","Video","getAssetMetadata","filter","mapAsync","storageProviderInstance","create","targetConnection","providerType","providerOptions","assetProviderInstance","sourceConnection"],"mappings":"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","sourcesContent":["import Guard from \"../../common/guard\";\nimport {\n    IProject, IExportFormat, IAssetMetadata, IAsset,\n    AssetState, AssetType, IExportProviderOptions,\n} from \"../../models/applicationState\";\nimport { IStorageProvider, StorageProviderFactory } from \"../storage/storageProviderFactory\";\nimport { IAssetProvider, AssetProviderFactory } from \"../storage/assetProviderFactory\";\nimport _ from \"lodash\";\nimport { AssetService } from \"../../services/assetService\";\n\n/**\n * @name - TF Pascal VOC Records Export Asset State\n * @description - Defines the asset type export option\n * @member All - Specifies that all assets will be exported\n * @member Visited - Specifies that visited (including tagged) assets will be exported\n * @member Tagged - Specifies that only tagged assets will be exported\n */\nexport enum ExportAssetState {\n    All = \"all\",\n    Visited = \"visited\",\n    Tagged = \"tagged\",\n}\n\nexport interface IExportAssetResult {\n    asset: IAssetMetadata;\n    success: boolean;\n    error?: string;\n}\n\nexport interface IExportResults {\n    completed: IExportAssetResult[];\n    errors: IExportAssetResult[];\n    count: number;\n}\n\n/**\n * @name - IExportProvider\n * @description - Defines the required interface for all VoTT export providers\n */\nexport interface IExportProvider {\n    /**\n     * Gets or set the project to be exported\n     */\n    project: IProject;\n\n    /**\n     * Exports the configured project for specified export configuration\n     */\n    export(): Promise<void> | Promise<IExportResults>;\n    save?(exportFormat: IExportFormat): Promise<any>;\n}\n\n/**\n * Base class implementation for all VoTT export providers\n * Provides quick access to the configured projects asset & storage providers\n */\nexport abstract class ExportProvider\n    <TOptions extends IExportProviderOptions = IExportProviderOptions> implements IExportProvider {\n    private storageProviderInstance: IStorageProvider;\n    private assetProviderInstance: IAssetProvider;\n    private assetService: AssetService;\n\n    constructor(public project: IProject, protected options?: TOptions) {\n        Guard.null(project);\n        this.assetService = new AssetService(this.project);\n    }\n\n    public abstract export(): Promise<void> | Promise<IExportResults>;\n\n    /**\n     * Gets the assets that are configured to be exported based on the configured asset state\n     */\n    public async getAssetsForExport(): Promise<IAssetMetadata[]> {\n        let predicate: (asset: IAsset) => boolean = null;\n\n        const getProjectAssets = () => Promise.resolve(_.values(this.project.assets));\n        const getAllAssets = async () => {\n            const projectAssets = await getProjectAssets();\n\n            return _(projectAssets)\n                .concat((await this.assetProvider.getAssets()))\n                .uniqBy((asset) => asset.id)\n                .value();\n        };\n\n        let getAssetsFunc: () => Promise<IAsset[]> = getProjectAssets;\n\n        switch (this.options.assetState) {\n            case ExportAssetState.Visited:\n                predicate = (asset) => asset.state === AssetState.Visited || asset.state === AssetState.Tagged;\n                break;\n            case ExportAssetState.Tagged:\n                predicate = (asset) => asset.state === AssetState.Tagged;\n                break;\n            case ExportAssetState.All:\n            default:\n                getAssetsFunc = getAllAssets;\n                predicate = () => true;\n                break;\n        }\n\n        return (await getAssetsFunc())\n            .filter((asset) => asset.type !== AssetType.Video)\n            .filter(predicate)\n            .mapAsync(async (asset) => await this.assetService.getAssetMetadata(asset));\n    }\n\n    /**\n     * Gets the storage provider for the current project\n     */\n    protected get storageProvider(): IStorageProvider {\n        if (this.storageProviderInstance) {\n            return this.storageProviderInstance;\n        }\n\n        this.storageProviderInstance = StorageProviderFactory.create(\n            this.project.targetConnection.providerType,\n            this.project.targetConnection.providerOptions,\n        );\n\n        return this.storageProviderInstance;\n    }\n\n    /**\n     * Gets the asset provider for the current project\n     */\n    protected get assetProvider(): IAssetProvider {\n        if (this.assetProviderInstance) {\n            return this.assetProviderInstance;\n        }\n\n        this.assetProviderInstance = AssetProviderFactory.create(\n            this.project.sourceConnection.providerType,\n            this.project.sourceConnection.providerOptions,\n        );\n\n        return this.assetProviderInstance;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
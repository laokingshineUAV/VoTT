{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport shortid from \"shortid\";\nimport Guard from \"../common/guard\";\nimport { AssetProviderFactory } from \"../providers/storage/assetProviderFactory\";\n/**\n * Functions required for a connection service\n * @member save - Save a connection\n */\n\n/**\n * @name - Connection Service\n * @description - Functions for dealing with project connections\n */\nvar ConnectionService =\n/*#__PURE__*/\nfunction () {\n  function ConnectionService() {\n    _classCallCheck(this, ConnectionService);\n  }\n\n  _createClass(ConnectionService, [{\n    key: \"save\",\n\n    /**\n     * Save a connection\n     * @param connection - Connection to save\n     */\n    value: function save(connection) {\n      Guard.null(connection);\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(resolve, reject) {\n          var assetProvider;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n\n                  if (!connection.id) {\n                    connection.id = shortid.generate();\n                  }\n\n                  assetProvider = AssetProviderFactory.createFromConnection(connection);\n\n                  if (!assetProvider.initialize) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 6;\n                  return assetProvider.initialize();\n\n                case 6:\n                  resolve(connection);\n                  _context.next = 12;\n                  break;\n\n                case 9:\n                  _context.prev = 9;\n                  _context.t0 = _context[\"catch\"](0);\n                  reject(_context.t0);\n\n                case 12:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[0, 9]]);\n        }));\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }]);\n\n  return ConnectionService;\n}();\n\nexport { ConnectionService as default };","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/services/connectionService.ts"],"names":["shortid","Guard","AssetProviderFactory","ConnectionService","connection","null","Promise","resolve","reject","id","generate","assetProvider","createFromConnection","initialize"],"mappings":";;;;AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AAEA,SAASC,oBAAT,QAAqC,2CAArC;AAEA;;;;;AAQA;;;;IAIqBC,iB;;;;;;;;;;AAEjB;;;;yBAIYC,U,EAAyB;AACjCH,MAAAA,KAAK,CAACI,IAAN,CAAWD,UAAX;AAEA,aAAO,IAAIE,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAyB,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAExB,sBAAI,CAACJ,UAAU,CAACK,EAAhB,EAAoB;AAChBL,oBAAAA,UAAU,CAACK,EAAX,GAAgBT,OAAO,CAACU,QAAR,EAAhB;AACH;;AAEKC,kBAAAA,aANkB,GAMFT,oBAAoB,CAACU,oBAArB,CAA0CR,UAA1C,CANE;;AAAA,uBAOpBO,aAAa,CAACE,UAPM;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAQdF,aAAa,CAACE,UAAd,EARc;;AAAA;AAWxBN,kBAAAA,OAAO,CAACH,UAAD,CAAP;AAXwB;AAAA;;AAAA;AAAA;AAAA;AAaxBI,kBAAAA,MAAM,aAAN;;AAbwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAzB;;AAAA;AAAA;AAAA;AAAA,UAAP;AAgBH;;;;;;SAzBgBL,iB","sourcesContent":["import shortid from \"shortid\";\nimport Guard from \"../common/guard\";\nimport { IConnection } from \"../models/applicationState\";\nimport { AssetProviderFactory } from \"../providers/storage/assetProviderFactory\";\n\n/**\n * Functions required for a connection service\n * @member save - Save a connection\n */\nexport interface IConnectionService {\n    save(connection: IConnection): Promise<IConnection>;\n}\n\n/**\n * @name - Connection Service\n * @description - Functions for dealing with project connections\n */\nexport default class ConnectionService implements IConnectionService {\n\n    /**\n     * Save a connection\n     * @param connection - Connection to save\n     */\n    public save(connection: IConnection) {\n        Guard.null(connection);\n\n        return new Promise<IConnection>(async (resolve, reject) => {\n            try {\n                if (!connection.id) {\n                    connection.id = shortid.generate();\n                }\n\n                const assetProvider = AssetProviderFactory.createFromConnection(connection);\n                if (assetProvider.initialize) {\n                    await assetProvider.initialize();\n                }\n\n                resolve(connection);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
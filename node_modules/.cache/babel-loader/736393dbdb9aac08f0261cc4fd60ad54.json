{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Represents a rect object\r\n */\n\nvar Rect =\n/*#__PURE__*/\nfunction () {\n  _createClass(Rect, null, [{\n    key: \"BuildFromJSON\",\n\n    /**\r\n     * Creates a new rect based on extracting specific properties from any provided object\r\n     * @param data - An `IRect` object with `width` and `height` numeric properties\r\n     * @returns A new `Rect` object\r\n     */\n    value: function BuildFromJSON(data) {\n      return new Rect(data.width, data.height);\n    }\n    /**\r\n     * Creates a new `Rect` object with specified `width` and `height`\r\n     * @param width - `width` of the new rect\r\n     * @param height - `height` of the new rect\r\n     */\n\n  }]);\n\n  function Rect(width, height) {\n    _classCallCheck(this, Rect);\n\n    this.width = 0;\n    this.height = 0;\n    this.resize(width, height);\n  }\n  /**\r\n   * Resizes this rect to specified `width` and `height`\r\n   * @param width - a new `width` for the rect\r\n   * @param height - a new `height` for the rect\r\n   */\n\n\n  _createClass(Rect, [{\n    key: \"resize\",\n    value: function resize(width, height) {\n      if (width >= 0 && height >= 0) {\n        this.width = width;\n        this.height = height;\n      }\n    }\n    /**\r\n     * Creates a copy of this rect\r\n     * @returns A new `Rect` object with copied dimensions\r\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new Rect(this.width, this.height);\n    }\n    /**\r\n     * Returns a string representation of the rect in the format `\"[width, height]\"`.\r\n     * @returns A string representation of the rect\r\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"[\".concat(this.width.toString(), \", \").concat(this.height.toString(), \"]\");\n    }\n    /**\r\n     * Returns a JSON representation of the rect\r\n     * @returns An `IRect` object with `width` and `height` numeric properties.\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        width: this.width,\n        height: this.height\n      };\n    }\n  }]);\n\n  return Rect;\n}();\n\nexports.Rect = Rect;","map":null,"metadata":{},"sourceType":"script"}
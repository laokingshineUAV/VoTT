{"ast":null,"code":"/**\r\n * PropertiesPlugin.ts\r\n * @copyright Microsoft 2018\r\n */\nimport { CoreUtils } from '@microsoft/applicationinsights-core-js';\nimport { TelemetryContext } from './TelemetryContext';\nimport { PageView, ConfigurationManager, PropertiesPluginIdentifier, Extensions } from '@microsoft/applicationinsights-common';\n\nvar PropertiesPlugin =\n/** @class */\nfunction () {\n  function PropertiesPlugin() {\n    this.priority = 170;\n    this.identifier = PropertiesPluginIdentifier;\n  }\n\n  PropertiesPlugin.getDefaultConfig = function () {\n    var defaultConfig = {\n      instrumentationKey: function instrumentationKey() {\n        return undefined;\n      },\n      accountId: function accountId() {\n        return null;\n      },\n      sessionRenewalMs: function sessionRenewalMs() {\n        return 30 * 60 * 1000;\n      },\n      samplingPercentage: function samplingPercentage() {\n        return 100;\n      },\n      sessionExpirationMs: function sessionExpirationMs() {\n        return 24 * 60 * 60 * 1000;\n      },\n      cookieDomain: function cookieDomain() {\n        return null;\n      },\n      sdkExtension: function sdkExtension() {\n        return null;\n      },\n      isBrowserLinkTrackingEnabled: function isBrowserLinkTrackingEnabled() {\n        return false;\n      },\n      appId: function appId() {\n        return null;\n      },\n      namePrefix: function namePrefix() {\n        return undefined;\n      }\n    };\n    return defaultConfig;\n  };\n\n  PropertiesPlugin.prototype.initialize = function (config, core, extensions) {\n    var _this = this;\n\n    var defaultConfig = PropertiesPlugin.getDefaultConfig();\n    this._extensionConfig = this._extensionConfig || PropertiesPlugin.getDefaultConfig();\n\n    var _loop_1 = function _loop_1(field) {\n      this_1._extensionConfig[field] = function () {\n        return ConfigurationManager.getConfig(config, field, _this.identifier, defaultConfig[field]());\n      };\n    };\n\n    var this_1 = this;\n\n    for (var field in defaultConfig) {\n      _loop_1(field);\n    }\n\n    this._logger = core.logger;\n    this.context = new TelemetryContext(core.logger, this._extensionConfig);\n  };\n  /**\r\n   * Add Part A fields to the event\r\n   * @param event The event that needs to be processed\r\n   */\n\n\n  PropertiesPlugin.prototype.processTelemetry = function (event) {\n    if (CoreUtils.isNullOrUndefined(event)) {// TODO(barustum): throw an internal event once we have support for internal logging\n    } else {\n      // if the event is not sampled in, do not bother going through the pipeline\n      if (this.context.sample.isSampledIn(event)) {\n        // If the envelope is PageView, reset the internal message count so that we can send internal telemetry for the new page.\n        if (event.name === PageView.envelopeType) {\n          this._logger.resetInternalMessageCount();\n        }\n\n        if (this.context.session) {\n          // If customer did not provide custom session id update the session manager\n          if (typeof this.context.session.id !== \"string\") {\n            this.context.sessionManager.update();\n          }\n        }\n\n        this._processTelemetryInternal(event);\n      }\n\n      if (!CoreUtils.isNullOrUndefined(this._nextPlugin)) {\n        this._nextPlugin.processTelemetry(event);\n      }\n    }\n  };\n  /**\r\n   * Sets the next plugin that comes after this plugin\r\n   * @param nextPlugin The next plugin\r\n   */\n\n\n  PropertiesPlugin.prototype.setNextPlugin = function (nextPlugin) {\n    this._nextPlugin = nextPlugin;\n  };\n\n  PropertiesPlugin.prototype._processTelemetryInternal = function (event) {\n    // set part A  fields\n    if (!event.tags) {\n      event.tags = [];\n    }\n\n    if (!event.ext) {\n      event.ext = {};\n    }\n\n    event.ext[Extensions.DeviceExt] = event.ext[Extensions.DeviceExt] || {};\n    event.ext[Extensions.WebExt] = event.ext[Extensions.WebExt] || {};\n    event.ext[Extensions.UserExt] = event.ext[Extensions.UserExt] || {};\n    event.ext[Extensions.OSExt] = event.ext[Extensions.OSExt] || {};\n    event.ext[Extensions.AppExt] = event.ext[Extensions.AppExt] || {};\n    event.ext[Extensions.TraceExt] = event.ext[Extensions.TraceExt] || {};\n    this.context.applySessionContext(event);\n    this.context.applyApplicationContext(event);\n    this.context.applyDeviceContext(event);\n    this.context.applyOperationContext(event);\n    this.context.applyUserContext(event);\n    this.context.applyOperatingSystemContxt(event);\n    this.context.applyWebContext(event);\n    this.context.applyLocationContext(event); // legacy tags\n\n    this.context.applySampleContext(event); // legacy tags\n\n    this.context.applyInternalContext(event); // legacy tags\n\n    this.context.cleanUp(event);\n  };\n\n  return PropertiesPlugin;\n}();\n\nexport default PropertiesPlugin;","map":null,"metadata":{},"sourceType":"module"}
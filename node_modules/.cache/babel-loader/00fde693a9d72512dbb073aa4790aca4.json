{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/pages/projectSettings/projectSettingsPage.tsx\";\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport ProjectForm from \"./projectForm\";\nimport { strings, interpolate } from \"../../../../common/strings\";\nimport * as projectActions from \"../../../../redux/actions/projectActions\";\nimport * as applicationActions from \"../../../../redux/actions/applicationActions\";\nimport { toast } from \"react-toastify\";\nimport \"./projectSettingsPage.scss\";\nimport ProjectMetrics from \"./projectMetrics\";\n/**\n * Properties for Project Settings Page\n * @member project - Project being edited\n * @member recentProjects - Array of projects recently viewed/edited\n * @member actions - Project actions\n * @member connections - Array of connections available for projects\n */\n\nfunction mapStateToProps(state) {\n  return {\n    project: state.currentProject,\n    connections: state.connections,\n    recentProjects: state.recentProjects,\n    appSettings: state.appSettings\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    projectActions: bindActionCreators(projectActions, dispatch),\n    applicationActions: bindActionCreators(applicationActions, dispatch)\n  };\n}\n\nvar projectFormTempKey = \"projectForm\";\n/**\n * @name - Project Settings Page\n * @description - Page for adding/editing/removing projects\n */\n\nvar ProjectSettingsPage = (_dec = connect(mapStateToProps, mapDispatchToProps), _dec(_class =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProjectSettingsPage, _React$Component);\n\n  function ProjectSettingsPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ProjectSettingsPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ProjectSettingsPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      project: _this.props.project\n    };\n\n    _this.onFormChange = function (project) {\n      if (_this.isPartialProject(project)) {\n        localStorage.setItem(projectFormTempKey, JSON.stringify(project));\n      }\n    };\n\n    _this.onFormSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(project) {\n        var isNew;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                isNew = !!!project.id;\n                _context.next = 3;\n                return _this.props.applicationActions.ensureSecurityToken(project);\n\n              case 3:\n                _context.next = 5;\n                return _this.props.projectActions.saveProject(project);\n\n              case 5:\n                localStorage.removeItem(projectFormTempKey);\n                toast.success(interpolate(strings.projectSettings.messages.saveSuccess, {\n                  project: project\n                }));\n\n                if (isNew) {\n                  _this.props.history.push(\"/projects/\".concat(_this.props.project.id, \"/edit\"));\n                } else {\n                  _this.props.history.goBack();\n                }\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.onFormCancel = function () {\n      localStorage.removeItem(projectFormTempKey);\n\n      _this.props.history.goBack();\n    };\n\n    _this.isPartialProject = function (project) {\n      return project && !!!project.id && (!!project.name || !!project.description || project.sourceConnection && Object.keys(project.sourceConnection).length > 0 || project.targetConnection && Object.keys(project.targetConnection).length > 0 || project.exportFormat && Object.keys(project.exportFormat).length > 0 || project.tags && project.tags.length > 0);\n    };\n\n    return _this;\n  }\n\n  _createClass(ProjectSettingsPage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var projectId, projectJson, projectToLoad;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                projectId = this.props.match.params[\"projectId\"]; // If we are creating a new project check to see if there is a partial\n                // project already created in local storage\n\n                if (!(this.props.match.url === \"/projects/create\")) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                projectJson = localStorage.getItem(projectFormTempKey);\n\n                if (projectJson) {\n                  this.setState({\n                    project: JSON.parse(projectJson)\n                  });\n                }\n\n                _context2.next = 13;\n                break;\n\n              case 6:\n                if (!(!this.props.project && projectId)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                projectToLoad = this.props.recentProjects.find(function (project) {\n                  return project.id === projectId;\n                });\n\n                if (!projectToLoad) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                _context2.next = 11;\n                return this.props.applicationActions.ensureSecurityToken(projectToLoad);\n\n              case 11:\n                _context2.next = 13;\n                return this.props.projectActions.loadProject(projectToLoad);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.project !== this.props.project) {\n        this.setState({\n          project: this.props.project\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"project-settings-page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"project-settings-page-settings m-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-sliders-h\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"px-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, strings.projectSettings.title)), React.createElement(\"div\", {\n        className: \"m-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(ProjectForm, {\n        project: this.state.project,\n        connections: this.props.connections,\n        appSettings: this.props.appSettings,\n        onChange: this.onFormChange,\n        onSubmit: this.onFormSubmit,\n        onCancel: this.onFormCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }))), this.props.project && React.createElement(\"div\", {\n        className: \"project-settings-page-metrics bg-lighter-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(ProjectMetrics, {\n        project: this.props.project,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      })));\n    }\n    /**\n     * When the project form is changed verifies if the project contains enough information\n     * to persist into temp local storage to support better new project flow when\n     * creating new connections inline\n     */\n\n  }]);\n\n  return ProjectSettingsPage;\n}(React.Component)) || _class);\nexport { ProjectSettingsPage as default };","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/pages/projectSettings/projectSettingsPage.tsx"],"names":["React","connect","bindActionCreators","ProjectForm","strings","interpolate","projectActions","applicationActions","toast","ProjectMetrics","mapStateToProps","state","project","currentProject","connections","recentProjects","appSettings","mapDispatchToProps","dispatch","projectFormTempKey","ProjectSettingsPage","props","onFormChange","isPartialProject","localStorage","setItem","JSON","stringify","onFormSubmit","isNew","id","ensureSecurityToken","saveProject","removeItem","success","projectSettings","messages","saveSuccess","history","push","goBack","onFormCancel","name","description","sourceConnection","Object","keys","length","targetConnection","exportFormat","tags","projectId","match","params","url","projectJson","getItem","setState","parse","projectToLoad","find","loadProject","prevProps","title","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport ProjectForm from \"./projectForm\";\nimport { strings, interpolate } from \"../../../../common/strings\";\nimport IProjectActions, * as projectActions from \"../../../../redux/actions/projectActions\";\nimport { IApplicationState, IProject, IConnection, IAppSettings } from \"../../../../models/applicationState\";\nimport IApplicationActions, * as applicationActions from \"../../../../redux/actions/applicationActions\";\nimport { toast } from \"react-toastify\";\nimport \"./projectSettingsPage.scss\";\nimport ProjectMetrics from \"./projectMetrics\";\n\n/**\n * Properties for Project Settings Page\n * @member project - Project being edited\n * @member recentProjects - Array of projects recently viewed/edited\n * @member actions - Project actions\n * @member connections - Array of connections available for projects\n */\nexport interface IProjectSettingsPageProps extends RouteComponentProps, React.Props<ProjectSettingsPage> {\n    project: IProject;\n    recentProjects: IProject[];\n    projectActions: IProjectActions;\n    applicationActions: IApplicationActions;\n    connections: IConnection[];\n    appSettings: IAppSettings;\n}\n\nexport interface IProjectSettingsPageState {\n    project: IProject;\n}\n\nfunction mapStateToProps(state: IApplicationState) {\n    return {\n        project: state.currentProject,\n        connections: state.connections,\n        recentProjects: state.recentProjects,\n        appSettings: state.appSettings,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        projectActions: bindActionCreators(projectActions, dispatch),\n        applicationActions: bindActionCreators(applicationActions, dispatch),\n    };\n}\n\nconst projectFormTempKey = \"projectForm\";\n\n/**\n * @name - Project Settings Page\n * @description - Page for adding/editing/removing projects\n */\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class ProjectSettingsPage extends React.Component<IProjectSettingsPageProps, IProjectSettingsPageState> {\n    public state: IProjectSettingsPageState = {\n        project: this.props.project,\n    };\n\n    public async componentDidMount() {\n        const projectId = this.props.match.params[\"projectId\"];\n        // If we are creating a new project check to see if there is a partial\n        // project already created in local storage\n        if (this.props.match.url === \"/projects/create\") {\n            const projectJson = localStorage.getItem(projectFormTempKey);\n            if (projectJson) {\n                this.setState({ project: JSON.parse(projectJson) });\n            }\n        } else if (!this.props.project && projectId) {\n            const projectToLoad = this.props.recentProjects.find((project) => project.id === projectId);\n            if (projectToLoad) {\n                await this.props.applicationActions.ensureSecurityToken(projectToLoad);\n                await this.props.projectActions.loadProject(projectToLoad);\n            }\n        }\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IProjectSettingsPageProps>) {\n        if (prevProps.project !== this.props.project) {\n            this.setState({ project: this.props.project });\n        }\n    }\n\n    public render() {\n        return (\n            <div className=\"project-settings-page\">\n                <div className=\"project-settings-page-settings m-3\">\n                    <h3>\n                        <i className=\"fas fa-sliders-h\" />\n                        <span className=\"px-2\">\n                            {strings.projectSettings.title}\n                        </span>\n                    </h3>\n                    <div className=\"m-3\">\n                        <ProjectForm\n                            project={this.state.project}\n                            connections={this.props.connections}\n                            appSettings={this.props.appSettings}\n                            onChange={this.onFormChange}\n                            onSubmit={this.onFormSubmit}\n                            onCancel={this.onFormCancel} />\n                    </div>\n                </div>\n                {this.props.project &&\n                    <div className=\"project-settings-page-metrics bg-lighter-1\">\n                        <ProjectMetrics project={this.props.project} />\n                    </div>\n                }\n            </div>\n        );\n    }\n\n    /**\n     * When the project form is changed verifies if the project contains enough information\n     * to persist into temp local storage to support better new project flow when\n     * creating new connections inline\n     */\n    private onFormChange = (project: IProject) => {\n        if (this.isPartialProject(project)) {\n            localStorage.setItem(projectFormTempKey, JSON.stringify(project));\n        }\n    }\n\n    private onFormSubmit = async (project: IProject) => {\n        const isNew = !(!!project.id);\n\n        await this.props.applicationActions.ensureSecurityToken(project);\n        await this.props.projectActions.saveProject(project);\n        localStorage.removeItem(projectFormTempKey);\n\n        toast.success(interpolate(strings.projectSettings.messages.saveSuccess, { project }));\n\n        if (isNew) {\n            this.props.history.push(`/projects/${this.props.project.id}/edit`);\n        } else {\n            this.props.history.goBack();\n        }\n    }\n\n    private onFormCancel = () => {\n        localStorage.removeItem(projectFormTempKey);\n        this.props.history.goBack();\n    }\n\n    /**\n     * Checks whether a project is partially populated\n     */\n    private isPartialProject = (project: IProject): boolean => {\n        return project && !(!!project.id) &&\n            (\n                !!project.name\n                || !!project.description\n                || (project.sourceConnection && Object.keys(project.sourceConnection).length > 0)\n                || (project.targetConnection && Object.keys(project.targetConnection).length > 0)\n                || (project.exportFormat && Object.keys(project.exportFormat).length > 0)\n                || (project.tags && project.tags.length > 0)\n            );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
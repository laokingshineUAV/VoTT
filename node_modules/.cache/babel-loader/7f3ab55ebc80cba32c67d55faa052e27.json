{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/shell/helpMenu.tsx\";\nimport React from \"react\";\nimport MessageBox from \"../common/messageBox/messageBox\";\nimport { strings } from \"../../../common/strings\";\nimport { KeyboardContext, KeyEventType } from \"../common/keyboardManager/keyboardManager\";\nimport { KeyboardBinding } from \"../common/keyboardBinding/keyboardBinding\";\nimport \"./helpMenu.scss\";\nexport var HelpMenu =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HelpMenu, _React$Component);\n\n  function HelpMenu() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HelpMenu);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HelpMenu)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      show: false\n    };\n    _this.icon = \"fa-question-circle\";\n\n    _this.onClose = function () {\n      _this.setState({\n        show: false\n      });\n\n      if (_this.props.onClose) {\n        _this.props.onClose();\n      }\n    };\n\n    _this.getHelpBody = function () {\n      var registrations = _this.context.keyboard.getRegistrations()[KeyEventType.KeyDown];\n\n      if (!registrations) {\n        return;\n      }\n\n      var groupKeys = _this.groupKeys(registrations);\n\n      return React.createElement(\"div\", {\n        className: \"help-body container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, groupKeys.map(function (group) {\n        return group.length ? _this.getRegistrationRow(group, registrations) : null;\n      }));\n    };\n\n    _this.groupKeys = function (registrations) {\n      var allKeys = Object.keys(registrations);\n\n      var caseConsolidatedKeys = _this.consolidateKeyCasings(allKeys);\n\n      var groups = [];\n      var alreadyGrouped = new Set();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = caseConsolidatedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _key2 = _step.value;\n          var group = [_key2];\n\n          if (!alreadyGrouped.has(_key2)) {\n            alreadyGrouped.add(_key2);\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = caseConsolidatedKeys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var otherKey = _step2.value;\n\n                if (!alreadyGrouped.has(otherKey) && _this.bindingEquals(registrations[_key2], registrations[otherKey])) {\n                  group.push(otherKey);\n                  alreadyGrouped.add(otherKey);\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            groups.push(group);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return groups;\n    };\n\n    _this.consolidateKeyCasings = function (allKeys) {\n      var lowerRegistrations = {};\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = allKeys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _key3 = _step3.value;\n\n          var lowerKey = _key3.toLowerCase();\n\n          if (!lowerRegistrations[lowerKey]) {\n            lowerRegistrations[lowerKey] = _key3;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return Object.keys(lowerRegistrations).map(function (lowerKey) {\n        return lowerRegistrations[lowerKey];\n      });\n    };\n\n    _this.getRegistrationRow = function (group, registrations) {\n      var keyRegistration = registrations[group[0]];\n\n      if (keyRegistration) {\n        return React.createElement(\"div\", {\n          key: keyRegistration.displayName,\n          className: \"help-key row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-1 keybinding-icon \".concat(keyRegistration.icon ? \"fas \".concat(keyRegistration.icon) : \"\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"col-4 keybinding-accelerator\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, _this.stringifyGroup(group)), React.createElement(\"div\", {\n          className: \"col-6 keybinding-name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, keyRegistration.displayName));\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(HelpMenu, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"help-menu-button\",\n        onClick: function onClick() {\n          return _this2.setState({\n            show: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas \".concat(this.icon),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }), React.createElement(KeyboardBinding, {\n        displayName: strings.editorPage.help.title,\n        accelerators: [\"CmdOrCtrl+H\", \"CmdOrCtrl+h\"],\n        handler: function handler() {\n          return _this2.setState({\n            show: !_this2.state.show\n          });\n        },\n        icon: this.icon,\n        keyEventType: KeyEventType.KeyDown,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }), React.createElement(MessageBox, {\n        title: strings.titleBar.help,\n        message: this.getHelpBody(),\n        show: this.state.show,\n        onCancel: this.onClose,\n        hideFooter: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"bindingEquals\",\n    value: function bindingEquals(binding1, binding2) {\n      return binding1 && binding2 && binding1.displayName === binding2.displayName && binding1.handler === binding2.handler;\n    }\n  }, {\n    key: \"stringifyGroup\",\n    value: function stringifyGroup(group) {\n      return group.length < 3 ? group.join(\", \") : \"\".concat(group[0], \" - \").concat(group[group.length - 1]);\n    }\n  }]);\n\n  return HelpMenu;\n}(React.Component);\nHelpMenu.contextType = KeyboardContext;","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/shell/helpMenu.tsx"],"names":["React","MessageBox","strings","KeyboardContext","KeyEventType","KeyboardBinding","HelpMenu","state","show","icon","onClose","setState","props","getHelpBody","registrations","context","keyboard","getRegistrations","KeyDown","groupKeys","map","group","length","getRegistrationRow","allKeys","Object","keys","caseConsolidatedKeys","consolidateKeyCasings","groups","alreadyGrouped","Set","key","has","add","otherKey","bindingEquals","push","lowerRegistrations","lowerKey","toLowerCase","keyRegistration","displayName","stringifyGroup","editorPage","help","title","titleBar","binding1","binding2","handler","join","Component","contextType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport MessageBox from \"../common/messageBox/messageBox\";\nimport { strings } from \"../../../common/strings\";\nimport { KeyboardContext, IKeyboardContext, KeyEventType } from \"../common/keyboardManager/keyboardManager\";\nimport { IKeyboardBindingProps, KeyboardBinding } from \"../common/keyboardBinding/keyboardBinding\";\nimport \"./helpMenu.scss\";\n\nexport interface IHelpMenuProps {\n    onClose?: () => void;\n}\n\nexport interface IHelpMenuState {\n    show: boolean;\n}\n\nexport class HelpMenu extends React.Component<IHelpMenuProps, IHelpMenuState> {\n    public static contextType = KeyboardContext;\n    public context!: IKeyboardContext;\n\n    public state = {\n        show: false,\n    };\n    private icon: string = \"fa-question-circle\";\n\n    public render() {\n        return (\n            <div className={\"help-menu-button\"} onClick={() => this.setState({show: true})}>\n                <i className={`fas ${this.icon}`}/>\n                <KeyboardBinding\n                    displayName={strings.editorPage.help.title}\n                    accelerators={[\"CmdOrCtrl+H\", \"CmdOrCtrl+h\"]}\n                    handler={() => this.setState({show: !this.state.show})}\n                    icon={this.icon}\n                    keyEventType={KeyEventType.KeyDown}\n                />\n                <MessageBox\n                    title={strings.titleBar.help}\n                    message={this.getHelpBody()}\n                    show={this.state.show}\n                    onCancel={this.onClose}\n                    hideFooter={true}\n                />\n            </div>\n        );\n    }\n\n    private onClose = () => {\n        this.setState({show: false});\n        if (this.props.onClose) {\n            this.props.onClose();\n        }\n    }\n\n    private getHelpBody = () => {\n\n        const registrations = this.context.keyboard.getRegistrations()[KeyEventType.KeyDown];\n        if (!registrations) {\n            return;\n        }\n\n        const groupKeys = this.groupKeys(registrations);\n\n        return (\n            <div className=\"help-body container\">\n                {\n                    groupKeys.map((group) => group.length ? this.getRegistrationRow(group, registrations) : null)\n                }\n            </div>\n        );\n    }\n\n    private groupKeys = (registrations: {[key: string]: IKeyboardBindingProps}) => {\n        const allKeys = Object.keys(registrations);\n        const caseConsolidatedKeys = this.consolidateKeyCasings(allKeys);\n\n        const groups = [];\n        const alreadyGrouped = new Set();\n\n        for (const key of caseConsolidatedKeys) {\n            const group = [key];\n            if (!alreadyGrouped.has(key)) {\n                alreadyGrouped.add(key);\n                for (const otherKey of caseConsolidatedKeys) {\n                    if (!alreadyGrouped.has(otherKey) &&\n                            this.bindingEquals(registrations[key], registrations[otherKey])) {\n                        group.push(otherKey);\n                        alreadyGrouped.add(otherKey);\n                    }\n                }\n                groups.push(group);\n            }\n        }\n        return groups;\n    }\n\n    private bindingEquals(binding1: IKeyboardBindingProps, binding2: IKeyboardBindingProps) {\n        return binding1 && binding2\n                && binding1.displayName === binding2.displayName\n                && binding1.handler === binding2.handler;\n    }\n\n    private consolidateKeyCasings = (allKeys: string[]): string[] => {\n        const lowerRegistrations = {};\n        for (const key of allKeys) {\n            const lowerKey = key.toLowerCase();\n            if (!lowerRegistrations[lowerKey]) {\n                lowerRegistrations[lowerKey] = key;\n            }\n        }\n        return Object.keys(lowerRegistrations).map((lowerKey) => lowerRegistrations[lowerKey]);\n    }\n\n    private getRegistrationRow = (group: string[], registrations: {[key: string]: IKeyboardBindingProps}) => {\n        const keyRegistration = registrations[group[0]];\n        if (keyRegistration) {\n            return (\n                <div key={keyRegistration.displayName} className={\"help-key row\"}>\n                    <div className={`col-1 keybinding-icon ${(keyRegistration.icon)\n                        ? `fas ${keyRegistration.icon}` : \"\"}`}/>\n                    <div className=\"col-4 keybinding-accelerator\">{this.stringifyGroup(group)}</div>\n                    <div className=\"col-6 keybinding-name\">{keyRegistration.displayName}</div>\n                </div>\n            );\n        }\n    }\n\n    private stringifyGroup(group: string[]): string {\n        return (group.length < 3) ? group.join(\", \") : `${group[0]} - ${group[group.length - 1]}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
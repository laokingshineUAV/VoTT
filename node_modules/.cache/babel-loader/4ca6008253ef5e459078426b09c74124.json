{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Guard =\n/*#__PURE__*/\nfunction () {\n  function Guard() {\n    _classCallCheck(this, Guard);\n  }\n\n  _createClass(Guard, null, [{\n    key: \"emtpy\",\n\n    /**\n     * Validates the string express is not null or empty, otherwise throws an exception\n     * @param value - The value to validate\n     * @param paramName - The name of the parameter to validate\n     * @param message - The error message to return on invalid value\n     */\n    value: function emtpy(value, paramName, message) {\n      if (!!value === false || value.trim().length === 0) {\n        message = message || \"\\\"\".concat(paramName || \"value\", \"\\\" cannot be null or empty\");\n        throw new Error(message);\n      }\n    }\n    /**\n     * Validates the value is not null, otherwise throw an exception\n     * @param value - The value to validate\n     * @param paramName - The name of the parameter to validate\n     * @param message - The error message to return on invalid value\n     */\n\n  }, {\n    key: \"null\",\n    value: function _null(value, paramName, message) {\n      if (!!value === false) {\n        message = message || \"\\\"\".concat(paramName || \"value\", \"\\\" cannot be null or undefined\");\n        throw new Error(message);\n      }\n    }\n    /**\n     * Validates the value meets the specified expectation, otherwise throws an exception\n     * @param value - The value to validate\n     * @param predicate - The predicate used for validation\n     * @param paramName - The name of the parameter to validate\n     * @param message - The error message to return on invalid value\n     */\n\n  }, {\n    key: \"expression\",\n    value: function expression(value, predicate, paramName, message) {\n      if (!!value === false || !predicate(value)) {\n        message = message || \"\\\"\".concat(paramName || \"value\", \"\\\" is not a valid value\");\n        throw new Error(message);\n      }\n    }\n  }]);\n\n  return Guard;\n}();\n\nexports.default = Guard;","map":null,"metadata":{},"sourceType":"script"}
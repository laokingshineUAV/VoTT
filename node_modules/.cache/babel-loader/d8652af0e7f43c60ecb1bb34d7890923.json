{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/common/connectionPicker/connectionPicker.tsx\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n/**\n * Properties for Connection Picker\n * @member id - ID for HTML select element\n * @member value - Selected value of picker\n * @member connections - Array of connections for choosing\n * @member onChange - Function to call on change of selection\n */\n\n/**\n * @name - Connection Picker\n * @description - Enhanced dropdown for selecting a Connection\n */\nexport var ConnectionPicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ConnectionPicker, _React$Component);\n\n  function ConnectionPicker(props, context) {\n    var _this;\n\n    _classCallCheck(this, ConnectionPicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionPicker).call(this, props, context));\n\n    _this.getConnectionText = function (connection) {\n      var options = connection.providerOptions;\n\n      if (options[\"folderPath\"]) {\n        return \"\".concat(connection.name, \" (\").concat(options[\"folderPath\"], \")\");\n      } else if (options[\"accountName\"]) {\n        return \"\".concat(connection.name, \" (Azure:\").concat(options[\"accountName\"], \"\\\\\").concat(options[\"containerName\"], \")\");\n      } else {\n        return connection.name;\n      }\n    };\n\n    _this.onChange = function (e) {\n      var selectedConnection = _this.props.connections.find(function (connection) {\n        return connection.id === e.target.value;\n      }) || {};\n\n      _this.setState({\n        value: selectedConnection\n      }, function () {\n        return _this.props.onChange(selectedConnection);\n      });\n    };\n\n    _this.createConnection = function () {\n      _this.props.history.push(\"/connections/create\");\n    };\n\n    _this.state = {\n      value: _this.props.value\n    };\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ConnectionPicker, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.value !== this.props.value) {\n        this.setState({\n          value: this.props.value || null\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          id = _this$props.id,\n          connections = _this$props.connections;\n      var selectedValue = this.state.value ? this.state.value.id : \"\";\n      return React.createElement(\"div\", {\n        className: \"input-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        id: id,\n        value: selectedValue,\n        onChange: this.onChange,\n        className: \"form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Select Connection\"), connections.map(function (connection) {\n        return React.createElement(\"option\", {\n          className: \"connection-option\",\n          key: connection.id,\n          value: connection.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, _this2.getConnectionText(connection));\n      })), React.createElement(\"div\", {\n        className: \"input-group-append\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-primary add-connection\",\n        type: \"button\",\n        onClick: this.createConnection,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Add Connection\")));\n    }\n  }]);\n\n  return ConnectionPicker;\n}(React.Component);\nexport var ConnectionPickerWithRouter = withRouter(ConnectionPicker);","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/common/connectionPicker/connectionPicker.tsx"],"names":["React","withRouter","ConnectionPicker","props","context","getConnectionText","connection","options","providerOptions","name","onChange","e","selectedConnection","connections","find","id","target","value","setState","createConnection","history","push","state","bind","prevProps","selectedValue","map","Component","ConnectionPickerWithRouter"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { IConnection } from \"../../../../models/applicationState\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n/**\n * Properties for Connection Picker\n * @member id - ID for HTML select element\n * @member value - Selected value of picker\n * @member connections - Array of connections for choosing\n * @member onChange - Function to call on change of selection\n */\nexport interface IConnectionPickerProps extends RouteComponentProps {\n    id?: string;\n    value: any;\n    connections: IConnection[];\n    onChange: (value) => void;\n}\n\n/**\n * State for Connection Picker\n * @member value - Selected value\n */\nexport interface IConnectionPickerState {\n    value: any;\n}\n\n/**\n * @name - Connection Picker\n * @description - Enhanced dropdown for selecting a Connection\n */\nexport class ConnectionPicker extends React.Component<IConnectionPickerProps, IConnectionPickerState> {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            value: this.props.value,\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    public componentDidUpdate(prevProps) {\n        if (prevProps.value !== this.props.value) {\n            this.setState({\n                value: this.props.value || null,\n            });\n        }\n    }\n\n    public render() {\n        const { id, connections } = this.props;\n        const selectedValue = this.state.value ? this.state.value.id : \"\";\n\n        return (\n            <div className=\"input-group\">\n                <select id={id} value={selectedValue} onChange={this.onChange} className=\"form-control\">\n                    <option>Select Connection</option>\n                    {connections.map((connection) =>\n                        <option\n                            className=\"connection-option\"\n                            key={connection.id}\n                            value={connection.id}>{this.getConnectionText(connection)}\n                        </option>)\n                    }\n                </select>\n                <div className=\"input-group-append\">\n                    <button className=\"btn btn-primary add-connection\"\n                        type=\"button\"\n                        onClick={this.createConnection}>Add Connection</button>\n                </div>\n            </div>\n        );\n    }\n\n    private getConnectionText = (connection: IConnection): string => {\n        const options = connection.providerOptions;\n\n        if (options[\"folderPath\"]) {\n            return `${connection.name} (${options[\"folderPath\"]})`;\n        } else if (options[\"accountName\"]) {\n            return `${connection.name} (Azure:${options[\"accountName\"]}\\\\${options[\"containerName\"]})`;\n        } else {\n            return connection.name;\n        }\n    }\n\n    private onChange = (e) => {\n        const selectedConnection = this.props.connections\n            .find((connection) => connection.id === e.target.value) || {};\n\n        this.setState({\n            value: selectedConnection,\n        }, () => this.props.onChange(selectedConnection));\n    }\n\n    private createConnection = () => {\n        this.props.history.push(\"/connections/create\");\n    }\n}\n\nexport const ConnectionPickerWithRouter = withRouter<IConnectionPickerProps>(ConnectionPicker);\n"]},"metadata":{},"sourceType":"module"}
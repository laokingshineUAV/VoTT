{"ast":null,"code":"import Guard from \"./guard\";\n/**\n * Gets the current position of the specified content source\n * @param contentSource The HTML element to get position\n */\n\nexport function createContentBoundingBox(contentSource) {\n  Guard.null(contentSource);\n  var aspectRatio = null;\n\n  if (contentSource instanceof HTMLVideoElement) {\n    aspectRatio = contentSource.videoWidth / contentSource.videoHeight;\n  } else if (contentSource instanceof HTMLImageElement) {\n    aspectRatio = contentSource.naturalWidth / contentSource.naturalHeight;\n  } else {\n    aspectRatio = contentSource.width / contentSource.height;\n  }\n\n  var size = null; // Landscape = aspectRatio > 1\n  // Portrait  = aspectRatio < 1\n\n  if (aspectRatio >= 1) {\n    size = {\n      width: contentSource.offsetWidth,\n      height: contentSource.offsetWidth / aspectRatio\n    }; // Render as landscape except for when the calculated height\n    // would be taller than the available area\n\n    return size.height > contentSource.offsetHeight ? createPortraitBoundingBox(contentSource, aspectRatio) : createLandscapeBoundingBox(contentSource, aspectRatio);\n  } else {\n    size = {\n      width: contentSource.offsetHeight * aspectRatio,\n      height: contentSource.offsetHeight\n    }; // Render as portrait except for when the calculated width\n    // would be wider then the available area\n\n    return size.width > contentSource.offsetWidth ? createLandscapeBoundingBox(contentSource, aspectRatio) : createPortraitBoundingBox(contentSource, aspectRatio);\n  }\n}\n/**\n * Gets a landscape bounding box for the canvas element based on the content source and aspect ratio\n * Disregards generated bars from the browser\n * @param contentSource The HTML content element\n * @param aspectRatio The requested aspect ratio\n */\n\nexport function createLandscapeBoundingBox(contentSource, aspectRatio) {\n  Guard.null(contentSource);\n  var size = {\n    width: contentSource.offsetWidth,\n    height: contentSource.offsetWidth / aspectRatio\n  };\n  return {\n    width: size.width,\n    height: size.height,\n    left: contentSource.offsetLeft,\n    top: contentSource.offsetTop + (contentSource.offsetHeight - size.height) / 2\n  };\n}\n/**\n * Gets a portrait bounding box for the canvas element based on the content source and aspect ratio\n * Disregards generated bars from the browser\n * @param contentSource The HTML content element\n * @param aspectRatio The requested aspect ratio\n */\n\nexport function createPortraitBoundingBox(contentSource, aspectRatio) {\n  Guard.null(contentSource);\n  var size = {\n    width: contentSource.offsetHeight * aspectRatio,\n    height: contentSource.offsetHeight\n  };\n  return {\n    width: size.width,\n    height: size.height,\n    left: contentSource.offsetLeft + (contentSource.offsetWidth - size.width) / 2,\n    top: contentSource.offsetTop\n  };\n}","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/common/layout.ts"],"names":["Guard","createContentBoundingBox","contentSource","null","aspectRatio","HTMLVideoElement","videoWidth","videoHeight","HTMLImageElement","naturalWidth","naturalHeight","width","height","size","offsetWidth","offsetHeight","createPortraitBoundingBox","createLandscapeBoundingBox","left","offsetLeft","top","offsetTop"],"mappings":"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","sourcesContent":["import { ContentSource } from \"../react/components/common/assetPreview/assetPreview\";\nimport { IBoundingBox, ISize } from \"../models/applicationState\";\nimport Guard from \"./guard\";\n\n/**\n * Gets the current position of the specified content source\n * @param contentSource The HTML element to get position\n */\nexport function createContentBoundingBox(contentSource: ContentSource): IBoundingBox {\n    Guard.null(contentSource);\n\n    let aspectRatio: number = null;\n    if (contentSource instanceof HTMLVideoElement) {\n        aspectRatio = contentSource.videoWidth / contentSource.videoHeight;\n    } else if (contentSource instanceof HTMLImageElement) {\n        aspectRatio = contentSource.naturalWidth / contentSource.naturalHeight;\n    } else {\n        aspectRatio = contentSource.width / contentSource.height;\n    }\n\n    let size: ISize = null;\n\n    // Landscape = aspectRatio > 1\n    // Portrait  = aspectRatio < 1\n    if (aspectRatio >= 1) {\n        size = {\n            width: contentSource.offsetWidth,\n            height: contentSource.offsetWidth / aspectRatio,\n        };\n\n        // Render as landscape except for when the calculated height\n        // would be taller than the available area\n        return size.height > contentSource.offsetHeight\n            ? createPortraitBoundingBox(contentSource, aspectRatio)\n            : createLandscapeBoundingBox(contentSource, aspectRatio);\n    } else {\n        size = {\n            width: contentSource.offsetHeight * aspectRatio,\n            height: contentSource.offsetHeight,\n        };\n\n        // Render as portrait except for when the calculated width\n        // would be wider then the available area\n        return size.width > contentSource.offsetWidth\n            ? createLandscapeBoundingBox(contentSource, aspectRatio)\n            : createPortraitBoundingBox(contentSource, aspectRatio);\n    }\n}\n\n/**\n * Gets a landscape bounding box for the canvas element based on the content source and aspect ratio\n * Disregards generated bars from the browser\n * @param contentSource The HTML content element\n * @param aspectRatio The requested aspect ratio\n */\nexport function createLandscapeBoundingBox(contentSource: ContentSource, aspectRatio: number): IBoundingBox {\n    Guard.null(contentSource);\n\n    const size = {\n        width: contentSource.offsetWidth,\n        height: contentSource.offsetWidth / aspectRatio,\n    };\n\n    return {\n        width: size.width,\n        height: size.height,\n        left: contentSource.offsetLeft,\n        top: contentSource.offsetTop + ((contentSource.offsetHeight - size.height) / 2),\n    };\n}\n\n/**\n * Gets a portrait bounding box for the canvas element based on the content source and aspect ratio\n * Disregards generated bars from the browser\n * @param contentSource The HTML content element\n * @param aspectRatio The requested aspect ratio\n */\nexport function createPortraitBoundingBox(contentSource: ContentSource, aspectRatio: number): IBoundingBox {\n    Guard.null(contentSource);\n\n    const size = {\n        width: contentSource.offsetHeight * aspectRatio,\n        height: contentSource.offsetHeight,\n    };\n\n    return {\n        width: size.width,\n        height: size.height,\n        left: contentSource.offsetLeft + ((contentSource.offsetWidth - size.width) / 2),\n        top: contentSource.offsetTop,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ActionTypes } from \"./actionTypes\";\nimport { createPayloadAction } from \"./actionCreators\";\nimport ConnectionService from \"../../services/connectionService\";\n/**\n * Actions to be performed in relation to connections\n */\n\n/**\n * Dispatches Load Connection action and resolves with IConnection\n * @param connection - Connection to load\n */\nexport function loadConnection(connection) {\n  return function (dispatch) {\n    dispatch(loadConnectionAction(connection));\n    return Promise.resolve(connection);\n  };\n}\n/**\n * Dispatches Save Connection action and resolves with IConnection\n * @param connection - Connection to save\n */\n\nexport function saveConnection(connection) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var connectionService;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                connectionService = new ConnectionService();\n                _context.next = 3;\n                return connectionService.save(connection);\n\n              case 3:\n                dispatch(saveConnectionAction(connection));\n                return _context.abrupt(\"return\", Promise.resolve(connection));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\n/**\n * Dispatches Delete Connection action and resolves with IConnection\n * @param connection - Connection to delete\n */\n\nexport function deleteConnection(connection) {\n  return function (dispatch) {\n    dispatch(deleteConnectionAction(connection));\n    return Promise.resolve();\n  };\n}\n/**\n * Load connection action type\n */\n\n/**\n * Instance of load connection action\n */\nexport var loadConnectionAction = createPayloadAction(ActionTypes.LOAD_CONNECTION_SUCCESS);\n/**\n * Instance of save connection action\n */\n\nexport var saveConnectionAction = createPayloadAction(ActionTypes.SAVE_CONNECTION_SUCCESS);\n/**\n * Instance of delete connection action\n */\n\nexport var deleteConnectionAction = createPayloadAction(ActionTypes.DELETE_CONNECTION_SUCCESS);","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/redux/actions/connectionActions.ts"],"names":["ActionTypes","createPayloadAction","ConnectionService","loadConnection","connection","dispatch","loadConnectionAction","Promise","resolve","saveConnection","connectionService","save","saveConnectionAction","deleteConnection","deleteConnectionAction","LOAD_CONNECTION_SUCCESS","SAVE_CONNECTION_SUCCESS","DELETE_CONNECTION_SUCCESS"],"mappings":";;AAEA,SAASA,WAAT,QAA4B,eAA5B;AACA,SAAyBC,mBAAzB,QAAoD,kBAApD;AAEA,OAAOC,iBAAP,MAA8B,kCAA9B;AAEA;;;;AASA;;;;AAIA,OAAO,SAASC,cAAT,CAAwBC,UAAxB,EAA+F;AAClG,SAAO,UAACC,QAAD,EAAwB;AAC3BA,IAAAA,QAAQ,CAACC,oBAAoB,CAACF,UAAD,CAArB,CAAR;AACA,WAAOG,OAAO,CAACC,OAAR,CAAgBJ,UAAhB,CAAP;AACH,GAHD;AAIH;AAED;;;;;AAIA,OAAO,SAASK,cAAT,CAAwBL,UAAxB,EAA+F;AAClG;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACGK,gBAAAA,iBADH,GACuB,IAAIR,iBAAJ,EADvB;AAAA;AAAA,uBAEGQ,iBAAiB,CAACC,IAAlB,CAAuBP,UAAvB,CAFH;;AAAA;AAGHC,gBAAAA,QAAQ,CAACO,oBAAoB,CAACR,UAAD,CAArB,CAAR;AAHG,iDAIIG,OAAO,CAACC,OAAR,CAAgBJ,UAAhB,CAJJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMH;AAED;;;;;AAIA,OAAO,SAASS,gBAAT,CAA0BT,UAA1B,EAA0F;AAC7F,SAAO,UAACC,QAAD,EAAwB;AAC3BA,IAAAA,QAAQ,CAACS,sBAAsB,CAACV,UAAD,CAAvB,CAAR;AACA,WAAOG,OAAO,CAACC,OAAR,EAAP;AACH,GAHD;AAIH;AAED;;;;AAqBA;;;AAGA,OAAO,IAAMF,oBAAoB,GAAGL,mBAAmB,CAAwBD,WAAW,CAACe,uBAApC,CAAhD;AACP;;;;AAGA,OAAO,IAAMH,oBAAoB,GAAGX,mBAAmB,CAAwBD,WAAW,CAACgB,uBAApC,CAAhD;AACP;;;;AAGA,OAAO,IAAMF,sBAAsB,GAC/Bb,mBAAmB,CAA0BD,WAAW,CAACiB,yBAAtC,CADhB","sourcesContent":["import shortid from \"shortid\";\nimport { IConnection } from \"../../models/applicationState\";\nimport { ActionTypes } from \"./actionTypes\";\nimport { IPayloadAction, createPayloadAction } from \"./actionCreators\";\nimport { Dispatch } from \"redux\";\nimport ConnectionService from \"../../services/connectionService\";\n\n/**\n * Actions to be performed in relation to connections\n */\nexport default interface IConnectionActions {\n    loadConnection(connection: IConnection): Promise<IConnection>;\n    saveConnection(connection: IConnection): Promise<IConnection>;\n    deleteConnection(connection: IConnection): Promise<void>;\n}\n\n/**\n * Dispatches Load Connection action and resolves with IConnection\n * @param connection - Connection to load\n */\nexport function loadConnection(connection: IConnection): (dispatch: Dispatch) => Promise<IConnection> {\n    return (dispatch: Dispatch) => {\n        dispatch(loadConnectionAction(connection));\n        return Promise.resolve(connection);\n    };\n}\n\n/**\n * Dispatches Save Connection action and resolves with IConnection\n * @param connection - Connection to save\n */\nexport function saveConnection(connection: IConnection): (dispatch: Dispatch) => Promise<IConnection> {\n    return async (dispatch: Dispatch) => {\n        const connectionService = new ConnectionService();\n        await connectionService.save(connection);\n        dispatch(saveConnectionAction(connection));\n        return Promise.resolve(connection);\n    };\n}\n\n/**\n * Dispatches Delete Connection action and resolves with IConnection\n * @param connection - Connection to delete\n */\nexport function deleteConnection(connection: IConnection): (dispatch: Dispatch) => Promise<void> {\n    return (dispatch: Dispatch) => {\n        dispatch(deleteConnectionAction(connection));\n        return Promise.resolve();\n    };\n}\n\n/**\n * Load connection action type\n */\nexport interface ILoadConnectionAction extends IPayloadAction<string, IConnection> {\n    type: ActionTypes.LOAD_CONNECTION_SUCCESS;\n}\n\n/**\n * Save connection action type\n */\nexport interface ISaveConnectionAction extends IPayloadAction<string, IConnection> {\n    type: ActionTypes.SAVE_CONNECTION_SUCCESS;\n}\n\n/**\n * Delete connection action type\n */\nexport interface IDeleteConnectionAction extends IPayloadAction<string, IConnection> {\n    type: ActionTypes.DELETE_CONNECTION_SUCCESS;\n}\n\n/**\n * Instance of load connection action\n */\nexport const loadConnectionAction = createPayloadAction<ILoadConnectionAction>(ActionTypes.LOAD_CONNECTION_SUCCESS);\n/**\n * Instance of save connection action\n */\nexport const saveConnectionAction = createPayloadAction<ISaveConnectionAction>(ActionTypes.SAVE_CONNECTION_SUCCESS);\n/**\n * Instance of delete connection action\n */\nexport const deleteConnectionAction =\n    createPayloadAction<IDeleteConnectionAction>(ActionTypes.DELETE_CONNECTION_SUCCESS);\n"]},"metadata":{},"sourceType":"module"}
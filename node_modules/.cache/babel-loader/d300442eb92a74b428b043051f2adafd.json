{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/common/alert/alert.tsx\";\nimport React from \"react\";\nimport { Button } from \"reactstrap\";\nimport MessageBox from \"../messageBox/messageBox\";\n/**\n * Properties for Alert Component\n * @member closeButtonText - Text displayed on 'Close' button. Default 'OK'\n * @member closeButtonColor - Color of 'Close' button. Default 'primary'\n * @member onClose - Function to execute on alert close\n */\n\n/**\n * @name - Alert\n * @description - Generic Alert dialog\n */\nvar Alert =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Alert, _React$Component);\n\n  function Alert(props, context) {\n    var _this;\n\n    _classCallCheck(this, Alert);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Alert).call(this, props, context));\n    _this.state = {\n      params: null\n    };\n    _this.messageBox = React.createRef();\n    _this.open = _this.open.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.close = _this.close.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onCloseClick = _this.onCloseClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Alert, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(MessageBox, {\n        ref: this.messageBox,\n        title: this.props.title,\n        message: this.props.message,\n        params: this.state.params,\n        show: this.props.show,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Button, {\n        autoFocus: true,\n        color: this.props.closeButtonColor || \"primary\",\n        onClick: this.onCloseClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, this.props.closeButtonText || \"OK\"));\n    }\n    /**\n     * Open Alert dialog\n     * @param params - Arguments to be set in state\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this2 = this;\n\n      for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n        params[_key] = arguments[_key];\n      }\n\n      this.setState({\n        params: params\n      }, function () {\n        return _this2.messageBox.current.open();\n      });\n    }\n    /**\n     * Close Alert dialog\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.messageBox.current.close();\n    }\n  }, {\n    key: \"onCloseClick\",\n    value: function onCloseClick() {\n      if (this.props.onClose) {\n        this.props.onClose.apply(null, this.state.params);\n      }\n    }\n  }]);\n\n  return Alert;\n}(React.Component);\n\nexport { Alert as default };","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/common/alert/alert.tsx"],"names":["React","Button","MessageBox","Alert","props","context","state","params","messageBox","createRef","open","bind","close","onCloseClick","title","message","show","closeButtonColor","closeButtonText","setState","current","onClose","apply","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAOC,UAAP,MAA6C,0BAA7C;AAEA;;;;;;;AAqBA;;;;IAIqBC,K;;;;;AAGjB,iBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;;AACxB,+EAAMD,KAAN,EAAaC,OAAb;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE;AADC,KAAb;AAIA,UAAKC,UAAL,GAAkBR,KAAK,CAACS,SAAN,EAAlB;AAEA,UAAKC,IAAL,GAAY,MAAKA,IAAL,CAAUC,IAAV,uDAAZ;AACA,UAAKC,KAAL,GAAa,MAAKA,KAAL,CAAWD,IAAX,uDAAb;AACA,UAAKE,YAAL,GAAoB,MAAKA,YAAL,CAAkBF,IAAlB,uDAApB;AAXwB;AAY3B;;;;6BAEe;AACZ,aACI,oBAAC,UAAD;AACI,QAAA,GAAG,EAAE,KAAKH,UADd;AAEI,QAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWU,KAFtB;AAGI,QAAA,OAAO,EAAE,KAAKV,KAAL,CAAWW,OAHxB;AAII,QAAA,MAAM,EAAE,KAAKT,KAAL,CAAWC,MAJvB;AAKI,QAAA,IAAI,EAAE,KAAKH,KAAL,CAAWY,IALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOI,oBAAC,MAAD;AACI,QAAA,SAAS,EAAE,IADf;AAEI,QAAA,KAAK,EAAE,KAAKZ,KAAL,CAAWa,gBAAX,IAA+B,SAF1C;AAGI,QAAA,OAAO,EAAE,KAAKJ,YAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKK,KAAKT,KAAL,CAAWc,eAAX,IAA8B,IALnC,CAPJ,CADJ;AAiBH;AAED;;;;;;;2BAIoC;AAAA;;AAAA,wCAArBX,MAAqB;AAArBA,QAAAA,MAAqB;AAAA;;AAChC,WAAKY,QAAL,CAAc;AAAEZ,QAAAA,MAAM,EAANA;AAAF,OAAd,EAA0B;AAAA,eAAM,MAAI,CAACC,UAAL,CAAgBY,OAAhB,CAAwBV,IAAxB,EAAN;AAAA,OAA1B;AACH;AAED;;;;;;4BAGqB;AACjB,WAAKF,UAAL,CAAgBY,OAAhB,CAAwBR,KAAxB;AACH;;;mCAEsB;AACnB,UAAI,KAAKR,KAAL,CAAWiB,OAAf,EAAwB;AACpB,aAAKjB,KAAL,CAAWiB,OAAX,CAAmBC,KAAnB,CAAyB,IAAzB,EAA+B,KAAKhB,KAAL,CAAWC,MAA1C;AACH;AACJ;;;;EAxD8BP,KAAK,CAACuB,S;;SAApBpB,K","sourcesContent":["import React, { RefObject } from \"react\";\nimport { Button } from \"reactstrap\";\nimport MessageBox, { IMessageBoxProps } from \"../messageBox/messageBox\";\n\n/**\n * Properties for Alert Component\n * @member closeButtonText - Text displayed on 'Close' button. Default 'OK'\n * @member closeButtonColor - Color of 'Close' button. Default 'primary'\n * @member onClose - Function to execute on alert close\n */\nexport interface IAlertProps extends IMessageBoxProps {\n    closeButtonText?: string;\n    closeButtonColor?: string;\n    onClose?: () => void;\n    show?: boolean;\n}\n\n/**\n * State for Alert Component\n * @member params - Arguments passed in the open command\n */\nexport interface IAlertState {\n    params: any[];\n}\n\n/**\n * @name - Alert\n * @description - Generic Alert dialog\n */\nexport default class Alert extends React.Component<IAlertProps, IAlertState> {\n    private messageBox: RefObject<MessageBox>;\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            params: null,\n        };\n\n        this.messageBox = React.createRef<MessageBox>();\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onCloseClick = this.onCloseClick.bind(this);\n    }\n\n    public render() {\n        return (\n            <MessageBox\n                ref={this.messageBox}\n                title={this.props.title}\n                message={this.props.message}\n                params={this.state.params}\n                show={this.props.show}\n            >\n                <Button\n                    autoFocus={true}\n                    color={this.props.closeButtonColor || \"primary\"}\n                    onClick={this.onCloseClick}\n                >\n                    {this.props.closeButtonText || \"OK\"}\n                </Button>\n            </MessageBox>\n        );\n    }\n\n    /**\n     * Open Alert dialog\n     * @param params - Arguments to be set in state\n     */\n    public open(...params: any[]): void {\n        this.setState({ params }, () => this.messageBox.current.open());\n    }\n\n    /**\n     * Close Alert dialog\n     */\n    public close(): void {\n        this.messageBox.current.close();\n    }\n\n    private onCloseClick() {\n        if (this.props.onClose) {\n            this.props.onClose.apply(null, this.state.params);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Guard from \"../../common/guard\";\n\n/**\n * @name - Export Provider Factory\n * @description - Creates instance of export providers based on request provider type\n */\nexport var ExportProviderFactory =\n/*#__PURE__*/\nfunction () {\n  function ExportProviderFactory() {\n    _classCallCheck(this, ExportProviderFactory);\n  }\n\n  _createClass(ExportProviderFactory, null, [{\n    key: \"register\",\n\n    /**\n     * Registers a factory method for the specified export provider type\n     * @param options - The options to use when registering an export provider\n     */\n    value: function register(options) {\n      Guard.null(options);\n      Guard.empty(options.name);\n      Guard.empty(options.displayName);\n      Guard.null(options.factory); // The first provider registered will be the default\n\n      if (ExportProviderFactory.defaultProviderOptions === null) {\n        ExportProviderFactory.defaultProviderOptions = options;\n      }\n\n      ExportProviderFactory.providerRegistry[options.name] = options;\n    }\n    /**\n     * Creates new instances of the specified export provider\n     * @param name - The name of the export provider to instantiate\n     * @param project - The project to load into the export provider\n     * @param options  - The provider specific options for exporting\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(name, project, options) {\n      Guard.empty(name);\n      Guard.null(project);\n      var handler = ExportProviderFactory.providerRegistry[name];\n\n      if (!handler) {\n        throw new Error(\"No export provider has been registered with name '\".concat(name, \"'\"));\n      }\n\n      return handler.factory(project, options);\n    }\n    /**\n     * Create export provider from project\n     * @param project VoTT project\n     */\n\n  }, {\n    key: \"createFromProject\",\n    value: function createFromProject(project) {\n      return ExportProviderFactory.create(project.exportFormat.providerType, project, project.exportFormat.providerOptions);\n    }\n  }, {\n    key: \"providers\",\n\n    /**\n     * @returns Dictionary of registered providers\n     */\n    get: function get() {\n      return _objectSpread({}, ExportProviderFactory.providerRegistry);\n    }\n    /**\n     * @returns Options from specified default provider\n     */\n\n  }, {\n    key: \"defaultProvider\",\n    get: function get() {\n      return ExportProviderFactory.defaultProviderOptions;\n    }\n  }]);\n\n  return ExportProviderFactory;\n}();\nExportProviderFactory.providerRegistry = {};\nExportProviderFactory.defaultProviderOptions = null;","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/providers/export/exportProviderFactory.ts"],"names":["Guard","ExportProviderFactory","options","null","empty","name","displayName","factory","defaultProviderOptions","providerRegistry","project","handler","Error","create","exportFormat","providerType","providerOptions"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;;AAWA;;;;AAIA,WAAaC,qBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAgBI;;;;AAhBJ,6BAoB2BC,OApB3B,EAoBwE;AAChEF,MAAAA,KAAK,CAACG,IAAN,CAAWD,OAAX;AACAF,MAAAA,KAAK,CAACI,KAAN,CAAYF,OAAO,CAACG,IAApB;AACAL,MAAAA,KAAK,CAACI,KAAN,CAAYF,OAAO,CAACI,WAApB;AACAN,MAAAA,KAAK,CAACG,IAAN,CAAWD,OAAO,CAACK,OAAnB,EAJgE,CAMhE;;AACA,UAAIN,qBAAqB,CAACO,sBAAtB,KAAiD,IAArD,EAA2D;AACvDP,QAAAA,qBAAqB,CAACO,sBAAtB,GAA+CN,OAA/C;AACH;;AACDD,MAAAA,qBAAqB,CAACQ,gBAAtB,CAAuCP,OAAO,CAACG,IAA/C,IAAuDH,OAAvD;AACH;AAED;;;;;;;AAjCJ;AAAA;AAAA,2BAuCyBG,IAvCzB,EAuCuCK,OAvCvC,EAuC0DR,OAvC1D,EAuC0F;AAClFF,MAAAA,KAAK,CAACI,KAAN,CAAYC,IAAZ;AACAL,MAAAA,KAAK,CAACG,IAAN,CAAWO,OAAX;AAEA,UAAMC,OAAO,GAAGV,qBAAqB,CAACQ,gBAAtB,CAAuCJ,IAAvC,CAAhB;;AACA,UAAI,CAACM,OAAL,EAAc;AACV,cAAM,IAAIC,KAAJ,6DAA+DP,IAA/D,OAAN;AACH;;AAED,aAAOM,OAAO,CAACJ,OAAR,CAAgBG,OAAhB,EAAyBR,OAAzB,CAAP;AACH;AAED;;;;;AAnDJ;AAAA;AAAA,sCAuDoCQ,OAvDpC,EAuDwE;AAChE,aAAOT,qBAAqB,CAACY,MAAtB,CACHH,OAAO,CAACI,YAAR,CAAqBC,YADlB,EAEHL,OAFG,EAGHA,OAAO,CAACI,YAAR,CAAqBE,eAHlB,CAAP;AAKH;AA7DL;AAAA;;AAEI;;;AAFJ,wBAKkC;AAC1B,+BAAYf,qBAAqB,CAACQ,gBAAlC;AACH;AAED;;;;AATJ;AAAA;AAAA,wBAYwC;AAChC,aAAOR,qBAAqB,CAACO,sBAA7B;AACH;AAdL;;AAAA;AAAA;AAAaP,qB,CA+DMQ,gB,GAAyE,E;AA/D/ER,qB,CAgEMO,sB,GAA6D,I","sourcesContent":["import Guard from \"../../common/guard\";\nimport { IExportProvider } from \"./exportProvider\";\nimport { IProject } from \"../../models/applicationState\";\n\nexport interface IExportProviderRegistrationOptions {\n    name: string;\n    displayName: string;\n    description?: string;\n    factory: (project: IProject, options?: any) => IExportProvider;\n}\n\n/**\n * @name - Export Provider Factory\n * @description - Creates instance of export providers based on request provider type\n */\nexport class ExportProviderFactory {\n\n    /**\n     * @returns Dictionary of registered providers\n     */\n    public static get providers() {\n        return { ...ExportProviderFactory.providerRegistry };\n    }\n\n    /**\n     * @returns Options from specified default provider\n     */\n    public static get defaultProvider() {\n        return ExportProviderFactory.defaultProviderOptions;\n    }\n\n    /**\n     * Registers a factory method for the specified export provider type\n     * @param options - The options to use when registering an export provider\n     */\n    public static register(options: IExportProviderRegistrationOptions) {\n        Guard.null(options);\n        Guard.empty(options.name);\n        Guard.empty(options.displayName);\n        Guard.null(options.factory);\n\n        // The first provider registered will be the default\n        if (ExportProviderFactory.defaultProviderOptions === null) {\n            ExportProviderFactory.defaultProviderOptions = options;\n        }\n        ExportProviderFactory.providerRegistry[options.name] = options;\n    }\n\n    /**\n     * Creates new instances of the specified export provider\n     * @param name - The name of the export provider to instantiate\n     * @param project - The project to load into the export provider\n     * @param options  - The provider specific options for exporting\n     */\n    public static create(name: string, project: IProject, options?: any): IExportProvider {\n        Guard.empty(name);\n        Guard.null(project);\n\n        const handler = ExportProviderFactory.providerRegistry[name];\n        if (!handler) {\n            throw new Error(`No export provider has been registered with name '${name}'`);\n        }\n\n        return handler.factory(project, options);\n    }\n\n    /**\n     * Create export provider from project\n     * @param project VoTT project\n     */\n    public static createFromProject(project: IProject): IExportProvider {\n        return ExportProviderFactory.create(\n            project.exportFormat.providerType,\n            project,\n            project.exportFormat.providerOptions,\n        );\n    }\n\n    private static providerRegistry: { [id: string]: IExportProviderRegistrationOptions } = {};\n    private static defaultProviderOptions: IExportProviderRegistrationOptions = null;\n}\n"]},"metadata":{},"sourceType":"module"}
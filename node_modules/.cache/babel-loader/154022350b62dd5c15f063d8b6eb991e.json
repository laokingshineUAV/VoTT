{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\n\n/**\n * @name - Application State\n * @description - Defines the root level application state\n * @member appSettings - Application wide settings\n * @member connections - Global list of connections available to application\n * @member recentProjects - List of recently used projects\n * @member currentProject - The active project being edited\n * @member appError - error in the app if any\n */\n\n/**\n * @name - Application Error\n * @description - Defines error detail\n * @member title - title of the error to display\n * @member message - message of the error to display\n * @member errorCode - error category\n */\n\n/**\n * Enum of supported error codes\n */\nexport var ErrorCode;\n/**\n * Base application error\n */\n\n(function (ErrorCode) {\n  ErrorCode[\"Unknown\"] = \"unknown\";\n  ErrorCode[\"GenericRenderError\"] = \"genericRenderError\";\n  ErrorCode[\"CanvasError\"] = \"canvasError\";\n  ErrorCode[\"V1ImportError\"] = \"v1ImportError\";\n  ErrorCode[\"ProjectUploadError\"] = \"projectUploadError\";\n  ErrorCode[\"ProjectDeleteError\"] = \"projectDeleteError\";\n  ErrorCode[\"ProjectInvalidJson\"] = \"projectInvalidJson\";\n  ErrorCode[\"ProjectInvalidSecurityToken\"] = \"projectInvalidSecurityToken\";\n  ErrorCode[\"ProjectDuplicateName\"] = \"projectDuplicateName\";\n  ErrorCode[\"SecurityTokenNotFound\"] = \"securityTokenNotFound\";\n  ErrorCode[\"ExportFormatNotFound\"] = \"exportFormatNotFound\";\n  ErrorCode[\"PasteRegionTooBig\"] = \"pasteRegionTooBig\";\n  ErrorCode[\"OverloadedKeyBinding\"] = \"overloadedKeyBinding\";\n  ErrorCode[\"ActiveLearningPredictionError\"] = \"activeLearningPredictionError\";\n})(ErrorCode || (ErrorCode = {}));\n\nexport var AppError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(AppError, _Error);\n\n  function AppError(errorCode, message) {\n    var _this;\n\n    var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, AppError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AppError).call(this, message));\n    _this.errorCode = errorCode;\n    _this.message = message;\n    _this.title = title;\n    return _this;\n  }\n\n  return AppError;\n}(_wrapNativeSuper(Error));\n/**\n * @name - Provider Options\n * @description - Property map of key values used within a export / asset / storage provider\n */\n\n/**\n * @enum LOCAL - Local storage type\n * @enum CLOUD - Cloud storage type\n * @enum OTHER - Any other storage type\n */\nexport var StorageType;\n/**\n * @name - Connection\n * @description - Defines a reusable data source definition for projects\n * @member id - Unique identifier for connection\n * @member name - User defined name\n * @member description - User defined short description\n * @member providerType - The underlying storage type (Local File System, Azure Blob Storage, etc)\n * @member providerOptions - Provider specific options used to connect to the data source\n */\n\n(function (StorageType) {\n  StorageType[\"Local\"] = \"local\";\n  StorageType[\"Cloud\"] = \"cloud\";\n  StorageType[\"Other\"] = \"other\";\n})(StorageType || (StorageType = {}));\n\n/**\n * @name - Model Path Type\n * @description - Defines the mechanism to load the TF.js model for Active Learning\n * @member Coco - Specifies the default/generic pre-trained Coco-SSD model\n * @member File - Specifies to load a custom model from filesystem\n * @member Url - Specifies to load a custom model from a web server\n */\nexport var ModelPathType;\n/**\n * Properties for additional project settings\n * @member activeLearningSettings - Active Learning settings\n */\n\n(function (ModelPathType) {\n  ModelPathType[\"Coco\"] = \"coco\";\n  ModelPathType[\"File\"] = \"file\";\n  ModelPathType[\"Url\"] = \"url\";\n})(ModelPathType || (ModelPathType = {}));\n\n/**\n * @name - Asset Type\n * @description - Defines the type of asset within a project\n * @member Image - Specifies an asset as an image\n * @member Video - Specifies an asset as a video\n */\nexport var AssetType;\n/**\n * @name - Asset State\n * @description - Defines the state of the asset with regard to the tagging process\n * @member NotVisited - Specifies as asset that has not yet been visited or tagged\n * @member Visited - Specifies an asset has been visited, but not yet tagged\n * @member Tagged - Specifies an asset has been visited and tagged\n */\n\n(function (AssetType) {\n  AssetType[AssetType[\"Unknown\"] = 0] = \"Unknown\";\n  AssetType[AssetType[\"Image\"] = 1] = \"Image\";\n  AssetType[AssetType[\"Video\"] = 2] = \"Video\";\n  AssetType[AssetType[\"VideoFrame\"] = 3] = \"VideoFrame\";\n  AssetType[AssetType[\"TFRecord\"] = 4] = \"TFRecord\";\n})(AssetType || (AssetType = {}));\n\nexport var AssetState;\n/**\n * @name - Region Type\n * @description - Defines the region type within the asset metadata\n * @member Square - Specifies a region as a square\n * @member Rectangle - Specifies a region as a rectangle\n * @member Polygon - Specifies a region as a multi-point polygon\n */\n\n(function (AssetState) {\n  AssetState[AssetState[\"NotVisited\"] = 0] = \"NotVisited\";\n  AssetState[AssetState[\"Visited\"] = 1] = \"Visited\";\n  AssetState[AssetState[\"Tagged\"] = 2] = \"Tagged\";\n})(AssetState || (AssetState = {}));\n\nexport var RegionType;\n\n(function (RegionType) {\n  RegionType[\"Polyline\"] = \"POLYLINE\";\n  RegionType[\"Point\"] = \"POINT\";\n  RegionType[\"Rectangle\"] = \"RECTANGLE\";\n  RegionType[\"Polygon\"] = \"POLYGON\";\n  RegionType[\"Square\"] = \"SQUARE\";\n})(RegionType || (RegionType = {}));\n\nexport var EditorMode;\n\n(function (EditorMode) {\n  EditorMode[\"Rectangle\"] = \"RECT\";\n  EditorMode[\"Polygon\"] = \"POLYGON\";\n  EditorMode[\"Polyline\"] = \"POLYLINE\";\n  EditorMode[\"Point\"] = \"POINT\";\n  EditorMode[\"Select\"] = \"SELECT\";\n  EditorMode[\"CopyRect\"] = \"COPYRECT\";\n  EditorMode[\"None\"] = \"NONE\";\n})(EditorMode || (EditorMode = {}));","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/models/applicationState.ts"],"names":["ErrorCode","AppError","errorCode","message","title","Error","StorageType","ModelPathType","AssetType","AssetState","RegionType","EditorMode"],"mappings":";;;;;;AAGA;;;;;;;;;;AAiBA;;;;;;;;AAaA;;;AAGA,WAAYA,SAAZ;AAmBA;;;;WAnBYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AAsBZ,WAAaC,QAAb;AAAA;AAAA;AAAA;;AAKI,oBAAYC,SAAZ,EAAkCC,OAAlC,EAAyE;AAAA;;AAAA,QAAtBC,KAAsB,uEAAN,IAAM;;AAAA;;AACrE,kFAAMD,OAAN;AACA,UAAKD,SAAL,GAAiBA,SAAjB;AACA,UAAKC,OAAL,GAAeA,OAAf;AACA,UAAKC,KAAL,GAAaA,KAAb;AAJqE;AAKxE;;AAVL;AAAA,mBAA8BC,KAA9B;AAaA;;;;;AAyEA;;;;;AAKA,WAAYC,WAAZ;AAMA;;;;;;;;;;WANYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAsDZ;;;;;;;AAOA,WAAYC,aAAZ;AAMA;;;;;WANYA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAoIZ;;;;;;AAMA,WAAYC,SAAZ;AAQA;;;;;;;;WARYA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AAeZ,WAAYC,UAAZ;AAMA;;;;;;;;WANYA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;GAAAA,U,KAAAA,U;;AAaZ,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAQZ,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U","sourcesContent":["import { ExportAssetState } from \"../providers/export/exportProvider\";\nimport { IAssetPreviewSettings } from \"../react/components/common/assetPreview/assetPreview\";\n\n/**\n * @name - Application State\n * @description - Defines the root level application state\n * @member appSettings - Application wide settings\n * @member connections - Global list of connections available to application\n * @member recentProjects - List of recently used projects\n * @member currentProject - The active project being edited\n * @member appError - error in the app if any\n */\nexport interface IApplicationState {\n    appSettings: IAppSettings;\n    connections: IConnection[];\n    recentProjects: IProject[];\n    currentProject: IProject;\n    appError?: IAppError;\n}\n\n/**\n * @name - Application Error\n * @description - Defines error detail\n * @member title - title of the error to display\n * @member message - message of the error to display\n * @member errorCode - error category\n */\nexport interface IAppError {\n    errorCode: ErrorCode;\n    message: any;\n    title?: string;\n}\n\n/**\n * Enum of supported error codes\n */\nexport enum ErrorCode {\n    // Note that the value of the enum is in camelCase while\n    // the enum key is in Pascal casing\n    Unknown = \"unknown\",\n    GenericRenderError = \"genericRenderError\",\n    CanvasError = \"canvasError\",\n    V1ImportError = \"v1ImportError\",\n    ProjectUploadError = \"projectUploadError\",\n    ProjectDeleteError = \"projectDeleteError\",\n    ProjectInvalidJson = \"projectInvalidJson\",\n    ProjectInvalidSecurityToken = \"projectInvalidSecurityToken\",\n    ProjectDuplicateName = \"projectDuplicateName\",\n    SecurityTokenNotFound = \"securityTokenNotFound\",\n    ExportFormatNotFound = \"exportFormatNotFound\",\n    PasteRegionTooBig = \"pasteRegionTooBig\",\n    OverloadedKeyBinding = \"overloadedKeyBinding\",\n    ActiveLearningPredictionError = \"activeLearningPredictionError\",\n}\n\n/**\n * Base application error\n */\nexport class AppError extends Error implements IAppError {\n    public errorCode: ErrorCode;\n    public message: string;\n    public title?: string;\n\n    constructor(errorCode: ErrorCode, message: string, title: string = null) {\n        super(message);\n        this.errorCode = errorCode;\n        this.message = message;\n        this.title = title;\n    }\n}\n\n/**\n * @name - Provider Options\n * @description - Property map of key values used within a export / asset / storage provider\n */\nexport interface IProviderOptions {\n    [key: string]: any;\n}\n\n/**\n * @name - Application settings\n * @description - Defines the root level configuration options for the application\n * @member devToolsEnabled - Whether dev tools are current open and enabled\n * @member securityTokens - Token used to encrypt sensitive project settings\n */\nexport interface IAppSettings {\n    devToolsEnabled: boolean;\n    securityTokens: ISecurityToken[];\n    thumbnailSize?: ISize;\n}\n\n/**\n * @name - Project\n * @description - Defines the structure of a VoTT project\n * @member id - Unique identifier\n * @member name - User defined name\n * @member securityToken - The Base64 encoded token used to encrypt sensitive project data\n * @member description - User defined description\n * @member tags - User defined list of tags\n * @member sourceConnection - Full source connection details\n * @member targetConnection - Full target connection details\n * @member exportFormat - Full export format definition\n * @member assets - Map of assets within a project\n * @member autoSave - Whether or not the project will automatically save updates to the underlying target\n */\nexport interface IProject {\n    id: string;\n    name: string;\n    version: string;\n    securityToken: string;\n    description?: string;\n    tags: ITag[];\n    sourceConnection: IConnection;\n    targetConnection: IConnection;\n    exportFormat: IExportFormat;\n    videoSettings: IProjectVideoSettings;\n    activeLearningSettings: IActiveLearningSettings;\n    autoSave: boolean;\n    assets?: { [index: string]: IAsset };\n    lastVisitedAssetId?: string;\n}\n\n/**\n * @name - FileInfo\n * @description - Defines the file information and content for V1 projects\n * @member content - The content of a file (JSON string)\n * @member file - The File object point to the V1 project file\n */\nexport interface IFileInfo {\n    content: string | ArrayBuffer;\n    file: File;\n}\n\n/**\n * @name - Tag\n * @description - Defines the structure of a VoTT tag\n * @member name - User defined name\n * @member color - User editable color associated to tag\n */\nexport interface ITag {\n    name: string;\n    color: string;\n}\n\n/**\n * @enum LOCAL - Local storage type\n * @enum CLOUD - Cloud storage type\n * @enum OTHER - Any other storage type\n */\nexport enum StorageType {\n    Local = \"local\",\n    Cloud = \"cloud\",\n    Other = \"other\",\n}\n\n/**\n * @name - Connection\n * @description - Defines a reusable data source definition for projects\n * @member id - Unique identifier for connection\n * @member name - User defined name\n * @member description - User defined short description\n * @member providerType - The underlying storage type (Local File System, Azure Blob Storage, etc)\n * @member providerOptions - Provider specific options used to connect to the data source\n */\nexport interface IConnection {\n    id: string;\n    name: string;\n    description?: string;\n    providerType: string;\n    providerOptions: IProviderOptions | ISecureString;\n}\n\n/**\n * @name - Export Provider Options\n * @description - options defining the type of asset to export\n * @member assetState - export asset with the following state\n */\nexport interface IExportProviderOptions extends IProviderOptions {\n    assetState: ExportAssetState;\n}\n\n/**\n * @name - Export Format\n * @description - Defines the settings for how project data is exported into commonly used format\n * @member id - Unique identifier for export format\n * @member name - Name of export format\n * @member providerType - The export format type (TF Records, YOLO, CSV, etc)\n * @member providerOptions - The provider specific option required to export data\n */\nexport interface IExportFormat {\n    providerType: string;\n    providerOptions: IExportProviderOptions | ISecureString;\n}\n\n/**\n * @name - Video Tagging Settings for the project\n * @description - Defines the video settings within a VoTT project\n * @member frameExtractionRate - Extraction rate for a video (number of frames per second of video)\n */\nexport interface IProjectVideoSettings {\n    frameExtractionRate: number;\n}\n\n/**\n * @name - Model Path Type\n * @description - Defines the mechanism to load the TF.js model for Active Learning\n * @member Coco - Specifies the default/generic pre-trained Coco-SSD model\n * @member File - Specifies to load a custom model from filesystem\n * @member Url - Specifies to load a custom model from a web server\n */\nexport enum ModelPathType {\n    Coco = \"coco\",\n    File = \"file\",\n    Url = \"url\",\n}\n\n/**\n * Properties for additional project settings\n * @member activeLearningSettings - Active Learning settings\n */\nexport interface IAdditionalPageSettings extends IAssetPreviewSettings {\n    activeLearningSettings: IActiveLearningSettings;\n}\n\n/**\n * @name - Active Learning Settings for the project\n * @description - Defines the active learning settings within a VoTT project\n * @member modelPathType - Model loading type [\"coco\", \"file\", \"url\"]\n * @member modelPath - Local filesystem path to the TF.js model\n * @member modelUrl - Web url to the TF.js model\n * @member autoDetect - Flag for automatically call the model while opening a new asset\n * @member predictTag - Flag to predict also the tag name other than the rectangle coordinates only\n */\nexport interface IActiveLearningSettings {\n    modelPathType: ModelPathType;\n    modelPath?: string;\n    modelUrl?: string;\n    autoDetect: boolean;\n    predictTag: boolean;\n}\n\n/**\n * @name - Asset Video Settings\n * @description - Defines the settings for video assets\n * @member shouldAutoPlayVideo - true if the video should auto play when loaded, false otherwise\n * @member posterSource - Source location of the image to display when the video is not playing,\n * null for default (first frame of video)\n */\nexport interface IAssetVideoSettings {\n    shouldAutoPlayVideo: boolean;\n    posterSource: string;\n    shouldShowPlayControls: boolean;\n}\n\n/**\n * @name - Asset\n * @description - Defines an asset within a VoTT project\n * @member id - Unique identifier for asset\n * @member type - Type of asset (Image, Video, etc)\n * @member name - Generated name for asset\n * @member path - Relative path to asset within the underlying data source\n * @member size - Size / dimensions of asset\n * @member format - The asset format (jpg, png, mp4, etc)\n */\nexport interface IAsset {\n    id: string;\n    type: AssetType;\n    state: AssetState;\n    name: string;\n    path: string;\n    size: ISize;\n    format?: string;\n    timestamp?: number;\n    parent?: IAsset;\n    predicted?: boolean;\n}\n\n/**\n * @name - Asset Metadata\n * @description - Format to store asset metadata for each asset within a project\n * @member asset - References an asset within the project\n * @member regions - The list of regions drawn on the asset\n */\nexport interface IAssetMetadata {\n    asset: IAsset;\n    regions: IRegion[];\n    version: string;\n}\n\n/**\n * @name - Size\n * @description - Defines the size and/or diminsion for an asset\n * @member width - The actual width of an asset\n * @member height - The actual height of an asset\n */\nexport interface ISize {\n    width: number;\n    height: number;\n}\n\n/**\n * @name - Region\n * @description - Defines a region within an asset\n * @member id - Unique identifier for this region\n * @member type - Defines the type of region\n * @member tags - Defines a list of tags applied to a region\n * @member points - Defines a list of points that define a region\n */\nexport interface IRegion {\n    id: string;\n    type: RegionType;\n    tags: string[];\n    points?: IPoint[];\n    boundingBox?: IBoundingBox;\n}\n\n/**\n * @name - Bounding Box\n * @description - Defines the tag usage within a bounding box region\n * @member left - Defines the left x boundary for the start of the bounding box\n * @member top - Defines the top y boundary for the start of the boudning box\n * @member width - Defines the width of the bounding box\n * @member height - Defines the height of the bounding box\n */\nexport interface IBoundingBox {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n}\n\n/**\n * @name - Point\n * @description - Defines a point / coordinate within a region\n * @member x - The x value relative to the asset\n * @member y - The y value relative to the asset\n */\nexport interface IPoint {\n    x: number;\n    y: number;\n}\n\n/**\n * @name - Asset Type\n * @description - Defines the type of asset within a project\n * @member Image - Specifies an asset as an image\n * @member Video - Specifies an asset as a video\n */\nexport enum AssetType {\n    Unknown = 0,\n    Image = 1,\n    Video = 2,\n    VideoFrame = 3,\n    TFRecord = 4,\n}\n\n/**\n * @name - Asset State\n * @description - Defines the state of the asset with regard to the tagging process\n * @member NotVisited - Specifies as asset that has not yet been visited or tagged\n * @member Visited - Specifies an asset has been visited, but not yet tagged\n * @member Tagged - Specifies an asset has been visited and tagged\n */\nexport enum AssetState {\n    NotVisited = 0,\n    Visited = 1,\n    Tagged = 2,\n}\n\n/**\n * @name - Region Type\n * @description - Defines the region type within the asset metadata\n * @member Square - Specifies a region as a square\n * @member Rectangle - Specifies a region as a rectangle\n * @member Polygon - Specifies a region as a multi-point polygon\n */\nexport enum RegionType {\n    Polyline = \"POLYLINE\",\n    Point = \"POINT\",\n    Rectangle = \"RECTANGLE\",\n    Polygon = \"POLYGON\",\n    Square = \"SQUARE\",\n}\n\nexport enum EditorMode {\n    Rectangle = \"RECT\",\n    Polygon = \"POLYGON\",\n    Polyline = \"POLYLINE\",\n    Point = \"POINT\",\n    Select = \"SELECT\",\n    CopyRect = \"COPYRECT\",\n    None = \"NONE\",\n}\n\nexport interface ISecureString {\n    encrypted: string;\n}\n\nexport interface ISecurityToken {\n    name: string;\n    key: string;\n}\n\nexport interface ITFRecordMetadata {\n    width: number;\n    height: number;\n    xminArray: number[];\n    yminArray: number[];\n    xmaxArray: number[];\n    ymaxArray: number[];\n    textArray: string[];\n}\n"]},"metadata":{},"sourceType":"module"}
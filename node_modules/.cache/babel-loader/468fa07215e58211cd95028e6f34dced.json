{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from \"axios\";\nimport { createQueryString } from \"../../../common/utils\";\nimport Guard from \"../../../common/guard\";\n\n/**\n * @name Azure Custom Vision Service\n * @description REST API wrapper for Azure Custom Vision service\n */\nexport var AzureCustomVisionService =\n/*#__PURE__*/\nfunction () {\n  function AzureCustomVisionService(options) {\n    _classCallCheck(this, AzureCustomVisionService);\n\n    this.options = options;\n    Guard.null(options);\n  }\n  /**\n   * Creates an Azure Custom Vision project\n   * @param project - The Azure Custom Vision Project settings\n   */\n\n\n  _createClass(AzureCustomVisionService, [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(project) {\n        var urlParams, url, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Guard.null(project);\n                urlParams = {\n                  name: project.name,\n                  description: project.description,\n                  projectType: project.projectType,\n                  domainId: project.domainId,\n                  classificationType: project.classificationType\n                };\n                url = \"\".concat(this.options.baseUrl, \"/projects?\").concat(createQueryString(urlParams));\n                _context.next = 5;\n                return axios.post(url, null, this.createRequestConfig());\n\n              case 5:\n                response = _context.sent;\n\n                if (!(response.status !== 200)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error(\"Error creating new project\");\n\n              case 8:\n                return _context.abrupt(\"return\", response.data);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function create(_x) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n    /**\n     * Get the tags of a Azure Custom Vision project\n     * @param projectId The Azure Custom Vision project ID\n     */\n\n  }, {\n    key: \"getProjectTags\",\n    value: function () {\n      var _getProjectTags = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(projectId) {\n        var url, response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                Guard.empty(projectId);\n                url = \"\".concat(this.options.baseUrl, \"/projects/\").concat(projectId, \"/tags\");\n                _context2.next = 4;\n                return axios.get(url, this.createRequestConfig());\n\n              case 4:\n                response = _context2.sent;\n\n                if (!(response.status !== 200)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw new Error(\"Error retrieving project tags\");\n\n              case 7:\n                return _context2.abrupt(\"return\", response.data);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getProjectTags(_x2) {\n        return _getProjectTags.apply(this, arguments);\n      }\n\n      return getProjectTags;\n    }()\n    /**\n     * Creates a new Azure Custom Vision Tag\n     * @param projectId The Azure Custom vision project id\n     * @param tag The tag to save\n     */\n\n  }, {\n    key: \"createTag\",\n    value: function () {\n      var _createTag = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(projectId, tag) {\n        var urlParams, url, response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                Guard.empty(projectId);\n                Guard.null(tag);\n                urlParams = {\n                  name: tag.name,\n                  description: tag.description\n                };\n                url = \"\".concat(this.options.baseUrl, \"/projects/\").concat(projectId, \"/tags?\").concat(createQueryString(urlParams));\n                _context3.next = 6;\n                return axios.post(url, null, this.createRequestConfig());\n\n              case 6:\n                response = _context3.sent;\n\n                if (!(response.status !== 200)) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                throw new Error(\"Error saving tag\");\n\n              case 9:\n                return _context3.abrupt(\"return\", response.data);\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function createTag(_x3, _x4) {\n        return _createTag.apply(this, arguments);\n      }\n\n      return createTag;\n    }()\n    /**\n     * Uploads a new image to an Azure Custom Vision project\n     * @param projectId The Azure Custom vision project id\n     * @param contents The asset binary contents\n     */\n\n  }, {\n    key: \"createImage\",\n    value: function () {\n      var _createImage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(projectId, contents) {\n        var url, config, response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                Guard.empty(projectId);\n                Guard.null(contents);\n                url = \"\".concat(this.options.baseUrl, \"/projects/\").concat(projectId, \"/images\");\n                config = this.createRequestConfig();\n                config.headers[\"Content-Type\"] = \"application/octet-stream\";\n                _context4.next = 7;\n                return axios.post(url, contents, config);\n\n              case 7:\n                response = _context4.sent;\n\n                if (!(response.status !== 200)) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                throw new Error(\"Error saving image\");\n\n              case 10:\n                if (!(!response.data.images || response.data.images.length === 0)) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                throw new Error(\"Error uploading image\");\n\n              case 12:\n                return _context4.abrupt(\"return\", response.data.images[0].image);\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function createImage(_x5, _x6) {\n        return _createImage.apply(this, arguments);\n      }\n\n      return createImage;\n    }()\n    /**\n     * Creates a new region with tags and associated it with an image\n     * @param projectId The Azure Custom vision project id\n     * @param regions The regions to create\n     */\n\n  }, {\n    key: \"createRegions\",\n    value: function () {\n      var _createRegions = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(projectId, regions) {\n        var url, response;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                Guard.empty(projectId);\n                Guard.null(regions);\n                url = \"\".concat(this.options.baseUrl, \"/projects/\").concat(projectId, \"/images/regions\");\n                _context5.next = 5;\n                return axios.post(url, {\n                  regions: regions\n                }, this.createRequestConfig());\n\n              case 5:\n                response = _context5.sent;\n\n                if (!(response.status !== 200)) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                throw new Error(\"Error saving image regions\");\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function createRegions(_x7, _x8) {\n        return _createRegions.apply(this, arguments);\n      }\n\n      return createRegions;\n    }()\n  }, {\n    key: \"createRequestConfig\",\n    value: function createRequestConfig() {\n      return {\n        headers: {\n          \"Training-key\": this.options.apiKey\n        }\n      };\n    }\n  }]);\n\n  return AzureCustomVisionService;\n}();","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/providers/export/azureCustomVision/azureCustomVisionService.ts"],"names":["axios","createQueryString","Guard","AzureCustomVisionService","options","null","project","urlParams","name","description","projectType","domainId","classificationType","url","baseUrl","post","createRequestConfig","response","status","Error","data","projectId","empty","get","tag","contents","config","headers","images","length","image","regions","apiKey"],"mappings":"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","sourcesContent":["import axios, { AxiosRequestConfig } from \"axios\";\nimport { createQueryString } from \"../../../common/utils\";\nimport Guard from \"../../../common/guard\";\n\nexport interface IAzureCustomVisionServiceOptions {\n    baseUrl: string;\n    apiKey: string;\n}\n\nexport interface IAzureCustomVisionProject {\n    id?: string;\n    name: string;\n    description?: string;\n    projectType: string;\n    domainId: string;\n    classificationType: string;\n}\n\nexport interface IAzureCustomVisionTag {\n    id?: string;\n    name: string;\n    description?: string;\n    imageCount?: number;\n}\n\nexport interface IAzureCustomVisionImage {\n    id: string;\n    width: number;\n    height: number;\n    imageUri: string;\n    tags: [];\n    regions: [];\n}\n\nexport interface IAzureCustomVisionRegion {\n    imageId: string;\n    tagId: string;\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n}\n\n/**\n * @name Azure Custom Vision Service\n * @description REST API wrapper for Azure Custom Vision service\n */\nexport class AzureCustomVisionService {\n    constructor(private options: IAzureCustomVisionServiceOptions) {\n        Guard.null(options);\n    }\n\n    /**\n     * Creates an Azure Custom Vision project\n     * @param project - The Azure Custom Vision Project settings\n     */\n    public async create(project: IAzureCustomVisionProject): Promise<IAzureCustomVisionProject> {\n        Guard.null(project);\n\n        const urlParams = {\n            name: project.name,\n            description: project.description,\n            projectType: project.projectType,\n            domainId: project.domainId,\n            classificationType: project.classificationType,\n        };\n\n        const url = `${this.options.baseUrl}/projects?${createQueryString(urlParams)}`;\n        const response = await axios.post(url, null, this.createRequestConfig());\n\n        if (response.status !== 200) {\n            throw new Error(\"Error creating new project\");\n        }\n\n        return response.data as IAzureCustomVisionProject;\n    }\n\n    /**\n     * Get the tags of a Azure Custom Vision project\n     * @param projectId The Azure Custom Vision project ID\n     */\n    public async getProjectTags(projectId: string): Promise<IAzureCustomVisionTag[]> {\n        Guard.empty(projectId);\n\n        const url = `${this.options.baseUrl}/projects/${projectId}/tags`;\n        const response = await axios.get(url, this.createRequestConfig());\n\n        if (response.status !== 200) {\n            throw new Error(\"Error retrieving project tags\");\n        }\n\n        return response.data as IAzureCustomVisionTag[];\n    }\n\n    /**\n     * Creates a new Azure Custom Vision Tag\n     * @param projectId The Azure Custom vision project id\n     * @param tag The tag to save\n     */\n    public async createTag(projectId: string, tag: IAzureCustomVisionTag): Promise<IAzureCustomVisionTag> {\n        Guard.empty(projectId);\n        Guard.null(tag);\n\n        const urlParams = {\n            name: tag.name,\n            description: tag.description,\n        };\n\n        const url = `${this.options.baseUrl}/projects/${projectId}/tags?${createQueryString(urlParams)}`;\n        const response = await axios.post(url, null, this.createRequestConfig());\n\n        if (response.status !== 200) {\n            throw new Error(\"Error saving tag\");\n        }\n\n        return response.data as IAzureCustomVisionTag;\n    }\n\n    /**\n     * Uploads a new image to an Azure Custom Vision project\n     * @param projectId The Azure Custom vision project id\n     * @param contents The asset binary contents\n     */\n    public async createImage(projectId: string, contents: File | Blob | ArrayBuffer): Promise<IAzureCustomVisionImage> {\n        Guard.empty(projectId);\n        Guard.null(contents);\n\n        const url = `${this.options.baseUrl}/projects/${projectId}/images`;\n        const config = this.createRequestConfig();\n        config.headers[\"Content-Type\"] = \"application/octet-stream\";\n        const response = await axios.post(url, contents, config);\n\n        if (response.status !== 200) {\n            throw new Error(\"Error saving image\");\n        }\n\n        if (!response.data.images || response.data.images.length === 0) {\n            throw new Error(\"Error uploading image\");\n        }\n\n        return response.data.images[0].image as IAzureCustomVisionImage;\n    }\n\n    /**\n     * Creates a new region with tags and associated it with an image\n     * @param projectId The Azure Custom vision project id\n     * @param regions The regions to create\n     */\n    public async createRegions(projectId: string, regions: IAzureCustomVisionRegion[]): Promise<void> {\n        Guard.empty(projectId);\n        Guard.null(regions);\n\n        const url = `${this.options.baseUrl}/projects/${projectId}/images/regions`;\n        const response = await axios.post(url, { regions }, this.createRequestConfig());\n\n        if (response.status !== 200) {\n            throw new Error(\"Error saving image regions\");\n        }\n    }\n\n    private createRequestConfig(): AxiosRequestConfig {\n        return {\n            headers: {\n                \"Training-key\": this.options.apiKey,\n            },\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
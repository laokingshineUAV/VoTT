{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/toolbar/toolbarItem.tsx\";\nimport React, { Fragment } from \"react\";\nimport { KeyboardContext, KeyEventType } from \"../common/keyboardManager/keyboardManager\";\nimport { KeyboardBinding } from \"../common/keyboardBinding/keyboardBinding\";\n\n/**\n * Types of Toolbar items\n * @member Action - Toolbar item executes an action (export)\n * @member State - Toolbar item changes something about the state of the component (Draw Polygon)\n */\nexport var ToolbarItemType;\n/**\n * Properties for Toolbar Item\n * @member actions - Project actions\n * @member project - Current project being edited\n * @member active - Toolbar is active\n * @member onClick - Function to be called on click of Toolbar Item\n */\n\n(function (ToolbarItemType) {\n  ToolbarItemType[ToolbarItemType[\"Action\"] = 0] = \"Action\";\n  ToolbarItemType[ToolbarItemType[\"State\"] = 1] = \"State\";\n})(ToolbarItemType || (ToolbarItemType = {}));\n\n/**\n * @name - Toolbar Item\n * @description - Controls for Editor Page Toolbar\n */\nexport var ToolbarItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ToolbarItem, _React$Component);\n\n  function ToolbarItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ToolbarItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ToolbarItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getTitle = function () {\n      return \"\".concat(_this.props.tooltip).concat(_this.getShortcut());\n    };\n\n    _this.getShortcut = function () {\n      return \" (\".concat(_this.consolidateKeyCasings(_this.props.accelerators).join(\", \"), \")\");\n    };\n\n    _this.consolidateKeyCasings = function (accelerators) {\n      var consolidated = [];\n\n      if (accelerators) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          var _loop = function _loop() {\n            var a = _step.value;\n\n            if (!consolidated.find(function (item) {\n              return item.toLowerCase() === a.toLowerCase();\n            })) {\n              consolidated.push(a);\n            }\n          };\n\n          for (var _iterator = accelerators[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            _loop();\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      return consolidated;\n    };\n\n    _this.onClick = function (e) {\n      e.stopPropagation();\n\n      if (_this.onItemClick) {\n        _this.onItemClick();\n      }\n\n      _this.props.onClick(_assertThisInitialized(_assertThisInitialized(_this)));\n    };\n\n    return _this;\n  }\n\n  _createClass(ToolbarItem, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.unregisterKeyboardHandler) {\n        this.unregisterKeyboardHandler();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = [\"toolbar-btn \".concat(this.props.name)];\n\n      if (this.props.active) {\n        className.push(\"active\");\n      }\n\n      var accelerators = this.props.accelerators;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, accelerators && React.createElement(KeyboardBinding, {\n        displayName: this.props.tooltip,\n        accelerators: accelerators,\n        handler: this.onClick,\n        icon: this.props.icon,\n        keyEventType: KeyEventType.KeyDown,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"button\",\n        className: className.join(\" \"),\n        title: this.getTitle(),\n        onClick: this.onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas \" + this.props.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return ToolbarItem;\n}(React.Component);\nToolbarItem.contextType = KeyboardContext;","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/toolbar/toolbarItem.tsx"],"names":["React","Fragment","KeyboardContext","KeyEventType","KeyboardBinding","ToolbarItemType","ToolbarItem","getTitle","props","tooltip","getShortcut","consolidateKeyCasings","accelerators","join","consolidated","a","find","item","toLowerCase","push","onClick","e","stopPropagation","onItemClick","unregisterKeyboardHandler","className","name","active","icon","KeyDown","Component","contextType"],"mappings":"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","sourcesContent":["import React, { Fragment, SyntheticEvent } from \"react\";\nimport { IProject } from \"../../../models/applicationState\";\nimport IProjectActions from \"../../../redux/actions/projectActions\";\nimport { IKeyboardContext, KeyboardContext, KeyEventType } from \"../common/keyboardManager/keyboardManager\";\nimport { KeyboardBinding } from \"../common/keyboardBinding/keyboardBinding\";\nimport { ToolbarItemName, ToolbarItemGroup } from \"../../../registerToolbar\";\n\n/**\n * Toolbar Item Metadata\n * @member name - Name of Toolbar Item\n * @member icon - Icon for toolbar item\n * @member tooltip - Tooltip to apply upon selection\n * @member group - Name of item group in which to include item\n * @member type - Type of toolbar item (Action or State)\n * @member accelerators - collection of accelerator that map to same action\n */\nexport interface IToolbarItemMetadata {\n    name: ToolbarItemName;\n    icon: string;\n    tooltip: string;\n    group: ToolbarItemGroup;\n    type: ToolbarItemType;\n    accelerators?: string[];\n}\n\n/**\n * Types of Toolbar items\n * @member Action - Toolbar item executes an action (export)\n * @member State - Toolbar item changes something about the state of the component (Draw Polygon)\n */\nexport enum ToolbarItemType {\n    Action = 0,\n    State = 1,\n}\n\n/**\n * Properties for Toolbar Item\n * @member actions - Project actions\n * @member project - Current project being edited\n * @member active - Toolbar is active\n * @member onClick - Function to be called on click of Toolbar Item\n */\nexport interface IToolbarItemProps extends IToolbarItemMetadata {\n    actions: IProjectActions;\n    project: IProject;\n    active: boolean;\n    onClick: (item: ToolbarItem) => void;\n}\n\n/**\n * @name - Toolbar Item\n * @description - Controls for Editor Page Toolbar\n */\nexport abstract class ToolbarItem extends React.Component<IToolbarItemProps> {\n    public static contextType = KeyboardContext;\n    public context!: IKeyboardContext;\n    private unregisterKeyboardHandler: () => void;\n\n    public componentWillUnmount() {\n        if (this.unregisterKeyboardHandler) {\n            this.unregisterKeyboardHandler();\n        }\n    }\n\n    public render() {\n        const className = [`toolbar-btn ${this.props.name}`];\n        if (this.props.active) {\n            className.push(\"active\");\n        }\n\n        const accelerators = this.props.accelerators;\n\n        return (\n            <Fragment>\n                {\n                    accelerators &&\n                    <KeyboardBinding\n                        displayName={this.props.tooltip}\n                        accelerators={accelerators}\n                        handler={this.onClick}\n                        icon={this.props.icon}\n                        keyEventType={KeyEventType.KeyDown}\n                    />\n                }\n                <button type=\"button\"\n                    className={className.join(\" \")}\n                    title={this.getTitle()}\n                    onClick={this.onClick}>\n                    <i className={\"fas \" + this.props.icon} />\n                </button>\n            </Fragment>\n        );\n    }\n\n    protected abstract onItemClick();\n\n    private getTitle = () => {\n        return `${this.props.tooltip}${this.getShortcut()}`;\n    }\n\n    private getShortcut = () => {\n        return ` (${this.consolidateKeyCasings(this.props.accelerators).join(\", \")})`;\n    }\n\n    private consolidateKeyCasings = (accelerators: string[]): string[] => {\n        const consolidated: string[] = [];\n        if (accelerators) {\n            for (const a of accelerators) {\n                if (!consolidated.find((item) => item.toLowerCase() === a.toLowerCase())) {\n                    consolidated.push(a);\n                }\n            }\n        }\n        return consolidated;\n    }\n\n    private onClick = (e: SyntheticEvent | KeyboardEvent) => {\n        e.stopPropagation();\n\n        if (this.onItemClick) {\n            this.onItemClick();\n        }\n        this.props.onClick(this);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
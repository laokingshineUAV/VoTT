{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { CoreUtils } from '@microsoft/applicationinsights-core-js';\n\nvar stringUtils =\n/** @class */\nfunction () {\n  function stringUtils() {}\n\n  stringUtils.GetLength = function (strObject) {\n    var res = 0;\n\n    if (!CoreUtils.isNullOrUndefined(strObject)) {\n      var stringified = \"\";\n\n      try {\n        stringified = strObject.toString();\n      } catch (ex) {// some troubles with complex object\n      }\n\n      res = stringified.length;\n      res = isNaN(res) ? 0 : res;\n    }\n\n    return res;\n  };\n\n  return stringUtils;\n}();\n\nexport { stringUtils };\n\nvar EventHelper =\n/** @class */\nfunction () {\n  function EventHelper() {} ///<summary>Binds the specified function to an event, so that the function gets called whenever the event fires on the object</summary>\n  ///<param name=\"obj\">Object to which </param>\n  ///<param name=\"eventNameWithoutOn\">String that specifies any of the standard DHTML Events without \"on\" prefix</param>\n  ///<param name=\"handlerRef\">Pointer that specifies the function to call when event fires</param>\n  ///<returns>True if the function was bound successfully to the event, otherwise false</returns>\n\n\n  EventHelper.AttachEvent = function (obj, eventNameWithoutOn, handlerRef) {\n    var result = false;\n\n    if (!CoreUtils.isNullOrUndefined(obj)) {\n      if (!CoreUtils.isNullOrUndefined(obj.attachEvent)) {\n        // IE before version 9                    \n        obj.attachEvent(\"on\" + eventNameWithoutOn, handlerRef);\n        result = true;\n      } else {\n        if (!CoreUtils.isNullOrUndefined(obj.addEventListener)) {\n          // all browsers except IE before version 9\n          obj.addEventListener(eventNameWithoutOn, handlerRef, false);\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  };\n\n  EventHelper.DetachEvent = function (obj, eventNameWithoutOn, handlerRef) {\n    if (!CoreUtils.isNullOrUndefined(obj)) {\n      if (!CoreUtils.isNullOrUndefined(obj.detachEvent)) {\n        obj.detachEvent(\"on\" + eventNameWithoutOn, handlerRef);\n      } else {\n        if (!CoreUtils.isNullOrUndefined(obj.removeEventListener)) {\n          obj.removeEventListener(eventNameWithoutOn, handlerRef, false);\n        }\n      }\n    }\n  };\n\n  return EventHelper;\n}();\n\nexport { EventHelper };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from \"axios\";\nimport { AssetType } from \"../models/applicationState\";\nimport Guard from \"./guard\";\nimport { TFRecordsReader } from \"../providers/export/tensorFlowRecords/tensorFlowReader\";\nimport { FeatureType } from \"../providers/export/tensorFlowRecords/tensorFlowBuilder\";\n/**\n * Helper class for reading HTML files\n */\n\nvar HtmlFileReader =\n/*#__PURE__*/\nfunction () {\n  function HtmlFileReader() {\n    _classCallCheck(this, HtmlFileReader);\n  }\n\n  _createClass(HtmlFileReader, null, [{\n    key: \"readAsText\",\n\n    /**\n     * Reads the file and returns the string value contained\n     * @param file HTML file to read\n     */\n    value: function readAsText(file) {\n      Guard.null(file);\n      var fileInfo;\n      return new Promise(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n\n        reader.onload = function () {\n          if (reader.result) {\n            fileInfo = {\n              content: reader.result,\n              file: file\n            };\n            resolve(fileInfo);\n          } else {\n            reject();\n          }\n        };\n\n        try {\n          reader.readAsText(file);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n    /**\n     * Reads attributes from asset depending on type (video or image)\n     * @param asset Asset to read from\n     */\n\n  }, {\n    key: \"readAssetAttributes\",\n    value: function () {\n      var _readAssetAttributes = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(asset) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Guard.null(asset);\n                _context.t0 = asset.type;\n                _context.next = _context.t0 === AssetType.Image ? 4 : _context.t0 === AssetType.Video ? 7 : _context.t0 === AssetType.TFRecord ? 10 : 13;\n                break;\n\n              case 4:\n                _context.next = 6;\n                return this.readImageAttributes(asset.path);\n\n              case 6:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 7:\n                _context.next = 9;\n                return this.readVideoAttributes(asset.path);\n\n              case 9:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 10:\n                _context.next = 12;\n                return this.readTFRecordAttributes(asset);\n\n              case 12:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 13:\n                throw new Error(\"Asset not supported\");\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function readAssetAttributes(_x) {\n        return _readAssetAttributes.apply(this, arguments);\n      }\n\n      return readAssetAttributes;\n    }()\n  }, {\n    key: \"readAssetAttributesWithBuffer\",\n    value: function () {\n      var _readAssetAttributesWithBuffer = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(base64) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                Guard.null(base64);\n                _context2.next = 3;\n                return this.readImageAttributes(\"data:image;base64,\" + base64);\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function readAssetAttributesWithBuffer(_x2) {\n        return _readAssetAttributesWithBuffer.apply(this, arguments);\n      }\n\n      return readAssetAttributesWithBuffer;\n    }()\n    /**\n     * Downloads the binary blob from the asset path\n     * @param asset The asset to download\n     */\n\n  }, {\n    key: \"getAssetBlob\",\n    value: function () {\n      var _getAssetBlob = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(asset) {\n        var config, data, response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                Guard.null(asset);\n                config = {\n                  responseType: \"blob\"\n                };\n                data = null;\n\n                if (!(asset.type === AssetType.VideoFrame)) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                _context3.next = 6;\n                return this.getAssetFrameImage(asset);\n\n              case 6:\n                data = _context3.sent;\n                _context3.next = 17;\n                break;\n\n              case 9:\n                _context3.next = 11;\n                return axios.get(asset.path, config);\n\n              case 11:\n                response = _context3.sent;\n\n                if (!(response.status !== 200)) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                throw new Error(\"Error downloading asset binary\");\n\n              case 14:\n                _context3.next = 16;\n                return response.data;\n\n              case 16:\n                data = _context3.sent;\n\n              case 17:\n                return _context3.abrupt(\"return\", data);\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getAssetBlob(_x3) {\n        return _getAssetBlob.apply(this, arguments);\n      }\n\n      return getAssetBlob;\n    }()\n    /**\n     * Downloads the binary array from the asset path\n     * @param asset The asset to download\n     */\n\n  }, {\n    key: \"getAssetArray\",\n    value: function () {\n      var _getAssetArray = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(asset) {\n        var blob;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.getAssetBlob(asset);\n\n              case 2:\n                blob = _context4.sent;\n                _context4.next = 5;\n                return new Response(blob).arrayBuffer();\n\n              case 5:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getAssetArray(_x4) {\n        return _getAssetArray.apply(this, arguments);\n      }\n\n      return getAssetArray;\n    }()\n    /**\n     * Extracts the specified image frame from a video asset\n     * @param asset The asset video frame to retrieve from the parent video\n     */\n\n  }, {\n    key: \"getAssetFrameImage\",\n    value: function () {\n      var _getAssetFrameImage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(asset) {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var cachingEnabled = false;\n                  var refresh = !cachingEnabled;\n                  var video = _this.videoAssetFiles[asset.parent.name]; // Ensure the asset name includes jpg file extension\n\n                  if (!asset.name.toLowerCase().endsWith(\".jpg\")) {\n                    asset.name += \".jpg\";\n                  }\n\n                  if (!video) {\n                    video = document.createElement(\"video\");\n\n                    if (cachingEnabled) {\n                      _this.videoAssetFiles[asset.parent.name] = video;\n                      refresh = true;\n                    }\n                  }\n\n                  video.onloadedmetadata = function () {\n                    video.currentTime = asset.timestamp;\n                  };\n\n                  video.onseeked = function () {\n                    var canvas = document.createElement(\"canvas\");\n                    canvas.height = video.videoHeight;\n                    canvas.width = video.videoWidth;\n                    var ctx = canvas.getContext(\"2d\");\n                    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n                    canvas.toBlob(resolve, \"image/jpeg\", 1.0);\n                  };\n\n                  video.onerror = reject;\n\n                  if (refresh) {\n                    video.src = asset.parent.path;\n                  } else {\n                    video.currentTime = asset.timestamp;\n                  }\n                }));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getAssetFrameImage(_x5) {\n        return _getAssetFrameImage.apply(this, arguments);\n      }\n\n      return getAssetFrameImage;\n    }()\n  }, {\n    key: \"readVideoAttributes\",\n    value: function readVideoAttributes(url) {\n      return new Promise(function (resolve, reject) {\n        var video = document.createElement(\"video\");\n\n        video.onloadedmetadata = function () {\n          resolve({\n            width: video.videoWidth,\n            height: video.videoHeight,\n            duration: video.duration\n          });\n        };\n\n        video.onerror = reject;\n        video.src = url;\n      });\n    }\n  }, {\n    key: \"readImageAttributes\",\n    value: function readImageAttributes(url) {\n      return new Promise(function (resolve, reject) {\n        var image = document.createElement(\"img\");\n\n        image.onload = function () {\n          resolve({\n            width: image.naturalWidth,\n            height: image.naturalHeight\n          });\n        };\n\n        image.onerror = reject;\n        image.src = url;\n      });\n    }\n  }, {\n    key: \"readTFRecordAttributes\",\n    value: function () {\n      var _readTFRecordAttributes = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(asset) {\n        var tfrecords, reader, width, height;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.t0 = Buffer;\n                _context6.next = 3;\n                return this.getAssetArray(asset);\n\n              case 3:\n                _context6.t1 = _context6.sent;\n                tfrecords = new _context6.t0(_context6.t1);\n                reader = new TFRecordsReader(tfrecords);\n                width = reader.getFeature(0, \"image/width\", FeatureType.Int64);\n                height = reader.getFeature(0, \"image/height\", FeatureType.Int64);\n                return _context6.abrupt(\"return\", {\n                  width: width,\n                  height: height\n                });\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function readTFRecordAttributes(_x6) {\n        return _readTFRecordAttributes.apply(this, arguments);\n      }\n\n      return readTFRecordAttributes;\n    }()\n  }]);\n\n  return HtmlFileReader;\n}();\n\nHtmlFileReader.videoAssetFiles = {};\nexport { HtmlFileReader as default };","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/common/htmlFileReader.ts"],"names":["axios","AssetType","Guard","TFRecordsReader","FeatureType","HtmlFileReader","file","null","fileInfo","Promise","resolve","reject","reader","FileReader","onerror","onload","result","content","readAsText","err","asset","type","Image","Video","TFRecord","readImageAttributes","path","readVideoAttributes","readTFRecordAttributes","Error","base64","config","responseType","data","VideoFrame","getAssetFrameImage","get","response","status","getAssetBlob","blob","Response","arrayBuffer","cachingEnabled","refresh","video","videoAssetFiles","parent","name","toLowerCase","endsWith","document","createElement","onloadedmetadata","currentTime","timestamp","onseeked","canvas","height","videoHeight","width","videoWidth","ctx","getContext","drawImage","toBlob","src","url","duration","image","naturalWidth","naturalHeight","Buffer","getAssetArray","tfrecords","getFeature","Int64"],"mappings":"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","sourcesContent":["import axios, { AxiosRequestConfig } from \"axios\";\nimport { IAsset, AssetType, IFileInfo } from \"../models/applicationState\";\nimport Guard from \"./guard\";\nimport { TFRecordsReader } from \"../providers/export/tensorFlowRecords/tensorFlowReader\";\nimport { FeatureType } from \"../providers/export/tensorFlowRecords/tensorFlowBuilder\";\n\n/**\n * Helper class for reading HTML files\n */\nexport default class HtmlFileReader {\n\n    public static videoAssetFiles = {};\n\n    /**\n     * Reads the file and returns the string value contained\n     * @param file HTML file to read\n     */\n    public static readAsText(file: File): Promise<IFileInfo> {\n        Guard.null(file);\n        let fileInfo: IFileInfo;\n\n        return new Promise<IFileInfo>((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onerror = reject;\n            reader.onload = () => {\n                if (reader.result) {\n                    fileInfo = {\n                        content: reader.result,\n                        file,\n                    };\n                    resolve(fileInfo);\n                } else {\n                    reject();\n                }\n            };\n\n            try {\n                reader.readAsText(file);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    /**\n     * Reads attributes from asset depending on type (video or image)\n     * @param asset Asset to read from\n     */\n    public static async readAssetAttributes(asset: IAsset)\n        : Promise<{ width: number, height: number, duration?: number }> {\n        Guard.null(asset);\n\n        switch (asset.type) {\n            case AssetType.Image:\n                return await this.readImageAttributes(asset.path);\n            case AssetType.Video:\n                return await this.readVideoAttributes(asset.path);\n            case AssetType.TFRecord:\n                return await this.readTFRecordAttributes(asset);\n            default:\n                throw new Error(\"Asset not supported\");\n        }\n    }\n\n    public static async readAssetAttributesWithBuffer(base64: string)\n        : Promise<{ width: number, height: number, duration?: number }> {\n        Guard.null(base64);\n\n        return await this.readImageAttributes(\"data:image;base64,\" + base64);\n    }\n\n    /**\n     * Downloads the binary blob from the asset path\n     * @param asset The asset to download\n     */\n    public static async getAssetBlob(asset: IAsset): Promise<Blob> {\n        Guard.null(asset);\n\n        const config: AxiosRequestConfig = {\n            responseType: \"blob\",\n        };\n\n        let data = null;\n        if (asset.type === AssetType.VideoFrame) {\n            data = await this.getAssetFrameImage(asset);\n        } else {\n            // Download the asset binary from the storage provider\n            const response = await axios.get<Blob>(asset.path, config);\n            if (response.status !== 200) {\n                throw new Error(\"Error downloading asset binary\");\n            }\n            data = await response.data;\n        }\n\n        return data;\n    }\n\n    /**\n     * Downloads the binary array from the asset path\n     * @param asset The asset to download\n     */\n    public static async getAssetArray(asset: IAsset): Promise<ArrayBuffer> {\n        const blob = await this.getAssetBlob(asset);\n        return await new Response(blob).arrayBuffer();\n    }\n\n    /**\n     * Extracts the specified image frame from a video asset\n     * @param asset The asset video frame to retrieve from the parent video\n     */\n    public static async getAssetFrameImage(asset: IAsset): Promise<Blob> {\n        return new Promise<Blob>((resolve, reject) => {\n            const cachingEnabled = false;\n            let refresh = !cachingEnabled;\n            let video: HTMLVideoElement = this.videoAssetFiles[asset.parent.name];\n\n            // Ensure the asset name includes jpg file extension\n            if (!asset.name.toLowerCase().endsWith(\".jpg\")) {\n                asset.name += \".jpg\";\n            }\n\n            if (!video) {\n                video = document.createElement(\"video\");\n                if (cachingEnabled) {\n                    this.videoAssetFiles[asset.parent.name] = video;\n                    refresh = true;\n                }\n            }\n\n            video.onloadedmetadata = () => {\n                video.currentTime = asset.timestamp;\n            };\n            video.onseeked = () => {\n                const canvas = document.createElement(\"canvas\");\n                canvas.height = video.videoHeight;\n                canvas.width = video.videoWidth;\n                const ctx = canvas.getContext(\"2d\");\n                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n                canvas.toBlob(resolve, \"image/jpeg\", 1.0);\n            };\n            video.onerror = reject;\n            if (refresh) {\n                video.src = asset.parent.path;\n            } else {\n                video.currentTime = asset.timestamp;\n            }\n        });\n    }\n\n    private static readVideoAttributes(url: string): Promise<{ width: number, height: number, duration: number }> {\n        return new Promise((resolve, reject) => {\n            const video = document.createElement(\"video\") as HTMLVideoElement;\n            video.onloadedmetadata = () => {\n                resolve({\n                    width: video.videoWidth,\n                    height: video.videoHeight,\n                    duration: video.duration,\n                });\n            };\n            video.onerror = reject;\n            video.src = url;\n        });\n    }\n\n    private static readImageAttributes(url: string): Promise<{ width: number, height: number }> {\n        return new Promise((resolve, reject) => {\n            const image = document.createElement(\"img\") as HTMLImageElement;\n            image.onload = () => {\n                resolve({\n                    width: image.naturalWidth,\n                    height: image.naturalHeight,\n                });\n            };\n            image.onerror = reject;\n            image.src = url;\n        });\n    }\n\n    private static async readTFRecordAttributes(asset: IAsset): Promise<{ width: number, height: number }> {\n        // Get from TFRecord Reader\n        const tfrecords = new Buffer(await this.getAssetArray(asset));\n        const reader = new TFRecordsReader(tfrecords);\n        const width = reader.getFeature(0, \"image/width\", FeatureType.Int64) as number;\n        const height = reader.getFeature(0, \"image/height\", FeatureType.Int64) as number;\n\n        return { width, height };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
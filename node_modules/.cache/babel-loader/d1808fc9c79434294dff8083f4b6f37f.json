{"ast":null,"code":"import { Util, FieldType } from '@microsoft/applicationinsights-common';\nimport { LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js';\n\nvar Serializer =\n/** @class */\nfunction () {\n  function Serializer(logger) {\n    this._logger = logger;\n  }\n  /**\r\n   * Serializes the current object to a JSON string.\r\n   */\n\n\n  Serializer.prototype.serialize = function (input) {\n    var output = this._serializeObject(input, \"root\");\n\n    return JSON.stringify(output);\n  };\n\n  Serializer.prototype._serializeObject = function (source, name) {\n    var circularReferenceCheck = \"__aiCircularRefCheck\";\n    var output = {};\n\n    if (!source) {\n      this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSerializeObject, \"cannot serialize object because it is null or undefined\", {\n        name: name\n      }, true);\n\n      return output;\n    }\n\n    if (source[circularReferenceCheck]) {\n      this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CircularReferenceDetected, \"Circular reference detected while serializing object\", {\n        name: name\n      }, true);\n\n      return output;\n    }\n\n    if (!source.aiDataContract) {\n      // special case for measurements/properties/tags\n      if (name === \"measurements\") {\n        output = this._serializeStringMap(source, \"number\", name);\n      } else if (name === \"properties\") {\n        output = this._serializeStringMap(source, \"string\", name);\n      } else if (name === \"tags\") {\n        output = this._serializeStringMap(source, \"string\", name);\n      } else if (Util.isArray(source)) {\n        output = this._serializeArray(source, name);\n      } else {\n        this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotSerializeObjectNonSerializable, \"Attempting to serialize an object which does not implement ISerializable\", {\n          name: name\n        }, true);\n\n        try {\n          // verify that the object can be stringified\n          JSON.stringify(source);\n          output = source;\n        } catch (e) {\n          // if serialization fails return an empty string\n          this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSerializeObject, e && typeof e.toString === 'function' ? e.toString() : \"Error serializing object\", null, true);\n        }\n      }\n\n      return output;\n    }\n\n    source[circularReferenceCheck] = true;\n\n    for (var field in source.aiDataContract) {\n      var contract = source.aiDataContract[field];\n      var isRequired = typeof contract === \"function\" ? contract() & FieldType.Required : contract & FieldType.Required;\n      var isHidden = typeof contract === \"function\" ? contract() & FieldType.Hidden : contract & FieldType.Hidden;\n      var isArray = contract & FieldType.Array;\n      var isPresent = source[field] !== undefined;\n      var isObject = typeof source[field] === \"object\" && source[field] !== null;\n\n      if (isRequired && !isPresent && !isArray) {\n        this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.MissingRequiredFieldSpecification, \"Missing required field specification. The field is required but not present on source\", {\n          field: field,\n          name: name\n        }); // If not in debug mode, continue and hope the error is permissible\n\n\n        continue;\n      }\n\n      if (isHidden) {\n        // Don't serialize hidden fields\n        continue;\n      }\n\n      var value;\n\n      if (isObject) {\n        if (isArray) {\n          // special case; resurse on each object in the source array\n          value = this._serializeArray(source[field], field);\n        } else {\n          // recurse on the source object in this field\n          value = this._serializeObject(source[field], field);\n        }\n      } else {\n        // assign the source field to the output even if undefined or required\n        value = source[field];\n      } // only emit this field if the value is defined\n\n\n      if (value !== undefined) {\n        output[field] = value;\n      }\n    }\n\n    delete source[circularReferenceCheck];\n    return output;\n  };\n\n  Serializer.prototype._serializeArray = function (sources, name) {\n    var output = undefined;\n\n    if (!!sources) {\n      if (!Util.isArray(sources)) {\n        this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.ItemNotInArray, \"This field was specified as an array in the contract but the item is not an array.\\r\\n\", {\n          name: name\n        }, true);\n      } else {\n        output = [];\n\n        for (var i = 0; i < sources.length; i++) {\n          var source = sources[i];\n\n          var item = this._serializeObject(source, name + \"[\" + i + \"]\");\n\n          output.push(item);\n        }\n      }\n    }\n\n    return output;\n  };\n\n  Serializer.prototype._serializeStringMap = function (map, expectedType, name) {\n    var output = undefined;\n\n    if (map) {\n      output = {};\n\n      for (var field in map) {\n        var value = map[field];\n\n        if (expectedType === \"string\") {\n          if (value === undefined) {\n            output[field] = \"undefined\";\n          } else if (value === null) {\n            output[field] = \"null\";\n          } else if (!value.toString) {\n            output[field] = \"invalid field: toString() is not defined.\";\n          } else {\n            output[field] = value.toString();\n          }\n        } else if (expectedType === \"number\") {\n          if (value === undefined) {\n            output[field] = \"undefined\";\n          } else if (value === null) {\n            output[field] = \"null\";\n          } else {\n            var num = parseFloat(value);\n\n            if (isNaN(num)) {\n              output[field] = \"NaN\";\n            } else {\n              output[field] = num;\n            }\n          }\n        } else {\n          output[field] = \"invalid field: \" + name + \" is of unknown type.\";\n\n          this._logger.throwInternal(LoggingSeverity.CRITICAL, output[field], null, true);\n        }\n      }\n    }\n\n    return output;\n  };\n\n  return Serializer;\n}();\n\nexport { Serializer };","map":null,"metadata":{},"sourceType":"module"}
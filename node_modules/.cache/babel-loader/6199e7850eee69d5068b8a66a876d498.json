{"ast":null,"code":"/**\r\n * @description Monitors browser for offline events\r\n * @export default - Offline: Static instance of OfflineListener\r\n * @class OfflineListener\r\n */\nvar OfflineListener =\n/** @class */\nfunction () {\n  function OfflineListener() {\n    this._onlineStatus = true;\n\n    try {\n      if (typeof window === 'undefined') {\n        this.isListening = false;\n      } else if (window && window.addEventListener) {\n        window.addEventListener('online', this._setOnline.bind(this), false);\n        window.addEventListener('offline', this._setOffline.bind(this), false);\n        this.isListening = true;\n      } else if (document && document.body) {\n        document.body.ononline = this._setOnline.bind(this);\n        document.body.onoffline = this._setOffline.bind(this);\n        this.isListening = true;\n      } else if (document) {\n        document.ononline = this._setOnline.bind(this);\n        document.onoffline = this._setOffline.bind(this);\n        this.isListening = true;\n      } else {\n        // Could not find a place to add event listener\n        this.isListening = false;\n      }\n    } catch (e) {\n      //this makes react-native less angry\n      this.isListening = false;\n    }\n  }\n\n  OfflineListener.prototype._setOnline = function () {\n    this._onlineStatus = true;\n  };\n\n  OfflineListener.prototype._setOffline = function () {\n    this._onlineStatus = false;\n  };\n\n  OfflineListener.prototype.isOnline = function () {\n    if (this.isListening) {\n      return this._onlineStatus;\n    } else if (navigator) {\n      return navigator.onLine;\n    } else {\n      // Cannot determine online status - report as online\n      return true;\n    }\n  };\n\n  OfflineListener.prototype.isOffline = function () {\n    return !this.isOnline();\n  };\n\n  OfflineListener.Offline = new OfflineListener();\n  return OfflineListener;\n}();\n\nexport { OfflineListener };\nexport var Offline = OfflineListener.Offline;","map":null,"metadata":{},"sourceType":"module"}
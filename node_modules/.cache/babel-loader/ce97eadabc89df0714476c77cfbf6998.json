{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/common/keyboardManager/keyboardManager.tsx\";\nimport React from \"react\";\nimport { KeyboardRegistrationManager } from \"./keyboardRegistrationManager\";\n/**\n * Types of Key events supported by registration manager\n */\n\nexport var KeyEventType;\n\n(function (KeyEventType) {\n  KeyEventType[\"KeyDown\"] = \"keydown\";\n  KeyEventType[\"KeyUp\"] = \"keyup\";\n  KeyEventType[\"KeyPress\"] = \"keypress\";\n})(KeyEventType || (KeyEventType = {}));\n\nexport var KeyboardContext = React.createContext(null);\nexport var KeyboardManager =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(KeyboardManager, _React$Component);\n\n  function KeyboardManager() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, KeyboardManager);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(KeyboardManager)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      keyboard: new KeyboardRegistrationManager()\n    };\n    _this.nonSupportedKeys = new Set([\"Meta\", \"Ctrl\", \" Control\", \"Alt\"]);\n    _this.inputElementTypes = new Set([\"input\", \"select\", \"textarea\"]);\n\n    _this.onKeyboardEvent = function (evt) {\n      if (_this.isDisabled() || _this.nonSupportedKeys.has(evt.key)) {\n        return;\n      }\n\n      _this.state.keyboard.invokeHandler(evt.type, _this.getKeyParts(evt), evt);\n    };\n\n    return _this;\n  }\n\n  _createClass(KeyboardManager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(KeyEventType.KeyDown, this.onKeyboardEvent);\n      window.addEventListener(KeyEventType.KeyUp, this.onKeyboardEvent);\n      window.addEventListener(KeyEventType.KeyPress, this.onKeyboardEvent);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(KeyEventType.KeyDown, this.onKeyboardEvent);\n      window.removeEventListener(KeyEventType.KeyUp, this.onKeyboardEvent);\n      window.removeEventListener(KeyEventType.KeyPress, this.onKeyboardEvent);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(KeyboardContext.Provider, {\n        value: this.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, this.props.children);\n    }\n  }, {\n    key: \"getKeyParts\",\n    value: function getKeyParts(evt) {\n      var keyParts = [];\n\n      if (evt.ctrlKey || evt.metaKey) {\n        keyParts.push(\"CmdOrCtrl+\");\n      }\n\n      if (evt.altKey) {\n        keyParts.push(\"Alt+\");\n      }\n\n      keyParts.push(evt.key);\n      return keyParts.join(\"\");\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled() {\n      return document.activeElement && this.inputElementTypes.has(document.activeElement.tagName.toLowerCase());\n    }\n  }]);\n\n  return KeyboardManager;\n}(React.Component);\nKeyboardManager.contextType = KeyboardContext;","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/common/keyboardManager/keyboardManager.tsx"],"names":["React","KeyboardRegistrationManager","KeyEventType","KeyboardContext","createContext","KeyboardManager","state","keyboard","nonSupportedKeys","Set","inputElementTypes","onKeyboardEvent","evt","isDisabled","has","key","invokeHandler","type","getKeyParts","window","addEventListener","KeyDown","KeyUp","KeyPress","removeEventListener","props","children","keyParts","ctrlKey","metaKey","push","altKey","join","document","activeElement","tagName","toLowerCase","Component","contextType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { KeyboardRegistrationManager } from \"./keyboardRegistrationManager\";\n\n/**\n * Types of Key events supported by registration manager\n */\nexport enum KeyEventType {\n    KeyDown = \"keydown\",\n    KeyUp = \"keyup\",\n    KeyPress = \"keypress\",\n}\n\nexport const KeyboardContext = React.createContext<IKeyboardContext>(null);\n\nexport interface IKeyboardContext {\n    keyboard: KeyboardRegistrationManager;\n}\n\nexport class KeyboardManager extends React.Component<any, IKeyboardContext> {\n    public static contextType = KeyboardContext;\n\n    public state: IKeyboardContext = {\n        keyboard: new KeyboardRegistrationManager(),\n    };\n\n    private nonSupportedKeys = new Set([\"Meta\", \"Ctrl\", \" Control\", \"Alt\"]);\n    private inputElementTypes = new Set([\"input\", \"select\", \"textarea\"]);\n\n    public componentDidMount() {\n        window.addEventListener(KeyEventType.KeyDown, this.onKeyboardEvent);\n        window.addEventListener(KeyEventType.KeyUp, this.onKeyboardEvent);\n        window.addEventListener(KeyEventType.KeyPress, this.onKeyboardEvent);\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener(KeyEventType.KeyDown, this.onKeyboardEvent);\n        window.removeEventListener(KeyEventType.KeyUp, this.onKeyboardEvent);\n        window.removeEventListener(KeyEventType.KeyPress, this.onKeyboardEvent);\n    }\n\n    public render() {\n        return (\n            <KeyboardContext.Provider value={this.state}>\n                {this.props.children}\n            </KeyboardContext.Provider>\n        );\n    }\n\n    private getKeyParts(evt: KeyboardEvent) {\n        const keyParts = [];\n        if (evt.ctrlKey || evt.metaKey) {\n            keyParts.push(\"CmdOrCtrl+\");\n        }\n        if (evt.altKey) {\n            keyParts.push(\"Alt+\");\n        }\n        keyParts.push(evt.key);\n        return keyParts.join(\"\");\n    }\n\n    private onKeyboardEvent = (evt: KeyboardEvent) => {\n        if (this.isDisabled() || this.nonSupportedKeys.has(evt.key)) {\n            return;\n        }\n\n        this.state.keyboard.invokeHandler(evt.type as KeyEventType, this.getKeyParts(evt), evt);\n    }\n\n    private isDisabled(): boolean {\n        return document.activeElement && this.inputElementTypes.has(document.activeElement.tagName.toLowerCase());\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
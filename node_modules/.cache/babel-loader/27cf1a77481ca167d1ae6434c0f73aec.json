{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _ from \"lodash\";\nimport CryptoJS from \"crypto-js\";\nimport { ExportProvider } from \"./exportProvider\";\nimport Guard from \"../../common/guard\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\nimport { itemTemplate } from \"./pascalVOC/pascalVOCTemplates\";\nimport { interpolate } from \"../../common/strings\";\nimport { TFRecordsBuilder, FeatureType } from \"./tensorFlowRecords/tensorFlowBuilder\";\n\n/**\n * @name - TFRecords Json Export Provider\n * @description - Exports a project into a single JSON file that include all configured assets\n */\nexport var TFRecordsExportProvider =\n/*#__PURE__*/\nfunction (_ExportProvider) {\n  _inherits(TFRecordsExportProvider, _ExportProvider);\n\n  function TFRecordsExportProvider(project, options) {\n    var _this;\n\n    _classCallCheck(this, TFRecordsExportProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TFRecordsExportProvider).call(this, project, options));\n    Guard.null(options);\n    return _this;\n  }\n  /**\n   * Export project to TensorFlow Records\n   */\n\n\n  _createClass(TFRecordsExportProvider, [{\n    key: \"export\",\n    value: function () {\n      var _export2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var allAssets, exportObject, exportFolderName;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getAssetsForExport();\n\n              case 2:\n                allAssets = _context.sent;\n                exportObject = _objectSpread({}, this.project);\n                exportObject.assets = _.keyBy(allAssets, function (assetMetadata) {\n                  return assetMetadata.asset.id;\n                }); // Create Export Folder\n\n                exportFolderName = \"\".concat(this.project.name.replace(/\\s/g, \"-\"), \"-TFRecords-export\");\n                _context.next = 8;\n                return this.storageProvider.createContainer(exportFolderName);\n\n              case 8:\n                _context.next = 10;\n                return this.exportPBTXT(exportFolderName, this.project);\n\n              case 10:\n                _context.next = 12;\n                return this.exportRecords(exportFolderName, allAssets);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _export() {\n        return _export2.apply(this, arguments);\n      }\n\n      return _export;\n    }()\n  }, {\n    key: \"exportRecords\",\n    value: function () {\n      var _exportRecords = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(exportFolderName, allAssets) {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return allAssets.mapAsync(\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee2(element) {\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return _this2.exportSingleRecord(exportFolderName, element);\n\n                          case 2:\n                            return _context2.abrupt(\"return\", _context2.sent);\n\n                          case 3:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n\n                  return function (_x3) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function exportRecords(_x, _x2) {\n        return _exportRecords.apply(this, arguments);\n      }\n\n      return exportRecords;\n    }()\n  }, {\n    key: \"exportSingleRecord\",\n    value: function () {\n      var _exportSingleRecord = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(exportFolderName, element) {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", new Promise(\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee4(resolve, reject) {\n                    var arrayBuffer, imageBuffer, image64, imageInfo, builder, fileName, fileNamePath;\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            _context4.prev = 0;\n                            _context4.next = 3;\n                            return HtmlFileReader.getAssetArray(element.asset);\n\n                          case 3:\n                            arrayBuffer = _context4.sent;\n                            imageBuffer = new Uint8Array(arrayBuffer); // Get Base64\n\n                            image64 = btoa(imageBuffer.reduce(function (data, byte) {\n                              return data + String.fromCharCode(byte);\n                            }, \"\"));\n                            imageInfo = {\n                              width: element.asset.size ? element.asset.size.width : 0,\n                              height: element.asset.size ? element.asset.size.height : 0,\n                              text: [],\n                              label: [],\n                              xmin: [],\n                              ymin: [],\n                              xmax: [],\n                              ymax: [],\n                              difficult: [],\n                              truncated: [],\n                              view: []\n                            };\n\n                            if (!(!element.asset.size || element.asset.size.width === 0 || element.asset.size.height === 0)) {\n                              _context4.next = 10;\n                              break;\n                            }\n\n                            _context4.next = 10;\n                            return _this3.updateImageSizeInfo(image64, imageInfo);\n\n                          case 10:\n                            // Get Array of all Box shaped tag for the Asset\n                            _this3.updateAssetTagArrays(element, imageInfo); // Generate TFRecord\n\n\n                            builder = new TFRecordsBuilder();\n                            builder.addFeature(\"image/height\", FeatureType.Int64, imageInfo.height);\n                            builder.addFeature(\"image/width\", FeatureType.Int64, imageInfo.width);\n                            builder.addFeature(\"image/filename\", FeatureType.String, element.asset.name);\n                            builder.addFeature(\"image/source_id\", FeatureType.String, element.asset.name);\n                            builder.addFeature(\"image/key/sha256\", FeatureType.String, CryptoJS.SHA256(imageBuffer).toString(CryptoJS.enc.Base64));\n                            builder.addFeature(\"image/encoded\", FeatureType.Binary, imageBuffer);\n                            builder.addFeature(\"image/format\", FeatureType.String, element.asset.name.split(\".\").pop());\n                            builder.addArrayFeature(\"image/object/bbox/xmin\", FeatureType.Float, imageInfo.xmin);\n                            builder.addArrayFeature(\"image/object/bbox/ymin\", FeatureType.Float, imageInfo.ymin);\n                            builder.addArrayFeature(\"image/object/bbox/xmax\", FeatureType.Float, imageInfo.xmax);\n                            builder.addArrayFeature(\"image/object/bbox/ymax\", FeatureType.Float, imageInfo.ymax);\n                            builder.addArrayFeature(\"image/object/class/text\", FeatureType.String, imageInfo.text);\n                            builder.addArrayFeature(\"image/object/class/label\", FeatureType.Int64, imageInfo.label);\n                            builder.addArrayFeature(\"image/object/difficult\", FeatureType.Int64, imageInfo.difficult);\n                            builder.addArrayFeature(\"image/object/truncated\", FeatureType.Int64, imageInfo.truncated);\n                            builder.addArrayFeature(\"image/object/view\", FeatureType.String, imageInfo.view); // Save TFRecords\n\n                            fileName = element.asset.name.split(\".\").slice(0, -1).join(\".\");\n                            fileNamePath = \"\".concat(exportFolderName, \"/\").concat(fileName, \".tfrecord\");\n                            _context4.next = 32;\n                            return _this3.writeTFRecords(fileNamePath, [builder.build()]);\n\n                          case 32:\n                            resolve();\n                            _context4.next = 39;\n                            break;\n\n                          case 35:\n                            _context4.prev = 35;\n                            _context4.t0 = _context4[\"catch\"](0);\n                            // Ignore the error at the moment\n                            // TODO: Refactor ExportProvider abstract class export() method\n                            //       to return Promise<object> with an object containing\n                            //       the number of files succesfully exported out of total\n                            console.log(\"Error downloading \".concat(element.asset.path, \" - \").concat(_context4.t0));\n                            resolve(); // eject(err);\n\n                          case 39:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4, this, [[0, 35]]);\n                  }));\n\n                  return function (_x6, _x7) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function exportSingleRecord(_x4, _x5) {\n        return _exportSingleRecord.apply(this, arguments);\n      }\n\n      return exportSingleRecord;\n    }()\n  }, {\n    key: \"writeTFRecords\",\n    value: function () {\n      var _writeTFRecords = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(fileNamePath, buffers) {\n        var tfRecords;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                // Get TFRecords buffer\n                tfRecords = TFRecordsBuilder.buildTFRecords(buffers); // Write TFRecords\n\n                _context6.next = 3;\n                return this.storageProvider.writeBinary(fileNamePath, tfRecords);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function writeTFRecords(_x8, _x9) {\n        return _writeTFRecords.apply(this, arguments);\n      }\n\n      return writeTFRecords;\n    }()\n  }, {\n    key: \"updateImageSizeInfo\",\n    value: function () {\n      var _updateImageSizeInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(image64, imageInfo) {\n        var assetProps;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(image64.length > 10)) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                _context7.next = 3;\n                return HtmlFileReader.readAssetAttributesWithBuffer(image64);\n\n              case 3:\n                assetProps = _context7.sent;\n\n                if (assetProps) {\n                  imageInfo.width = assetProps.width;\n                  imageInfo.height = assetProps.height;\n                } else {\n                  console.log(\"imageInfo not found\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function updateImageSizeInfo(_x10, _x11) {\n        return _updateImageSizeInfo.apply(this, arguments);\n      }\n\n      return updateImageSizeInfo;\n    }()\n  }, {\n    key: \"updateAssetTagArrays\",\n    value: function updateAssetTagArrays(element, imageInfo) {\n      var _this4 = this;\n\n      element.regions.filter(function (region) {\n        return region.boundingBox;\n      }).forEach(function (region) {\n        region.tags.forEach(function (tagName) {\n          var index = _this4.project.tags.findIndex(function (projectTag) {\n            return projectTag.name === tagName;\n          });\n\n          imageInfo.text.push(tagName);\n          imageInfo.label.push(index);\n          imageInfo.xmin.push(region.boundingBox.left / imageInfo.width);\n          imageInfo.ymin.push(region.boundingBox.top / imageInfo.height);\n          imageInfo.xmax.push((region.boundingBox.left + region.boundingBox.width) / imageInfo.width);\n          imageInfo.ymax.push((region.boundingBox.top + region.boundingBox.height) / imageInfo.height);\n          imageInfo.difficult.push(0);\n          imageInfo.truncated.push(0);\n          imageInfo.view.push(\"Unspecified\");\n        });\n      });\n    }\n  }, {\n    key: \"exportPBTXT\",\n    value: function () {\n      var _exportPBTXT = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(exportFolderName, project) {\n        var pbtxtFileName, id, items;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(project.tags && project.tags.length > 0)) {\n                  _context8.next = 6;\n                  break;\n                }\n\n                // Save tf_label_map.pbtxt\n                pbtxtFileName = \"\".concat(exportFolderName, \"/tf_label_map.pbtxt\");\n                id = 1;\n                items = project.tags.map(function (element) {\n                  var params = {\n                    id: (id++).toString(),\n                    tag: element.name\n                  };\n                  return interpolate(itemTemplate, params);\n                });\n                _context8.next = 6;\n                return this.storageProvider.writeText(pbtxtFileName, items.join(\"\"));\n\n              case 6:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function exportPBTXT(_x12, _x13) {\n        return _exportPBTXT.apply(this, arguments);\n      }\n\n      return exportPBTXT;\n    }()\n  }]);\n\n  return TFRecordsExportProvider;\n}(ExportProvider);","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/providers/export/tensorFlowRecords.ts"],"names":["_","CryptoJS","ExportProvider","Guard","HtmlFileReader","itemTemplate","interpolate","TFRecordsBuilder","FeatureType","TFRecordsExportProvider","project","options","null","getAssetsForExport","allAssets","exportObject","assets","keyBy","assetMetadata","asset","id","exportFolderName","name","replace","storageProvider","createContainer","exportPBTXT","exportRecords","mapAsync","element","exportSingleRecord","Promise","resolve","reject","getAssetArray","arrayBuffer","imageBuffer","Uint8Array","image64","btoa","reduce","data","byte","String","fromCharCode","imageInfo","width","size","height","text","label","xmin","ymin","xmax","ymax","difficult","truncated","view","updateImageSizeInfo","updateAssetTagArrays","builder","addFeature","Int64","SHA256","toString","enc","Base64","Binary","split","pop","addArrayFeature","Float","fileName","slice","join","fileNamePath","writeTFRecords","build","console","log","path","buffers","tfRecords","buildTFRecords","writeBinary","length","readAssetAttributesWithBuffer","assetProps","regions","filter","region","boundingBox","forEach","tags","tagName","index","findIndex","projectTag","push","left","top","pbtxtFileName","items","map","params","tag","writeText"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport CryptoJS from \"crypto-js\";\nimport { ExportProvider } from \"./exportProvider\";\nimport { IProject, IAssetMetadata, IExportProviderOptions } from \"../../models/applicationState\";\nimport Guard from \"../../common/guard\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\nimport { itemTemplate } from \"./pascalVOC/pascalVOCTemplates\";\nimport { interpolate } from \"../../common/strings\";\nimport { TFRecordsBuilder, FeatureType } from \"./tensorFlowRecords/tensorFlowBuilder\";\n\ninterface IImageInfo {\n    width: number;\n    height: number;\n    text: string[];\n    label: number[];\n    xmin: number[];\n    ymin: number[];\n    xmax: number[];\n    ymax: number[];\n    difficult: number[];\n    truncated: number[];\n    view: string[];\n}\n\n/**\n * @name - TFRecords Json Export Provider\n * @description - Exports a project into a single JSON file that include all configured assets\n */\nexport class TFRecordsExportProvider extends ExportProvider {\n    constructor(project: IProject, options: IExportProviderOptions) {\n        super(project, options);\n        Guard.null(options);\n    }\n\n    /**\n     * Export project to TensorFlow Records\n     */\n    public async export(): Promise<void> {\n        const allAssets = await this.getAssetsForExport();\n        const exportObject: any = { ...this.project };\n        exportObject.assets = _.keyBy(allAssets, (assetMetadata) => assetMetadata.asset.id);\n\n        // Create Export Folder\n        const exportFolderName = `${this.project.name.replace(/\\s/g, \"-\")}-TFRecords-export`;\n        await this.storageProvider.createContainer(exportFolderName);\n\n        await this.exportPBTXT(exportFolderName, this.project);\n        await this.exportRecords(exportFolderName, allAssets);\n    }\n\n    private async exportRecords(exportFolderName: string, allAssets: IAssetMetadata[]) {\n        return await allAssets.mapAsync(async (element) => {\n            return await this.exportSingleRecord(exportFolderName, element);\n        });\n    }\n\n    private async exportSingleRecord(exportFolderName: string, element: IAssetMetadata): Promise<void> {\n        return new Promise<void>(async (resolve, reject) => {\n            try {\n                const arrayBuffer = await HtmlFileReader.getAssetArray(element.asset);\n                const imageBuffer = new Uint8Array(arrayBuffer);\n\n                // Get Base64\n                const image64 = btoa(imageBuffer.reduce((data, byte) => data + String.fromCharCode(byte), \"\"));\n\n                const imageInfo: IImageInfo = {\n                    width: element.asset.size ? element.asset.size.width : 0,\n                    height: element.asset.size ? element.asset.size.height : 0,\n                    text: [],\n                    label: [],\n                    xmin: [],\n                    ymin: [],\n                    xmax: [],\n                    ymax: [],\n                    difficult: [],\n                    truncated: [],\n                    view: [],\n                };\n\n                if (!element.asset.size || element.asset.size.width === 0 || element.asset.size.height === 0) {\n                    await this.updateImageSizeInfo(image64, imageInfo);\n                }\n\n                // Get Array of all Box shaped tag for the Asset\n                this.updateAssetTagArrays(element, imageInfo);\n\n                // Generate TFRecord\n                const builder = new TFRecordsBuilder();\n\n                builder.addFeature(\"image/height\", FeatureType.Int64, imageInfo.height);\n                builder.addFeature(\"image/width\", FeatureType.Int64, imageInfo.width);\n                builder.addFeature(\"image/filename\", FeatureType.String, element.asset.name);\n                builder.addFeature(\"image/source_id\", FeatureType.String, element.asset.name);\n                builder.addFeature(\"image/key/sha256\", FeatureType.String, CryptoJS.SHA256(imageBuffer)\n                    .toString(CryptoJS.enc.Base64));\n                builder.addFeature(\"image/encoded\", FeatureType.Binary, imageBuffer);\n                builder.addFeature(\"image/format\", FeatureType.String, element.asset.name.split(\".\").pop());\n                builder.addArrayFeature(\"image/object/bbox/xmin\", FeatureType.Float, imageInfo.xmin);\n                builder.addArrayFeature(\"image/object/bbox/ymin\", FeatureType.Float, imageInfo.ymin);\n                builder.addArrayFeature(\"image/object/bbox/xmax\", FeatureType.Float, imageInfo.xmax);\n                builder.addArrayFeature(\"image/object/bbox/ymax\", FeatureType.Float, imageInfo.ymax);\n                builder.addArrayFeature(\"image/object/class/text\", FeatureType.String, imageInfo.text);\n                builder.addArrayFeature(\"image/object/class/label\", FeatureType.Int64, imageInfo.label);\n                builder.addArrayFeature(\"image/object/difficult\", FeatureType.Int64, imageInfo.difficult);\n                builder.addArrayFeature(\"image/object/truncated\", FeatureType.Int64, imageInfo.truncated);\n                builder.addArrayFeature(\"image/object/view\", FeatureType.String, imageInfo.view);\n\n                // Save TFRecords\n                const fileName = element.asset.name.split(\".\").slice(0, -1).join(\".\");\n                const fileNamePath = `${exportFolderName}/${fileName}.tfrecord`;\n                await this.writeTFRecords(fileNamePath, [builder.build()]);\n\n                resolve();\n            } catch (error) {\n                // Ignore the error at the moment\n                // TODO: Refactor ExportProvider abstract class export() method\n                //       to return Promise<object> with an object containing\n                //       the number of files succesfully exported out of total\n                console.log(`Error downloading ${element.asset.path} - ${error}`);\n                resolve();\n                // eject(err);\n            }\n        });\n    }\n\n    private async writeTFRecords(fileNamePath: string, buffers: Buffer[]) {\n        // Get TFRecords buffer\n        const tfRecords = TFRecordsBuilder.buildTFRecords(buffers);\n\n        // Write TFRecords\n        await this.storageProvider.writeBinary(fileNamePath, tfRecords);\n    }\n\n    private async updateImageSizeInfo(image64: string, imageInfo: IImageInfo) {\n        if (image64.length > 10) {\n            const assetProps = await HtmlFileReader.readAssetAttributesWithBuffer(image64);\n            if (assetProps) {\n                imageInfo.width = assetProps.width;\n                imageInfo.height = assetProps.height;\n            } else {\n                console.log(\"imageInfo not found\");\n            }\n        }\n    }\n\n    private updateAssetTagArrays(element: IAssetMetadata, imageInfo: IImageInfo) {\n        element.regions.filter((region) => region.boundingBox)\n            .forEach((region) => {\n                region.tags.forEach((tagName) => {\n                    const index = this.project.tags\n                        .findIndex((projectTag) => projectTag.name === tagName);\n\n                    imageInfo.text.push(tagName);\n                    imageInfo.label.push(index);\n                    imageInfo.xmin.push(region.boundingBox.left / imageInfo.width);\n                    imageInfo.ymin.push(region.boundingBox.top / imageInfo.height);\n                    imageInfo.xmax.push((region.boundingBox.left + region.boundingBox.width)\n                        / imageInfo.width);\n                    imageInfo.ymax.push((region.boundingBox.top + region.boundingBox.height)\n                        / imageInfo.height);\n                    imageInfo.difficult.push(0);\n                    imageInfo.truncated.push(0);\n                    imageInfo.view.push(\"Unspecified\");\n                });\n            });\n    }\n\n    private async exportPBTXT(exportFolderName: string, project: IProject) {\n        if (project.tags && project.tags.length > 0) {\n            // Save tf_label_map.pbtxt\n            const pbtxtFileName = `${exportFolderName}/tf_label_map.pbtxt`;\n\n            let id = 1;\n            const items = project.tags.map((element) => {\n                const params = {\n                    id: (id++).toString(),\n                    tag: element.name,\n                };\n\n                return interpolate(itemTemplate, params);\n            });\n\n            await this.storageProvider.writeText(pbtxtFileName, items.join(\"\"));\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport ProjectService from \"../../services/projectService\";\nimport { ActionTypes } from \"./actionTypes\";\nimport { AssetService } from \"../../services/assetService\";\nimport { ExportProviderFactory } from \"../../providers/export/exportProviderFactory\";\nimport { AppError, ErrorCode } from \"../../models/applicationState\";\nimport { createAction, createPayloadAction } from \"./actionCreators\";\nimport { appInfo } from \"../../common/appInfo\";\nimport { strings } from \"../../common/strings\";\n\n/**\n * Dispatches Load Project action and resolves with IProject\n * @param project - Project to load\n */\nexport function loadProject(project) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var appState, projectService, projectToken, loadedProject;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                appState = getState();\n                projectService = new ProjectService(); // Lookup security token used to decrypt project settings\n\n                projectToken = appState.appSettings.securityTokens.find(function (securityToken) {\n                  return securityToken.name === project.securityToken;\n                });\n\n                if (projectToken) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new AppError(ErrorCode.SecurityTokenNotFound, \"Security Token Not Found\");\n\n              case 5:\n                _context.next = 7;\n                return projectService.load(project, projectToken);\n\n              case 7:\n                loadedProject = _context.sent;\n                dispatch(loadProjectAction(loadedProject));\n                return _context.abrupt(\"return\", loadedProject);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\n/**\n * Dispatches Save Project action and resolves with IProject\n * @param project - Project to save\n */\n\nexport function saveProject(project) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n        var appState, projectService, projectToken, savedProject;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                appState = getState();\n                projectService = new ProjectService();\n\n                if (!projectService.isDuplicate(project, appState.recentProjects)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new AppError(ErrorCode.ProjectDuplicateName, \"Project with name '\".concat(project.name, \"\\n                already exists with the same target connection '\").concat(project.targetConnection.name, \"'\"));\n\n              case 4:\n                projectToken = appState.appSettings.securityTokens.find(function (securityToken) {\n                  return securityToken.name === project.securityToken;\n                });\n\n                if (projectToken) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw new AppError(ErrorCode.SecurityTokenNotFound, \"Security Token Not Found\");\n\n              case 7:\n                _context2.next = 9;\n                return projectService.save(project, projectToken);\n\n              case 9:\n                savedProject = _context2.sent;\n                dispatch(saveProjectAction(savedProject)); // Reload project after save actions\n\n                _context2.next = 13;\n                return loadProject(savedProject)(dispatch, getState);\n\n              case 13:\n                return _context2.abrupt(\"return\", savedProject);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}\n/**\n * Dispatches Delete Project action and resolves with project\n * @param project - Project to delete\n */\n\nexport function deleteProject(project) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n        var appState, projectService, projectToken, decryptedProject;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                appState = getState();\n                projectService = new ProjectService(); // Lookup security token used to decrypt project settings\n\n                projectToken = appState.appSettings.securityTokens.find(function (securityToken) {\n                  return securityToken.name === project.securityToken;\n                });\n\n                if (projectToken) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new AppError(ErrorCode.SecurityTokenNotFound, \"Security Token Not Found\");\n\n              case 5:\n                _context3.next = 7;\n                return projectService.load(project, projectToken);\n\n              case 7:\n                decryptedProject = _context3.sent;\n                _context3.next = 10;\n                return projectService.delete(decryptedProject);\n\n              case 10:\n                dispatch(deleteProjectAction(decryptedProject));\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}\n/**\n * Dispatches Close Project action\n */\n\nexport function closeProject() {\n  return function (dispatch) {\n    dispatch({\n      type: ActionTypes.CLOSE_PROJECT_SUCCESS\n    });\n  };\n}\n/**\n * Gets assets from project, dispatches load assets action and returns assets\n * @param project - Project from which to load assets\n */\n\nexport function loadAssets(project) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        var assetService, assets;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assetService = new AssetService(project);\n                _context4.next = 3;\n                return assetService.getAssets();\n\n              case 3:\n                assets = _context4.sent;\n                dispatch(loadProjectAssetsAction(assets));\n                return _context4.abrupt(\"return\", assets);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x7) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}\n/**\n * Load metadata from asset within project\n * @param project - Project from which to load asset metadata\n * @param asset - Asset from which to load metadata\n */\n\nexport function loadAssetMetadata(project, asset) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch) {\n        var assetService, assetMetadata;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assetService = new AssetService(project);\n                _context5.next = 3;\n                return assetService.getAssetMetadata(asset);\n\n              case 3:\n                assetMetadata = _context5.sent;\n                dispatch(loadAssetMetadataAction(assetMetadata));\n                return _context5.abrupt(\"return\", _objectSpread({}, assetMetadata));\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x8) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n}\n/**\n * Save metadata from asset within project\n * @param project - Project from which to save asset metadata\n * @param assetMetadata - Metadata for asset within project\n */\n\nexport function saveAssetMetadata(project, assetMetadata) {\n  var newAssetMetadata = _objectSpread({}, assetMetadata, {\n    version: appInfo.version\n  });\n\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(dispatch) {\n        var assetService, savedMetadata;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assetService = new AssetService(project);\n                _context6.next = 3;\n                return assetService.save(newAssetMetadata);\n\n              case 3:\n                savedMetadata = _context6.sent;\n                dispatch(saveAssetMetadataAction(savedMetadata));\n                return _context6.abrupt(\"return\", _objectSpread({}, savedMetadata));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x9) {\n        return _ref6.apply(this, arguments);\n      };\n    }()\n  );\n}\n/**\n * Updates a project and all asset references from oldTagName to newTagName\n * @param project The project to update tags\n * @param oldTagName The old tag name\n * @param newTagName The new tag name\n */\n\nexport function updateProjectTag(project, oldTagName, newTagName) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref7 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(dispatch, getState) {\n        var assetService, assetUpdates, currentProject, updatedProject;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                // Find tags to rename\n                assetService = new AssetService(project);\n                _context8.next = 3;\n                return assetService.renameTag(oldTagName, newTagName);\n\n              case 3:\n                assetUpdates = _context8.sent;\n                _context8.next = 6;\n                return assetUpdates.forEachAsync(\n                /*#__PURE__*/\n                function () {\n                  var _ref8 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee7(assetMetadata) {\n                    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                      while (1) {\n                        switch (_context7.prev = _context7.next) {\n                          case 0:\n                            _context7.next = 2;\n                            return saveAssetMetadata(project, assetMetadata)(dispatch);\n\n                          case 2:\n                          case \"end\":\n                            return _context7.stop();\n                        }\n                      }\n                    }, _callee7, this);\n                  }));\n\n                  return function (_x12) {\n                    return _ref8.apply(this, arguments);\n                  };\n                }());\n\n              case 6:\n                currentProject = getState().currentProject;\n                updatedProject = _objectSpread({}, currentProject, {\n                  tags: project.tags.map(function (t) {\n                    return t.name === oldTagName ? _objectSpread({}, t, {\n                      name: newTagName\n                    }) : t;\n                  })\n                }); // Save updated project tags\n\n                _context8.next = 10;\n                return saveProject(updatedProject)(dispatch, getState);\n\n              case 10:\n                dispatch(updateProjectTagAction(updatedProject));\n                return _context8.abrupt(\"return\", assetUpdates);\n\n              case 12:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x10, _x11) {\n        return _ref7.apply(this, arguments);\n      };\n    }()\n  );\n}\n/**\n * Updates a project and all asset references from oldTagName to newTagName\n * @param project The project to delete tags\n * @param tagName The tag to delete\n */\n\nexport function deleteProjectTag(project, tagName) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref9 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10(dispatch, getState) {\n        var assetService, assetUpdates, currentProject, updatedProject;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                // Find tags to rename\n                assetService = new AssetService(project);\n                _context10.next = 3;\n                return assetService.deleteTag(tagName);\n\n              case 3:\n                assetUpdates = _context10.sent;\n                _context10.next = 6;\n                return assetUpdates.forEachAsync(\n                /*#__PURE__*/\n                function () {\n                  var _ref10 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee9(assetMetadata) {\n                    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                      while (1) {\n                        switch (_context9.prev = _context9.next) {\n                          case 0:\n                            _context9.next = 2;\n                            return saveAssetMetadata(project, assetMetadata)(dispatch);\n\n                          case 2:\n                          case \"end\":\n                            return _context9.stop();\n                        }\n                      }\n                    }, _callee9, this);\n                  }));\n\n                  return function (_x15) {\n                    return _ref10.apply(this, arguments);\n                  };\n                }());\n\n              case 6:\n                currentProject = getState().currentProject;\n                updatedProject = _objectSpread({}, currentProject, {\n                  tags: project.tags.filter(function (t) {\n                    return t.name !== tagName;\n                  })\n                }); // Save updated project tags\n\n                _context10.next = 10;\n                return saveProject(updatedProject)(dispatch, getState);\n\n              case 10:\n                dispatch(deleteProjectTagAction(updatedProject));\n                return _context10.abrupt(\"return\", assetUpdates);\n\n              case 12:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x13, _x14) {\n        return _ref9.apply(this, arguments);\n      };\n    }()\n  );\n}\n/**\n * Initialize export provider, get export data and dispatch export project action\n * @param project - Project to export\n */\n\nexport function exportProject(project) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref11 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11(dispatch) {\n        var exportProvider, results;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (project.exportFormat) {\n                  _context11.next = 2;\n                  break;\n                }\n\n                throw new AppError(ErrorCode.ExportFormatNotFound, strings.errors.exportFormatNotFound.message);\n\n              case 2:\n                if (!(project.exportFormat && project.exportFormat.providerType)) {\n                  _context11.next = 9;\n                  break;\n                }\n\n                exportProvider = ExportProviderFactory.create(project.exportFormat.providerType, project, project.exportFormat.providerOptions);\n                _context11.next = 6;\n                return exportProvider.export();\n\n              case 6:\n                results = _context11.sent;\n                dispatch(exportProjectAction(project));\n                return _context11.abrupt(\"return\", results);\n\n              case 9:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x16) {\n        return _ref11.apply(this, arguments);\n      };\n    }()\n  );\n}\n/**\n * Load project action type\n */\n\n/**\n * Instance of Load Project action\n */\nexport var loadProjectAction = createPayloadAction(ActionTypes.LOAD_PROJECT_SUCCESS);\n/**\n * Instance of Close Project action\n */\n\nexport var closeProjectAction = createAction(ActionTypes.CLOSE_PROJECT_SUCCESS);\n/**\n * Instance of Save Project action\n */\n\nexport var saveProjectAction = createPayloadAction(ActionTypes.SAVE_PROJECT_SUCCESS);\n/**\n * Instance of Delete Project action\n */\n\nexport var deleteProjectAction = createPayloadAction(ActionTypes.DELETE_PROJECT_SUCCESS);\n/**\n * Instance of Load Project Assets action\n */\n\nexport var loadProjectAssetsAction = createPayloadAction(ActionTypes.LOAD_PROJECT_ASSETS_SUCCESS);\n/**\n * Instance of Load Asset Metadata action\n */\n\nexport var loadAssetMetadataAction = createPayloadAction(ActionTypes.LOAD_ASSET_METADATA_SUCCESS);\n/**\n * Instance of Save Asset Metadata action\n */\n\nexport var saveAssetMetadataAction = createPayloadAction(ActionTypes.SAVE_ASSET_METADATA_SUCCESS);\n/**\n * Instance of Export Project action\n */\n\nexport var exportProjectAction = createPayloadAction(ActionTypes.EXPORT_PROJECT_SUCCESS);\n/**\n * Instance of Update project tag action\n */\n\nexport var updateProjectTagAction = createPayloadAction(ActionTypes.UPDATE_PROJECT_TAG_SUCCESS);\n/**\n * Instance of Delete project tag action\n */\n\nexport var deleteProjectTagAction = createPayloadAction(ActionTypes.DELETE_PROJECT_TAG_SUCCESS);","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/redux/actions/projectActions.ts"],"names":["ProjectService","ActionTypes","AssetService","ExportProviderFactory","AppError","ErrorCode","createAction","createPayloadAction","appInfo","strings","loadProject","project","dispatch","getState","appState","projectService","projectToken","appSettings","securityTokens","find","securityToken","name","SecurityTokenNotFound","load","loadedProject","loadProjectAction","saveProject","isDuplicate","recentProjects","ProjectDuplicateName","targetConnection","save","savedProject","saveProjectAction","deleteProject","decryptedProject","delete","deleteProjectAction","closeProject","type","CLOSE_PROJECT_SUCCESS","loadAssets","assetService","getAssets","assets","loadProjectAssetsAction","loadAssetMetadata","asset","getAssetMetadata","assetMetadata","loadAssetMetadataAction","saveAssetMetadata","newAssetMetadata","version","savedMetadata","saveAssetMetadataAction","updateProjectTag","oldTagName","newTagName","renameTag","assetUpdates","forEachAsync","currentProject","updatedProject","tags","map","t","updateProjectTagAction","deleteProjectTag","tagName","deleteTag","filter","deleteProjectTagAction","exportProject","exportFormat","ExportFormatNotFound","errors","exportFormatNotFound","message","providerType","exportProvider","create","providerOptions","export","results","exportProjectAction","LOAD_PROJECT_SUCCESS","closeProjectAction","SAVE_PROJECT_SUCCESS","DELETE_PROJECT_SUCCESS","LOAD_PROJECT_ASSETS_SUCCESS","LOAD_ASSET_METADATA_SUCCESS","SAVE_ASSET_METADATA_SUCCESS","EXPORT_PROJECT_SUCCESS","UPDATE_PROJECT_TAG_SUCCESS","DELETE_PROJECT_TAG_SUCCESS"],"mappings":"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","sourcesContent":["import { Action, Dispatch } from \"redux\";\nimport ProjectService from \"../../services/projectService\";\nimport { ActionTypes } from \"./actionTypes\";\nimport { AssetService } from \"../../services/assetService\";\nimport { ExportProviderFactory } from \"../../providers/export/exportProviderFactory\";\nimport {\n    AppError,\n    ErrorCode,\n    IApplicationState,\n    IAsset,\n    IAssetMetadata,\n    IProject,\n} from \"../../models/applicationState\";\nimport { createAction, createPayloadAction, IPayloadAction } from \"./actionCreators\";\nimport { ExportAssetState, IExportResults } from \"../../providers/export/exportProvider\";\nimport { appInfo } from \"../../common/appInfo\";\nimport { strings } from \"../../common/strings\";\nimport { IExportFormat } from \"vott-react\";\nimport { IVottJsonExportProviderOptions } from \"../../providers/export/vottJson\";\n\n/**\n * Actions to be performed in relation to projects\n */\nexport default interface IProjectActions {\n    loadProject(project: IProject): Promise<IProject>;\n    saveProject(project: IProject): Promise<IProject>;\n    deleteProject(project: IProject): Promise<void>;\n    closeProject(): void;\n    exportProject(project: IProject): Promise<void> | Promise<IExportResults>;\n    loadAssets(project: IProject): Promise<IAsset[]>;\n    loadAssetMetadata(project: IProject, asset: IAsset): Promise<IAssetMetadata>;\n    saveAssetMetadata(project: IProject, assetMetadata: IAssetMetadata): Promise<IAssetMetadata>;\n    updateProjectTag(project: IProject, oldTagName: string, newTagName: string): Promise<IAssetMetadata[]>;\n    deleteProjectTag(project: IProject, tagName): Promise<IAssetMetadata[]>;\n}\n\n/**\n * Dispatches Load Project action and resolves with IProject\n * @param project - Project to load\n */\nexport function loadProject(project: IProject):\n    (dispatch: Dispatch, getState: () => IApplicationState) => Promise<IProject> {\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\n        const appState = getState();\n        const projectService = new ProjectService();\n\n        // Lookup security token used to decrypt project settings\n        const projectToken = appState.appSettings.securityTokens\n            .find((securityToken) => securityToken.name === project.securityToken);\n\n        if (!projectToken) {\n            throw new AppError(ErrorCode.SecurityTokenNotFound, \"Security Token Not Found\");\n        }\n        const loadedProject = await projectService.load(project, projectToken);\n\n        dispatch(loadProjectAction(loadedProject));\n        return loadedProject;\n    };\n}\n\n/**\n * Dispatches Save Project action and resolves with IProject\n * @param project - Project to save\n */\nexport function saveProject(project: IProject)\n    : (dispatch: Dispatch, getState: () => IApplicationState) => Promise<IProject> {\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\n        const appState = getState();\n        const projectService = new ProjectService();\n\n        if (projectService.isDuplicate(project, appState.recentProjects)) {\n            throw new AppError(ErrorCode.ProjectDuplicateName, `Project with name '${project.name}\n                already exists with the same target connection '${project.targetConnection.name}'`);\n        }\n\n        const projectToken = appState.appSettings.securityTokens\n            .find((securityToken) => securityToken.name === project.securityToken);\n\n        if (!projectToken) {\n            throw new AppError(ErrorCode.SecurityTokenNotFound, \"Security Token Not Found\");\n        }\n\n        const savedProject = await projectService.save(project, projectToken);\n        dispatch(saveProjectAction(savedProject));\n\n        // Reload project after save actions\n        await loadProject(savedProject)(dispatch, getState);\n\n        return savedProject;\n    };\n}\n\n/**\n * Dispatches Delete Project action and resolves with project\n * @param project - Project to delete\n */\nexport function deleteProject(project: IProject)\n    : (dispatch: Dispatch, getState: () => IApplicationState) => Promise<void> {\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\n        const appState = getState();\n        const projectService = new ProjectService();\n\n        // Lookup security token used to decrypt project settings\n        const projectToken = appState.appSettings.securityTokens\n            .find((securityToken) => securityToken.name === project.securityToken);\n\n        if (!projectToken) {\n            throw new AppError(ErrorCode.SecurityTokenNotFound, \"Security Token Not Found\");\n        }\n\n        const decryptedProject = await projectService.load(project, projectToken);\n\n        await projectService.delete(decryptedProject);\n        dispatch(deleteProjectAction(decryptedProject));\n    };\n}\n\n/**\n * Dispatches Close Project action\n */\nexport function closeProject(): (dispatch: Dispatch) => void {\n    return (dispatch: Dispatch): void => {\n        dispatch({ type: ActionTypes.CLOSE_PROJECT_SUCCESS });\n    };\n}\n\n/**\n * Gets assets from project, dispatches load assets action and returns assets\n * @param project - Project from which to load assets\n */\nexport function loadAssets(project: IProject): (dispatch: Dispatch) => Promise<IAsset[]> {\n    return async (dispatch: Dispatch) => {\n        const assetService = new AssetService(project);\n        const assets = await assetService.getAssets();\n        dispatch(loadProjectAssetsAction(assets));\n\n        return assets;\n    };\n}\n\n/**\n * Load metadata from asset within project\n * @param project - Project from which to load asset metadata\n * @param asset - Asset from which to load metadata\n */\nexport function loadAssetMetadata(project: IProject, asset: IAsset): (dispatch: Dispatch) => Promise<IAssetMetadata> {\n    return async (dispatch: Dispatch) => {\n        const assetService = new AssetService(project);\n        const assetMetadata = await assetService.getAssetMetadata(asset);\n        dispatch(loadAssetMetadataAction(assetMetadata));\n\n        return { ...assetMetadata };\n    };\n}\n\n/**\n * Save metadata from asset within project\n * @param project - Project from which to save asset metadata\n * @param assetMetadata - Metadata for asset within project\n */\nexport function saveAssetMetadata(\n    project: IProject,\n    assetMetadata: IAssetMetadata): (dispatch: Dispatch) => Promise<IAssetMetadata> {\n    const newAssetMetadata = { ...assetMetadata, version: appInfo.version };\n\n    return async (dispatch: Dispatch) => {\n        const assetService = new AssetService(project);\n        const savedMetadata = await assetService.save(newAssetMetadata);\n        dispatch(saveAssetMetadataAction(savedMetadata));\n\n        return { ...savedMetadata };\n    };\n}\n\n/**\n * Updates a project and all asset references from oldTagName to newTagName\n * @param project The project to update tags\n * @param oldTagName The old tag name\n * @param newTagName The new tag name\n */\nexport function updateProjectTag(project: IProject, oldTagName: string, newTagName: string)\n    : (dispatch: Dispatch, getState: () => IApplicationState) => Promise<IAssetMetadata[]> {\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\n        // Find tags to rename\n        const assetService = new AssetService(project);\n        const assetUpdates = await assetService.renameTag(oldTagName, newTagName);\n\n        // Save updated assets\n        await assetUpdates.forEachAsync(async (assetMetadata) => {\n            await saveAssetMetadata(project, assetMetadata)(dispatch);\n        });\n\n        const currentProject = getState().currentProject;\n        const updatedProject = {\n            ...currentProject,\n            tags: project.tags.map((t) => (t.name === oldTagName) ? { ...t, name: newTagName } : t),\n        };\n\n        // Save updated project tags\n        await saveProject(updatedProject)(dispatch, getState);\n        dispatch(updateProjectTagAction(updatedProject));\n\n        return assetUpdates;\n    };\n}\n\n/**\n * Updates a project and all asset references from oldTagName to newTagName\n * @param project The project to delete tags\n * @param tagName The tag to delete\n */\nexport function deleteProjectTag(project: IProject, tagName)\n    : (dispatch: Dispatch, getState: () => IApplicationState) => Promise<IAssetMetadata[]> {\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\n        // Find tags to rename\n        const assetService = new AssetService(project);\n        const assetUpdates = await assetService.deleteTag(tagName);\n\n        // Save updated assets\n        await assetUpdates.forEachAsync(async (assetMetadata) => {\n            await saveAssetMetadata(project, assetMetadata)(dispatch);\n        });\n\n        const currentProject = getState().currentProject;\n        const updatedProject = {\n            ...currentProject,\n            tags: project.tags.filter((t) => t.name !== tagName),\n        };\n\n        // Save updated project tags\n        await saveProject(updatedProject)(dispatch, getState);\n        dispatch(deleteProjectTagAction(updatedProject));\n\n        return assetUpdates;\n    };\n}\n\n/**\n * Initialize export provider, get export data and dispatch export project action\n * @param project - Project to export\n */\nexport function exportProject(project: IProject): (dispatch: Dispatch) => Promise<void> | Promise<IExportResults> {\n    return async (dispatch: Dispatch) => {\n        if (!project.exportFormat) {\n            throw new AppError(ErrorCode.ExportFormatNotFound, strings.errors.exportFormatNotFound.message);\n        }\n\n        if (project.exportFormat && project.exportFormat.providerType) {\n            const exportProvider = ExportProviderFactory.create(\n                project.exportFormat.providerType,\n                project,\n                project.exportFormat.providerOptions);\n\n            const results = await exportProvider.export();\n            dispatch(exportProjectAction(project));\n\n            return results as IExportResults;\n        }\n    };\n}\n\n/**\n * Load project action type\n */\nexport interface ILoadProjectAction extends IPayloadAction<string, IProject> {\n    type: ActionTypes.LOAD_PROJECT_SUCCESS;\n}\n\n/**\n * Close project action type\n */\nexport interface ICloseProjectAction extends Action<string> {\n    type: ActionTypes.CLOSE_PROJECT_SUCCESS;\n}\n\n/**\n * Save project action type\n */\nexport interface ISaveProjectAction extends IPayloadAction<string, IProject> {\n    type: ActionTypes.SAVE_PROJECT_SUCCESS;\n}\n\n/**\n * Delete project action type\n */\nexport interface IDeleteProjectAction extends IPayloadAction<string, IProject> {\n    type: ActionTypes.DELETE_PROJECT_SUCCESS;\n}\n\n/**\n * Load project assets action type\n */\nexport interface ILoadProjectAssetsAction extends IPayloadAction<string, IAsset[]> {\n    type: ActionTypes.LOAD_PROJECT_ASSETS_SUCCESS;\n}\n\n/**\n * Load asset metadata action type\n */\nexport interface ILoadAssetMetadataAction extends IPayloadAction<string, IAssetMetadata> {\n    type: ActionTypes.LOAD_ASSET_METADATA_SUCCESS;\n}\n\n/**\n * Save asset metadata action type\n */\nexport interface ISaveAssetMetadataAction extends IPayloadAction<string, IAssetMetadata> {\n    type: ActionTypes.SAVE_ASSET_METADATA_SUCCESS;\n}\n\n/**\n * Export project action type\n */\nexport interface IExportProjectAction extends IPayloadAction<string, IProject> {\n    type: ActionTypes.EXPORT_PROJECT_SUCCESS;\n}\n\n/**\n * Update Project Tag action type\n */\nexport interface IUpdateProjectTagAction extends IPayloadAction<string, IProject> {\n    type: ActionTypes.UPDATE_PROJECT_TAG_SUCCESS;\n}\n\n/**\n * Delete project tag action type\n */\nexport interface IDeleteProjectTagAction extends IPayloadAction<string, IProject> {\n    type: ActionTypes.DELETE_PROJECT_TAG_SUCCESS;\n}\n\n/**\n * Instance of Load Project action\n */\nexport const loadProjectAction = createPayloadAction<ILoadProjectAction>(ActionTypes.LOAD_PROJECT_SUCCESS);\n/**\n * Instance of Close Project action\n */\nexport const closeProjectAction = createAction<ICloseProjectAction>(ActionTypes.CLOSE_PROJECT_SUCCESS);\n/**\n * Instance of Save Project action\n */\nexport const saveProjectAction = createPayloadAction<ISaveProjectAction>(ActionTypes.SAVE_PROJECT_SUCCESS);\n/**\n * Instance of Delete Project action\n */\nexport const deleteProjectAction = createPayloadAction<IDeleteProjectAction>(ActionTypes.DELETE_PROJECT_SUCCESS);\n/**\n * Instance of Load Project Assets action\n */\nexport const loadProjectAssetsAction =\n    createPayloadAction<ILoadProjectAssetsAction>(ActionTypes.LOAD_PROJECT_ASSETS_SUCCESS);\n/**\n * Instance of Load Asset Metadata action\n */\nexport const loadAssetMetadataAction =\n    createPayloadAction<ILoadAssetMetadataAction>(ActionTypes.LOAD_ASSET_METADATA_SUCCESS);\n/**\n * Instance of Save Asset Metadata action\n */\nexport const saveAssetMetadataAction =\n    createPayloadAction<ISaveAssetMetadataAction>(ActionTypes.SAVE_ASSET_METADATA_SUCCESS);\n/**\n * Instance of Export Project action\n */\nexport const exportProjectAction =\n    createPayloadAction<IExportProjectAction>(ActionTypes.EXPORT_PROJECT_SUCCESS);\n/**\n * Instance of Update project tag action\n */\nexport const updateProjectTagAction =\n    createPayloadAction<IUpdateProjectTagAction>(ActionTypes.UPDATE_PROJECT_TAG_SUCCESS);\n/**\n * Instance of Delete project tag action\n */\nexport const deleteProjectTagAction =\n    createPayloadAction<IDeleteProjectTagAction>(ActionTypes.DELETE_PROJECT_TAG_SUCCESS);\n"]},"metadata":{},"sourceType":"module"}
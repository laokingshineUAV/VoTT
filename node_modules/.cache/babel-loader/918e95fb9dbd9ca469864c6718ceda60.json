{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as tslib_1 from \"tslib\";\nimport { StackFrame } from '../Interfaces/Contracts/Generated/StackFrame';\nimport { ExceptionData } from '../Interfaces/Contracts/Generated/ExceptionData';\nimport { ExceptionDetails } from '../Interfaces/Contracts/Generated/ExceptionDetails';\nimport { DataSanitizer } from './Common/DataSanitizer';\nimport { FieldType } from '../Enums';\nimport { Util } from '../Util';\n\nvar Exception =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Exception, _super);\n  /**\r\n  * Constructs a new isntance of the ExceptionTelemetry object\r\n  */\n\n\n  function Exception(logger, exception, properties, measurements, severityLevel) {\n    var _this = _super.call(this) || this;\n\n    _this.aiDataContract = {\n      ver: FieldType.Required,\n      exceptions: FieldType.Required,\n      severityLevel: FieldType.Default,\n      properties: FieldType.Default,\n      measurements: FieldType.Default\n    };\n    _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\n    _this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\n    _this.exceptions = [new _ExceptionDetails(logger, exception)];\n\n    if (severityLevel) {\n      _this.severityLevel = severityLevel;\n    }\n\n    return _this;\n  }\n  /**\r\n  * Creates a simple exception with 1 stack frame. Useful for manual constracting of exception.\r\n  */\n\n\n  Exception.CreateSimpleException = function (message, typeName, assembly, fileName, details, line) {\n    return {\n      exceptions: [{\n        hasFullStack: true,\n        message: message,\n        stack: details,\n        typeName: typeName\n      }]\n    };\n  };\n\n  Exception.envelopeType = \"Microsoft.ApplicationInsights.{0}.Exception\";\n  Exception.dataType = \"ExceptionData\";\n  return Exception;\n}(ExceptionData);\n\nexport { Exception };\n\nvar _ExceptionDetails =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(_ExceptionDetails, _super);\n\n  function _ExceptionDetails(logger, exception) {\n    var _this = _super.call(this) || this;\n\n    _this.aiDataContract = {\n      id: FieldType.Default,\n      outerId: FieldType.Default,\n      typeName: FieldType.Required,\n      message: FieldType.Required,\n      hasFullStack: FieldType.Default,\n      stack: FieldType.Default,\n      parsedStack: FieldType.Array\n    };\n    _this.typeName = DataSanitizer.sanitizeString(logger, exception.name) || Util.NotSpecified;\n    _this.message = DataSanitizer.sanitizeMessage(logger, exception.message) || Util.NotSpecified;\n    var stack = exception[\"stack\"];\n    _this.parsedStack = _this.parseStack(stack);\n    _this.stack = DataSanitizer.sanitizeException(logger, stack);\n    _this.hasFullStack = Util.isArray(_this.parsedStack) && _this.parsedStack.length > 0;\n    return _this;\n  }\n\n  _ExceptionDetails.prototype.parseStack = function (stack) {\n    var parsedStack = undefined;\n\n    if (typeof stack === \"string\") {\n      var frames = stack.split('\\n');\n      parsedStack = [];\n      var level = 0;\n      var totalSizeInBytes = 0;\n\n      for (var i = 0; i <= frames.length; i++) {\n        var frame = frames[i];\n\n        if (_StackFrame.regex.test(frame)) {\n          var parsedFrame = new _StackFrame(frames[i], level++);\n          totalSizeInBytes += parsedFrame.sizeInBytes;\n          parsedStack.push(parsedFrame);\n        }\n      } // DP Constraint - exception parsed stack must be < 32KB\n      // remove frames from the middle to meet the threshold\n\n\n      var exceptionParsedStackThreshold = 32 * 1024;\n\n      if (totalSizeInBytes > exceptionParsedStackThreshold) {\n        var left = 0;\n        var right = parsedStack.length - 1;\n        var size = 0;\n        var acceptedLeft = left;\n        var acceptedRight = right;\n\n        while (left < right) {\n          // check size\n          var lSize = parsedStack[left].sizeInBytes;\n          var rSize = parsedStack[right].sizeInBytes;\n          size += lSize + rSize;\n\n          if (size > exceptionParsedStackThreshold) {\n            // remove extra frames from the middle\n            var howMany = acceptedRight - acceptedLeft + 1;\n            parsedStack.splice(acceptedLeft, howMany);\n            break;\n          } // update pointers\n\n\n          acceptedLeft = left;\n          acceptedRight = right;\n          left++;\n          right--;\n        }\n      }\n    }\n\n    return parsedStack;\n  };\n\n  return _ExceptionDetails;\n}(ExceptionDetails);\n\nvar _StackFrame =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(_StackFrame, _super);\n\n  function _StackFrame(frame, level) {\n    var _this = _super.call(this) || this;\n\n    _this.sizeInBytes = 0;\n    _this.aiDataContract = {\n      level: FieldType.Required,\n      method: FieldType.Required,\n      assembly: FieldType.Default,\n      fileName: FieldType.Default,\n      line: FieldType.Default\n    };\n    _this.level = level;\n    _this.method = \"<no_method>\";\n    _this.assembly = Util.trim(frame);\n    var matches = frame.match(_StackFrame.regex);\n\n    if (matches && matches.length >= 5) {\n      _this.method = Util.trim(matches[2]) || _this.method;\n      _this.fileName = Util.trim(matches[4]);\n      _this.line = parseInt(matches[5]) || 0;\n    }\n\n    _this.sizeInBytes += _this.method.length;\n    _this.sizeInBytes += _this.fileName.length;\n    _this.sizeInBytes += _this.assembly.length; // todo: these might need to be removed depending on how the back-end settles on their size calculation\n\n    _this.sizeInBytes += _StackFrame.baseSize;\n    _this.sizeInBytes += _this.level.toString().length;\n    _this.sizeInBytes += _this.line.toString().length;\n    return _this;\n  } // regex to match stack frames from ie/chrome/ff\n  // methodName=$2, fileName=$4, lineNo=$5, column=$6\n\n\n  _StackFrame.regex = /^([\\s]+at)?(.*?)(\\@|\\s\\(|\\s)([^\\(\\@\\n]+):([0-9]+):([0-9]+)(\\)?)$/;\n  _StackFrame.baseSize = 58; //'{\"method\":\"\",\"level\":,\"assembly\":\"\",\"fileName\":\"\",\"line\":}'.length\n\n  return _StackFrame;\n}(StackFrame);\n\nexport { _StackFrame };","map":null,"metadata":{},"sourceType":"module"}
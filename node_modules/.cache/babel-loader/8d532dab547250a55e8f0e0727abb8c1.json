{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Credential } from \"../credentials/Credential\";\nimport { TokenCredentialPolicy } from \"../policies/TokenCredentialPolicy\";\n/**\n * TokenCredential is a Credential used to generate a TokenCredentialPolicy.\n * Renew token by setting a new token string value to token property.\n *\n * @example\n *  const tokenCredential = new TokenCredential(\"token\");\n *  const pipeline = StorageURL.newPipeline(tokenCredential);\n *\n *  // List containers\n *  const serviceURL = new ServiceURL(\"https://mystorageaccount.blob.core.windows.net\", pipeline);\n *\n *  // Set up a timer to refresh the token\n *  const timerID = setInterval(() => {\n *    // Update token by accessing to public tokenCredential.token\n *    tokenCredential.token = \"updatedToken\";\n *    // WARNING: Timer must be manually stopped! It will forbid GC of tokenCredential\n *    if (shouldStop()) {\n *      clearInterval(timerID);\n *    }\n *  }, 60 * 60 * 1000); // Set an interval time before your token expired\n * @export\n * @class TokenCredential\n * @extends {Credential}\n *\n */\n\nvar TokenCredential =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TokenCredential, _super);\n  /**\n   * Creates an instance of TokenCredential.\n   * @param {string} token\n   * @memberof TokenCredential\n   */\n\n\n  function TokenCredential(token) {\n    var _this = _super.call(this) || this;\n\n    _this.token = token;\n    return _this;\n  }\n  /**\n   * Creates a TokenCredentialPolicy object.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {TokenCredentialPolicy}\n   * @memberof TokenCredential\n   */\n\n\n  TokenCredential.prototype.create = function (nextPolicy, options) {\n    return new TokenCredentialPolicy(nextPolicy, options, this);\n  };\n\n  return TokenCredential;\n}(Credential);\n\nexport { TokenCredential };","map":null,"metadata":{},"sourceType":"module"}
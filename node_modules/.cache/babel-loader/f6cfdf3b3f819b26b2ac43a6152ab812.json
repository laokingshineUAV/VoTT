{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { ExportProvider } from \"./exportProvider\";\nimport Guard from \"../../common/guard\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\nimport { Parser } from \"json2csv\";\n/**\n * Options for CSV Export Provider\n */\n\n/**\n * @name - CSV Format Export Provider\n * @description - Exports a project into a single CSV file that include all configured assets\n */\nexport var CsvExportProvider =\n/*#__PURE__*/\nfunction (_ExportProvider) {\n  _inherits(CsvExportProvider, _ExportProvider);\n\n  function CsvExportProvider(project, options) {\n    var _this;\n\n    _classCallCheck(this, CsvExportProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CsvExportProvider).call(this, project, options));\n    Guard.null(options);\n    return _this;\n  }\n  /**\n   * Export project to CSV\n   */\n\n\n  _createClass(CsvExportProvider, [{\n    key: \"export\",\n    value: function () {\n      var _export2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var results, dataItems, csvOptions, csvParser, csvData, fileName;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getAssetsForExport();\n\n              case 2:\n                results = _context2.sent;\n                dataItems = [];\n                _context2.next = 6;\n                return results.forEachAsync(\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee(assetMetadata) {\n                    var arrayBuffer, assetFilePath;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            if (!_this2.options.includeImages) {\n                              _context.next = 7;\n                              break;\n                            }\n\n                            _context.next = 3;\n                            return HtmlFileReader.getAssetArray(assetMetadata.asset);\n\n                          case 3:\n                            arrayBuffer = _context.sent;\n                            assetFilePath = \"vott-csv-export/\".concat(assetMetadata.asset.name);\n                            _context.next = 7;\n                            return _this2.storageProvider.writeBinary(assetFilePath, Buffer.from(arrayBuffer));\n\n                          case 7:\n                            // Push CSV Records\n                            // The CSV file itself must have the following format::\n                            // image,xmin,ymin,xmax,ymax,label\n                            // image_1.jpg,26,594,86,617,cat\n                            // image_1.jpg,599,528,612,541,car\n                            // image_2.jpg,393,477,430,552,dog\n                            assetMetadata.regions.forEach(function (region) {\n                              region.tags.forEach(function (tag) {\n                                var dataItem = {\n                                  image: assetMetadata.asset.name,\n                                  xmin: region.boundingBox.left,\n                                  ymin: region.boundingBox.top,\n                                  xmax: region.boundingBox.left + region.boundingBox.width,\n                                  ymax: region.boundingBox.top + region.boundingBox.height,\n                                  label: tag\n                                };\n                                dataItems.push(dataItem);\n                              });\n                            });\n\n                          case 8:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n\n                  return function (_x) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 6:\n                // Configure CSV options\n                csvOptions = {\n                  fields: [\"image\", \"xmin\", \"ymin\", \"xmax\", \"ymax\", \"label\"]\n                };\n                csvParser = new Parser(csvOptions);\n                csvData = csvParser.parse(dataItems); // Save CSV\n\n                fileName = \"vott-csv-export/\".concat(this.project.name.replace(/\\s/g, \"-\"), \"-export.csv\");\n                _context2.next = 12;\n                return this.storageProvider.writeText(fileName, csvData);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _export() {\n        return _export2.apply(this, arguments);\n      }\n\n      return _export;\n    }()\n  }]);\n\n  return CsvExportProvider;\n}(ExportProvider);","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/providers/export/csv.ts"],"names":["ExportProvider","Guard","HtmlFileReader","Parser","CsvExportProvider","project","options","null","getAssetsForExport","results","dataItems","forEachAsync","assetMetadata","includeImages","getAssetArray","asset","arrayBuffer","assetFilePath","name","storageProvider","writeBinary","Buffer","from","regions","forEach","region","tags","tag","dataItem","image","xmin","boundingBox","left","ymin","top","xmax","width","ymax","height","label","push","csvOptions","fields","csvParser","csvData","parse","fileName","replace","writeText"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport { ExportProvider } from \"./exportProvider\";\nimport { IProject, IExportProviderOptions } from \"../../models/applicationState\";\nimport Guard from \"../../common/guard\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\nimport json2csv, { Parser } from \"json2csv\";\n\n/**\n * Options for CSV Export Provider\n */\nexport interface ICsvExportProviderOptions extends IExportProviderOptions {\n    /** Whether or not to include binary assets in target connection */\n    includeImages: boolean;\n}\n\n/**\n * @name - CSV Format Export Provider\n * @description - Exports a project into a single CSV file that include all configured assets\n */\nexport class CsvExportProvider extends ExportProvider<ICsvExportProviderOptions> {\n    constructor(project: IProject, options: ICsvExportProviderOptions) {\n        super(project, options);\n        Guard.null(options);\n    }\n\n    /**\n     * Export project to CSV\n     */\n    public async export(): Promise<void> {\n        const results = await this.getAssetsForExport();\n        const dataItems = [];\n\n        await results.forEachAsync(async (assetMetadata) => {\n            if (this.options.includeImages) {\n                // Write Image\n                const arrayBuffer = await HtmlFileReader.getAssetArray(assetMetadata.asset);\n                const assetFilePath = `vott-csv-export/${assetMetadata.asset.name}`;\n                await this.storageProvider.writeBinary(assetFilePath, Buffer.from(arrayBuffer));\n            }\n\n            // Push CSV Records\n            // The CSV file itself must have the following format::\n            // image,xmin,ymin,xmax,ymax,label\n            // image_1.jpg,26,594,86,617,cat\n            // image_1.jpg,599,528,612,541,car\n            // image_2.jpg,393,477,430,552,dog\n            assetMetadata.regions.forEach((region) => {\n                region.tags.forEach((tag) => {\n                    const dataItem = {\n                        image: assetMetadata.asset.name,\n                        xmin: region.boundingBox.left,\n                        ymin: region.boundingBox.top,\n                        xmax: region.boundingBox.left + region.boundingBox.width,\n                        ymax: region.boundingBox.top + region.boundingBox.height,\n                        label: tag,\n                    };\n                    dataItems.push(dataItem);\n                });\n            });\n        });\n\n        // Configure CSV options\n        const csvOptions: json2csv.Options<{}> = {\n            fields: [\"image\", \"xmin\", \"ymin\", \"xmax\", \"ymax\", \"label\"],\n        };\n        const csvParser = new Parser(csvOptions);\n        const csvData = csvParser.parse(dataItems);\n\n        // Save CSV\n        const fileName = `vott-csv-export/${this.project.name.replace(/\\s/g, \"-\")}-export.csv`;\n        await this.storageProvider.writeText(fileName, csvData);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Rect_1 = require(\"../../Core/Rect\");\n\nvar Region_1 = require(\"../Region\");\n\nvar AnchorsElements_1 = require(\"./AnchorsElements\");\n\nvar DragElement_1 = require(\"./DragElement\");\n\nvar TagsElement_1 = require(\"./TagsElement\");\n/**\r\n * The rect-type region class.\r\n */\n\n\nvar RectRegion =\n/*#__PURE__*/\nfunction (_Region_1$Region) {\n  _inherits(RectRegion, _Region_1$Region);\n\n  /**\r\n   * Creates new `RectRegion` object.\r\n   * @param paper - The `Snap.Paper` object to draw on.\r\n   * @param paperRect - The parent bounding box for created component.\r\n   * @param regionData - The `RegionData` object shared across components. Used also for initial setup.\r\n   * @param callbacks - The external callbacks collection.\r\n   * @param id - The region `id` used to identify regions in `RegionsManager`.\r\n   * @param tagsDescriptor - The descriptor of region tags.\r\n   * @param tagsUpdateOptions - The drawing options for tags.\r\n   */\n  function RectRegion(paper) {\n    var _this;\n\n    var paperRect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var regionData = arguments.length > 2 ? arguments[2] : undefined;\n    var callbacks = arguments.length > 3 ? arguments[3] : undefined;\n    var id = arguments.length > 4 ? arguments[4] : undefined;\n    var tagsDescriptor = arguments.length > 5 ? arguments[5] : undefined;\n    var tagsUpdateOptions = arguments.length > 6 ? arguments[6] : undefined;\n\n    _classCallCheck(this, RectRegion);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RectRegion).call(this, paper, paperRect, regionData, callbacks, id, tagsDescriptor, tagsUpdateOptions));\n\n    if (paperRect !== null) {\n      _this.paperRects = {\n        actual: new Rect_1.Rect(paperRect.width - regionData.width, paperRect.height - regionData.height),\n        host: paperRect\n      };\n    }\n\n    _this.buildOn(paper);\n\n    return _this;\n  }\n  /**\r\n   * Updates region tags.\r\n   * @param tags - The new tags descriptor object.\r\n   * @param options - The tags drawing options.\r\n   */\n\n\n  _createClass(RectRegion, [{\n    key: \"updateTags\",\n    value: function updateTags(tags, options) {\n      _get(_getPrototypeOf(RectRegion.prototype), \"updateTags\", this).call(this, tags, options);\n\n      this.tagsNode.updateTags(tags, options);\n      this.node.select(\"title\").node.innerHTML = tags !== null ? tags.toString() : \"\";\n    }\n    /**\r\n     * Resizes the region to specified `width` and `height`.\r\n     * @param width - The new region width.\r\n     * @param height - The new region height.\r\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      this.paperRects.actual.resize(this.paperRects.host.width - width, this.paperRects.host.height - height);\n\n      _get(_getPrototypeOf(RectRegion.prototype), \"resize\", this).call(this, width, height);\n    }\n    /**\r\n     * The callback function fot internal components.\r\n     * @param component - Reference to the UI component.\r\n     * @param regionData - New RegionData object.\r\n     * @param state - New state of the region.\r\n     * @param multiSelection - Flag for multiselection.\r\n     */\n\n  }, {\n    key: \"onChange\",\n    value: function onChange(component, regionData, state) {\n      var multiSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      this.paperRects.actual.resize(this.paperRects.host.width - regionData.width, this.paperRects.host.height - regionData.height);\n\n      _get(_getPrototypeOf(RectRegion.prototype), \"onChange\", this).call(this, component, regionData, state, multiSelection);\n    }\n    /**\r\n     * Creates the UI of the region component.\r\n     * @param paper - The `Snap.Paper` element to draw on.\r\n     */\n\n  }, {\n    key: \"buildOn\",\n    value: function buildOn(paper) {\n      this.node = paper.g();\n      this.node.addClass(\"regionStyle\");\n      this.node.addClass(this.styleID);\n      var callbacks = {\n        onChange: this.onChange.bind(this),\n        onManipulationBegin: this.onManipulationBegin.bind(this),\n        onManipulationEnd: this.onManipulationEnd.bind(this)\n      };\n      this.anchorNode = new AnchorsElements_1.AnchorsElement(paper, this.paperRects.host, this.regionData, callbacks);\n      this.dragNode = new DragElement_1.DragElement(paper, this.paperRects.actual, this.regionData, callbacks);\n      this.tagsNode = new TagsElement_1.TagsElement(paper, this.paperRects.host, this.regionData, this.tags, this.styleID, this.styleSheet, this.tagsUpdateOptions);\n      this.toolTip = Snap.parse(\"<title>\".concat(this.tags !== null ? this.tags.toString() : \"\", \"</title>\"));\n      this.node.append(this.toolTip);\n      this.node.add(this.tagsNode.node);\n      this.node.add(this.dragNode.node);\n      this.node.add(this.anchorNode.node);\n      this.UI.push(this.tagsNode, this.dragNode, this.anchorNode);\n    }\n  }]);\n\n  return RectRegion;\n}(Region_1.Region);\n\nexports.RectRegion = RectRegion;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport os from \"os\";\nimport { ExportProvider } from \"./exportProvider\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\nimport Guard from \"../../common/guard\";\nimport { splitTestAsset } from \"./testAssetsSplitHelper\";\nvar ExportSplit;\n/**\n * Export options for CNTK export provider\n */\n\n(function (ExportSplit) {\n  ExportSplit[ExportSplit[\"Test\"] = 0] = \"Test\";\n  ExportSplit[ExportSplit[\"Train\"] = 1] = \"Train\";\n})(ExportSplit || (ExportSplit = {}));\n\n/**\n * CNTK Export provider\n */\nexport var CntkExportProvider =\n/*#__PURE__*/\nfunction (_ExportProvider) {\n  _inherits(CntkExportProvider, _ExportProvider);\n\n  function CntkExportProvider(project, options) {\n    var _this;\n\n    _classCallCheck(this, CntkExportProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CntkExportProvider).call(this, project, options));\n    Guard.null(options);\n    _this.exportFolderName = \"\".concat(_this.project.name.replace(/\\s/g, \"-\"), \"-CNTK-export\");\n    return _this;\n  }\n\n  _createClass(CntkExportProvider, [{\n    key: \"export\",\n    value: function () {\n      var _export2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var assetsToExport, testAssets, testSplit, splittedAssets, results;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.createFolderStructure();\n\n              case 2:\n                _context2.next = 4;\n                return this.getAssetsForExport();\n\n              case 4:\n                assetsToExport = _context2.sent;\n                testAssets = [];\n                testSplit = (100 - (this.options.testTrainSplit || 80)) / 100;\n\n                if (testSplit > 0 && testSplit <= 1) {\n                  splittedAssets = splitTestAsset(assetsToExport, this.project.tags, testSplit);\n                  testAssets.push.apply(testAssets, _toConsumableArray(splittedAssets));\n                }\n\n                _context2.next = 10;\n                return assetsToExport.mapAsync(\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee(assetMetadata) {\n                    var exportSplit;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.prev = 0;\n                            exportSplit = testAssets.find(function (am) {\n                              return am === assetMetadata.asset.id;\n                            }) ? ExportSplit.Test : ExportSplit.Train;\n                            _context.next = 4;\n                            return _this2.exportAssetFrame(assetMetadata, exportSplit);\n\n                          case 4:\n                            return _context.abrupt(\"return\", {\n                              asset: assetMetadata,\n                              success: true\n                            });\n\n                          case 7:\n                            _context.prev = 7;\n                            _context.t0 = _context[\"catch\"](0);\n                            return _context.abrupt(\"return\", {\n                              asset: assetMetadata,\n                              success: false,\n                              error: _context.t0\n                            });\n\n                          case 10:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this, [[0, 7]]);\n                  }));\n\n                  return function (_x) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 10:\n                results = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  completed: results.filter(function (r) {\n                    return r.success;\n                  }),\n                  errors: results.filter(function (r) {\n                    return !r.success;\n                  }),\n                  count: results.length\n                });\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _export() {\n        return _export2.apply(this, arguments);\n      }\n\n      return _export;\n    }()\n  }, {\n    key: \"exportAssetFrame\",\n    value: function () {\n      var _exportAssetFrame = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(assetMetadata, exportSplit) {\n        var labelData, boundingBoxData, buffer, folderName, labelsPath, boundingBoxPath, binaryPath;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                labelData = [];\n                boundingBoxData = [];\n                assetMetadata.regions.forEach(function (region) {\n                  region.tags.forEach(function (tagName) {\n                    labelData.push(tagName); // tslint:disable-next-line:max-line-length\n\n                    boundingBoxData.push(\"\".concat(region.boundingBox.left, \"\\t\").concat(region.boundingBox.left + region.boundingBox.width, \"\\t\").concat(region.boundingBox.top, \"\\t\").concat(region.boundingBox.top + region.boundingBox.height));\n                  });\n                });\n                _context3.next = 5;\n                return HtmlFileReader.getAssetArray(assetMetadata.asset);\n\n              case 5:\n                buffer = _context3.sent;\n                folderName = exportSplit === ExportSplit.Train ? \"positive\" : \"testImages\";\n                labelsPath = \"\".concat(this.exportFolderName, \"/\").concat(folderName, \"/\").concat(assetMetadata.asset.name, \".bboxes.labels.tsv\");\n                boundingBoxPath = \"\".concat(this.exportFolderName, \"/\").concat(folderName, \"/\").concat(assetMetadata.asset.name, \".bboxes.tsv\");\n                binaryPath = \"\".concat(this.exportFolderName, \"/\").concat(folderName, \"/\").concat(assetMetadata.asset.name);\n                _context3.next = 12;\n                return Promise.all([this.storageProvider.writeText(labelsPath, labelData.join(os.EOL)), this.storageProvider.writeText(boundingBoxPath, boundingBoxData.join(os.EOL)), this.storageProvider.writeBinary(binaryPath, Buffer.from(buffer))]);\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function exportAssetFrame(_x2, _x3) {\n        return _exportAssetFrame.apply(this, arguments);\n      }\n\n      return exportAssetFrame;\n    }()\n  }, {\n    key: \"createFolderStructure\",\n    value: function () {\n      var _createFolderStructure = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        var _this3 = this;\n\n        var positiveFolder, negativeFolder, testImagesFolder;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                positiveFolder = \"\".concat(this.exportFolderName, \"/positive\");\n                negativeFolder = \"\".concat(this.exportFolderName, \"/negative\");\n                testImagesFolder = \"\".concat(this.exportFolderName, \"/testImages\");\n                _context5.next = 5;\n                return this.storageProvider.createContainer(this.exportFolderName);\n\n              case 5:\n                _context5.next = 7;\n                return [positiveFolder, negativeFolder, testImagesFolder].forEachAsync(\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee4(folderPath) {\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            _context4.next = 2;\n                            return _this3.storageProvider.createContainer(folderPath);\n\n                          case 2:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4, this);\n                  }));\n\n                  return function (_x4) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }());\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function createFolderStructure() {\n        return _createFolderStructure.apply(this, arguments);\n      }\n\n      return createFolderStructure;\n    }()\n  }]);\n\n  return CntkExportProvider;\n}(ExportProvider);","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/providers/export/cntk.ts"],"names":["os","ExportProvider","HtmlFileReader","Guard","splitTestAsset","ExportSplit","CntkExportProvider","project","options","null","exportFolderName","name","replace","createFolderStructure","getAssetsForExport","assetsToExport","testAssets","testSplit","testTrainSplit","splittedAssets","tags","push","mapAsync","assetMetadata","exportSplit","find","am","asset","id","Test","Train","exportAssetFrame","success","error","results","completed","filter","r","errors","count","length","labelData","boundingBoxData","regions","forEach","region","tagName","boundingBox","left","width","top","height","getAssetArray","buffer","folderName","labelsPath","boundingBoxPath","binaryPath","Promise","all","storageProvider","writeText","join","EOL","writeBinary","Buffer","from","positiveFolder","negativeFolder","testImagesFolder","createContainer","forEachAsync","folderPath"],"mappings":"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","sourcesContent":["import os from \"os\";\nimport { ExportProvider, IExportResults } from \"./exportProvider\";\nimport { IAssetMetadata, IExportProviderOptions, IProject } from \"../../models/applicationState\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\nimport Guard from \"../../common/guard\";\nimport { splitTestAsset } from \"./testAssetsSplitHelper\";\n\nenum ExportSplit {\n    Test,\n    Train,\n}\n\n/**\n * Export options for CNTK export provider\n */\nexport interface ICntkExportProviderOptions extends IExportProviderOptions {\n    /** The test / train split ratio for exporting data */\n    testTrainSplit?: number;\n}\n\n/**\n * CNTK Export provider\n */\nexport class CntkExportProvider extends ExportProvider<ICntkExportProviderOptions> {\n    private exportFolderName: string;\n\n    constructor(project: IProject, options: ICntkExportProviderOptions) {\n        super(project, options);\n        Guard.null(options);\n\n        this.exportFolderName = `${this.project.name.replace(/\\s/g, \"-\")}-CNTK-export`;\n    }\n\n    public async export(): Promise<IExportResults> {\n        await this.createFolderStructure();\n        const assetsToExport = await this.getAssetsForExport();\n        const testAssets: string[] = [];\n\n        const testSplit = (100 - (this.options.testTrainSplit || 80)) / 100;\n        if (testSplit > 0 && testSplit <= 1) {\n            const splittedAssets = splitTestAsset(assetsToExport, this.project.tags, testSplit);\n            testAssets.push(...splittedAssets);\n        }\n\n        const results = await assetsToExport.mapAsync(async (assetMetadata) => {\n            try {\n                const exportSplit = testAssets.find((am) => am === assetMetadata.asset.id)\n                    ? ExportSplit.Test\n                    : ExportSplit.Train;\n\n                await this.exportAssetFrame(assetMetadata, exportSplit);\n                return {\n                    asset: assetMetadata,\n                    success: true,\n                };\n            } catch (e) {\n                return {\n                    asset: assetMetadata,\n                    success: false,\n                    error: e,\n                };\n            }\n        });\n\n        return {\n            completed: results.filter((r) => r.success),\n            errors: results.filter((r) => !r.success),\n            count: results.length,\n        };\n    }\n\n    private async exportAssetFrame(assetMetadata: IAssetMetadata, exportSplit: ExportSplit) {\n        const labelData = [];\n        const boundingBoxData = [];\n\n        assetMetadata.regions.forEach((region) => {\n            region.tags.forEach((tagName) => {\n                labelData.push(tagName);\n                // tslint:disable-next-line:max-line-length\n                boundingBoxData.push(`${region.boundingBox.left}\\t${region.boundingBox.left + region.boundingBox.width}\\t${region.boundingBox.top}\\t${region.boundingBox.top + region.boundingBox.height}`);\n            });\n        });\n\n        const buffer = await HtmlFileReader.getAssetArray(assetMetadata.asset);\n        const folderName = exportSplit === ExportSplit.Train ? \"positive\" : \"testImages\";\n        const labelsPath = `${this.exportFolderName}/${folderName}/${assetMetadata.asset.name}.bboxes.labels.tsv`;\n        const boundingBoxPath = `${this.exportFolderName}/${folderName}/${assetMetadata.asset.name}.bboxes.tsv`;\n        const binaryPath = `${this.exportFolderName}/${folderName}/${assetMetadata.asset.name}`;\n\n        await Promise.all([\n            this.storageProvider.writeText(labelsPath, labelData.join(os.EOL)),\n            this.storageProvider.writeText(boundingBoxPath, boundingBoxData.join(os.EOL)),\n            this.storageProvider.writeBinary(binaryPath, Buffer.from(buffer)),\n        ]);\n    }\n\n    private async createFolderStructure(): Promise<void> {\n        const positiveFolder = `${this.exportFolderName}/positive`;\n        const negativeFolder = `${this.exportFolderName}/negative`;\n        const testImagesFolder = `${this.exportFolderName}/testImages`;\n\n        await this.storageProvider.createContainer(this.exportFolderName);\n\n        await [positiveFolder, negativeFolder, testImagesFolder]\n            .forEachAsync(async (folderPath) => {\n                await this.storageProvider.createContainer(folderPath);\n            });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
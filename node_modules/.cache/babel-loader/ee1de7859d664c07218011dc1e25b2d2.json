{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { IpcRendererProxy } from \"../../common/ipcRendererProxy\";\nimport { ActionTypes } from \"./actionTypes\";\nimport { createPayloadAction, createAction } from \"./actionCreators\";\nimport { generateKey } from \"../../common/crypto\";\n/**\n * Actions to make changes to application settings\n * @member toggleDevTools - Open or close dev tools\n * @member reloadApplication - Reload application\n */\n\n/**\n * Open or close dev tools\n * @param show - Dev tools is open\n */\nexport function toggleDevTools(show) {\n  return function (dispatch) {\n    return IpcRendererProxy.send(\"TOGGLE_DEV_TOOLS\", show).then(function () {\n      dispatch(toggleDevToolsAction(show));\n    });\n  };\n}\n/**\n * Reload application\n */\n\nexport function reloadApplication() {\n  return function (dispatch) {\n    return IpcRendererProxy.send(\"RELOAD_APP\").then(function () {\n      dispatch(refreshApplicationAction());\n    });\n  };\n}\n/**\n * Save app settings\n */\n\nexport function saveAppSettings(appSettings) {\n  return function (dispatch) {\n    dispatch(saveAppSettingsAction(appSettings));\n    return Promise.resolve(appSettings);\n  };\n}\n/**\n * Ensures that a valid security token is associated with the project, otherwise creates one\n * @param project The project to validate\n */\n\nexport function ensureSecurityToken(project) {\n  var _this = this;\n\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var appState, securityToken, updatedAppSettings;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                appState = getState();\n                securityToken = appState.appSettings.securityTokens.find(function (st) {\n                  return st.name === project.securityToken;\n                });\n\n                if (!securityToken) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", appState.appSettings);\n\n              case 4:\n                securityToken = {\n                  name: \"\".concat(project.name, \" Token\"),\n                  key: generateKey()\n                };\n                updatedAppSettings = {\n                  devToolsEnabled: appState.appSettings.devToolsEnabled,\n                  securityTokens: [].concat(_toConsumableArray(appState.appSettings.securityTokens), [securityToken])\n                };\n                _context.next = 8;\n                return _this.saveAppSettings(updatedAppSettings);\n\n              case 8:\n                project.securityToken = securityToken.name;\n                dispatch(ensureSecurityTokenAction(updatedAppSettings));\n                return _context.abrupt(\"return\", updatedAppSettings);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\n/**\n * Toggle Dev Tools Redux Action type\n */\n\n/**\n * Instance of toggle dev tools action\n */\nexport var toggleDevToolsAction = createPayloadAction(ActionTypes.TOGGLE_DEV_TOOLS_SUCCESS);\n/**\n * Instance of refresh app action\n */\n\nexport var refreshApplicationAction = createAction(ActionTypes.REFRESH_APP_SUCCESS);\n/**\n * Instance of save app settings action\n */\n\nexport var saveAppSettingsAction = createPayloadAction(ActionTypes.SAVE_APP_SETTINGS_SUCCESS);\n/**\n * Instance of Export Project action\n */\n\nexport var ensureSecurityTokenAction = createPayloadAction(ActionTypes.ENSURE_SECURITY_TOKEN_SUCCESS);","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/redux/actions/applicationActions.ts"],"names":["IpcRendererProxy","ActionTypes","createPayloadAction","createAction","generateKey","toggleDevTools","show","dispatch","send","then","toggleDevToolsAction","reloadApplication","refreshApplicationAction","saveAppSettings","appSettings","saveAppSettingsAction","Promise","resolve","ensureSecurityToken","project","getState","appState","securityToken","securityTokens","find","st","name","key","updatedAppSettings","devToolsEnabled","ensureSecurityTokenAction","TOGGLE_DEV_TOOLS_SUCCESS","REFRESH_APP_SUCCESS","SAVE_APP_SETTINGS_SUCCESS","ENSURE_SECURITY_TOKEN_SUCCESS"],"mappings":"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","sourcesContent":["import { Action, Dispatch } from \"redux\";\nimport { IpcRendererProxy } from \"../../common/ipcRendererProxy\";\nimport { ActionTypes } from \"./actionTypes\";\nimport { createPayloadAction, createAction, IPayloadAction } from \"./actionCreators\";\nimport { IAppSettings } from \"../../models/applicationState\";\nimport { IProject, IApplicationState } from \"../../models/applicationState\";\nimport { generateKey } from \"../../common/crypto\";\n\n/**\n * Actions to make changes to application settings\n * @member toggleDevTools - Open or close dev tools\n * @member reloadApplication - Reload application\n */\nexport default interface IApplicationActions {\n    toggleDevTools(show: boolean): Promise<void>;\n    reloadApplication(): Promise<void>;\n    saveAppSettings(appSettings: IAppSettings): IAppSettings;\n    ensureSecurityToken(project: IProject): IAppSettings;\n}\n\n/**\n * Open or close dev tools\n * @param show - Dev tools is open\n */\nexport function toggleDevTools(show: boolean): (dispatch: Dispatch) => Promise<void> {\n    return (dispatch: Dispatch) => {\n        return IpcRendererProxy.send(\"TOGGLE_DEV_TOOLS\", show)\n            .then(() => {\n                dispatch(toggleDevToolsAction(show));\n            });\n    };\n}\n\n/**\n * Reload application\n */\nexport function reloadApplication(): (dispatch: Dispatch) => Promise<void> {\n    return (dispatch: Dispatch) => {\n        return IpcRendererProxy.send(\"RELOAD_APP\")\n            .then(() => {\n                dispatch(refreshApplicationAction());\n            });\n    };\n}\n\n/**\n * Save app settings\n */\nexport function saveAppSettings(appSettings: IAppSettings): (dispatch: Dispatch) => Promise<IAppSettings> {\n    return (dispatch: Dispatch) => {\n        dispatch(saveAppSettingsAction(appSettings));\n        return Promise.resolve(appSettings);\n    };\n}\n\n/**\n * Ensures that a valid security token is associated with the project, otherwise creates one\n * @param project The project to validate\n */\nexport function ensureSecurityToken(project: IProject):\n    (dispatch: Dispatch, getState: () => IApplicationState) => Promise<IAppSettings> {\n    return async (dispatch: Dispatch, getState: () => IApplicationState) => {\n        const appState = getState();\n        let securityToken = appState.appSettings.securityTokens\n            .find((st) => st.name === project.securityToken);\n\n        if (securityToken) {\n            return appState.appSettings;\n        }\n\n        securityToken = {\n            name: `${project.name} Token`,\n            key: generateKey(),\n        };\n\n        const updatedAppSettings: IAppSettings = {\n            devToolsEnabled: appState.appSettings.devToolsEnabled,\n            securityTokens: [...appState.appSettings.securityTokens, securityToken],\n        };\n\n        await this.saveAppSettings(updatedAppSettings);\n\n        project.securityToken = securityToken.name;\n        dispatch(ensureSecurityTokenAction(updatedAppSettings));\n        return updatedAppSettings;\n    };\n}\n\n/**\n * Toggle Dev Tools Redux Action type\n */\nexport interface IToggleDevToolsAction extends IPayloadAction<string, boolean> {\n    type: ActionTypes.TOGGLE_DEV_TOOLS_SUCCESS;\n}\n\n/**\n * Refresh app action type\n */\nexport interface IRefreshApplicationAction extends Action<string> {\n    type: ActionTypes.REFRESH_APP_SUCCESS;\n}\n\n/**\n * Save app settings action type\n */\nexport interface ISaveAppSettingsAction extends IPayloadAction<string, IAppSettings> {\n    type: ActionTypes.SAVE_APP_SETTINGS_SUCCESS;\n}\n\n/**\n * Ensure project security token action type\n */\nexport interface IEnsureSecurityTokenAction extends IPayloadAction<string, IAppSettings> {\n    type: ActionTypes.ENSURE_SECURITY_TOKEN_SUCCESS;\n}\n\n/**\n * Instance of toggle dev tools action\n */\nexport const toggleDevToolsAction = createPayloadAction<IToggleDevToolsAction>(ActionTypes.TOGGLE_DEV_TOOLS_SUCCESS);\n/**\n * Instance of refresh app action\n */\nexport const refreshApplicationAction = createAction<IRefreshApplicationAction>(ActionTypes.REFRESH_APP_SUCCESS);\n/**\n * Instance of save app settings action\n */\nexport const saveAppSettingsAction = createPayloadAction<ISaveAppSettingsAction>(ActionTypes.SAVE_APP_SETTINGS_SUCCESS);\n/**\n * Instance of Export Project action\n */\nexport const ensureSecurityTokenAction =\n    createPayloadAction<IEnsureSecurityTokenAction>(ActionTypes.ENSURE_SECURITY_TOKEN_SUCCESS);\n"]},"metadata":{},"sourceType":"module"}
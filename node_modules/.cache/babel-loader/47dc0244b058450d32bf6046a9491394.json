{"ast":null,"code":"import _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Guard from \"../../common/guard\";\nimport getHostProcess, { HostProcessType } from \"../../common/hostProcess\";\n/**\n * Interface for all VoTT Storage Providers\n * @member storageType - Type of Storage (local, cloud)\n * @member readText - Read text from path\n * @member readBinary - Read Buffer from path\n * @member deleteFile - Delete file from path\n * @member writeText - Write text to file at path\n * @member writeBinary - Write buffer to file at path\n * @member listFiles - List files in container within storage provider\n * @member listContainers - List containers in storage provider\n * @member createContainer - Create container within storage provider\n * @member deleteContainer - Delete a container from a storage provider\n */\n\n/**\n * @name - Storage Provider Factory\n * @description - Creates instance of Storage Providers based on request provider type\n */\nexport var StorageProviderFactory =\n/*#__PURE__*/\nfunction () {\n  function StorageProviderFactory() {\n    _classCallCheck(this, StorageProviderFactory);\n  }\n\n  _createClass(StorageProviderFactory, null, [{\n    key: \"register\",\n\n    /**\n     * Register Storage Provider based on name and a factory\n     * @param name - Name of Storage Provider\n     * @param factory - Function that instantiates Storage Provider\n     */\n    value: function register(nameOrOptions, factory) {\n      Guard.null(nameOrOptions);\n      var options = nameOrOptions;\n\n      if (typeof nameOrOptions === \"string\") {\n        Guard.null(factory);\n        options = {\n          name: nameOrOptions,\n          displayName: nameOrOptions,\n          factory: factory\n        };\n      }\n\n      if (!options.platformSupport) {\n        options.platformSupport = HostProcessType.All;\n      }\n\n      if ((options.platformSupport & getHostProcess().type) === 0) {\n        return;\n      }\n\n      StorageProviderFactory.providerRegistry[options.name] = options;\n    }\n    /**\n     * Create Storage Provider from provider type and options specified in connection\n     * @param connection Connection for a Storage Provider\n     */\n\n  }, {\n    key: \"createFromConnection\",\n    value: function createFromConnection(connection) {\n      return this.create(connection.providerType, connection.providerOptions);\n    }\n    /**\n     * Create Storage Provider from registered Storage Provider name and options\n     * @param name - Name of Storage Provider\n     * @param options - Options for Storage Provider\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(name, options) {\n      Guard.empty(name);\n      var registrationOptions = StorageProviderFactory.providerRegistry[name];\n\n      if (!registrationOptions) {\n        throw new Error(\"No storage provider has been registered with name '\".concat(name, \"'\"));\n      }\n\n      return registrationOptions.factory(options);\n    }\n    /**\n     * Indicates whether or not a Storage Provider has been registered\n     * @param providerType - Name of Storage Provider\n     */\n\n  }, {\n    key: \"isRegistered\",\n    value: function isRegistered(providerType) {\n      return this.providers[providerType] !== undefined;\n    }\n  }, {\n    key: \"providers\",\n\n    /**\n     * @returns - Dictionary of registered Storage Providers\n     */\n    get: function get() {\n      return _objectSpread({}, StorageProviderFactory.providerRegistry);\n    }\n    /**\n     * Register a Storage Provider based on options\n     * @param options - Storage Provider options\n     */\n\n  }]);\n\n  return StorageProviderFactory;\n}();\nStorageProviderFactory.providerRegistry = {};","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/providers/storage/storageProviderFactory.ts"],"names":["Guard","getHostProcess","HostProcessType","StorageProviderFactory","nameOrOptions","factory","null","options","name","displayName","platformSupport","All","type","providerRegistry","connection","create","providerType","providerOptions","empty","registrationOptions","Error","providers","undefined"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,cAAP,IAAyBC,eAAzB,QAAgD,0BAAhD;AAEA;;;;;;;;;;;;;;AAuCA;;;;AAIA,WAAaC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAmBI;;;;;AAnBJ,6BAwB2BC,aAxB3B,EAwB+CC,OAxB/C,EAwB8F;AACtFL,MAAAA,KAAK,CAACM,IAAN,CAAWF,aAAX;AAEA,UAAIG,OAA4C,GAAGH,aAAnD;;AAEA,UAAI,OAAQA,aAAR,KAA2B,QAA/B,EAAyC;AACrCJ,QAAAA,KAAK,CAACM,IAAN,CAAWD,OAAX;AAEAE,QAAAA,OAAO,GAAG;AACNC,UAAAA,IAAI,EAAEJ,aADA;AAENK,UAAAA,WAAW,EAAEL,aAFP;AAGNC,UAAAA,OAAO,EAAPA;AAHM,SAAV;AAKH;;AAED,UAAI,CAACE,OAAO,CAACG,eAAb,EAA8B;AAC1BH,QAAAA,OAAO,CAACG,eAAR,GAA0BR,eAAe,CAACS,GAA1C;AACH;;AAED,UAAI,CAACJ,OAAO,CAACG,eAAR,GAA0BT,cAAc,GAAGW,IAA5C,MAAsD,CAA1D,EAA6D;AACzD;AACH;;AAEDT,MAAAA,sBAAsB,CAACU,gBAAvB,CAAwCN,OAAO,CAACC,IAAhD,IAAwDD,OAAxD;AACH;AAED;;;;;AAlDJ;AAAA;AAAA,yCAsDuCO,UAtDvC,EAsDgE;AACxD,aAAO,KAAKC,MAAL,CAAYD,UAAU,CAACE,YAAvB,EAAqCF,UAAU,CAACG,eAAhD,CAAP;AACH;AAED;;;;;;AA1DJ;AAAA;AAAA,2BA+DyBT,IA/DzB,EA+DuCD,OA/DvC,EA+DwE;AAChEP,MAAAA,KAAK,CAACkB,KAAN,CAAYV,IAAZ;AAEA,UAAMW,mBAAmB,GAAGhB,sBAAsB,CAACU,gBAAvB,CAAwCL,IAAxC,CAA5B;;AACA,UAAI,CAACW,mBAAL,EAA0B;AACtB,cAAM,IAAIC,KAAJ,8DAAgEZ,IAAhE,OAAN;AACH;;AAED,aAAOW,mBAAmB,CAACd,OAApB,CAA4BE,OAA5B,CAAP;AACH;AAED;;;;;AA1EJ;AAAA;AAAA,iCA8E+BS,YA9E/B,EA8E8D;AACtD,aAAO,KAAKK,SAAL,CAAeL,YAAf,MAAiCM,SAAxC;AACH;AAhFL;AAAA;;AACI;;;AADJ,wBAIkC;AAC1B,+BAAYnB,sBAAsB,CAACU,gBAAnC;AACH;AAED;;;;;AARJ;;AAAA;AAAA;AAAaV,sB,CAkFMU,gB,GAA0E,E","sourcesContent":["import { IAssetProvider, IAssetProviderRegistrationOptions } from \"./assetProviderFactory\";\nimport Guard from \"../../common/guard\";\nimport { IConnection, StorageType } from \"../../models/applicationState\";\nimport getHostProcess, { HostProcessType } from \"../../common/hostProcess\";\n\n/**\n * Interface for all VoTT Storage Providers\n * @member storageType - Type of Storage (local, cloud)\n * @member readText - Read text from path\n * @member readBinary - Read Buffer from path\n * @member deleteFile - Delete file from path\n * @member writeText - Write text to file at path\n * @member writeBinary - Write buffer to file at path\n * @member listFiles - List files in container within storage provider\n * @member listContainers - List containers in storage provider\n * @member createContainer - Create container within storage provider\n * @member deleteContainer - Delete a container from a storage provider\n */\nexport interface IStorageProvider extends IAssetProvider {\n\n    storageType: StorageType;\n\n    readText(filePath: string): Promise<string>;\n    readBinary(filePath: string): Promise<Buffer>;\n    deleteFile(filePath: string): Promise<void>;\n\n    writeText(filePath: string, contents: string): Promise<void>;\n    writeBinary(filePath: string, contents: Buffer): Promise<void>;\n\n    listFiles(folderPath?: string, ext?: string): Promise<string[]>;\n    listContainers(folderPath?: string): Promise<string[]>;\n\n    createContainer(folderPath: string): Promise<void>;\n    deleteContainer(folderPath: string): Promise<void>;\n}\n\n/**\n * Interface for registration options of Storage Providers\n * @member factory - Function to instantiate storage provider\n */\nexport interface IStorageProviderRegistrationOptions extends IAssetProviderRegistrationOptions {\n    factory: (options?: any) => IStorageProvider;\n}\n\n/**\n * @name - Storage Provider Factory\n * @description - Creates instance of Storage Providers based on request provider type\n */\nexport class StorageProviderFactory {\n    /**\n     * @returns - Dictionary of registered Storage Providers\n     */\n    public static get providers() {\n        return { ...StorageProviderFactory.providerRegistry };\n    }\n\n    /**\n     * Register a Storage Provider based on options\n     * @param options - Storage Provider options\n     */\n    public static register(options: IStorageProviderRegistrationOptions);\n    /**\n     * Register Storage Provider based on name and a factory\n     * @param name - Name of Storage Provider\n     * @param factory - Function that instantiates Storage Provider\n     */\n    public static register(name: string, factory: (options?: any) => IStorageProvider);\n    /**\n     * Register Storage Provider based on name and a factory\n     * @param name - Name of Storage Provider\n     * @param factory - Function that instantiates Storage Provider\n     */\n    public static register(nameOrOptions: any, factory?: (options?: any) => IStorageProvider) {\n        Guard.null(nameOrOptions);\n\n        let options: IStorageProviderRegistrationOptions = nameOrOptions as IStorageProviderRegistrationOptions;\n\n        if (typeof (nameOrOptions) === \"string\") {\n            Guard.null(factory);\n\n            options = {\n                name: nameOrOptions,\n                displayName: nameOrOptions,\n                factory,\n            };\n        }\n\n        if (!options.platformSupport) {\n            options.platformSupport = HostProcessType.All;\n        }\n\n        if ((options.platformSupport & getHostProcess().type) === 0) {\n            return;\n        }\n\n        StorageProviderFactory.providerRegistry[options.name] = options;\n    }\n\n    /**\n     * Create Storage Provider from provider type and options specified in connection\n     * @param connection Connection for a Storage Provider\n     */\n    public static createFromConnection(connection: IConnection) {\n        return this.create(connection.providerType, connection.providerOptions);\n    }\n\n    /**\n     * Create Storage Provider from registered Storage Provider name and options\n     * @param name - Name of Storage Provider\n     * @param options - Options for Storage Provider\n     */\n    public static create(name: string, options?: any): IStorageProvider {\n        Guard.empty(name);\n\n        const registrationOptions = StorageProviderFactory.providerRegistry[name];\n        if (!registrationOptions) {\n            throw new Error(`No storage provider has been registered with name '${name}'`);\n        }\n\n        return registrationOptions.factory(options);\n    }\n\n    /**\n     * Indicates whether or not a Storage Provider has been registered\n     * @param providerType - Name of Storage Provider\n     */\n    public static isRegistered(providerType: string): boolean {\n        return this.providers[providerType] !== undefined;\n    }\n\n    private static providerRegistry: { [id: string]: IStorageProviderRegistrationOptions } = {};\n}\n"]},"metadata":{},"sourceType":"module"}
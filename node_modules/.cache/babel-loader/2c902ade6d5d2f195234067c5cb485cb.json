{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Point2D_1 = require(\"../../Core/Point2D\");\n\nvar IRegionCallbacks_1 = require(\"../../Interface/IRegionCallbacks\");\n\nvar RegionComponent_1 = require(\"./RegionComponent\");\n/**\r\n * An abstract visual component used internall do allow dragging the whole region.\r\n */\n\n\nvar DragComponent =\n/*#__PURE__*/\nfunction (_RegionComponent_1$Re) {\n  _inherits(DragComponent, _RegionComponent_1$Re);\n\n  /**\r\n   * Creates a new `DragComponent` object.\r\n   * @param paper - The `Snap.Paper` object to draw on.\r\n   * @param paperRect - The parent bounding box for created component.\r\n   * @param regionData - The `RegionData` object shared across components. Used also for initial setup.\r\n   * @param callbacks - The external callbacks collection.\r\n   */\n  function DragComponent(paper) {\n    var _this;\n\n    var paperRect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var regionData = arguments.length > 2 ? arguments[2] : undefined;\n    var callbacks = arguments.length > 3 ? arguments[3] : undefined;\n\n    _classCallCheck(this, DragComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DragComponent).call(this, paper, paperRect, regionData, callbacks));\n    /**\r\n     * Dragging state of the component.\r\n     */\n\n    _this.isDragged = false;\n    _this.node = paper.g();\n\n    _this.node.addClass(\"dragLayer\");\n\n    return _this;\n  }\n  /**\r\n   * Switches the component to the frozen state.\r\n   */\n\n\n  _createClass(DragComponent, [{\n    key: \"freeze\",\n    value: function freeze() {\n      _get(_getPrototypeOf(DragComponent.prototype), \"freeze\", this).call(this);\n\n      this.dragNode.undrag();\n      this.onManipulationEnd();\n    }\n    /**\r\n     * Callback for the dragbegin event.\r\n     */\n\n  }, {\n    key: \"onDragBegin\",\n    value: function onDragBegin() {\n      this.dragOrigin = new Point2D_1.Point2D(this.x, this.y);\n    }\n    /**\r\n     * Callback for the dragmove event.\r\n     * @param dx - Diff in the `x`-coordinate of draggable element.\r\n     * @param dy - Diff in the `y`-coordinate of draggable element.\r\n     * @remarks This method directly calls the `onChange` callback wrapper.\r\n     */\n\n  }, {\n    key: \"onDragMove\",\n    value: function onDragMove(dx, dy) {\n      if (dx !== 0 && dy !== 0) {\n        var p = new Point2D_1.Point2D(this.dragOrigin.x + dx, this.dragOrigin.y + dy);\n\n        if (this.paperRect !== null) {\n          p = p.boundToRect(this.paperRect);\n        }\n\n        var rd = this.regionData.copy();\n        rd.move(p);\n        this.onChange(this, rd, IRegionCallbacks_1.ChangeEventType.MOVING);\n      }\n    }\n    /**\r\n     * Callback for the dragend event.\r\n     */\n\n  }, {\n    key: \"onDragEnd\",\n    value: function onDragEnd() {\n      this.dragOrigin = null;\n      this.onChange(this, this.regionData.copy(), IRegionCallbacks_1.ChangeEventType.MOVEEND);\n    }\n    /**\r\n     * Helper function to subscibe the draggable element to events.\r\n     */\n\n  }, {\n    key: \"subscribeToDragEvents\",\n    value: function subscribeToDragEvents() {\n      var _this2 = this;\n\n      var listeners = [{\n        event: \"pointerenter\",\n        base: this.dragNode.node,\n        listener: function listener(e) {\n          _this2.dragNode.undrag();\n\n          _this2.dragNode.drag(_this2.onDragMove.bind(_this2), _this2.onDragBegin.bind(_this2), _this2.onDragEnd.bind(_this2));\n\n          _this2.isDragged = true;\n\n          _this2.onManipulationBegin();\n        },\n        bypass: false\n      }, {\n        event: \"pointermove\",\n        base: this.dragNode.node,\n        listener: function listener(e) {\n          if (!_this2.isDragged) {\n            _this2.dragNode.undrag();\n\n            _this2.dragNode.drag(_this2.onDragMove.bind(_this2), _this2.onDragBegin.bind(_this2), _this2.onDragEnd.bind(_this2));\n\n            _this2.isDragged = true;\n\n            _this2.onManipulationBegin();\n          }\n        },\n        bypass: false\n      }, {\n        event: \"pointerleave\",\n        base: this.dragNode.node,\n        listener: function listener(e) {\n          _this2.dragNode.undrag();\n\n          _this2.isDragged = false;\n\n          _this2.onManipulationEnd();\n        },\n        bypass: false\n      }, {\n        event: \"pointerdown\",\n        base: this.dragNode.node,\n        listener: function listener(e) {\n          _this2.dragNode.node.setPointerCapture(e.pointerId);\n\n          var multiselection = e.ctrlKey;\n\n          _this2.onChange(_this2, _this2.regionData.copy(), IRegionCallbacks_1.ChangeEventType.MOVEBEGIN, multiselection);\n        },\n        bypass: false\n      }, {\n        event: \"pointerup\",\n        base: this.dragNode.node,\n        listener: function listener(e) {\n          _this2.dragNode.node.releasePointerCapture(e.pointerId);\n\n          var multiselection = e.ctrlKey;\n\n          _this2.onChange(_this2, _this2.regionData.copy(), IRegionCallbacks_1.ChangeEventType.SELECTIONTOGGLE, multiselection);\n        },\n        bypass: false\n      }];\n      this.subscribeToEvents(listeners);\n    }\n  }]);\n\n  return DragComponent;\n}(RegionComponent_1.RegionComponent);\n\nexports.DragComponent = DragComponent;","map":null,"metadata":{},"sourceType":"script"}
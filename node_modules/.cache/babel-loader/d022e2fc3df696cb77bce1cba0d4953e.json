{"ast":null,"code":"import _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Guard from \"../../common/guard\";\nimport getHostProcess, { HostProcessType } from \"../../common/hostProcess\";\n/**\n * Interface for VoTT Asset Providers\n * @member initialize - Initializes or validates provider based on options\n * @member getAssets - Retrieves assets from provider\n */\n\n/**\n * @name - Asset Provider Factory\n * @description - Creates instance of Asset Providers based on request provider type\n */\nexport var AssetProviderFactory =\n/*#__PURE__*/\nfunction () {\n  function AssetProviderFactory() {\n    _classCallCheck(this, AssetProviderFactory);\n  }\n\n  _createClass(AssetProviderFactory, null, [{\n    key: \"register\",\n\n    /**\n     * Register Asset provider based on name and a factory\n     * @param name - Name of Asset Provider\n     * @param factory - Function that instantiates Asset Provider\n     */\n    value: function register(nameOrOptions, factory) {\n      Guard.null(nameOrOptions);\n      var options = nameOrOptions;\n\n      if (typeof nameOrOptions === \"string\") {\n        Guard.null(factory);\n        options = {\n          name: nameOrOptions,\n          displayName: nameOrOptions,\n          factory: factory\n        };\n      }\n\n      if (!options.platformSupport) {\n        options.platformSupport = HostProcessType.All;\n      }\n\n      if ((options.platformSupport & getHostProcess().type) === 0) {\n        return;\n      }\n\n      AssetProviderFactory.providerRegistry[options.name] = options;\n    }\n    /**\n     * Create Asset Provider from provider type and options specified in connection\n     * @param connection - Connection for an Asset Provider\n     */\n\n  }, {\n    key: \"createFromConnection\",\n    value: function createFromConnection(connection) {\n      return this.create(connection.providerType, connection.providerOptions);\n    }\n    /**\n     * Create Asset Provider from registered Asset Provider name and options\n     * @param name - Name of Asset Provider\n     * @param options - Options for Asset Provider\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(name, options) {\n      Guard.empty(name);\n      var registrationOptions = AssetProviderFactory.providerRegistry[name];\n\n      if (!registrationOptions) {\n        throw new Error(\"No asset provider has been registered with name '\".concat(name, \"'\"));\n      }\n\n      return registrationOptions.factory(options);\n    }\n  }, {\n    key: \"providers\",\n\n    /**\n     * @returns - Dictionary of registered Asset Providers\n     */\n    get: function get() {\n      return _objectSpread({}, AssetProviderFactory.providerRegistry);\n    }\n    /**\n     * Register an Asset Provider based on options\n     * @param options - Asset Provider options\n     */\n\n  }]);\n\n  return AssetProviderFactory;\n}();\nAssetProviderFactory.providerRegistry = {};","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/providers/storage/assetProviderFactory.ts"],"names":["Guard","getHostProcess","HostProcessType","AssetProviderFactory","nameOrOptions","factory","null","options","name","displayName","platformSupport","All","type","providerRegistry","connection","create","providerType","providerOptions","empty","registrationOptions","Error"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,cAAP,IAAyBC,eAAzB,QAAgD,0BAAhD;AAEA;;;;;;AA0BA;;;;AAIA,WAAaC,oBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAqBI;;;;;AArBJ,6BA0B2BC,aA1B3B,EA0B+CC,OA1B/C,EA0B4F;AACpFL,MAAAA,KAAK,CAACM,IAAN,CAAWF,aAAX;AAEA,UAAIG,OAA0C,GAAGH,aAAjD;;AAEA,UAAI,OAAQA,aAAR,KAA2B,QAA/B,EAAyC;AACrCJ,QAAAA,KAAK,CAACM,IAAN,CAAWD,OAAX;AAEAE,QAAAA,OAAO,GAAG;AACNC,UAAAA,IAAI,EAAEJ,aADA;AAENK,UAAAA,WAAW,EAAEL,aAFP;AAGNC,UAAAA,OAAO,EAAPA;AAHM,SAAV;AAKH;;AAED,UAAI,CAACE,OAAO,CAACG,eAAb,EAA8B;AAC1BH,QAAAA,OAAO,CAACG,eAAR,GAA0BR,eAAe,CAACS,GAA1C;AACH;;AAED,UAAI,CAACJ,OAAO,CAACG,eAAR,GAA0BT,cAAc,GAAGW,IAA5C,MAAsD,CAA1D,EAA6D;AACzD;AACH;;AAEDT,MAAAA,oBAAoB,CAACU,gBAArB,CAAsCN,OAAO,CAACC,IAA9C,IAAsDD,OAAtD;AACH;AAED;;;;;AApDJ;AAAA;AAAA,yCAwDuCO,UAxDvC,EAwDgF;AACxE,aAAO,KAAKC,MAAL,CAAYD,UAAU,CAACE,YAAvB,EAAqCF,UAAU,CAACG,eAAhD,CAAP;AACH;AAED;;;;;;AA5DJ;AAAA;AAAA,2BAiEyBT,IAjEzB,EAiEuCD,OAjEvC,EAiEsE;AAC9DP,MAAAA,KAAK,CAACkB,KAAN,CAAYV,IAAZ;AAEA,UAAMW,mBAAmB,GAAGhB,oBAAoB,CAACU,gBAArB,CAAsCL,IAAtC,CAA5B;;AACA,UAAI,CAACW,mBAAL,EAA0B;AACtB,cAAM,IAAIC,KAAJ,4DAA8DZ,IAA9D,OAAN;AACH;;AAED,aAAOW,mBAAmB,CAACd,OAApB,CAA4BE,OAA5B,CAAP;AACH;AA1EL;AAAA;;AAEI;;;AAFJ,wBAKkC;AAC1B,+BAAYJ,oBAAoB,CAACU,gBAAjC;AACH;AAED;;;;;AATJ;;AAAA;AAAA;AAAaV,oB,CA4EMU,gB,GAAwE,E","sourcesContent":["import { IAsset, IConnection } from \"../../models/applicationState\";\nimport Guard from \"../../common/guard\";\nimport getHostProcess, { HostProcessType } from \"../../common/hostProcess\";\n\n/**\n * Interface for VoTT Asset Providers\n * @member initialize - Initializes or validates provider based on options\n * @member getAssets - Retrieves assets from provider\n */\nexport interface IAssetProvider {\n    initialize?(): Promise<void>;\n    getAssets(containerName?: string): Promise<IAsset[]>;\n}\n\n/**\n * Options for Asset Providers\n * @member name - Name of Asset Provider\n * @member displayName - Display Name of Asset Provider\n * @member description - Description of Asset Provider\n * @member platformSupport - Platform(s) supported by asset provider (electron, browser)\n * @member factory - Function that instantiates provider\n */\nexport interface IAssetProviderRegistrationOptions {\n    name: string;\n    displayName: string;\n    description?: string;\n    platformSupport?: HostProcessType;\n    factory: (options?: any) => IAssetProvider;\n}\n\n/**\n * @name - Asset Provider Factory\n * @description - Creates instance of Asset Providers based on request provider type\n */\nexport class AssetProviderFactory {\n\n    /**\n     * @returns - Dictionary of registered Asset Providers\n     */\n    public static get providers() {\n        return { ...AssetProviderFactory.providerRegistry };\n    }\n\n    /**\n     * Register an Asset Provider based on options\n     * @param options - Asset Provider options\n     */\n    public static register(options: IAssetProviderRegistrationOptions);\n    /**\n     * Register Asset provider based on name and a factory\n     * @param name - Name of Asset Provider\n     * @param factory - Function that instantiates Asset Provider\n     */\n    public static register(name: string, factory: (options?: any) => IAssetProvider);\n\n    /**\n     * Register Asset provider based on name and a factory\n     * @param name - Name of Asset Provider\n     * @param factory - Function that instantiates Asset Provider\n     */\n    public static register(nameOrOptions: any, factory?: (options?: any) => IAssetProvider) {\n        Guard.null(nameOrOptions);\n\n        let options: IAssetProviderRegistrationOptions = nameOrOptions as IAssetProviderRegistrationOptions;\n\n        if (typeof (nameOrOptions) === \"string\") {\n            Guard.null(factory);\n\n            options = {\n                name: nameOrOptions,\n                displayName: nameOrOptions,\n                factory,\n            };\n        }\n\n        if (!options.platformSupport) {\n            options.platformSupport = HostProcessType.All;\n        }\n\n        if ((options.platformSupport & getHostProcess().type) === 0) {\n            return;\n        }\n\n        AssetProviderFactory.providerRegistry[options.name] = options;\n    }\n\n    /**\n     * Create Asset Provider from provider type and options specified in connection\n     * @param connection - Connection for an Asset Provider\n     */\n    public static createFromConnection(connection: IConnection): IAssetProvider {\n        return this.create(connection.providerType, connection.providerOptions);\n    }\n\n    /**\n     * Create Asset Provider from registered Asset Provider name and options\n     * @param name - Name of Asset Provider\n     * @param options - Options for Asset Provider\n     */\n    public static create(name: string, options?: any): IAssetProvider {\n        Guard.empty(name);\n\n        const registrationOptions = AssetProviderFactory.providerRegistry[name];\n        if (!registrationOptions) {\n            throw new Error(`No asset provider has been registered with name '${name}'`);\n        }\n\n        return registrationOptions.factory(options);\n    }\n\n    private static providerRegistry: { [id: string]: IAssetProviderRegistrationOptions } = {};\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Util } from '@microsoft/applicationinsights-common';\nimport { LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js';\n/*\r\n * An array based send buffer.\r\n */\n\nvar ArraySendBuffer =\n/** @class */\nfunction () {\n  function ArraySendBuffer(config) {\n    this._config = config;\n    this._buffer = [];\n  }\n\n  ArraySendBuffer.prototype.enqueue = function (payload) {\n    this._buffer.push(payload);\n  };\n\n  ArraySendBuffer.prototype.count = function () {\n    return this._buffer.length;\n  };\n\n  ArraySendBuffer.prototype.clear = function () {\n    this._buffer.length = 0;\n  };\n\n  ArraySendBuffer.prototype.getItems = function () {\n    return this._buffer.slice(0);\n  };\n\n  ArraySendBuffer.prototype.batchPayloads = function (payload) {\n    if (payload && payload.length > 0) {\n      var batch = this._config.emitLineDelimitedJson() ? payload.join(\"\\n\") : \"[\" + payload.join(\",\") + \"]\";\n      return batch;\n    }\n\n    return null;\n  };\n\n  ArraySendBuffer.prototype.markAsSent = function (payload) {\n    this.clear();\n  };\n\n  ArraySendBuffer.prototype.clearSent = function (payload) {// not supported\n  };\n\n  return ArraySendBuffer;\n}();\n\nexport { ArraySendBuffer };\n/*\r\n * Session storege buffer holds a copy of all unsent items in the browser session storage.\r\n */\n\nvar SessionStorageSendBuffer =\n/** @class */\nfunction () {\n  function SessionStorageSendBuffer(logger, config) {\n    this._bufferFullMessageSent = false;\n    this._logger = logger;\n    this._config = config;\n    var bufferItems = this.getBuffer(SessionStorageSendBuffer.BUFFER_KEY);\n    var notDeliveredItems = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\n    this._buffer = bufferItems.concat(notDeliveredItems); // If the buffer has too many items, drop items from the end.\n\n    if (this._buffer.length > SessionStorageSendBuffer.MAX_BUFFER_SIZE) {\n      this._buffer.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE;\n    } // update DataLossAnalyzer with the number of recovered items\n    // Uncomment if you want to use DataLossanalyzer\n    // DataLossAnalyzer.itemsRestoredFromSessionBuffer = this._buffer.length;\n\n\n    this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);\n    this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\n  }\n\n  SessionStorageSendBuffer.prototype.enqueue = function (payload) {\n    if (this._buffer.length >= SessionStorageSendBuffer.MAX_BUFFER_SIZE) {\n      // sent internal log only once per page view\n      if (!this._bufferFullMessageSent) {\n        this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.SessionStorageBufferFull, \"Maximum buffer size reached: \" + this._buffer.length, true);\n\n        this._bufferFullMessageSent = true;\n      }\n\n      return;\n    }\n\n    this._buffer.push(payload);\n\n    this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\n  };\n\n  SessionStorageSendBuffer.prototype.count = function () {\n    return this._buffer.length;\n  };\n\n  SessionStorageSendBuffer.prototype.clear = function () {\n    this._buffer.length = 0;\n    this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, []);\n    this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);\n    this._bufferFullMessageSent = false;\n  };\n\n  SessionStorageSendBuffer.prototype.getItems = function () {\n    return this._buffer.slice(0);\n  };\n\n  SessionStorageSendBuffer.prototype.batchPayloads = function (payload) {\n    if (payload && payload.length > 0) {\n      var batch = this._config.emitLineDelimitedJson() ? payload.join(\"\\n\") : \"[\" + payload.join(\",\") + \"]\";\n      return batch;\n    }\n\n    return null;\n  };\n\n  SessionStorageSendBuffer.prototype.markAsSent = function (payload) {\n    this._buffer = this.removePayloadsFromBuffer(payload, this._buffer);\n    this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\n    var sentElements = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\n\n    if (sentElements instanceof Array && payload instanceof Array) {\n      sentElements = sentElements.concat(payload);\n\n      if (sentElements.length > SessionStorageSendBuffer.MAX_BUFFER_SIZE) {\n        // We send telemetry normally. If the SENT_BUFFER is too big we don't add new elements\n        // until we receive a response from the backend and the buffer has free space again (see clearSent method)\n        this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.SessionStorageBufferFull, \"Sent buffer reached its maximum size: \" + sentElements.length, true);\n\n        sentElements.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE;\n      }\n\n      this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);\n    }\n  };\n\n  SessionStorageSendBuffer.prototype.clearSent = function (payload) {\n    var sentElements = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\n    sentElements = this.removePayloadsFromBuffer(payload, sentElements);\n    this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);\n  };\n\n  SessionStorageSendBuffer.prototype.removePayloadsFromBuffer = function (payloads, buffer) {\n    var remaining = [];\n\n    for (var i in buffer) {\n      var contains = false;\n\n      for (var j in payloads) {\n        if (payloads[j] === buffer[i]) {\n          contains = true;\n          break;\n        }\n      }\n\n      if (!contains) {\n        remaining.push(buffer[i]);\n      }\n    }\n\n    ;\n    return remaining;\n  };\n\n  SessionStorageSendBuffer.prototype.getBuffer = function (key) {\n    try {\n      var bufferJson = Util.getSessionStorage(this._logger, key);\n\n      if (bufferJson) {\n        var buffer = JSON.parse(bufferJson);\n\n        if (buffer) {\n          return buffer;\n        }\n      }\n    } catch (e) {\n      this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FailedToRestoreStorageBuffer, \" storage key: \" + key + \", \" + Util.getExceptionName(e), {\n        exception: Util.dump(e)\n      });\n    }\n\n    return [];\n  };\n\n  SessionStorageSendBuffer.prototype.setBuffer = function (key, buffer) {\n    try {\n      var bufferJson = JSON.stringify(buffer);\n      Util.setSessionStorage(this._logger, key, bufferJson);\n    } catch (e) {\n      // if there was an error, clear the buffer\n      // telemetry is stored in the _buffer array so we won't loose any items\n      Util.setSessionStorage(this._logger, key, JSON.stringify([]));\n\n      this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.FailedToSetStorageBuffer, \" storage key: \" + key + \", \" + Util.getExceptionName(e) + \". Buffer cleared\", {\n        exception: Util.dump(e)\n      });\n    }\n  };\n\n  SessionStorageSendBuffer.BUFFER_KEY = \"AI_buffer\";\n  SessionStorageSendBuffer.SENT_BUFFER_KEY = \"AI_sentBuffer\"; // Maximum number of payloads stored in the buffer. If the buffer is full, new elements will be dropped. \n\n  SessionStorageSendBuffer.MAX_BUFFER_SIZE = 2000;\n  return SessionStorageSendBuffer;\n}();\n\nexport { SessionStorageSendBuffer };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Point2D_1 = require(\"../../Core/Point2D\");\n\nvar RegionData_1 = require(\"../../Core/RegionData\");\n\nvar CrossElement_1 = require(\"../Component/CrossElement\");\n\nvar Selector_1 = require(\"./Selector\");\n/**\r\n * The selector to define a polygon-region.\r\n */\n\n\nvar PolygonSelector =\n/*#__PURE__*/\nfunction (_Selector_1$Selector) {\n  _inherits(PolygonSelector, _Selector_1$Selector);\n\n  /**\r\n   * Creates new `PolygonSelector` object.\r\n   * @param parent - The parent SVG-element.\r\n   * @param paper - The `Snap.Paper` element to draw on.\r\n   * @param boundRect - The bounding box.\r\n   * @param callbacks - The collection of callbacks.\r\n   */\n  function PolygonSelector(parent, paper, boundRect, callbacks) {\n    var _this;\n\n    _classCallCheck(this, PolygonSelector);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PolygonSelector).call(this, parent, paper, boundRect, callbacks));\n    /**\r\n     * Default point radius.\r\n     */\n\n    _this.pointRadius = 3;\n    /**\r\n     * Current state of selector.\r\n     */\n\n    _this.isCapturing = false;\n\n    _this.buildUIElements();\n\n    _this.reset();\n\n    _this.hide();\n\n    return _this;\n  }\n  /**\r\n   * Resizes the selector to specified `width` and `height`.\r\n   * @param width - The new `width`.\r\n   * @param height - The new `height`.\r\n   */\n\n\n  _createClass(PolygonSelector, [{\n    key: \"resize\",\n    value: function resize(width, height) {\n      _get(_getPrototypeOf(PolygonSelector.prototype), \"resize\", this).call(this, width, height);\n\n      this.crossA.resize(width, height);\n    }\n    /**\r\n     * Hides the selector.\r\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      _get(_getPrototypeOf(PolygonSelector.prototype), \"hide\", this).call(this);\n\n      this.hideAll([this.crossA, this.nextPoint, this.nextSegment, this.polygon, this.pointsGroup]);\n    }\n    /**\r\n     * Shows the selector.\r\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      _get(_getPrototypeOf(PolygonSelector.prototype), \"show\", this).call(this);\n\n      this.showAll([this.crossA, this.nextPoint, this.nextSegment, this.polygon, this.pointsGroup]);\n    }\n    /**\r\n     * Disables and hides this selector.\r\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.reset();\n\n      _get(_getPrototypeOf(PolygonSelector.prototype), \"disable\", this).call(this);\n    }\n    /**\r\n     * Builds selector's UI.\r\n     */\n\n  }, {\n    key: \"buildUIElements\",\n    value: function buildUIElements() {\n      var _this2 = this;\n\n      this.node = this.paper.g();\n      this.node.addClass(\"polygonSelector\");\n      this.crossA = new CrossElement_1.CrossElement(this.paper, this.boundRect);\n      this.nextPoint = this.paper.circle(0, 0, this.pointRadius);\n      this.nextPoint.addClass(\"nextPointStyle\");\n      this.nextSegment = this.paper.g();\n      this.nextL1 = this.paper.line(0, 0, 0, 0);\n      this.nextLN = this.paper.line(0, 0, 0, 0);\n      this.nextL1.addClass(\"nextSegmentStyle\");\n      this.nextLN.addClass(\"nextSegmentStyle\");\n      this.nextSegment.add(this.nextL1);\n      this.nextSegment.add(this.nextLN);\n      this.pointsGroup = this.paper.g();\n      this.pointsGroup.addClass(\"polygonGroupStyle\");\n      this.polygon = this.paper.polygon([]);\n      this.polygon.addClass(\"polygonStyle\");\n      this.node.add(this.polygon);\n      this.node.add(this.pointsGroup);\n      this.node.add(this.crossA.node);\n      this.node.add(this.nextSegment);\n      this.node.add(this.nextPoint);\n      var listeners = [{\n        event: \"pointerenter\",\n        base: this.parentNode,\n        listener: function listener() {\n          return _this2.show();\n        },\n        bypass: false\n      }, {\n        event: \"pointerleave\",\n        base: this.parentNode,\n        listener: function listener(e) {\n          if (!_this2.isCapturing) {\n            _this2.hide();\n          } else {\n            var rect = _this2.parentNode.getClientRects();\n\n            var p = new Point2D_1.Point2D(e.clientX - rect[0].left, e.clientY - rect[0].top);\n\n            _this2.moveCross(_this2.crossA, p);\n\n            _this2.movePoint(_this2.nextPoint, p);\n          }\n        },\n        bypass: false\n      }, {\n        event: \"pointerdown\",\n        base: this.parentNode,\n        listener: function listener(e) {\n          if (!_this2.isCapturing) {\n            _this2.isCapturing = true;\n\n            if (typeof _this2.callbacks.onSelectionBegin === \"function\") {\n              _this2.callbacks.onSelectionBegin();\n            }\n          }\n        },\n        bypass: false\n      }, {\n        event: \"click\",\n        base: this.parentNode,\n        listener: function listener(e) {\n          if (e.detail <= 1) {\n            window.requestAnimationFrame(function () {\n              var p = new Point2D_1.Point2D(_this2.crossA.x, _this2.crossA.y);\n\n              _this2.addPoint(p.x, p.y);\n\n              _this2.lastPoint = p;\n            });\n          }\n        },\n        bypass: false\n      }, {\n        event: \"pointermove\",\n        base: this.parentNode,\n        listener: function listener(e) {\n          window.requestAnimationFrame(function () {\n            var rect = _this2.parentNode.getClientRects();\n\n            var p = new Point2D_1.Point2D(e.clientX - rect[0].left, e.clientY - rect[0].top);\n\n            _this2.show();\n\n            _this2.moveCross(_this2.crossA, p);\n\n            _this2.movePoint(_this2.nextPoint, p);\n\n            if (_this2.lastPoint != null) {\n              _this2.moveLine(_this2.nextLN, _this2.lastPoint, p);\n\n              _this2.moveLine(_this2.nextL1, _this2.points[0], p);\n            } else {\n              _this2.moveLine(_this2.nextLN, p, p);\n\n              _this2.moveLine(_this2.nextL1, p, p);\n            }\n          });\n          e.preventDefault();\n        },\n        bypass: false\n      }, {\n        event: \"dblclick\",\n        base: this.parentNode,\n        listener: function listener() {\n          return _this2.submitPolygon();\n        },\n        bypass: false\n      }, {\n        event: \"keyup\",\n        base: window,\n        listener: function listener(e) {\n          if (e.code === \"Escape\") {\n            _this2.submitPolygon();\n          }\n        },\n        bypass: true\n      }];\n      this.subscribeToEvents(listeners);\n    }\n    /**\r\n     * Resets the selector.\r\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.points = new Array();\n      this.lastPoint = null;\n      var ps = this.pointsGroup.children();\n\n      while (ps.length > 0) {\n        ps[0].remove();\n        ps = this.pointsGroup.children();\n      }\n\n      this.polygon.attr({\n        points: \"\"\n      });\n\n      if (this.isCapturing) {\n        this.isCapturing = false;\n      }\n    }\n    /**\r\n     * Adds a new point to polygon at specified coordinates\r\n     * @param x - x-coordinate of the new point.\r\n     * @param y - y-coordinate of the new point.\r\n     */\n\n  }, {\n    key: \"addPoint\",\n    value: function addPoint(x, y) {\n      this.points.push(new Point2D_1.Point2D(x, y));\n      var point = this.paper.circle(x, y, this.pointRadius);\n      point.addClass(\"polygonPointStyle\");\n      this.pointsGroup.add(point);\n      var pointsStr = \"\";\n      this.points.forEach(function (p) {\n        pointsStr += \"\".concat(p.x, \",\").concat(p.y, \",\");\n      });\n      this.polygon.attr({\n        points: pointsStr.substr(0, pointsStr.length - 1)\n      });\n    }\n    /**\r\n     * Submits the new polygon region to the callback function.\r\n     */\n\n  }, {\n    key: \"submitPolygon\",\n    value: function submitPolygon() {\n      if (typeof this.callbacks.onSelectionEnd === \"function\") {\n        var box = this.polygon.getBBox();\n        this.callbacks.onSelectionEnd(new RegionData_1.RegionData(box.x, box.y, box.width, box.height, this.points.map(function (p) {\n          return p.copy();\n        }), RegionData_1.RegionDataType.Polygon));\n      }\n\n      this.reset();\n    }\n  }]);\n\n  return PolygonSelector;\n}(Selector_1.Selector);\n\nexports.PolygonSelector = PolygonSelector;","map":null,"metadata":{},"sourceType":"script"}
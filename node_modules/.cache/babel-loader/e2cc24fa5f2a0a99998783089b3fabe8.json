{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { BlobURL } from \"./BlobURL\";\nimport { AppendBlob } from \"./generated/lib/operations\";\nimport { URLConstants } from \"./utils/constants\";\nimport { appendToURLPath, setURLParameter } from \"./utils/utils.common\";\n/**\n * AppendBlobURL defines a set of operations applicable to append blobs.\n *\n * @export\n * @class AppendBlobURL\n * @extends {StorageURL}\n */\n\nvar AppendBlobURL =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AppendBlobURL, _super);\n  /**\n   * Creates an instance of AppendBlobURL.\n   * This method accepts an encoded URL or non-encoded URL pointing to an append blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param {string} url A URL string pointing to Azure Storage append blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/appendblob\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/appendblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param {Pipeline} pipeline Call StorageURL.newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof AppendBlobURL\n   */\n\n\n  function AppendBlobURL(url, pipeline) {\n    var _this = _super.call(this, url, pipeline) || this;\n\n    _this.appendBlobContext = new AppendBlob(_this.storageClientContext);\n    return _this;\n  }\n  /**\n   * Creates a AppendBlobURL object from ContainerURL instance.\n   *\n   * @static\n   * @param {ContainerURL} containerURL A ContainerURL object\n   * @param {string} blobName An append blob name\n   * @returns {AppendBlobURL}\n   * @memberof AppendBlobURL\n   */\n\n\n  AppendBlobURL.fromContainerURL = function (containerURL, blobName) {\n    return new AppendBlobURL(appendToURLPath(containerURL.url, encodeURIComponent(blobName)), containerURL.pipeline);\n  };\n  /**\n   * Creates a AppendBlobURL object from BlobURL instance.\n   *\n   * @static\n   * @param {BlobURL} blobURL\n   * @returns {AppendBlobURL}\n   * @memberof AppendBlobURL\n   */\n\n\n  AppendBlobURL.fromBlobURL = function (blobURL) {\n    return new AppendBlobURL(blobURL.url, blobURL.pipeline);\n  };\n  /**\n   * Creates a new AppendBlobURL object identical to the source but with the\n   * specified request policy pipeline.\n   *\n   * @param {Pipeline} pipeline\n   * @returns {AppendBlobURL}\n   * @memberof AppendBlobURL\n   */\n\n\n  AppendBlobURL.prototype.withPipeline = function (pipeline) {\n    return new AppendBlobURL(this.url, pipeline);\n  };\n  /**\n   * Creates a new AppendBlobURL object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a URL to the base blob.\n   *\n   * @param {string} snapshot\n   * @returns {AppendBlobURL}\n   * @memberof AppendBlobURL\n   */\n\n\n  AppendBlobURL.prototype.withSnapshot = function (snapshot) {\n    return new AppendBlobURL(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n  };\n  /**\n   * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {IAppendBlobCreateOptions} [options]\n   * @returns {Promise<Models.AppendBlobsCreateResponse>}\n   * @memberof AppendBlobURL\n   */\n\n\n  AppendBlobURL.prototype.create = function (aborter, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        options.accessConditions = options.accessConditions || {};\n        return [2\n        /*return*/\n        , this.appendBlobContext.create(0, {\n          abortSignal: aborter,\n          blobHTTPHeaders: options.blobHTTPHeaders,\n          leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n          metadata: options.metadata,\n          modifiedAccessConditions: options.accessConditions.modifiedAccessConditions\n        })];\n      });\n    });\n  };\n  /**\n   * Commits a new block of data to the end of the existing append blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/append-block\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {HttpRequestBody} body\n   * @param {number} contentLength\n   * @param {IAppendBlobAppendBlockOptions} [options]\n   * @returns {Promise<Models.AppendBlobsAppendBlockResponse>}\n   * @memberof AppendBlobURL\n   */\n\n\n  AppendBlobURL.prototype.appendBlock = function (aborter, body, contentLength, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        options.accessConditions = options.accessConditions || {};\n        return [2\n        /*return*/\n        , this.appendBlobContext.appendBlock(body, contentLength, {\n          abortSignal: aborter,\n          appendPositionAccessConditions: options.accessConditions.appendPositionAccessConditions,\n          leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n          modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n          onUploadProgress: options.progress,\n          transactionalContentMD5: options.transactionalContentMD5\n        })];\n      });\n    });\n  };\n\n  return AppendBlobURL;\n}(BlobURL);\n\nexport { AppendBlobURL };","map":null,"metadata":{},"sourceType":"module"}
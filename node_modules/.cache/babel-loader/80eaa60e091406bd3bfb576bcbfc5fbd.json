{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { AssetType, StorageType } from \"../../models/applicationState\";\nimport { AssetService } from \"../../services/assetService\";\nimport { TokenCredential, AnonymousCredential, ContainerURL, StorageURL, ServiceURL, Aborter, BlockBlobURL } from \"@azure/storage-blob\";\n\n/**\n * Storage Provider for Azure Blob Storage\n */\nexport var AzureBlobStorage =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Storage type\n   * @returns - StorageType.Cloud\n   */\n  function AzureBlobStorage(options) {\n    _classCallCheck(this, AzureBlobStorage);\n\n    this.options = options;\n    this.storageType = StorageType.Cloud;\n  }\n  /**\n   * Initialize connection to Blob Storage account & container\n   * If `createContainer` was specified in options, this function\n   * creates the container. Otherwise, validates that container\n   * is contained in list of containers\n   * @throws - Error if container does not exist or not able to\n   * connect to Azure Blob Storage\n   */\n\n\n  _createClass(AzureBlobStorage, [{\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var containerName, containers;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                containerName = this.options.containerName;\n\n                if (!this.options.createContainer) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 4;\n                return this.createContainer(containerName);\n\n              case 4:\n                _context.next = 11;\n                break;\n\n              case 6:\n                _context.next = 8;\n                return this.listContainers(null);\n\n              case 8:\n                containers = _context.sent;\n\n                if (!(containers.indexOf(containerName) === -1)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                throw new Error(\"Container \\\"\".concat(containerName, \"\\\" does not exist\"));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n\n      return initialize;\n    }()\n    /**\n     * Reads text from specified blob\n     * @param blobName - Name of blob in container\n     */\n\n  }, {\n    key: \"readText\",\n    value: function () {\n      var _readText = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(blobName) {\n        var blockBlobURL, downloadResponse;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                blockBlobURL = this.getBlockBlobURL(blobName);\n                _context2.next = 3;\n                return blockBlobURL.download(Aborter.none, 0);\n\n              case 3:\n                downloadResponse = _context2.sent;\n                _context2.next = 6;\n                return this.bodyToString(downloadResponse);\n\n              case 6:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function readText(_x) {\n        return _readText.apply(this, arguments);\n      }\n\n      return readText;\n    }()\n    /**\n     * Reads Buffer from specified blob\n     * @param blobName - Name of blob in container\n     */\n\n  }, {\n    key: \"readBinary\",\n    value: function () {\n      var _readBinary = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(blobName) {\n        var text;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.readText(blobName);\n\n              case 2:\n                text = _context3.sent;\n                return _context3.abrupt(\"return\", Buffer.from(text));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function readBinary(_x2) {\n        return _readBinary.apply(this, arguments);\n      }\n\n      return readBinary;\n    }()\n    /**\n     * Writes text to blob in container\n     * @param blobName - Name of blob in container\n     * @param content - Content to write to blob (string or Buffer)\n     */\n\n  }, {\n    key: \"writeText\",\n    value: function () {\n      var _writeText = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(blobName, content) {\n        var blockBlobURL;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                blockBlobURL = this.getBlockBlobURL(blobName);\n                _context4.next = 3;\n                return blockBlobURL.upload(Aborter.none, content, content.length);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function writeText(_x3, _x4) {\n        return _writeText.apply(this, arguments);\n      }\n\n      return writeText;\n    }()\n    /**\n     * Writes buffer to blob in container\n     * @param blobName - Name of blob in container\n     * @param content - Buffer to write to blob\n     */\n\n  }, {\n    key: \"writeBinary\",\n    value: function writeBinary(blobName, content) {\n      return this.writeText(blobName, content);\n    }\n    /**\n     * Deletes file from container\n     * @param blobName - Name of blob in container\n     */\n\n  }, {\n    key: \"deleteFile\",\n    value: function () {\n      var _deleteFile = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(blobName) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.getBlockBlobURL(blobName).delete(Aborter.none);\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function deleteFile(_x5) {\n        return _deleteFile.apply(this, arguments);\n      }\n\n      return deleteFile;\n    }()\n    /**\n     * Lists files in container\n     * @param path - NOT USED IN CURRENT IMPLEMENTATION. Only uses container\n     * as specified in Azure Cloud Storage Options. Included to satisfy\n     * Storage Provider interface\n     * @param ext - Extension of files to filter on when retrieving files\n     * from container\n     */\n\n  }, {\n    key: \"listFiles\",\n    value: function () {\n      var _listFiles = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(path, ext) {\n        var result, marker, containerURL, listBlobsResponse, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, blob;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                result = [];\n                containerURL = this.getContainerURL();\n\n              case 2:\n                _context6.next = 4;\n                return containerURL.listBlobFlatSegment(Aborter.none, marker);\n\n              case 4:\n                listBlobsResponse = _context6.sent;\n                marker = listBlobsResponse.nextMarker;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context6.prev = 9;\n\n                for (_iterator = listBlobsResponse.segment.blobItems[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  blob = _step.value;\n\n                  if (ext && blob.name.endsWith(ext) || !ext) {\n                    result.push(blob.name);\n                  }\n                }\n\n                _context6.next = 17;\n                break;\n\n              case 13:\n                _context6.prev = 13;\n                _context6.t0 = _context6[\"catch\"](9);\n                _didIteratorError = true;\n                _iteratorError = _context6.t0;\n\n              case 17:\n                _context6.prev = 17;\n                _context6.prev = 18;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 20:\n                _context6.prev = 20;\n\n                if (!_didIteratorError) {\n                  _context6.next = 23;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 23:\n                return _context6.finish(20);\n\n              case 24:\n                return _context6.finish(17);\n\n              case 25:\n                if (marker) {\n                  _context6.next = 2;\n                  break;\n                }\n\n              case 26:\n                return _context6.abrupt(\"return\", result);\n\n              case 27:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[9, 13, 17, 25], [18,, 20, 24]]);\n      }));\n\n      function listFiles(_x6, _x7) {\n        return _listFiles.apply(this, arguments);\n      }\n\n      return listFiles;\n    }()\n    /**\n     * Lists the containers with in the Azure Blob Storage account\n     * @param path - NOT USED IN CURRENT IMPLEMENTATION. Lists containers in storage account.\n     * Path does not really make sense in this scenario. Included to satisfy interface\n     */\n\n  }, {\n    key: \"listContainers\",\n    value: function () {\n      var _listContainers = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(path) {\n        var result, marker, listContainersResponse, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, container;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                result = [];\n\n              case 1:\n                _context7.next = 3;\n                return this.getServiceURL().listContainersSegment(Aborter.none, marker);\n\n              case 3:\n                listContainersResponse = _context7.sent;\n                marker = listContainersResponse.nextMarker;\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _iteratorError2 = undefined;\n                _context7.prev = 8;\n\n                for (_iterator2 = listContainersResponse.containerItems[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                  container = _step2.value;\n                  result.push(container.name);\n                }\n\n                _context7.next = 16;\n                break;\n\n              case 12:\n                _context7.prev = 12;\n                _context7.t0 = _context7[\"catch\"](8);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context7.t0;\n\n              case 16:\n                _context7.prev = 16;\n                _context7.prev = 17;\n\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n\n              case 19:\n                _context7.prev = 19;\n\n                if (!_didIteratorError2) {\n                  _context7.next = 22;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 22:\n                return _context7.finish(19);\n\n              case 23:\n                return _context7.finish(16);\n\n              case 24:\n                if (marker) {\n                  _context7.next = 1;\n                  break;\n                }\n\n              case 25:\n                return _context7.abrupt(\"return\", result);\n\n              case 26:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[8, 12, 16, 24], [17,, 19, 23]]);\n      }));\n\n      function listContainers(_x8) {\n        return _listContainers.apply(this, arguments);\n      }\n\n      return listContainers;\n    }()\n    /**\n     * Creates container specified in Azure Cloud Storage options\n     * @param containerName - NOT USED IN CURRENT IMPLEMENTATION. Because `containerName`\n     * is a required attribute of the Azure Cloud Storage options used to instantiate the\n     * provider, this function creates that container. Included to satisfy interface\n     */\n\n  }, {\n    key: \"createContainer\",\n    value: function () {\n      var _createContainer = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(containerName) {\n        var containerURL;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                containerURL = this.getContainerURL();\n                _context8.prev = 1;\n                _context8.next = 4;\n                return containerURL.create(Aborter.none);\n\n              case 4:\n                _context8.next = 11;\n                break;\n\n              case 6:\n                _context8.prev = 6;\n                _context8.t0 = _context8[\"catch\"](1);\n\n                if (!(_context8.t0.statusCode === 409)) {\n                  _context8.next = 10;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\");\n\n              case 10:\n                throw _context8.t0;\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[1, 6]]);\n      }));\n\n      function createContainer(_x9) {\n        return _createContainer.apply(this, arguments);\n      }\n\n      return createContainer;\n    }()\n    /**\n     * Deletes container specified in Azure Cloud Storage options\n     * @param containerName - NOT USED IN CURRENT IMPLEMENTATION. Because `containerName`\n     * is a required attribute of the Azure Cloud Storage options used to instantiate the\n     * provider, this function creates that container. Included to satisfy interface\n     */\n\n  }, {\n    key: \"deleteContainer\",\n    value: function () {\n      var _deleteContainer = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(containerName) {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.getContainerURL().delete(Aborter.none);\n\n              case 2:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function deleteContainer(_x10) {\n        return _deleteContainer.apply(this, arguments);\n      }\n\n      return deleteContainer;\n    }()\n    /**\n     * Retrieves assets from Azure Blob Storage container\n     * @param containerName - Container from which to retrieve assets. Defaults to\n     * container specified in Azure Cloud Storage options\n     */\n\n  }, {\n    key: \"getAssets\",\n    value: function () {\n      var _getAssets = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10(containerName) {\n        var files, result, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, file, url, asset;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                containerName = containerName ? containerName : this.options.containerName;\n                _context10.next = 3;\n                return this.listFiles(containerName);\n\n              case 3:\n                files = _context10.sent;\n                result = [];\n                _iteratorNormalCompletion3 = true;\n                _didIteratorError3 = false;\n                _iteratorError3 = undefined;\n                _context10.prev = 8;\n\n                for (_iterator3 = files[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                  file = _step3.value;\n                  url = this.getUrl(file);\n                  asset = AssetService.createAssetFromFilePath(url, this.getFileName(url));\n\n                  if (asset.type !== AssetType.Unknown) {\n                    result.push(asset);\n                  }\n                }\n\n                _context10.next = 16;\n                break;\n\n              case 12:\n                _context10.prev = 12;\n                _context10.t0 = _context10[\"catch\"](8);\n                _didIteratorError3 = true;\n                _iteratorError3 = _context10.t0;\n\n              case 16:\n                _context10.prev = 16;\n                _context10.prev = 17;\n\n                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                  _iterator3.return();\n                }\n\n              case 19:\n                _context10.prev = 19;\n\n                if (!_didIteratorError3) {\n                  _context10.next = 22;\n                  break;\n                }\n\n                throw _iteratorError3;\n\n              case 22:\n                return _context10.finish(19);\n\n              case 23:\n                return _context10.finish(16);\n\n              case 24:\n                return _context10.abrupt(\"return\", result);\n\n              case 25:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[8, 12, 16, 24], [17,, 19, 23]]);\n      }));\n\n      function getAssets(_x11) {\n        return _getAssets.apply(this, arguments);\n      }\n\n      return getAssets;\n    }()\n    /**\n     *\n     * @param url - URL for Azure Blob\n     */\n\n  }, {\n    key: \"getFileName\",\n    value: function getFileName(url) {\n      var pathParts = url.split(\"/\");\n      return pathParts[pathParts.length - 1].split(\"?\")[0];\n    }\n    /**\n     * @returns - URL for Azure Blob Storage account with SAS token appended if specified\n     */\n\n  }, {\n    key: \"getAccountUrl\",\n    value: function getAccountUrl() {\n      return \"https://\".concat(this.options.accountName, \".blob.core.windows.net\") + (this.options.sas || \"\");\n    }\n    /**\n     * Gets a Credential object. OAuthToken if specified in options, anonymous\n     * credential otherwise (uses the SAS token)\n     * @returns - Credential object from Azure Storage SDK\n     */\n\n  }, {\n    key: \"getCredential\",\n    value: function getCredential() {\n      if (this.options.oauthToken) {\n        return new TokenCredential(this.options.oauthToken);\n      } else {\n        return new AnonymousCredential();\n      }\n    }\n  }, {\n    key: \"getServiceURL\",\n    value: function getServiceURL() {\n      var credential = this.getCredential();\n      var pipeline = StorageURL.newPipeline(credential);\n      var accountUrl = this.getAccountUrl();\n      var serviceUrl = new ServiceURL(accountUrl, pipeline);\n      return serviceUrl;\n    }\n  }, {\n    key: \"getContainerURL\",\n    value: function getContainerURL(serviceURL, containerName) {\n      return ContainerURL.fromServiceURL(serviceURL ? serviceURL : this.getServiceURL(), containerName ? containerName : this.options.containerName);\n    }\n  }, {\n    key: \"getBlockBlobURL\",\n    value: function getBlockBlobURL(blobName) {\n      var containerURL = this.getContainerURL();\n      return BlockBlobURL.fromContainerURL(containerURL, blobName);\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(blobName) {\n      return this.getBlockBlobURL(blobName).url;\n    }\n  }, {\n    key: \"bodyToString\",\n    value: function () {\n      var _bodyToString = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11(response, // tslint:disable-next-line:variable-name\n      _length) {\n        var blob;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return response.blobBody;\n\n              case 2:\n                blob = _context11.sent;\n                return _context11.abrupt(\"return\", this.blobToString(blob));\n\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function bodyToString(_x12, _x13) {\n        return _bodyToString.apply(this, arguments);\n      }\n\n      return bodyToString;\n    }()\n  }, {\n    key: \"blobToString\",\n    value: function () {\n      var _blobToString = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee12(blob) {\n        var fileReader;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                fileReader = new FileReader();\n                return _context12.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  fileReader.onloadend = function (ev) {\n                    resolve(ev.target.result);\n                  };\n\n                  fileReader.onerror = reject;\n                  fileReader.readAsText(blob);\n                }));\n\n              case 2:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function blobToString(_x14) {\n        return _blobToString.apply(this, arguments);\n      }\n\n      return blobToString;\n    }()\n  }]);\n\n  return AzureBlobStorage;\n}();","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/providers/storage/azureBlobStorage.ts"],"names":["AssetType","StorageType","AssetService","TokenCredential","AnonymousCredential","ContainerURL","StorageURL","ServiceURL","Aborter","BlockBlobURL","AzureBlobStorage","options","storageType","Cloud","containerName","createContainer","listContainers","containers","indexOf","Error","blobName","blockBlobURL","getBlockBlobURL","download","none","downloadResponse","bodyToString","readText","text","Buffer","from","content","upload","length","writeText","delete","path","ext","result","containerURL","getContainerURL","listBlobFlatSegment","marker","listBlobsResponse","nextMarker","segment","blobItems","blob","name","endsWith","push","getServiceURL","listContainersSegment","listContainersResponse","containerItems","container","create","statusCode","listFiles","files","file","url","getUrl","asset","createAssetFromFilePath","getFileName","type","Unknown","pathParts","split","accountName","sas","oauthToken","credential","getCredential","pipeline","newPipeline","accountUrl","getAccountUrl","serviceUrl","serviceURL","fromServiceURL","fromContainerURL","response","_length","blobBody","blobToString","fileReader","FileReader","Promise","resolve","reject","onloadend","ev","target","onerror","readAsText"],"mappings":"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","sourcesContent":["import { IStorageProvider } from \"./storageProviderFactory\";\nimport { IAsset, AssetType, StorageType } from \"../../models/applicationState\";\nimport { AssetService } from \"../../services/assetService\";\nimport {\n    TokenCredential, AnonymousCredential, ContainerURL,\n    StorageURL, ServiceURL, Credential, Aborter, BlockBlobURL,\n} from \"@azure/storage-blob\";\nimport { BlobDeleteResponse } from \"@azure/storage-blob/typings/lib/generated/lib/models\";\n\n/**\n * Options for Azure Cloud Storage\n * @member accountName - Name of Storage Account\n * @member containerName - Name of targeted container\n * @member createContainer - Option for creating container in `initialize()`\n * @member sas - Shared Access Signature (SAS) token for accessing Azure Blob Storage\n * @member oauthToken - Not yet implemented. Optional token for accessing Azure Blob Storage\n */\nexport interface IAzureCloudStorageOptions {\n    accountName: string;\n    containerName: string;\n    createContainer: boolean;\n    sas?: string;\n    oauthToken?: string;\n}\n\n/**\n * Storage Provider for Azure Blob Storage\n */\nexport class AzureBlobStorage implements IStorageProvider {\n\n    /**\n     * Storage type\n     * @returns - StorageType.Cloud\n     */\n    public storageType: StorageType = StorageType.Cloud;\n\n    constructor(private options?: IAzureCloudStorageOptions) { }\n\n    /**\n     * Initialize connection to Blob Storage account & container\n     * If `createContainer` was specified in options, this function\n     * creates the container. Otherwise, validates that container\n     * is contained in list of containers\n     * @throws - Error if container does not exist or not able to\n     * connect to Azure Blob Storage\n     */\n    public async initialize(): Promise<void> {\n        const containerName = this.options.containerName;\n        if (this.options.createContainer) {\n            await this.createContainer(containerName);\n        } else {\n            const containers = await this.listContainers(null);\n            if (containers.indexOf(containerName) === -1) {\n                throw new Error(`Container \"${containerName}\" does not exist`);\n            }\n        }\n    }\n\n    /**\n     * Reads text from specified blob\n     * @param blobName - Name of blob in container\n     */\n    public async readText(blobName: string): Promise<string> {\n        const blockBlobURL = this.getBlockBlobURL(blobName);\n        const downloadResponse = await blockBlobURL.download(Aborter.none, 0);\n\n        return await this.bodyToString(downloadResponse);\n    }\n\n    /**\n     * Reads Buffer from specified blob\n     * @param blobName - Name of blob in container\n     */\n    public async readBinary(blobName: string) {\n        const text = await this.readText(blobName);\n        return Buffer.from(text);\n    }\n\n    /**\n     * Writes text to blob in container\n     * @param blobName - Name of blob in container\n     * @param content - Content to write to blob (string or Buffer)\n     */\n    public async writeText(blobName: string, content: string | Buffer) {\n        const blockBlobURL = this.getBlockBlobURL(blobName);\n        await blockBlobURL.upload(\n            Aborter.none,\n            content,\n            content.length,\n        );\n    }\n\n    /**\n     * Writes buffer to blob in container\n     * @param blobName - Name of blob in container\n     * @param content - Buffer to write to blob\n     */\n    public writeBinary(blobName: string, content: Buffer) {\n        return this.writeText(blobName, content);\n    }\n\n    /**\n     * Deletes file from container\n     * @param blobName - Name of blob in container\n     */\n    public async deleteFile(blobName: string): Promise<void> {\n        await this.getBlockBlobURL(blobName).delete(Aborter.none);\n    }\n\n    /**\n     * Lists files in container\n     * @param path - NOT USED IN CURRENT IMPLEMENTATION. Only uses container\n     * as specified in Azure Cloud Storage Options. Included to satisfy\n     * Storage Provider interface\n     * @param ext - Extension of files to filter on when retrieving files\n     * from container\n     */\n    public async listFiles(path: string, ext?: string): Promise<string[]> {\n        const result: string[] = [];\n        let marker;\n        const containerURL = this.getContainerURL();\n        do {\n            const listBlobsResponse = await containerURL.listBlobFlatSegment(\n                Aborter.none,\n                marker,\n            );\n            marker = listBlobsResponse.nextMarker;\n            for (const blob of listBlobsResponse.segment.blobItems) {\n                if ((ext && blob.name.endsWith(ext)) || !ext) {\n                    result.push(blob.name);\n                }\n            }\n        } while (marker);\n\n        return result;\n    }\n\n    /**\n     * Lists the containers with in the Azure Blob Storage account\n     * @param path - NOT USED IN CURRENT IMPLEMENTATION. Lists containers in storage account.\n     * Path does not really make sense in this scenario. Included to satisfy interface\n     */\n    public async listContainers(path: string) {\n        const result: string[] = [];\n        let marker;\n        do {\n            const listContainersResponse = await this.getServiceURL().listContainersSegment(\n                Aborter.none,\n                marker,\n            );\n            marker = listContainersResponse.nextMarker;\n            for (const container of listContainersResponse.containerItems) {\n                result.push(container.name);\n            }\n        } while (marker);\n\n        return result;\n    }\n\n    /**\n     * Creates container specified in Azure Cloud Storage options\n     * @param containerName - NOT USED IN CURRENT IMPLEMENTATION. Because `containerName`\n     * is a required attribute of the Azure Cloud Storage options used to instantiate the\n     * provider, this function creates that container. Included to satisfy interface\n     */\n    public async createContainer(containerName: string): Promise<void> {\n        const containerURL = this.getContainerURL();\n        try {\n            await containerURL.create(Aborter.none);\n        } catch (e) {\n            if (e.statusCode === 409) {\n                return;\n            }\n\n            throw e;\n        }\n    }\n\n    /**\n     * Deletes container specified in Azure Cloud Storage options\n     * @param containerName - NOT USED IN CURRENT IMPLEMENTATION. Because `containerName`\n     * is a required attribute of the Azure Cloud Storage options used to instantiate the\n     * provider, this function creates that container. Included to satisfy interface\n     */\n    public async deleteContainer(containerName: string): Promise<void> {\n        await this.getContainerURL().delete(Aborter.none);\n    }\n\n    /**\n     * Retrieves assets from Azure Blob Storage container\n     * @param containerName - Container from which to retrieve assets. Defaults to\n     * container specified in Azure Cloud Storage options\n     */\n    public async getAssets(containerName?: string): Promise<IAsset[]> {\n        containerName = (containerName) ? containerName : this.options.containerName;\n        const files = await this.listFiles(containerName);\n        const result: IAsset[] = [];\n        for (const file of files) {\n            const url = this.getUrl(file);\n            const asset = AssetService.createAssetFromFilePath(url, this.getFileName(url));\n            if (asset.type !== AssetType.Unknown) {\n                result.push(asset);\n            }\n        }\n        return result;\n    }\n\n    /**\n     *\n     * @param url - URL for Azure Blob\n     */\n    public getFileName(url: string) {\n        const pathParts = url.split(\"/\");\n        return pathParts[pathParts.length - 1].split(\"?\")[0];\n    }\n\n    /**\n     * @returns - URL for Azure Blob Storage account with SAS token appended if specified\n     */\n    public getAccountUrl(): string {\n        return `https://${this.options.accountName}.blob.core.windows.net` + (this.options.sas || \"\");\n    }\n\n    /**\n     * Gets a Credential object. OAuthToken if specified in options, anonymous\n     * credential otherwise (uses the SAS token)\n     * @returns - Credential object from Azure Storage SDK\n     */\n    private getCredential(): Credential {\n        if (this.options.oauthToken) {\n            return new TokenCredential(this.options.oauthToken);\n        } else {\n            return new AnonymousCredential();\n        }\n    }\n\n    private getServiceURL(): ServiceURL {\n        const credential = this.getCredential();\n        const pipeline = StorageURL.newPipeline(credential);\n        const accountUrl = this.getAccountUrl();\n        const serviceUrl = new ServiceURL(\n            accountUrl,\n            pipeline,\n        );\n        return serviceUrl;\n    }\n\n    private getContainerURL(serviceURL?: ServiceURL, containerName?: string): ContainerURL {\n        return ContainerURL.fromServiceURL(\n            (serviceURL) ? serviceURL : this.getServiceURL(),\n            (containerName) ? containerName : this.options.containerName,\n        );\n    }\n\n    private getBlockBlobURL(blobName: string): BlockBlobURL {\n        const containerURL = this.getContainerURL();\n        return BlockBlobURL.fromContainerURL(\n            containerURL,\n            blobName,\n        );\n    }\n\n    private getUrl(blobName: string): string {\n        return this.getBlockBlobURL(blobName).url;\n    }\n\n    private async bodyToString(\n        response: {\n            readableStreamBody?: NodeJS.ReadableStream;\n            blobBody?: Promise<Blob>;\n        },\n        // tslint:disable-next-line:variable-name\n        _length?: number,\n    ): Promise<string> {\n        const blob = await response.blobBody!;\n        return this.blobToString(blob);\n    }\n\n    private async blobToString(blob: Blob): Promise<string> {\n        const fileReader = new FileReader();\n\n        return new Promise<string>((resolve, reject) => {\n            fileReader.onloadend = (ev: any) => {\n                resolve(ev.target!.result);\n            };\n            fileReader.onerror = reject;\n            fileReader.readAsText(blob);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
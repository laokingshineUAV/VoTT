{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Container } from \"./generated/lib/operations\";\nimport { StorageURL } from \"./StorageURL\";\nimport { ETagNone } from \"./utils/constants\";\nimport { appendToURLPath, truncatedISO8061Date } from \"./utils/utils.common\";\n/**\n * A ContainerURL represents a URL to the Azure Storage container allowing you to manipulate its blobs.\n *\n * @export\n * @class ContainerURL\n * @extends {StorageURL}\n */\n\nvar ContainerURL =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ContainerURL, _super);\n  /**\n   * Creates an instance of ContainerURL.\n   * @param {string} url A URL string pointing to Azure Storage blob container, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer?sasString\".\n   * @param {Pipeline} pipeline Call StorageURL.newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof ContainerURL\n   */\n\n\n  function ContainerURL(url, pipeline) {\n    var _this = _super.call(this, url, pipeline) || this;\n\n    _this.containerContext = new Container(_this.storageClientContext);\n    return _this;\n  }\n  /**\n   * Creates a ContainerURL object from ServiceURL\n   *\n   * @param serviceURL A ServiceURL object\n   * @param containerName A container name\n   */\n\n\n  ContainerURL.fromServiceURL = function (serviceURL, containerName) {\n    return new ContainerURL(appendToURLPath(serviceURL.url, encodeURIComponent(containerName)), serviceURL.pipeline);\n  };\n  /**\n   * Creates a new ContainerURL object identical to the source but with the\n   * specified request policy pipeline.\n   *\n   * @param {Pipeline} pipeline\n   * @returns {ContainerURL}\n   * @memberof ContainerURL\n   */\n\n\n  ContainerURL.prototype.withPipeline = function (pipeline) {\n    return new ContainerURL(this.url, pipeline);\n  };\n  /**\n   * Creates a new container under the specified account. If the container with\n   * the same name already exists, the operation fails.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {IContainerCreateOptions} [options]\n   * @returns {Promise<Models.ContainerCreateResponse>}\n   * @memberof ContainerURL\n   */\n\n\n  ContainerURL.prototype.create = function (aborter, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        // Spread operator in destructuring assignments,\n        // this will filter out unwanted properties from the response object into result object\n        return [2\n        /*return*/\n        , this.containerContext.create(tslib_1.__assign({}, options, {\n          abortSignal: aborter\n        }))];\n      });\n    });\n  };\n  /**\n   * Returns all user-defined metadata and system properties for the specified\n   * container. The data returned does not include the container's list of blobs.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {IContainersGetPropertiesOptions} [options]\n   * @returns {Promise<Models.ContainerGetPropertiesResponse>}\n   * @memberof ContainerURL\n   */\n\n\n  ContainerURL.prototype.getProperties = function (aborter, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        if (!options.leaseAccessConditions) {\n          options.leaseAccessConditions = {};\n        }\n\n        return [2\n        /*return*/\n        , this.containerContext.getProperties(tslib_1.__assign({\n          abortSignal: aborter\n        }, options.leaseAccessConditions))];\n      });\n    });\n  };\n  /**\n   * Marks the specified container for deletion. The container and any blobs\n   * contained within it are later deleted during garbage collection.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {Models.ContainersDeleteMethodOptionalParams} [options]\n   * @returns {Promise<Models.ContainerDeleteResponse>}\n   * @memberof ContainerURL\n   */\n\n\n  ContainerURL.prototype.delete = function (aborter, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        if (!options.containerAccessConditions) {\n          options.containerAccessConditions = {};\n        }\n\n        if (!options.containerAccessConditions.modifiedAccessConditions) {\n          options.containerAccessConditions.modifiedAccessConditions = {};\n        }\n\n        if (!options.containerAccessConditions.leaseAccessConditions) {\n          options.containerAccessConditions.leaseAccessConditions = {};\n        }\n\n        if (options.containerAccessConditions.modifiedAccessConditions.ifMatch && options.containerAccessConditions.modifiedAccessConditions.ifMatch !== ETagNone || options.containerAccessConditions.modifiedAccessConditions.ifNoneMatch && options.containerAccessConditions.modifiedAccessConditions.ifNoneMatch !== ETagNone) {\n          throw new RangeError(\"the IfMatch and IfNoneMatch access conditions must have their default\\\r\n        values because they are ignored by the service\");\n        }\n\n        return [2\n        /*return*/\n        , this.containerContext.deleteMethod({\n          abortSignal: aborter,\n          leaseAccessConditions: options.containerAccessConditions.leaseAccessConditions,\n          modifiedAccessConditions: options.containerAccessConditions.modifiedAccessConditions\n        })];\n      });\n    });\n  };\n  /**\n   * Sets one or more user-defined name-value pairs for the specified container.\n   *\n   * If no option provided, or no metadata defined in the parameter, the container\n   * metadata will be removed.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {IMetadata} [metadata] Replace existing metadata with this value.\n   *                               If no value provided the existing metadata will be removed.\n   * @param {IContainerSetMetadataOptions} [options]\n   * @returns {Promise<Models.ContainerSetMetadataResponse>}\n   * @memberof ContainerURL\n   */\n\n\n  ContainerURL.prototype.setMetadata = function (aborter, metadata, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        if (!options.containerAccessConditions) {\n          options.containerAccessConditions = {};\n        }\n\n        if (!options.containerAccessConditions.modifiedAccessConditions) {\n          options.containerAccessConditions.modifiedAccessConditions = {};\n        }\n\n        if (!options.containerAccessConditions.leaseAccessConditions) {\n          options.containerAccessConditions.leaseAccessConditions = {};\n        }\n\n        if (options.containerAccessConditions.modifiedAccessConditions.ifUnmodifiedSince || options.containerAccessConditions.modifiedAccessConditions.ifMatch && options.containerAccessConditions.modifiedAccessConditions.ifMatch !== ETagNone || options.containerAccessConditions.modifiedAccessConditions.ifNoneMatch && options.containerAccessConditions.modifiedAccessConditions.ifNoneMatch !== ETagNone) {\n          throw new RangeError(\"the IfUnmodifiedSince, IfMatch, and IfNoneMatch must have their default values\\\r\n        because they are ignored by the blob service\");\n        }\n\n        return [2\n        /*return*/\n        , this.containerContext.setMetadata({\n          abortSignal: aborter,\n          leaseAccessConditions: options.containerAccessConditions.leaseAccessConditions,\n          metadata: metadata,\n          modifiedAccessConditions: options.containerAccessConditions.modifiedAccessConditions\n        })];\n      });\n    });\n  };\n  /**\n   * Gets the permissions for the specified container. The permissions indicate\n   * whether container data may be accessed publicly.\n   *\n   * WARNING: JavaScript Date will potential lost precision when parsing start and expiry string.\n   * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {IContainerGetAccessPolicyOptions} [options]\n   * @returns {Promise<ContainerGetAccessPolicyResponse>}\n   * @memberof ContainerURL\n   */\n\n\n  ContainerURL.prototype.getAccessPolicy = function (aborter, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var response, res, _i, response_1, identifier;\n\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!options.leaseAccessConditions) {\n              options.leaseAccessConditions = {};\n            }\n\n            return [4\n            /*yield*/\n            , this.containerContext.getAccessPolicy({\n              abortSignal: aborter,\n              leaseAccessConditions: options.leaseAccessConditions\n            })];\n\n          case 1:\n            response = _a.sent();\n            res = {\n              _response: response._response,\n              blobPublicAccess: response.blobPublicAccess,\n              date: response.date,\n              eTag: response.eTag,\n              errorCode: response.errorCode,\n              lastModified: response.lastModified,\n              requestId: response.requestId,\n              signedIdentifiers: [],\n              version: response.version\n            };\n\n            for (_i = 0, response_1 = response; _i < response_1.length; _i++) {\n              identifier = response_1[_i];\n              res.signedIdentifiers.push({\n                accessPolicy: {\n                  expiry: new Date(identifier.accessPolicy.expiry),\n                  permission: identifier.accessPolicy.permission,\n                  start: new Date(identifier.accessPolicy.start)\n                },\n                id: identifier.id\n              });\n            }\n\n            return [2\n            /*return*/\n            , res];\n        }\n      });\n    });\n  };\n  /**\n   * Sets the permissions for the specified container. The permissions indicate\n   * whether blobs in a container may be accessed publicly.\n   *\n   * When you set permissions for a container, the existing permissions are replaced.\n   * If no access or containerAcl provided, the existing container ACL will be\n   * removed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {PublicAccessType} [access]\n   * @param {ISignedIdentifier[]} [containerAcl]\n   * @param {IContainerSetAccessPolicyOptions} [options]\n   * @returns {Promise<Models.ContainerSetAccessPolicyResponse>}\n   * @memberof ContainerURL\n   */\n\n\n  ContainerURL.prototype.setAccessPolicy = function (aborter, access, containerAcl, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var acl, _i, _a, identifier;\n\n      return tslib_1.__generator(this, function (_b) {\n        options.containerAccessConditions = options.containerAccessConditions || {};\n        acl = [];\n\n        for (_i = 0, _a = containerAcl || []; _i < _a.length; _i++) {\n          identifier = _a[_i];\n          acl.push({\n            accessPolicy: {\n              expiry: truncatedISO8061Date(identifier.accessPolicy.expiry),\n              permission: identifier.accessPolicy.permission,\n              start: truncatedISO8061Date(identifier.accessPolicy.start)\n            },\n            id: identifier.id\n          });\n        }\n\n        return [2\n        /*return*/\n        , this.containerContext.setAccessPolicy({\n          abortSignal: aborter,\n          access: access,\n          containerAcl: acl,\n          leaseAccessConditions: options.containerAccessConditions.leaseAccessConditions,\n          modifiedAccessConditions: options.containerAccessConditions.modifiedAccessConditions\n        })];\n      });\n    });\n  };\n  /**\n   * Establishes and manages a lock on a container for delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} proposedLeaseId Can be specified in any valid GUID string format\n   * @param {number} duration Must be between 15 to 60 seconds, or infinite (-1)\n   * @param {IContainerAcquireLeaseOptions} [options]\n   * @returns {Promise<Models.ContainerAcquireLeaseResponse>}\n   * @memberof ContainerURL\n   */\n\n\n  ContainerURL.prototype.acquireLease = function (aborter, proposedLeaseId, duration, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.containerContext.acquireLease({\n          abortSignal: aborter,\n          duration: duration,\n          modifiedAccessConditions: options.modifiedAccessConditions,\n          proposedLeaseId: proposedLeaseId\n        })];\n      });\n    });\n  };\n  /**\n   * To free the lease if it is no longer needed so that another client may\n   * immediately acquire a lease against the container.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} leaseId\n   * @param {IContainerReleaseLeaseOptions} [options]\n   * @returns {Promise<Models.ContainerReleaseLeaseResponse>}\n   * @memberof ContainerURL\n   */\n\n\n  ContainerURL.prototype.releaseLease = function (aborter, leaseId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.containerContext.releaseLease(leaseId, {\n          abortSignal: aborter,\n          modifiedAccessConditions: options.modifiedAccessConditions\n        })];\n      });\n    });\n  };\n  /**\n   * To renew an existing lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} leaseId\n   * @param {IContainerRenewLeaseOptions} [options]\n   * @returns {Promise<Models.ContainerRenewLeaseResponse>}\n   * @memberof ContainerURL\n   */\n\n\n  ContainerURL.prototype.renewLease = function (aborter, leaseId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.containerContext.renewLease(leaseId, {\n          abortSignal: aborter,\n          modifiedAccessConditions: options.modifiedAccessConditions\n        })];\n      });\n    });\n  };\n  /**\n   * To end the lease but ensure that another client cannot acquire a new lease\n   * until the current lease period has expired.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {number} period break period\n   * @param {IContainerBreakLeaseOptions} [options]\n   * @returns {Promise<Models.ContainerBreakLeaseResponse>}\n   * @memberof ContainerURL\n   */\n\n\n  ContainerURL.prototype.breakLease = function (aborter, period, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.containerContext.breakLease({\n          abortSignal: aborter,\n          breakPeriod: period,\n          modifiedAccessConditions: options.modifiedAccessConditions\n        })];\n      });\n    });\n  };\n  /**\n   * To change the ID of an existing lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} leaseId\n   * @param {string} proposedLeaseId\n   * @param {IContainerChangeLeaseOptions} [options]\n   * @returns {Promise<Models.ContainerChangeLeaseResponse>}\n   * @memberof ContainerURL\n   */\n\n\n  ContainerURL.prototype.changeLease = function (aborter, leaseId, proposedLeaseId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.containerContext.changeLease(leaseId, proposedLeaseId, {\n          abortSignal: aborter,\n          modifiedAccessConditions: options.modifiedAccessConditions\n        })];\n      });\n    });\n  };\n  /**\n   * listBlobFlatSegment returns a single segment of blobs starting from the\n   * specified Marker. Use an empty Marker to start enumeration from the beginning.\n   * After getting a segment, process it, and then call ListBlobsFlatSegment again\n   * (passing the the previously-returned Marker) to get the next segment.\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} [marker]\n   * @param {IContainerListBlobsSegmentOptions} [options]\n   * @returns {Promise<Models.ContainerListBlobFlatSegmentResponse>}\n   * @memberof ContainerURL\n   */\n\n\n  ContainerURL.prototype.listBlobFlatSegment = function (aborter, marker, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.containerContext.listBlobFlatSegment(tslib_1.__assign({\n          abortSignal: aborter,\n          marker: marker\n        }, options))];\n      });\n    });\n  };\n  /**\n   * listBlobHierarchySegment returns a single segment of blobs starting from\n   * the specified Marker. Use an empty Marker to start enumeration from the\n   * beginning. After getting a segment, process it, and then call ListBlobsHierarchicalSegment\n   * again (passing the the previously-returned Marker) to get the next segment.\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} delimiter\n   * @param {IContainerListBlobsSegmentOptions} [options]\n   * @returns {Promise<Models.ContainerListBlobHierarchySegmentResponse>}\n   * @memberof ContainerURL\n   */\n\n\n  ContainerURL.prototype.listBlobHierarchySegment = function (aborter, delimiter, marker, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.containerContext.listBlobHierarchySegment(delimiter, tslib_1.__assign({\n          abortSignal: aborter,\n          marker: marker\n        }, options))];\n      });\n    });\n  };\n\n  return ContainerURL;\n}(StorageURL);\n\nexport { ContainerURL };","map":null,"metadata":{},"sourceType":"module"}
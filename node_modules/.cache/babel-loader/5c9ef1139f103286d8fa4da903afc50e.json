{"ast":null,"code":"import _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/pages/editorPage/canvas.tsx\";\nimport React, { Fragment } from \"react\";\nimport * as shortid from \"shortid\";\nimport { CanvasTools } from \"vott-ct\";\nimport { EditorMode, RegionType } from \"../../../../models/applicationState\";\nimport CanvasHelpers from \"./canvasHelpers\";\nimport Clipboard from \"../../../../common/clipboard\";\nimport Confirm from \"../../common/confirm/confirm\";\nimport { strings } from \"../../../../common/strings\";\nimport { SelectionMode } from \"vott-ct/lib/js/CanvasTools/Interface/ISelectorSettings\";\nimport { Rect } from \"vott-ct/lib/js/CanvasTools/Core/Rect\";\nimport { createContentBoundingBox } from \"../../../../common/layout\";\n\nvar Canvas =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Canvas, _React$Component);\n\n  function Canvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Canvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Canvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      currentAsset: _this.props.selectedAsset,\n      contentSource: null,\n      enabled: false\n    };\n    _this.canvasZone = React.createRef();\n    _this.clearConfirm = React.createRef();\n    _this.template = new Rect(20, 20);\n\n    _this.componentDidMount = function () {\n      var sz = document.getElementById(\"editor-zone\");\n      _this.editor = new CanvasTools.Editor(sz);\n      _this.editor.autoResize = false;\n      _this.editor.onSelectionEnd = _this.onSelectionEnd;\n      _this.editor.onRegionMoveEnd = _this.onRegionMoveEnd;\n      _this.editor.onRegionDelete = _this.onRegionDelete;\n      _this.editor.onRegionSelected = _this.onRegionSelected;\n\n      _this.editor.AS.setSelectionMode({\n        mode: _this.props.selectionMode\n      });\n\n      window.addEventListener(\"resize\", _this.onWindowResize);\n    };\n\n    _this.componentDidUpdate =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(prevProps, prevState) {\n        var options, assetIdChanged;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Handles asset changing\n                if (_this.props.selectedAsset !== prevProps.selectedAsset) {\n                  _this.setState({\n                    currentAsset: _this.props.selectedAsset\n                  });\n                } // Handle selection mode changes\n\n\n                if (_this.props.selectionMode !== prevProps.selectionMode) {\n                  options = _this.props.selectionMode === SelectionMode.COPYRECT ? _this.template : null;\n\n                  _this.editor.AS.setSelectionMode({\n                    mode: _this.props.selectionMode,\n                    template: options\n                  });\n                }\n\n                assetIdChanged = _this.state.currentAsset.asset.id !== prevState.currentAsset.asset.id; // When the selected asset has changed but is still the same asset id\n\n                if (!assetIdChanged && _this.state.currentAsset !== prevState.currentAsset) {\n                  _this.refreshCanvasToolsRegions();\n                } // When the project tags change re-apply tags to regions\n\n\n                if (_this.props.project.tags !== prevProps.project.tags) {\n                  _this.updateCanvasToolsRegionTags();\n                } // Handles when the canvas is enabled & disabled\n\n\n                if (prevState.enabled !== _this.state.enabled) {\n                  // When the canvas is ready to display\n                  if (_this.state.enabled) {\n                    _this.refreshCanvasToolsRegions();\n\n                    _this.setContentSource(_this.state.contentSource);\n\n                    _this.editor.AS.setSelectionMode(_this.props.selectionMode);\n\n                    _this.editor.AS.enable();\n\n                    if (_this.props.onSelectedRegionsChanged) {\n                      _this.props.onSelectedRegionsChanged(_this.getSelectedRegions());\n                    }\n                  } else {\n                    // When the canvas has been disabled\n                    _this.editor.AS.disable();\n\n                    _this.clearAllRegions();\n\n                    _this.editor.AS.setSelectionMode(SelectionMode.NONE);\n                  }\n                }\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.render = function () {\n      var className = _this.state.enabled ? \"canvas-enabled\" : \"canvas-disabled\";\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Confirm, {\n        title: strings.editorPage.canvas.removeAllRegions.title,\n        ref: _this.clearConfirm,\n        message: strings.editorPage.canvas.removeAllRegions.confirmation,\n        confirmButtonColor: \"danger\",\n        onConfirm: _this.removeAllRegions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"ct-zone\",\n        ref: _this.canvasZone,\n        className: className,\n        onClick: function onClick(e) {\n          return e.stopPropagation();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"selection-zone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"editor-zone\",\n        className: \"full-size\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }))), _this.renderChildren());\n    };\n\n    _this.applyTag = function (tag) {\n      var selectedRegions = _this.getSelectedRegions();\n\n      var lockedTags = _this.props.lockedTags;\n      var lockedTagsEmpty = !lockedTags || !lockedTags.length;\n      var regionsEmpty = !selectedRegions || !selectedRegions.length;\n\n      if (!tag && lockedTagsEmpty || regionsEmpty) {\n        return;\n      }\n\n      var transformer;\n\n      if (lockedTagsEmpty) {\n        // Tag selected while region(s) selected\n        transformer = CanvasHelpers.toggleTag;\n      } else if (lockedTags.find(function (t) {\n        return t === tag;\n      })) {\n        // Tag added to locked tags while region(s) selected\n        transformer = CanvasHelpers.addIfMissing;\n      } else {\n        // Tag removed from locked tags while region(s) selected\n        transformer = CanvasHelpers.removeIfContained;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = selectedRegions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var selectedRegion = _step.value;\n          selectedRegion.tags = transformer(selectedRegion.tags, tag);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.updateRegions(selectedRegions);\n\n      if (_this.props.onSelectedRegionsChanged) {\n        _this.props.onSelectedRegionsChanged(selectedRegions);\n      }\n    };\n\n    _this.copyRegions =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return Clipboard.writeObject(_this.getSelectedRegions());\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    _this.cutRegions =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var selectedRegions;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              selectedRegions = _this.getSelectedRegions();\n              _context3.next = 3;\n              return Clipboard.writeObject(selectedRegions);\n\n            case 3:\n              _this.deleteRegions(selectedRegions);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n    _this.pasteRegions =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var regionsToPaste, asset, duplicates;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return Clipboard.readObject();\n\n            case 2:\n              regionsToPaste = _context4.sent;\n              asset = _this.state.currentAsset;\n              duplicates = CanvasHelpers.duplicateRegionsAndMove(regionsToPaste, asset.regions, asset.asset.size.width, asset.asset.size.height);\n\n              _this.addRegions(duplicates);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    _this.confirmRemoveAllRegions = function () {\n      _this.clearConfirm.current.open();\n    };\n\n    _this.getSelectedRegions = function () {\n      var selectedRegions = _this.editor.RM.getSelectedRegionsBounds().map(function (rb) {\n        return rb.id;\n      });\n\n      return _this.state.currentAsset.regions.filter(function (r) {\n        return selectedRegions.find(function (id) {\n          return r.id === id;\n        });\n      });\n    };\n\n    _this.updateCanvasToolsRegionTags = function () {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _this.state.currentAsset.regions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var region = _step2.value;\n\n          _this.editor.RM.updateTagsById(region.id, CanvasHelpers.getTagsDescriptor(_this.props.project.tags, region));\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    };\n\n    _this.forceResize = function () {\n      _this.onWindowResize();\n    };\n\n    _this.removeAllRegions = function () {\n      var ids = _this.state.currentAsset.regions.map(function (r) {\n        return r.id;\n      });\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = ids[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var id = _step3.value;\n\n          _this.editor.RM.deleteRegionById(id);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      _this.deleteRegionsFromAsset(_this.state.currentAsset.regions);\n    };\n\n    _this.addRegions = function (regions) {\n      _this.addRegionsToCanvasTools(regions);\n\n      _this.addRegionsToAsset(regions);\n    };\n\n    _this.addRegionsToAsset = function (regions) {\n      _this.updateAssetRegions(_this.state.currentAsset.regions.concat(regions));\n    };\n\n    _this.addRegionsToCanvasTools = function (regions) {\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = regions[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var region = _step4.value;\n          var regionData = CanvasHelpers.getRegionData(region);\n\n          var scaledRegionData = _this.editor.scaleRegionToFrameSize(regionData, _this.state.currentAsset.asset.size.width, _this.state.currentAsset.asset.size.height);\n\n          _this.editor.RM.addRegion(region.id, scaledRegionData, CanvasHelpers.getTagsDescriptor(_this.props.project.tags, region));\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    };\n\n    _this.deleteRegions = function (regions) {\n      _this.deleteRegionsFromCanvasTools(regions);\n\n      _this.deleteRegionsFromAsset(regions);\n    };\n\n    _this.deleteRegionsFromAsset = function (regions) {\n      var filteredRegions = _this.state.currentAsset.regions.filter(function (assetRegion) {\n        return !regions.find(function (r) {\n          return r.id === assetRegion.id;\n        });\n      });\n\n      _this.updateAssetRegions(filteredRegions);\n    };\n\n    _this.deleteRegionsFromCanvasTools = function (regions) {\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = regions[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var region = _step5.value;\n\n          _this.editor.RM.deleteRegionById(region.id);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    };\n\n    _this.onSelectionEnd = function (regionData) {\n      if (CanvasHelpers.isEmpty(regionData)) {\n        return;\n      }\n\n      var id = shortid.generate();\n\n      _this.editor.RM.addRegion(id, regionData, null);\n\n      _this.template = new Rect(regionData.width, regionData.height); // RegionData not serializable so need to extract data\n\n      var scaledRegionData = _this.editor.scaleRegionToSourceSize(regionData, _this.state.currentAsset.asset.size.width, _this.state.currentAsset.asset.size.height);\n\n      var lockedTags = _this.props.lockedTags;\n      var newRegion = {\n        id: id,\n        type: _this.editorModeToType(_this.props.editorMode),\n        tags: lockedTags || [],\n        boundingBox: {\n          height: scaledRegionData.height,\n          width: scaledRegionData.width,\n          left: scaledRegionData.x,\n          top: scaledRegionData.y\n        },\n        points: scaledRegionData.points\n      };\n\n      if (lockedTags && lockedTags.length) {\n        _this.editor.RM.updateTagsById(id, CanvasHelpers.getTagsDescriptor(_this.props.project.tags, newRegion));\n      }\n\n      _this.updateAssetRegions([].concat(_toConsumableArray(_this.state.currentAsset.regions), [newRegion]));\n\n      if (_this.props.onSelectedRegionsChanged) {\n        _this.props.onSelectedRegionsChanged([newRegion]);\n      }\n    };\n\n    _this.updateAssetRegions = function (regions) {\n      var currentAsset = _objectSpread({}, _this.state.currentAsset, {\n        regions: regions\n      });\n\n      _this.setState({\n        currentAsset: currentAsset\n      }, function () {\n        _this.props.onAssetMetadataChanged(currentAsset);\n      });\n    };\n\n    _this.onRegionMoveEnd = function (id, regionData) {\n      var currentRegions = _this.state.currentAsset.regions;\n      var movedRegionIndex = currentRegions.findIndex(function (region) {\n        return region.id === id;\n      });\n      var movedRegion = currentRegions[movedRegionIndex];\n\n      var scaledRegionData = _this.editor.scaleRegionToSourceSize(regionData, _this.state.currentAsset.asset.size.width, _this.state.currentAsset.asset.size.height);\n\n      if (movedRegion) {\n        movedRegion.points = scaledRegionData.points;\n        movedRegion.boundingBox = {\n          height: scaledRegionData.height,\n          width: scaledRegionData.width,\n          left: scaledRegionData.x,\n          top: scaledRegionData.y\n        };\n      }\n\n      currentRegions[movedRegionIndex] = movedRegion;\n\n      _this.updateAssetRegions(currentRegions);\n    };\n\n    _this.onRegionDelete = function (id) {\n      // Remove from Canvas Tools\n      _this.editor.RM.deleteRegionById(id); // Remove from project\n\n\n      var currentRegions = _this.state.currentAsset.regions;\n      var deletedRegionIndex = currentRegions.findIndex(function (region) {\n        return region.id === id;\n      });\n      currentRegions.splice(deletedRegionIndex, 1);\n\n      _this.updateAssetRegions(currentRegions);\n\n      if (_this.props.onSelectedRegionsChanged) {\n        _this.props.onSelectedRegionsChanged([]);\n      }\n    };\n\n    _this.onRegionSelected = function (id, multiSelect) {\n      var selectedRegions = _this.getSelectedRegions();\n\n      if (_this.props.onSelectedRegionsChanged) {\n        _this.props.onSelectedRegionsChanged(selectedRegions);\n      } // Gets the scaled region data\n\n\n      var selectedRegionsData = _this.editor.RM.getSelectedRegionsBounds().find(function (region) {\n        return region.id === id;\n      });\n\n      if (selectedRegionsData) {\n        _this.template = new Rect(selectedRegionsData.width, selectedRegionsData.height);\n      }\n\n      if (_this.props.lockedTags && _this.props.lockedTags.length) {\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n          for (var _iterator6 = selectedRegions[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n            var selectedRegion = _step6.value;\n            selectedRegion.tags = CanvasHelpers.addAllIfMissing(selectedRegion.tags, _this.props.lockedTags);\n          }\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n              _iterator6.return();\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n\n        _this.updateRegions(selectedRegions);\n      }\n    };\n\n    _this.renderChildren = function () {\n      return React.cloneElement(_this.props.children, {\n        onAssetChanged: _this.onAssetChanged,\n        onLoaded: _this.onAssetLoaded,\n        onError: _this.onAssetError,\n        onActivated: _this.onAssetActivated,\n        onDeactivated: _this.onAssetDeactivated\n      });\n    };\n\n    _this.onAssetChanged = function () {\n      _this.setState({\n        enabled: false\n      });\n    };\n\n    _this.onAssetLoaded = function (contentSource) {\n      _this.setState({\n        contentSource: contentSource\n      });\n\n      _this.positionCanvas(contentSource);\n    };\n\n    _this.onAssetError = function () {\n      _this.setState({\n        enabled: false\n      });\n    };\n\n    _this.onAssetActivated = function () {\n      _this.setState({\n        enabled: false\n      });\n    };\n\n    _this.onAssetDeactivated = function (contentSource) {\n      _this.setState({\n        contentSource: contentSource,\n        enabled: true\n      });\n    };\n\n    _this.setContentSource =\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(contentSource) {\n        var canvas;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return _this.editor.addContentSource(contentSource);\n\n              case 3:\n                if (_this.props.onCanvasRendered) {\n                  canvas = _this.canvasZone.current.querySelector(\"canvas\");\n\n                  _this.props.onCanvasRendered(canvas);\n                }\n\n                _context5.next = 9;\n                break;\n\n              case 6:\n                _context5.prev = 6;\n                _context5.t0 = _context5[\"catch\"](0);\n                console.warn(_context5.t0);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 6]]);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    _this.positionCanvas = function (contentSource) {\n      if (!contentSource) {\n        return;\n      }\n\n      var canvas = _this.canvasZone.current;\n\n      if (canvas) {\n        var boundingBox = createContentBoundingBox(contentSource);\n        canvas.style.top = \"\".concat(boundingBox.top, \"px\");\n        canvas.style.left = \"\".concat(boundingBox.left, \"px\");\n        canvas.style.width = \"\".concat(boundingBox.width, \"px\");\n        canvas.style.height = \"\".concat(boundingBox.height, \"px\");\n\n        _this.editor.resize(boundingBox.width, boundingBox.height);\n      }\n    };\n\n    _this.onWindowResize =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6() {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (_this.state.contentSource) {\n                _context6.next = 2;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 2:\n              _this.positionCanvas(_this.state.contentSource);\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    _this.updateRegions = function (updates) {\n      var updatedRegions = CanvasHelpers.updateRegions(_this.state.currentAsset.regions, updates);\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = updates[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var update = _step7.value;\n\n          _this.editor.RM.updateTagsById(update.id, CanvasHelpers.getTagsDescriptor(_this.props.project.tags, update));\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n\n      _this.updateAssetRegions(updatedRegions);\n\n      _this.updateCanvasToolsRegionTags();\n    };\n\n    _this.clearAllRegions = function () {\n      _this.editor.RM.deleteAllRegions();\n    };\n\n    _this.refreshCanvasToolsRegions = function () {\n      _this.clearAllRegions();\n\n      if (!_this.state.currentAsset.regions || _this.state.currentAsset.regions.length === 0) {\n        return;\n      } // Add regions to the canvas\n\n\n      _this.state.currentAsset.regions.forEach(function (region) {\n        var loadedRegionData = CanvasHelpers.getRegionData(region);\n\n        _this.editor.RM.addRegion(region.id, _this.editor.scaleRegionToFrameSize(loadedRegionData, _this.state.currentAsset.asset.size.width, _this.state.currentAsset.asset.size.height), CanvasHelpers.getTagsDescriptor(_this.props.project.tags, region));\n      });\n    };\n\n    _this.editorModeToType = function (editorMode) {\n      var type;\n\n      switch (editorMode) {\n        case EditorMode.CopyRect:\n        case EditorMode.Rectangle:\n          type = RegionType.Rectangle;\n          break;\n\n        case EditorMode.Polygon:\n          type = RegionType.Polygon;\n          break;\n\n        case EditorMode.Point:\n          type = RegionType.Point;\n          break;\n\n        case EditorMode.Polyline:\n          type = RegionType.Polyline;\n          break;\n\n        default:\n          break;\n      }\n\n      return type;\n    };\n\n    return _this;\n  }\n\n  _createClass(Canvas, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.onWindowResize);\n    }\n  }]);\n\n  return Canvas;\n}(React.Component);\n\nCanvas.defaultProps = {\n  selectionMode: SelectionMode.NONE,\n  editorMode: EditorMode.Select,\n  selectedAsset: null,\n  project: null,\n  lockedTags: []\n};\nexport { Canvas as default };","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/pages/editorPage/canvas.tsx"],"names":["React","Fragment","shortid","CanvasTools","EditorMode","RegionType","CanvasHelpers","Clipboard","Confirm","strings","SelectionMode","Rect","createContentBoundingBox","Canvas","state","currentAsset","props","selectedAsset","contentSource","enabled","canvasZone","createRef","clearConfirm","template","componentDidMount","sz","document","getElementById","editor","Editor","autoResize","onSelectionEnd","onRegionMoveEnd","onRegionDelete","onRegionSelected","AS","setSelectionMode","mode","selectionMode","window","addEventListener","onWindowResize","componentDidUpdate","prevProps","prevState","setState","options","COPYRECT","assetIdChanged","asset","id","refreshCanvasToolsRegions","project","tags","updateCanvasToolsRegionTags","setContentSource","enable","onSelectedRegionsChanged","getSelectedRegions","disable","clearAllRegions","NONE","render","className","editorPage","canvas","removeAllRegions","title","confirmation","e","stopPropagation","renderChildren","applyTag","tag","selectedRegions","lockedTags","lockedTagsEmpty","length","regionsEmpty","transformer","toggleTag","find","t","addIfMissing","removeIfContained","selectedRegion","updateRegions","copyRegions","writeObject","cutRegions","deleteRegions","pasteRegions","readObject","regionsToPaste","duplicates","duplicateRegionsAndMove","regions","size","width","height","addRegions","confirmRemoveAllRegions","current","open","RM","getSelectedRegionsBounds","map","rb","filter","r","region","updateTagsById","getTagsDescriptor","forceResize","ids","deleteRegionById","deleteRegionsFromAsset","addRegionsToCanvasTools","addRegionsToAsset","updateAssetRegions","concat","regionData","getRegionData","scaledRegionData","scaleRegionToFrameSize","addRegion","deleteRegionsFromCanvasTools","filteredRegions","assetRegion","isEmpty","generate","scaleRegionToSourceSize","newRegion","type","editorModeToType","editorMode","boundingBox","left","x","top","y","points","onAssetMetadataChanged","currentRegions","movedRegionIndex","findIndex","movedRegion","deletedRegionIndex","splice","multiSelect","selectedRegionsData","addAllIfMissing","cloneElement","children","onAssetChanged","onLoaded","onAssetLoaded","onError","onAssetError","onActivated","onAssetActivated","onDeactivated","onAssetDeactivated","positionCanvas","addContentSource","onCanvasRendered","querySelector","console","warn","style","resize","updates","updatedRegions","update","deleteAllRegions","forEach","loadedRegionData","CopyRect","Rectangle","Polygon","Point","Polyline","removeEventListener","Component","defaultProps","Select"],"mappings":"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","sourcesContent":["import React, { Fragment, ReactElement } from \"react\";\nimport * as shortid from \"shortid\";\nimport { CanvasTools } from \"vott-ct\";\nimport { RegionData } from \"vott-ct/lib/js/CanvasTools/Core/RegionData\";\nimport {\n    EditorMode, IAssetMetadata,\n    IProject, IRegion, RegionType,\n} from \"../../../../models/applicationState\";\nimport CanvasHelpers from \"./canvasHelpers\";\nimport { AssetPreview, ContentSource } from \"../../common/assetPreview/assetPreview\";\nimport { Editor } from \"vott-ct/lib/js/CanvasTools/CanvasTools.Editor\";\nimport Clipboard from \"../../../../common/clipboard\";\nimport Confirm from \"../../common/confirm/confirm\";\nimport { strings } from \"../../../../common/strings\";\nimport { SelectionMode } from \"vott-ct/lib/js/CanvasTools/Interface/ISelectorSettings\";\nimport { Rect } from \"vott-ct/lib/js/CanvasTools/Core/Rect\";\nimport { createContentBoundingBox } from \"../../../../common/layout\";\n\nexport interface ICanvasProps extends React.Props<Canvas> {\n    selectedAsset: IAssetMetadata;\n    editorMode: EditorMode;\n    selectionMode: SelectionMode;\n    project: IProject;\n    lockedTags: string[];\n    children?: ReactElement<AssetPreview>;\n    onAssetMetadataChanged?: (assetMetadata: IAssetMetadata) => void;\n    onSelectedRegionsChanged?: (regions: IRegion[]) => void;\n    onCanvasRendered?: (canvas: HTMLCanvasElement) => void;\n}\n\nexport interface ICanvasState {\n    currentAsset: IAssetMetadata;\n    contentSource: ContentSource;\n    enabled: boolean;\n}\n\nexport default class Canvas extends React.Component<ICanvasProps, ICanvasState> {\n    public static defaultProps: ICanvasProps = {\n        selectionMode: SelectionMode.NONE,\n        editorMode: EditorMode.Select,\n        selectedAsset: null,\n        project: null,\n        lockedTags: [],\n    };\n\n    public editor: Editor;\n\n    public state: ICanvasState = {\n        currentAsset: this.props.selectedAsset,\n        contentSource: null,\n        enabled: false,\n    };\n\n    private canvasZone: React.RefObject<HTMLDivElement> = React.createRef();\n    private clearConfirm: React.RefObject<Confirm> = React.createRef();\n\n    private template: Rect = new Rect(20, 20);\n\n    public componentDidMount = () => {\n        const sz = document.getElementById(\"editor-zone\") as HTMLDivElement;\n        this.editor = new CanvasTools.Editor(sz);\n        this.editor.autoResize = false;\n        this.editor.onSelectionEnd = this.onSelectionEnd;\n        this.editor.onRegionMoveEnd = this.onRegionMoveEnd;\n        this.editor.onRegionDelete = this.onRegionDelete;\n        this.editor.onRegionSelected = this.onRegionSelected;\n        this.editor.AS.setSelectionMode({ mode: this.props.selectionMode });\n\n        window.addEventListener(\"resize\", this.onWindowResize);\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.onWindowResize);\n    }\n\n    public componentDidUpdate = async (prevProps: Readonly<ICanvasProps>, prevState: Readonly<ICanvasState>) => {\n        // Handles asset changing\n        if (this.props.selectedAsset !== prevProps.selectedAsset) {\n            this.setState({ currentAsset: this.props.selectedAsset });\n        }\n\n        // Handle selection mode changes\n        if (this.props.selectionMode !== prevProps.selectionMode) {\n            const options = (this.props.selectionMode === SelectionMode.COPYRECT) ? this.template : null;\n            this.editor.AS.setSelectionMode({ mode: this.props.selectionMode, template: options });\n        }\n\n        const assetIdChanged = this.state.currentAsset.asset.id !== prevState.currentAsset.asset.id;\n\n        // When the selected asset has changed but is still the same asset id\n        if (!assetIdChanged && this.state.currentAsset !== prevState.currentAsset) {\n            this.refreshCanvasToolsRegions();\n        }\n\n        // When the project tags change re-apply tags to regions\n        if (this.props.project.tags !== prevProps.project.tags) {\n            this.updateCanvasToolsRegionTags();\n        }\n\n        // Handles when the canvas is enabled & disabled\n        if (prevState.enabled !== this.state.enabled) {\n            // When the canvas is ready to display\n            if (this.state.enabled) {\n                this.refreshCanvasToolsRegions();\n                this.setContentSource(this.state.contentSource);\n                this.editor.AS.setSelectionMode(this.props.selectionMode);\n                this.editor.AS.enable();\n\n                if (this.props.onSelectedRegionsChanged) {\n                    this.props.onSelectedRegionsChanged(this.getSelectedRegions());\n                }\n            } else { // When the canvas has been disabled\n                this.editor.AS.disable();\n                this.clearAllRegions();\n                this.editor.AS.setSelectionMode(SelectionMode.NONE);\n            }\n        }\n    }\n\n    public render = () => {\n        const className = this.state.enabled ? \"canvas-enabled\" : \"canvas-disabled\";\n\n        return (\n            <Fragment>\n                <Confirm title={strings.editorPage.canvas.removeAllRegions.title}\n                    ref={this.clearConfirm as any}\n                    message={strings.editorPage.canvas.removeAllRegions.confirmation}\n                    confirmButtonColor=\"danger\"\n                    onConfirm={this.removeAllRegions}\n                />\n                <div id=\"ct-zone\" ref={this.canvasZone} className={className} onClick={(e) => e.stopPropagation()}>\n                    <div id=\"selection-zone\">\n                        <div id=\"editor-zone\" className=\"full-size\" />\n                    </div>\n                </div>\n                {this.renderChildren()}\n            </Fragment>\n        );\n    }\n\n    /**\n     * Toggles tag on all selected regions\n     * @param selectedTag Tag name\n     */\n    public applyTag = (tag: string) => {\n        const selectedRegions = this.getSelectedRegions();\n        const lockedTags = this.props.lockedTags;\n        const lockedTagsEmpty = !lockedTags || !lockedTags.length;\n        const regionsEmpty = !selectedRegions || !selectedRegions.length;\n        if ((!tag && lockedTagsEmpty) || regionsEmpty) {\n            return;\n        }\n        let transformer: (tags: string[], tag: string) => string[];\n        if (lockedTagsEmpty) {\n            // Tag selected while region(s) selected\n            transformer = CanvasHelpers.toggleTag;\n        } else if (lockedTags.find((t) => t === tag)) {\n            // Tag added to locked tags while region(s) selected\n            transformer = CanvasHelpers.addIfMissing;\n        } else {\n            // Tag removed from locked tags while region(s) selected\n            transformer = CanvasHelpers.removeIfContained;\n        }\n        for (const selectedRegion of selectedRegions) {\n            selectedRegion.tags = transformer(selectedRegion.tags, tag);\n        }\n        this.updateRegions(selectedRegions);\n        if (this.props.onSelectedRegionsChanged) {\n            this.props.onSelectedRegionsChanged(selectedRegions);\n        }\n    }\n\n    public copyRegions = async () => {\n        await Clipboard.writeObject(this.getSelectedRegions());\n    }\n\n    public cutRegions = async () => {\n        const selectedRegions = this.getSelectedRegions();\n        await Clipboard.writeObject(selectedRegions);\n        this.deleteRegions(selectedRegions);\n    }\n\n    public pasteRegions = async () => {\n        const regionsToPaste: IRegion[] = await Clipboard.readObject();\n        const asset = this.state.currentAsset;\n        const duplicates = CanvasHelpers.duplicateRegionsAndMove(\n            regionsToPaste,\n            asset.regions,\n            asset.asset.size.width,\n            asset.asset.size.height,\n        );\n        this.addRegions(duplicates);\n    }\n\n    public confirmRemoveAllRegions = () => {\n        this.clearConfirm.current.open();\n    }\n\n    public getSelectedRegions = (): IRegion[] => {\n        const selectedRegions = this.editor.RM.getSelectedRegionsBounds().map((rb) => rb.id);\n        return this.state.currentAsset.regions.filter((r) => selectedRegions.find((id) => r.id === id));\n    }\n\n    public updateCanvasToolsRegionTags = (): void => {\n        for (const region of this.state.currentAsset.regions) {\n            this.editor.RM.updateTagsById(\n                region.id,\n                CanvasHelpers.getTagsDescriptor(this.props.project.tags, region),\n            );\n        }\n    }\n\n    public forceResize = (): void => {\n        this.onWindowResize();\n    }\n\n    private removeAllRegions = () => {\n        const ids = this.state.currentAsset.regions.map((r) => r.id);\n        for (const id of ids) {\n            this.editor.RM.deleteRegionById(id);\n        }\n        this.deleteRegionsFromAsset(this.state.currentAsset.regions);\n    }\n\n    private addRegions = (regions: IRegion[]) => {\n        this.addRegionsToCanvasTools(regions);\n        this.addRegionsToAsset(regions);\n    }\n\n    private addRegionsToAsset = (regions: IRegion[]) => {\n        this.updateAssetRegions(\n            this.state.currentAsset.regions.concat(regions),\n        );\n    }\n\n    private addRegionsToCanvasTools = (regions: IRegion[]) => {\n        for (const region of regions) {\n            const regionData = CanvasHelpers.getRegionData(region);\n            const scaledRegionData = this.editor.scaleRegionToFrameSize(\n                regionData,\n                this.state.currentAsset.asset.size.width,\n                this.state.currentAsset.asset.size.height);\n            this.editor.RM.addRegion(\n                region.id,\n                scaledRegionData,\n                CanvasHelpers.getTagsDescriptor(this.props.project.tags, region),\n            );\n        }\n    }\n\n    private deleteRegions = (regions: IRegion[]) => {\n        this.deleteRegionsFromCanvasTools(regions);\n        this.deleteRegionsFromAsset(regions);\n    }\n\n    private deleteRegionsFromAsset = (regions: IRegion[]) => {\n        const filteredRegions = this.state.currentAsset.regions.filter((assetRegion) => {\n            return !regions.find((r) => r.id === assetRegion.id);\n        });\n        this.updateAssetRegions(filteredRegions);\n    }\n\n    private deleteRegionsFromCanvasTools = (regions: IRegion[]) => {\n        for (const region of regions) {\n            this.editor.RM.deleteRegionById(region.id);\n        }\n    }\n\n    /**\n     * Method that gets called when a new region is drawn\n     * @param {RegionData} regionData the RegionData of created region\n     * @returns {void}\n     */\n    private onSelectionEnd = (regionData: RegionData) => {\n        if (CanvasHelpers.isEmpty(regionData)) {\n            return;\n        }\n        const id = shortid.generate();\n\n        this.editor.RM.addRegion(id, regionData, null);\n\n        this.template = new Rect(regionData.width, regionData.height);\n\n        // RegionData not serializable so need to extract data\n        const scaledRegionData = this.editor.scaleRegionToSourceSize(\n            regionData,\n            this.state.currentAsset.asset.size.width,\n            this.state.currentAsset.asset.size.height,\n        );\n        const lockedTags = this.props.lockedTags;\n        const newRegion = {\n            id,\n            type: this.editorModeToType(this.props.editorMode),\n            tags: lockedTags || [],\n            boundingBox: {\n                height: scaledRegionData.height,\n                width: scaledRegionData.width,\n                left: scaledRegionData.x,\n                top: scaledRegionData.y,\n            },\n            points: scaledRegionData.points,\n        };\n        if (lockedTags && lockedTags.length) {\n            this.editor.RM.updateTagsById(id, CanvasHelpers.getTagsDescriptor(this.props.project.tags, newRegion));\n        }\n        this.updateAssetRegions([...this.state.currentAsset.regions, newRegion]);\n        if (this.props.onSelectedRegionsChanged) {\n            this.props.onSelectedRegionsChanged([newRegion]);\n        }\n    }\n\n    /**\n     * Update regions within the current asset\n     * @param regions\n     * @param selectedRegions\n     */\n    private updateAssetRegions = (regions: IRegion[]) => {\n        const currentAsset: IAssetMetadata = {\n            ...this.state.currentAsset,\n            regions,\n        };\n        this.setState({\n            currentAsset,\n        }, () => {\n            this.props.onAssetMetadataChanged(currentAsset);\n        });\n    }\n\n    /**\n     * Method called when moving a region already in the editor\n     * @param {string} id the id of the region that was moved\n     * @param {RegionData} regionData the RegionData of moved region\n     * @returns {void}\n     */\n    private onRegionMoveEnd = (id: string, regionData: RegionData) => {\n        const currentRegions = this.state.currentAsset.regions;\n        const movedRegionIndex = currentRegions.findIndex((region) => region.id === id);\n        const movedRegion = currentRegions[movedRegionIndex];\n        const scaledRegionData = this.editor.scaleRegionToSourceSize(\n            regionData,\n            this.state.currentAsset.asset.size.width,\n            this.state.currentAsset.asset.size.height,\n        );\n\n        if (movedRegion) {\n            movedRegion.points = scaledRegionData.points;\n            movedRegion.boundingBox = {\n                height: scaledRegionData.height,\n                width: scaledRegionData.width,\n                left: scaledRegionData.x,\n                top: scaledRegionData.y,\n            };\n        }\n\n        currentRegions[movedRegionIndex] = movedRegion;\n        this.updateAssetRegions(currentRegions);\n    }\n\n    /**\n     * Method called when deleting a region from the editor\n     * @param {string} id the id of the deleted region\n     * @returns {void}\n     */\n    private onRegionDelete = (id: string) => {\n        // Remove from Canvas Tools\n        this.editor.RM.deleteRegionById(id);\n\n        // Remove from project\n        const currentRegions = this.state.currentAsset.regions;\n        const deletedRegionIndex = currentRegions.findIndex((region) => region.id === id);\n        currentRegions.splice(deletedRegionIndex, 1);\n\n        this.updateAssetRegions(currentRegions);\n        if (this.props.onSelectedRegionsChanged) {\n            this.props.onSelectedRegionsChanged([]);\n        }\n    }\n\n    /**\n     * Method called when deleting a region from the editor\n     * @param {string} id the id of the selected region\n     * @param {boolean} multiSelect boolean whether region was selected with multi selection\n     * @returns {void}\n     */\n    private onRegionSelected = (id: string, multiSelect: boolean) => {\n        const selectedRegions = this.getSelectedRegions();\n        if (this.props.onSelectedRegionsChanged) {\n            this.props.onSelectedRegionsChanged(selectedRegions);\n        }\n        // Gets the scaled region data\n        const selectedRegionsData = this.editor.RM.getSelectedRegionsBounds().find((region) => region.id === id);\n\n        if (selectedRegionsData) {\n            this.template = new Rect(selectedRegionsData.width, selectedRegionsData.height);\n        }\n\n        if (this.props.lockedTags && this.props.lockedTags.length) {\n            for (const selectedRegion of selectedRegions) {\n                selectedRegion.tags = CanvasHelpers.addAllIfMissing(selectedRegion.tags, this.props.lockedTags);\n            }\n            this.updateRegions(selectedRegions);\n        }\n    }\n\n    private renderChildren = () => {\n        return React.cloneElement(this.props.children, {\n            onAssetChanged: this.onAssetChanged,\n            onLoaded: this.onAssetLoaded,\n            onError: this.onAssetError,\n            onActivated: this.onAssetActivated,\n            onDeactivated: this.onAssetDeactivated,\n        });\n    }\n\n    /**\n     * Raised when the asset bound to the asset preview has changed\n     */\n    private onAssetChanged = () => {\n        this.setState({ enabled: false });\n    }\n\n    /**\n     * Raised when the underlying asset has completed loading\n     */\n    private onAssetLoaded = (contentSource: ContentSource) => {\n        this.setState({ contentSource });\n        this.positionCanvas(contentSource);\n    }\n\n    private onAssetError = () => {\n        this.setState({\n            enabled: false,\n        });\n    }\n\n    /**\n     * Raised when the asset is taking control over the rendering\n     */\n    private onAssetActivated = () => {\n        this.setState({ enabled: false });\n    }\n\n    /**\n     * Raise when the asset is handing off control of rendering\n     */\n    private onAssetDeactivated = (contentSource: ContentSource) => {\n        this.setState({\n            contentSource,\n            enabled: true,\n        });\n    }\n\n    /**\n     * Set the loaded asset content source into the canvas tools canvas\n     */\n    private setContentSource = async (contentSource: ContentSource) => {\n        try {\n            await this.editor.addContentSource(contentSource as any);\n\n            if (this.props.onCanvasRendered) {\n                const canvas = this.canvasZone.current.querySelector(\"canvas\");\n                this.props.onCanvasRendered(canvas);\n            }\n        } catch (e) {\n            console.warn(e);\n        }\n    }\n\n    /**\n     * Positions the canvas tools drawing surface to be exactly over the asset content\n     */\n    private positionCanvas = (contentSource: ContentSource) => {\n        if (!contentSource) {\n            return;\n        }\n\n        const canvas = this.canvasZone.current;\n        if (canvas) {\n            const boundingBox = createContentBoundingBox(contentSource);\n            canvas.style.top = `${boundingBox.top}px`;\n            canvas.style.left = `${boundingBox.left}px`;\n            canvas.style.width = `${boundingBox.width}px`;\n            canvas.style.height = `${boundingBox.height}px`;\n            this.editor.resize(boundingBox.width, boundingBox.height);\n        }\n    }\n\n    /**\n     * Resizes and re-renders the canvas when the application window size changes\n     */\n    private onWindowResize = async () => {\n        if (!this.state.contentSource) {\n            return;\n        }\n\n        this.positionCanvas(this.state.contentSource);\n    }\n\n    /**\n     * Updates regions in both Canvas Tools and the asset data store\n     * @param updates Regions to be updated\n     * @param updatedSelectedRegions Selected regions with any changes already applied\n     */\n    private updateRegions = (updates: IRegion[]) => {\n        const updatedRegions = CanvasHelpers.updateRegions(this.state.currentAsset.regions, updates);\n        for (const update of updates) {\n            this.editor.RM.updateTagsById(update.id, CanvasHelpers.getTagsDescriptor(this.props.project.tags, update));\n        }\n        this.updateAssetRegions(updatedRegions);\n        this.updateCanvasToolsRegionTags();\n    }\n\n    /**\n     * Updates the background of the canvas and draws the asset's regions\n     */\n    private clearAllRegions = () => {\n        this.editor.RM.deleteAllRegions();\n    }\n\n    private refreshCanvasToolsRegions = () => {\n        this.clearAllRegions();\n\n        if (!this.state.currentAsset.regions || this.state.currentAsset.regions.length === 0) {\n            return;\n        }\n\n        // Add regions to the canvas\n        this.state.currentAsset.regions.forEach((region: IRegion) => {\n            const loadedRegionData = CanvasHelpers.getRegionData(region);\n            this.editor.RM.addRegion(\n                region.id,\n                this.editor.scaleRegionToFrameSize(\n                    loadedRegionData,\n                    this.state.currentAsset.asset.size.width,\n                    this.state.currentAsset.asset.size.height,\n                ),\n                CanvasHelpers.getTagsDescriptor(this.props.project.tags, region));\n        });\n    }\n\n    private editorModeToType = (editorMode: EditorMode) => {\n        let type;\n        switch (editorMode) {\n            case EditorMode.CopyRect:\n            case EditorMode.Rectangle:\n                type = RegionType.Rectangle;\n                break;\n            case EditorMode.Polygon:\n                type = RegionType.Polygon;\n                break;\n            case EditorMode.Point:\n                type = RegionType.Point;\n                break;\n            case EditorMode.Polyline:\n                type = RegionType.Polyline;\n                break;\n            default:\n                break;\n        }\n        return type;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ModelPathType, AssetState } from \"../models/applicationState\";\nimport { ObjectDetection } from \"../providers/activeLearning/objectDetection\";\nimport Guard from \"../common/guard\";\nimport { isElectron } from \"../common/hostProcess\";\nimport { Env } from \"../common/environment\";\nexport var ActiveLearningService =\n/*#__PURE__*/\nfunction () {\n  function ActiveLearningService(settings) {\n    _classCallCheck(this, ActiveLearningService);\n\n    this.settings = settings;\n    this.modelLoaded = false;\n\n    this.getAppPath = function () {\n      var remote = window.require(\"electron\").remote;\n\n      return remote.app.getAppPath();\n    };\n\n    Guard.null(settings);\n    this.objectDetection = new ObjectDetection();\n  }\n\n  _createClass(ActiveLearningService, [{\n    key: \"isModelLoaded\",\n    value: function isModelLoaded() {\n      return this.modelLoaded;\n    }\n  }, {\n    key: \"predictRegions\",\n    value: function () {\n      var _predictRegions = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(canvas, assetMetadata) {\n        var xRatio, yRatio, predictedRegions, updatedRegions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Guard.null(canvas);\n                Guard.null(assetMetadata); // If the canvas or asset are invalid return asset metadata\n\n                if (canvas.width && canvas.height && assetMetadata.asset && assetMetadata.asset.size) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", assetMetadata);\n\n              case 4:\n                _context.next = 6;\n                return this.ensureModelLoaded();\n\n              case 6:\n                xRatio = assetMetadata.asset.size.width / canvas.width;\n                yRatio = assetMetadata.asset.size.height / canvas.height;\n                _context.next = 10;\n                return this.objectDetection.predictImage(canvas, this.settings.predictTag, xRatio, yRatio);\n\n              case 10:\n                predictedRegions = _context.sent;\n                updatedRegions = _toConsumableArray(assetMetadata.regions);\n                predictedRegions.forEach(function (prediction) {\n                  var matchingRegion = updatedRegions.find(function (region) {\n                    return region.boundingBox && region.boundingBox.left === prediction.boundingBox.left && region.boundingBox.top === prediction.boundingBox.top && region.boundingBox.width === prediction.boundingBox.width && region.boundingBox.height === prediction.boundingBox.height;\n                  });\n\n                  if (updatedRegions.length === 0 || !matchingRegion) {\n                    updatedRegions.push(prediction);\n                  }\n                });\n                return _context.abrupt(\"return\", _objectSpread({}, assetMetadata, {\n                  regions: updatedRegions,\n                  asset: _objectSpread({}, assetMetadata.asset, {\n                    state: updatedRegions.length > 0 ? AssetState.Tagged : AssetState.Visited,\n                    predicted: true\n                  })\n                }));\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function predictRegions(_x, _x2) {\n        return _predictRegions.apply(this, arguments);\n      }\n\n      return predictRegions;\n    }()\n  }, {\n    key: \"ensureModelLoaded\",\n    value: function () {\n      var _ensureModelLoaded = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.modelLoaded) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", Promise.resolve());\n\n              case 2:\n                _context2.next = 4;\n                return this.loadModel();\n\n              case 4:\n                this.modelLoaded = true;\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function ensureModelLoaded() {\n        return _ensureModelLoaded.apply(this, arguments);\n      }\n\n      return ensureModelLoaded;\n    }()\n  }, {\n    key: \"loadModel\",\n    value: function () {\n      var _loadModel = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var modelPath, appPath;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                modelPath = \"\";\n\n                if (this.settings.modelPathType === ModelPathType.Coco) {\n                  if (isElectron()) {\n                    appPath = this.getAppPath();\n\n                    if (Env.get() !== \"production\") {\n                      modelPath = appPath + \"/cocoSSDModel\";\n                    } else {\n                      modelPath = appPath + \"/../../cocoSSDModel\";\n                    }\n                  } else {\n                    modelPath = \"https://vott.blob.core.windows.net/coco-ssd-model\";\n                  }\n                } else if (this.settings.modelPathType === ModelPathType.File) {\n                  if (isElectron()) {\n                    modelPath = this.settings.modelPath;\n                  }\n                } else {\n                  modelPath = this.settings.modelUrl;\n                }\n\n                _context3.next = 4;\n                return this.objectDetection.load(modelPath);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadModel() {\n        return _loadModel.apply(this, arguments);\n      }\n\n      return loadModel;\n    }()\n  }]);\n\n  return ActiveLearningService;\n}();","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/services/activeLearningService.ts"],"names":["ModelPathType","AssetState","ObjectDetection","Guard","isElectron","Env","ActiveLearningService","settings","modelLoaded","getAppPath","remote","window","require","app","null","objectDetection","canvas","assetMetadata","width","height","asset","size","ensureModelLoaded","xRatio","yRatio","predictImage","predictTag","predictedRegions","updatedRegions","regions","forEach","prediction","matchingRegion","find","region","boundingBox","left","top","length","push","state","Tagged","Visited","predicted","Promise","resolve","loadModel","modelPath","modelPathType","Coco","appPath","get","File","modelUrl","load"],"mappings":"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","sourcesContent":["import { IAssetMetadata, ModelPathType, IActiveLearningSettings, AssetState } from \"../models/applicationState\";\nimport { ObjectDetection } from \"../providers/activeLearning/objectDetection\";\nimport Guard from \"../common/guard\";\nimport { isElectron } from \"../common/hostProcess\";\nimport { Env } from \"../common/environment\";\n\nexport class ActiveLearningService {\n    private objectDetection: ObjectDetection;\n    private modelLoaded: boolean = false;\n\n    constructor(private settings: IActiveLearningSettings) {\n        Guard.null(settings);\n        this.objectDetection = new ObjectDetection();\n    }\n\n    public isModelLoaded() {\n        return this.modelLoaded;\n    }\n\n    public async predictRegions(canvas: HTMLCanvasElement, assetMetadata: IAssetMetadata): Promise<IAssetMetadata> {\n        Guard.null(canvas);\n        Guard.null(assetMetadata);\n\n        // If the canvas or asset are invalid return asset metadata\n        if (!(canvas.width && canvas.height && assetMetadata.asset && assetMetadata.asset.size)) {\n            return assetMetadata;\n        }\n\n        await this.ensureModelLoaded();\n\n        const xRatio = assetMetadata.asset.size.width / canvas.width;\n        const yRatio = assetMetadata.asset.size.height / canvas.height;\n        const predictedRegions = await this.objectDetection.predictImage(\n            canvas,\n            this.settings.predictTag,\n            xRatio,\n            yRatio,\n        );\n\n        const updatedRegions = [...assetMetadata.regions];\n        predictedRegions.forEach((prediction) => {\n            const matchingRegion = updatedRegions.find((region) => {\n                return region.boundingBox\n                    && region.boundingBox.left === prediction.boundingBox.left\n                    && region.boundingBox.top === prediction.boundingBox.top\n                    && region.boundingBox.width === prediction.boundingBox.width\n                    && region.boundingBox.height === prediction.boundingBox.height;\n            });\n\n            if (updatedRegions.length === 0 || !matchingRegion) {\n                updatedRegions.push(prediction);\n            }\n        });\n\n        return {\n            ...assetMetadata,\n            regions: updatedRegions,\n            asset: {\n                ...assetMetadata.asset,\n                state: updatedRegions.length > 0 ? AssetState.Tagged : AssetState.Visited,\n                predicted: true,\n            },\n        } as IAssetMetadata;\n    }\n\n    public async ensureModelLoaded(): Promise<void> {\n        if (this.modelLoaded) {\n            return Promise.resolve();\n        }\n\n        await this.loadModel();\n        this.modelLoaded = true;\n    }\n\n    private async loadModel() {\n        let modelPath = \"\";\n        if (this.settings.modelPathType === ModelPathType.Coco) {\n            if (isElectron()) {\n                const appPath = this.getAppPath();\n\n                if (Env.get() !== \"production\") {\n                    modelPath = appPath + \"/cocoSSDModel\";\n                } else {\n                    modelPath = appPath + \"/../../cocoSSDModel\";\n                }\n            } else {\n                modelPath = \"https://vott.blob.core.windows.net/coco-ssd-model\";\n            }\n        } else if (this.settings.modelPathType === ModelPathType.File) {\n            if (isElectron()) {\n                modelPath = this.settings.modelPath;\n            }\n        } else {\n            modelPath = this.settings.modelUrl;\n        }\n\n        await this.objectDetection.load(modelPath);\n    }\n\n    private getAppPath = () => {\n        const remote = (window as any).require(\"electron\").remote as Electron.Remote;\n        return remote.app.getAppPath();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
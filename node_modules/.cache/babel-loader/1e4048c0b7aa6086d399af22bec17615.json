{"ast":null,"code":"import _toConsumableArray from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/pages/export/exportForm.tsx\";\nimport React from \"react\";\nimport Form from \"react-jsonschema-form\";\nimport { getDefaultFormState } from \"react-jsonschema-form/lib/utils\";\nimport { addLocValues, strings } from \"../../../../common/strings\";\nimport { ExportProviderFactory } from \"../../../../providers/export/exportProviderFactory\";\nimport ExportProviderPicker from \"../../common/exportProviderPicker/exportProviderPicker\";\nimport CustomFieldTemplate from \"../../common/customField/customFieldTemplate\";\nimport ExternalPicker from \"../../common/externalPicker/externalPicker\";\nimport { ProtectedInput } from \"../../common/protectedInput/protectedInput\";\nimport Checkbox from \"rc-checkbox\";\nimport \"rc-checkbox/assets/index.css\";\nimport { CustomWidget } from \"../../common/customField/customField\";\nimport { Slider } from \"../../common/slider/slider\"; // tslint:disable-next-line:no-var-requires\n\nvar formSchema = addLocValues(require(\"./exportForm.json\")); // tslint:disable-next-line:no-var-requires\n\nvar uiSchema = addLocValues(require(\"./exportForm.ui.json\"));\n/**\n * Properties for Export Form\n * @member settings - Current settings for Export\n * @member onSubmit - Function to call on form submission\n * @member onCancel - Function to call on form cancellation\n */\n\n/**\n * @name - Export Form\n * @description - Form to view/edit settings for exporting of project\n */\nvar ExportForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ExportForm, _React$Component);\n\n  function ExportForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ExportForm);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ExportForm)).call.apply(_getPrototypeOf2, [this].concat(_args)));\n    _this.state = {\n      classNames: [\"needs-validation\"],\n      providerName: _this.props.settings ? _this.props.settings.providerType : null,\n      formSchema: _objectSpread({}, formSchema),\n      uiSchema: _objectSpread({}, uiSchema),\n      formData: _this.props.settings\n    };\n    _this.widgets = {\n      externalPicker: ExternalPicker,\n      exportProviderPicker: ExportProviderPicker,\n      protectedInput: ProtectedInput,\n      slider: Slider,\n      checkbox: CustomWidget(Checkbox, function (props) {\n        return {\n          checked: props.value,\n          onChange: function onChange(value) {\n            return props.onChange(value.target.checked);\n          },\n          disabled: props.disabled\n        };\n      })\n    };\n\n    _this.onFormChange = function (args) {\n      var providerType = args.formData.providerType;\n\n      if (providerType !== _this.state.providerName) {\n        _this.bindForm(args.formData, true);\n      } else {\n        _this.bindForm(args.formData, false);\n      }\n    };\n\n    _this.onFormValidate = function (exportFormat, errors) {\n      if (_this.state.classNames.indexOf(\"was-validated\") === -1) {\n        _this.setState({\n          classNames: [].concat(_toConsumableArray(_this.state.classNames), [\"was-validated\"])\n        });\n      }\n\n      return errors;\n    };\n\n    _this.onFormSubmit = function (args) {\n      _this.props.onSubmit(args.formData);\n    };\n\n    _this.onFormCancel = function () {\n      if (_this.props.onCancel) {\n        _this.props.onCancel();\n      }\n    };\n\n    _this.bindForm = function (exportFormat) {\n      var resetProviderOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // If no provider type was specified on bind, pick the default provider\n      var providerType = exportFormat && exportFormat.providerType ? exportFormat.providerType : ExportProviderFactory.defaultProvider.name;\n      var newFormSchema = _this.state.formSchema;\n      var newUiSchema = _this.state.uiSchema;\n\n      if (providerType) {\n        var providerSchema = addLocValues(require(\"../../../../providers/export/\".concat(providerType, \".json\")));\n\n        var providerUiSchema = require(\"../../../../providers/export/\".concat(providerType, \".ui.json\"));\n\n        newFormSchema = _objectSpread({}, formSchema);\n        newFormSchema.properties[\"providerOptions\"] = providerSchema;\n        newUiSchema = _objectSpread({}, uiSchema);\n        newUiSchema[\"providerOptions\"] = providerUiSchema;\n      }\n\n      var formData = _objectSpread({}, exportFormat);\n\n      var providerOptions = resetProviderOptions ? {} : exportFormat.providerOptions;\n      var providerDefaults = getDefaultFormState(newFormSchema.properties.providerOptions, providerOptions);\n      formData.providerType = providerType;\n      formData.providerOptions = providerDefaults;\n\n      _this.setState({\n        providerName: providerType,\n        formSchema: newFormSchema,\n        uiSchema: newUiSchema,\n        formData: formData\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ExportForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.settings) {\n        this.bindForm(this.props.settings);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.settings !== this.props.settings) {\n        this.bindForm(this.props.settings);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Form, {\n        className: this.state.classNames.join(\" \"),\n        showErrorList: false,\n        liveValidate: true,\n        noHtml5Validate: true,\n        FieldTemplate: CustomFieldTemplate,\n        validate: this.onFormValidate,\n        widgets: this.widgets,\n        formContext: this.state.formData,\n        schema: this.state.formSchema,\n        uiSchema: this.state.uiSchema,\n        formData: this.state.formData,\n        onChange: this.onFormChange,\n        onSubmit: this.onFormSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-success mr-1\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, strings.export.saveSettings), React.createElement(\"button\", {\n        className: \"btn btn-secondary btn-cancel\",\n        type: \"button\",\n        onClick: this.onFormCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, strings.common.cancel)));\n    }\n  }]);\n\n  return ExportForm;\n}(React.Component);\n\nexport { ExportForm as default };","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/pages/export/exportForm.tsx"],"names":["React","Form","getDefaultFormState","addLocValues","strings","ExportProviderFactory","ExportProviderPicker","CustomFieldTemplate","ExternalPicker","ProtectedInput","Checkbox","CustomWidget","Slider","formSchema","require","uiSchema","ExportForm","state","classNames","providerName","props","settings","providerType","formData","widgets","externalPicker","exportProviderPicker","protectedInput","slider","checkbox","checked","value","onChange","target","disabled","onFormChange","args","bindForm","onFormValidate","exportFormat","errors","indexOf","setState","onFormSubmit","onSubmit","onFormCancel","onCancel","resetProviderOptions","defaultProvider","name","newFormSchema","newUiSchema","providerSchema","providerUiSchema","properties","providerOptions","providerDefaults","prevProps","join","export","saveSettings","common","cancel","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport Form, { Widget, FormValidation, IChangeEvent, ISubmitEvent } from \"react-jsonschema-form\";\nimport { getDefaultFormState } from \"react-jsonschema-form/lib/utils\";\nimport { addLocValues, strings } from \"../../../../common/strings\";\nimport { IExportFormat, IExportProviderOptions } from \"../../../../models/applicationState\";\nimport { ExportProviderFactory } from \"../../../../providers/export/exportProviderFactory\";\nimport ExportProviderPicker from \"../../common/exportProviderPicker/exportProviderPicker\";\nimport CustomFieldTemplate from \"../../common/customField/customFieldTemplate\";\nimport ExternalPicker from \"../../common/externalPicker/externalPicker\";\nimport { ProtectedInput } from \"../../common/protectedInput/protectedInput\";\nimport Checkbox from \"rc-checkbox\";\nimport \"rc-checkbox/assets/index.css\";\nimport { CustomWidget } from \"../../common/customField/customField\";\nimport { Slider } from \"../../common/slider/slider\";\n\n// tslint:disable-next-line:no-var-requires\nconst formSchema = addLocValues(require(\"./exportForm.json\"));\n// tslint:disable-next-line:no-var-requires\nconst uiSchema = addLocValues(require(\"./exportForm.ui.json\"));\n\n/**\n * Properties for Export Form\n * @member settings - Current settings for Export\n * @member onSubmit - Function to call on form submission\n * @member onCancel - Function to call on form cancellation\n */\nexport interface IExportFormProps extends React.Props<ExportForm> {\n    settings: IExportFormat;\n    onSubmit: (exportFormat: IExportFormat) => void;\n    onCancel?: () => void;\n}\n\n/**\n * State for Export Form\n * @member classNames - Class names for HTML form component\n * @member providerName - Name of export provider\n * @member formSchema - JSON Form Schema for export form\n * @member uiSchema - JSON Form UI Schema for export form\n * @member formData - Current state of form data as Export Format\n */\nexport interface IExportFormState {\n    classNames: string[];\n    providerName: string;\n    formSchema: any;\n    uiSchema: any;\n    formData: IExportFormat;\n}\n\n/**\n * @name - Export Form\n * @description - Form to view/edit settings for exporting of project\n */\nexport default class ExportForm extends React.Component<IExportFormProps, IExportFormState> {\n    public state: IExportFormState = {\n        classNames: [\"needs-validation\"],\n        providerName: this.props.settings ? this.props.settings.providerType : null,\n        formSchema: { ...formSchema },\n        uiSchema: { ...uiSchema },\n        formData: this.props.settings,\n    };\n\n    private widgets = {\n        externalPicker: (ExternalPicker as any) as Widget,\n        exportProviderPicker: (ExportProviderPicker as any) as Widget,\n        protectedInput: (ProtectedInput as any) as Widget,\n        slider: (Slider as any) as Widget,\n        checkbox: CustomWidget(Checkbox, (props) => ({\n            checked: props.value,\n            onChange: (value) => props.onChange(value.target.checked),\n            disabled: props.disabled,\n        })),\n    };\n\n    public componentDidMount() {\n        if (this.props.settings) {\n            this.bindForm(this.props.settings);\n        }\n    }\n\n    public componentDidUpdate(prevProps: IExportFormProps) {\n        if (prevProps.settings !== this.props.settings) {\n            this.bindForm(this.props.settings);\n        }\n    }\n\n    public render() {\n        return (\n            <Form\n                className={this.state.classNames.join(\" \")}\n                showErrorList={false}\n                liveValidate={true}\n                noHtml5Validate={true}\n                FieldTemplate={CustomFieldTemplate}\n                validate={this.onFormValidate}\n                widgets={this.widgets}\n                formContext={this.state.formData}\n                schema={this.state.formSchema}\n                uiSchema={this.state.uiSchema}\n                formData={this.state.formData}\n                onChange={this.onFormChange}\n                onSubmit={this.onFormSubmit}>\n                <div>\n                    <button className=\"btn btn-success mr-1\" type=\"submit\">{strings.export.saveSettings}</button>\n                    <button className=\"btn btn-secondary btn-cancel\"\n                        type=\"button\"\n                        onClick={this.onFormCancel}>{strings.common.cancel}</button>\n                </div>\n            </Form>\n        );\n    }\n\n    private onFormChange = (args: IChangeEvent<IExportFormat>) => {\n        const providerType = args.formData.providerType;\n\n        if (providerType !== this.state.providerName) {\n            this.bindForm(args.formData, true);\n        } else {\n            this.bindForm(args.formData, false);\n        }\n    }\n\n    private onFormValidate = (exportFormat: IExportFormat, errors: FormValidation): FormValidation => {\n        if (this.state.classNames.indexOf(\"was-validated\") === -1) {\n            this.setState({\n                classNames: [...this.state.classNames, \"was-validated\"],\n            });\n        }\n\n        return errors;\n    }\n\n    private onFormSubmit = (args: ISubmitEvent<IExportFormat>): void => {\n        this.props.onSubmit(args.formData);\n    }\n\n    private onFormCancel = (): void => {\n        if (this.props.onCancel) {\n            this.props.onCancel();\n        }\n    }\n\n    private bindForm = (exportFormat: IExportFormat, resetProviderOptions: boolean = false): void => {\n        // If no provider type was specified on bind, pick the default provider\n        const providerType = (exportFormat && exportFormat.providerType)\n            ? exportFormat.providerType\n            : ExportProviderFactory.defaultProvider.name;\n\n        let newFormSchema: any = this.state.formSchema;\n        let newUiSchema: any = this.state.uiSchema;\n\n        if (providerType) {\n            const providerSchema = addLocValues(require(`../../../../providers/export/${providerType}.json`));\n            const providerUiSchema = require(`../../../../providers/export/${providerType}.ui.json`);\n\n            newFormSchema = { ...formSchema };\n            newFormSchema.properties[\"providerOptions\"] = providerSchema;\n\n            newUiSchema = { ...uiSchema };\n            newUiSchema[\"providerOptions\"] = providerUiSchema;\n        }\n\n        const formData = { ...exportFormat };\n        const providerOptions = resetProviderOptions ? {} : exportFormat.providerOptions;\n        const providerDefaults = getDefaultFormState(newFormSchema.properties.providerOptions, providerOptions);\n\n        formData.providerType = providerType;\n        formData.providerOptions = providerDefaults as IExportProviderOptions;\n\n        this.setState({\n            providerName: providerType,\n            formSchema: newFormSchema,\n            uiSchema: newUiSchema,\n            formData,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
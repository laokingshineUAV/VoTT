{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Guard from \"../../../../common/guard\";\nimport { AppError, ErrorCode } from \"../../../../models/applicationState\";\n/**\n * A map of keyboard event registrations\n */\n\n/**\n * Managers keyboard event registrations\n */\nexport var KeyboardRegistrationManager =\n/*#__PURE__*/\nfunction () {\n  function KeyboardRegistrationManager() {\n    var _this = this;\n\n    _classCallCheck(this, KeyboardRegistrationManager);\n\n    this.registrations = {};\n\n    this.registerBinding = function (binding) {\n      var keyEventType = binding.keyEventType,\n          accelerators = binding.accelerators,\n          handler = binding.handler,\n          displayName = binding.displayName;\n      Guard.null(keyEventType);\n      Guard.expression(accelerators, function (keyCodes) {\n        return keyCodes.length > 0;\n      });\n      Guard.null(handler);\n      var eventTypeRegistrations = _this.registrations[keyEventType];\n\n      if (!eventTypeRegistrations) {\n        eventTypeRegistrations = {};\n        _this.registrations[keyEventType] = eventTypeRegistrations;\n      }\n\n      accelerators.forEach(function (keyCode) {\n        var currentBinding = _this.registrations[keyEventType][keyCode];\n\n        if (currentBinding) {\n          var error = \"Key code \".concat(keyCode, \" on key event \\\"\").concat(keyEventType, \"\\\" \");\n          error += \"already has binding registered: \\\"\".concat(currentBinding.displayName, \".\\\" \");\n          error += \"Cannot register binding \\\"\".concat(displayName, \"\\\" with the same key code and key event type\");\n          throw new AppError(ErrorCode.OverloadedKeyBinding, error);\n        }\n\n        _this.registrations[keyEventType][keyCode] = binding;\n      });\n      return function () {\n        binding.accelerators.forEach(function (keyCode) {\n          delete _this.registrations[binding.keyEventType][keyCode];\n        });\n      };\n    };\n\n    this.getRegistrations = function () {\n      return _this.registrations;\n    };\n  }\n\n  _createClass(KeyboardRegistrationManager, [{\n    key: \"getHandler\",\n\n    /**\n     * Gets a list of registered event handlers for the specified key code\n     * @param keyEventType Type of key event (keydown, keyup, keypress)\n     * @param keyCode The key code combination, ex) CmdOrCtrl+1\n     */\n    value: function getHandler(keyEventType, keyCode) {\n      Guard.null(keyEventType);\n      Guard.null(keyCode);\n      var keyEventTypeRegs = this.registrations[keyEventType];\n      return keyEventTypeRegs && keyEventTypeRegs[keyCode] ? keyEventTypeRegs[keyCode].handler : null;\n    }\n    /**\n     * Invokes all registered event handlers for the specified key code\\\n     * @param keyEventType Type of key event (keydown, keyup, keypress)\n     * @param keyCode The key code combination, ex) CmdOrCtrl+1\n     * @param evt The keyboard event that was raised\n     */\n\n  }, {\n    key: \"invokeHandler\",\n    value: function invokeHandler(keyEventType, keyCode, evt) {\n      Guard.null(keyCode);\n      Guard.null(evt);\n      var handler = this.getHandler(keyEventType, keyCode);\n\n      if (handler !== null) {\n        handler(evt);\n      }\n    }\n  }]);\n\n  return KeyboardRegistrationManager;\n}();","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/common/keyboardManager/keyboardRegistrationManager.ts"],"names":["Guard","AppError","ErrorCode","KeyboardRegistrationManager","registrations","registerBinding","binding","keyEventType","accelerators","handler","displayName","null","expression","keyCodes","length","eventTypeRegistrations","forEach","keyCode","currentBinding","error","OverloadedKeyBinding","getRegistrations","keyEventTypeRegs","evt","getHandler"],"mappings":"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","sourcesContent":["import Guard from \"../../../../common/guard\";\nimport { KeyboardManager, KeyEventType } from \"./keyboardManager\";\nimport { IKeyboardBindingProps } from \"../keyboardBinding/keyboardBinding\";\nimport { AppError, ErrorCode } from \"../../../../models/applicationState\";\n\n/**\n * A map of keyboard event registrations\n */\nexport interface IKeyboardRegistrations {\n    [keyEventType: string]: {\n        [key: string]: IKeyboardBindingProps,\n    };\n}\n\n/**\n * An event handler that responds to keyboard events\n */\nexport type KeyboardEventHandler = (evt?: KeyboardEvent) => void;\n\n/**\n * Managers keyboard event registrations\n */\nexport class KeyboardRegistrationManager {\n    private registrations: IKeyboardRegistrations = {};\n\n    /**\n     * Registers a keyboard binding and returns a function to deregister that binding\n     * @param binding Properties for keyboard binding (type of key event, keyCodes, handler, etc.)\n     * @returns a function for deregistering the keyboard binding\n     */\n    public registerBinding = (binding: IKeyboardBindingProps) => {\n        const {keyEventType, accelerators, handler, displayName} = binding;\n        Guard.null(keyEventType);\n        Guard.expression(accelerators, (keyCodes) => keyCodes.length > 0);\n        Guard.null(handler);\n\n        let eventTypeRegistrations = this.registrations[keyEventType];\n        if (!eventTypeRegistrations) {\n            eventTypeRegistrations = {};\n            this.registrations[keyEventType] = eventTypeRegistrations;\n        }\n\n        accelerators.forEach((keyCode) => {\n            const currentBinding = this.registrations[keyEventType][keyCode];\n            if (currentBinding) {\n                let error = `Key code ${keyCode} on key event \"${keyEventType}\" `;\n                error += `already has binding registered: \"${currentBinding.displayName}.\" `;\n                error += `Cannot register binding \"${displayName}\" with the same key code and key event type`;\n                throw new AppError(ErrorCode.OverloadedKeyBinding, error);\n            }\n            this.registrations[keyEventType][keyCode] = binding;\n        });\n\n        return () => {\n            binding.accelerators.forEach((keyCode) => {\n                delete this.registrations[binding.keyEventType][keyCode];\n            });\n        };\n    }\n\n    /**\n     * Gets a list of registered event handlers for the specified key code\n     * @param keyEventType Type of key event (keydown, keyup, keypress)\n     * @param keyCode The key code combination, ex) CmdOrCtrl+1\n     */\n    public getHandler(keyEventType: KeyEventType, keyCode: string): (evt?: KeyboardEvent) => void {\n        Guard.null(keyEventType);\n        Guard.null(keyCode);\n\n        const keyEventTypeRegs = this.registrations[keyEventType];\n        return (keyEventTypeRegs && keyEventTypeRegs[keyCode])\n            ?\n            keyEventTypeRegs[keyCode].handler\n            :\n            null;\n    }\n\n    /**\n     * Invokes all registered event handlers for the specified key code\\\n     * @param keyEventType Type of key event (keydown, keyup, keypress)\n     * @param keyCode The key code combination, ex) CmdOrCtrl+1\n     * @param evt The keyboard event that was raised\n     */\n    public invokeHandler(keyEventType: KeyEventType, keyCode: string, evt: KeyboardEvent) {\n        Guard.null(keyCode);\n        Guard.null(evt);\n\n        const handler = this.getHandler(keyEventType, keyCode);\n        if (handler !== null) {\n            handler(evt);\n        }\n    }\n\n    public getRegistrations = () => {\n        return this.registrations;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
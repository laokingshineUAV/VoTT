{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar HSLColor_1 = require(\"./HSLColor\");\n\nvar RGBColor_1 = require(\"./RGBColor\");\n/**\r\n * Represents the sRGB color space.\r\n */\n\n\nvar SRGBColor =\n/*#__PURE__*/\nfunction () {\n  _createClass(SRGBColor, [{\n    key: \"r\",\n\n    /**\r\n     * The red-component of the color.\r\n     */\n    get: function get() {\n      return this.values[0];\n    }\n    /**\r\n     * The green-component of the color.\r\n     */\n\n  }, {\n    key: \"g\",\n    get: function get() {\n      return this.values[1];\n    }\n    /**\r\n     * The blue-component of the color.\r\n     */\n\n  }, {\n    key: \"b\",\n    get: function get() {\n      return this.values[2];\n    }\n    /**\r\n     * Creates new RGBColor\r\n     * @param r - Red component in the range [0, 1].\r\n     * @param g - Green component in the range [0, 1].\r\n     * @param b - Blue component in the range [0, 1].\r\n     */\n\n  }], [{\n    key: \"ParseHex\",\n\n    /**\r\n     * Parses the hex-string representation of the RGB color.\r\n     * @param hex - Color string in the format \"#RGB\" (#RGBA) or \"#RRGGBB\" (#RRGGBBAA).\r\n     * @remarks Alpha value (if present) is ignored.\r\n     */\n    value: function ParseHex(hex) {\n      var isValidColor = /#([a-f0-9]{3,4}){1,2}\\b/i.test(hex);\n\n      if (!isValidColor) {\n        throw new Error(\"Invalid CSS RGB color: \".concat(hex));\n      }\n\n      var r;\n      var g;\n      var b;\n\n      if (hex.length === 7 || hex.length === 9) {\n        r = parseInt(hex.substring(1, 3), 16) / 255;\n        g = parseInt(hex.substring(3, 5), 16) / 255;\n        b = parseInt(hex.substring(5, 7), 16) / 255;\n      } else if (hex.length === 4 || hex.length === 5) {\n        r = parseInt(hex.charAt(1), 16) / 16;\n        g = parseInt(hex.charAt(2), 16) / 16;\n        b = parseInt(hex.charAt(3), 16) / 16;\n      }\n\n      return new SRGBColor(r, g, b);\n    }\n  }]);\n\n  function SRGBColor(r, g, b) {\n    _classCallCheck(this, SRGBColor);\n\n    this.values = [r, g, b];\n  }\n  /**\r\n   * Checks if the color values are in the range [0, 1].\r\n   */\n\n\n  _createClass(SRGBColor, [{\n    key: \"isValidColor\",\n    value: function isValidColor() {\n      return this.r >= 0 && this.r <= 1 && this.g >= 0 && this.g <= 1 && this.b >= 0 && this.b <= 1;\n    }\n    /**\r\n     * Truncates the color values to the range [0, 1].\r\n     */\n\n  }, {\n    key: \"truncate\",\n    value: function truncate() {\n      return new SRGBColor(Math.min(1, Math.max(0, this.r)), Math.min(1, Math.max(0, this.g)), Math.min(1, Math.max(0, this.b)));\n    }\n    /**\r\n     * Return a copy of color values in array format as [r, g, b].\r\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      // copy\n      return this.values.map(function (v) {\n        return v;\n      });\n    }\n    /**\r\n     * Composes the CSS color string using the rgb() or rgba() format.\r\n     * @param alpha - The alpha value for rgba() format.\r\n     */\n\n  }, {\n    key: \"toCSSString\",\n    value: function toCSSString(alpha) {\n      var _this$to = this.to255(),\n          _this$to2 = _slicedToArray(_this$to, 3),\n          r = _this$to2[0],\n          g = _this$to2[1],\n          b = _this$to2[2];\n\n      if (alpha !== undefined) {\n        // cast to [0, 1]\n        alpha = Math.min(1, Math.max(0, alpha));\n        return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(alpha, \")\");\n      } else {\n        return \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n      }\n    }\n    /**\r\n     * Composes the CSS color string using the \"#RRGGBB\" or \"#RRGGBBAA\" format.\r\n     * @param alpha - The alpha value for the #RRGGBBAA format.\r\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex(alpha) {\n      var _this$toFF = this.toFF(),\n          _this$toFF2 = _slicedToArray(_this$toFF, 3),\n          r = _this$toFF2[0],\n          g = _this$toFF2[1],\n          b = _this$toFF2[2];\n\n      if (alpha !== undefined) {\n        // cast to [0, 1]\n        alpha = Math.min(1, Math.max(0, alpha));\n        var alphaFF = Math.round(alpha * 255).toString(16);\n        return \"#\".concat(r).concat(g).concat(b).concat(alphaFF);\n      } else {\n        return \"#\".concat(r).concat(g).concat(b);\n      }\n    }\n    /**\r\n     * Trasforms color to the HSL format.\r\n     */\n\n  }, {\n    key: \"toHSL\",\n    value: function toHSL() {\n      var _this$values = _slicedToArray(this.values, 3),\n          r = _this$values[0],\n          g = _this$values[1],\n          b = _this$values[2];\n\n      var max = Math.max(r, g, b);\n      var min = Math.min(r, g, b);\n      var h;\n      var s;\n      var l = (max + min) / 2;\n\n      if (max === min) {\n        h = 0;\n        s = 0;\n      } else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n        switch (max) {\n          case r:\n            h = (g - b) / d + (g < b ? 6 : 0);\n            break;\n\n          case g:\n            h = (b - r) / d + 2;\n            break;\n\n          case b:\n            h = (r - g) / d + 4;\n            break;\n        }\n\n        h /= 6;\n      }\n\n      return new HSLColor_1.HSLColor(h, s, l);\n    }\n    /**\r\n     * Trasforms color to the XYZ format.\r\n     */\n\n  }, {\n    key: \"toXYZ\",\n    value: function toXYZ() {\n      return this.toRGB().toXYZ();\n    }\n    /**\r\n     * Convert sRGB-color values into linear RGB format\r\n     */\n\n  }, {\n    key: \"toRGB\",\n    value: function toRGB() {\n      var _this$values$map = this.values.map(function (v) {\n        if (v < 0.04045) {\n          return v / 12.92;\n        } else {\n          return Math.pow((v + 0.055) / 1.055, 2.4);\n        }\n      }),\n          _this$values$map2 = _slicedToArray(_this$values$map, 3),\n          r = _this$values$map2[0],\n          g = _this$values$map2[1],\n          b = _this$values$map2[2];\n\n      return new RGBColor_1.RGBColor(r, g, b);\n    }\n    /**\r\n     * Trasforms color to the CIE LAB format.\r\n     */\n\n  }, {\n    key: \"toLAB\",\n    value: function toLAB() {\n      return this.toRGB().toXYZ().toLAB();\n    }\n    /**\r\n     * Internal helper function to map color values into [0, 255] range.\r\n     */\n\n  }, {\n    key: \"to255\",\n    value: function to255() {\n      var rgb = this.truncate();\n      return rgb.values.map(function (v) {\n        return Math.round(255 * v);\n      });\n    }\n    /**\r\n     * Internal helper function to map color values into hex-format \"FF\".\r\n     */\n\n  }, {\n    key: \"toFF\",\n    value: function toFF() {\n      var rgb = this.truncate();\n      return rgb.values.map(function (v) {\n        return Math.round(255 * v).toString(16).padStart(2, \"0\");\n      });\n    }\n  }]);\n\n  return SRGBColor;\n}();\n\nexports.SRGBColor = SRGBColor;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar RGBColor_1 = require(\"./RGBColor\");\n\nvar SRGBColor_1 = require(\"./SRGBColor\");\n\nvar XYZColor_1 = require(\"./XYZColor\");\n\nvar LABColor_1 = require(\"./LABColor\");\n\nvar HSLColor_1 = require(\"./HSLColor\");\n/**\r\n * A wrapper `Color` class to represent various color formats\r\n * and manage conversions between them.\r\n * @remarks The current work on defining color management in web (including conversion algorithms)\r\n * can be tracked in this draft: https://drafts.csswg.org/css-color/\r\n */\n\n\nvar Color =\n/*#__PURE__*/\nfunction () {\n  _createClass(Color, [{\n    key: \"sRGB\",\n    get: function get() {\n      return this.srgbColor;\n    }\n  }, {\n    key: \"RGB\",\n    get: function get() {\n      if (this.rgbColor === undefined) {\n        this.rgbColor = this.srgbColor.toRGB();\n      }\n\n      return this.rgbColor;\n    }\n  }, {\n    key: \"XYZ\",\n    get: function get() {\n      if (this.xyzColor === undefined) {\n        this.xyzColor = this.RGB.toXYZ();\n      }\n\n      return this.xyzColor;\n    }\n  }, {\n    key: \"LAB\",\n    get: function get() {\n      if (this.labColor === undefined) {\n        this.labColor = this.XYZ.toLAB();\n      }\n\n      return this.labColor;\n    }\n  }, {\n    key: \"HSL\",\n    get: function get() {\n      if (this.hslColor === undefined) {\n        this.hslColor = this.srgbColor.toHSL();\n      }\n\n      return this.hslColor;\n    }\n  }]);\n\n  function Color() {\n    _classCallCheck(this, Color);\n\n    if (arguments.length === 1) {\n      var c = arguments.length <= 0 ? undefined : arguments[0];\n\n      if (c instanceof SRGBColor_1.SRGBColor) {\n        this.srgbColor = c;\n      } else if (c instanceof RGBColor_1.RGBColor) {\n        this.rgbColor = c;\n        this.srgbColor = c.toSRGB();\n      } else if (c instanceof HSLColor_1.HSLColor) {\n        this.hslColor = c;\n        this.srgbColor = c.toSRGB();\n      } else if (c instanceof XYZColor_1.XYZColor) {\n        this.xyzColor = c;\n        this.rgbColor = c.toRGB();\n        this.srgbColor = this.rgbColor.toSRGB();\n      } else if (c instanceof LABColor_1.LABColor) {\n        this.labColor = c;\n        this.xyzColor = c.toXYZ();\n        this.rgbColor = this.xyzColor.toRGB();\n        this.srgbColor = this.rgbColor.toSRGB();\n      } else if (typeof c === \"string\") {\n        this.srgbColor = SRGBColor_1.SRGBColor.ParseHex(c);\n      } else {\n        throw new Error(\"Wrong arg type. Expected one of the '***Color' types.\");\n      }\n    } else if (arguments.length === 3) {\n      if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === \"number\" && typeof (arguments.length <= 1 ? undefined : arguments[1]) === \"number\" && typeof (arguments.length <= 2 ? undefined : arguments[2]) === \"number\") {\n        this.srgbColor = new SRGBColor_1.SRGBColor(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      } else {\n        throw new Error(\"Wrong arg type. Expected 3 args of the 'number' type.\");\n      }\n    } else {\n      throw new Error(\"Wrong args for Color constructor.\");\n    }\n  }\n\n  return Color;\n}();\n\nexports.Color = Color;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Represents a 2d point object\r\n */\n\nvar Point2D =\n/*#__PURE__*/\nfunction () {\n  _createClass(Point2D, null, [{\n    key: \"BuildFromJSON\",\n\n    /**\r\n     * Creates a new point based on extracting specific properties from any provided object\r\n     * @param data - An `IPoint` object with `x` and `y` numeric properties\r\n     * @returns A new `Point2D` object\r\n     */\n    value: function BuildFromJSON(data) {\n      return new Point2D(data.x, data.y);\n    }\n  }]);\n\n  function Point2D(arg1, arg2) {\n    _classCallCheck(this, Point2D);\n\n    if (typeof arg1 === \"number\" && typeof arg2 === \"number\") {\n      this.x = arg1;\n      this.y = arg2;\n    } else if (arg1.x !== undefined && arg1.y !== undefined) {\n      this.x = arg1.x;\n      this.y = arg1.y;\n    }\n  }\n\n  _createClass(Point2D, [{\n    key: \"move\",\n    value: function move(arg1, arg2) {\n      if (typeof arg1 === \"number\" && typeof arg2 === \"number\") {\n        this.x = arg1;\n        this.y = arg2;\n      } else if (arg1.x !== undefined && arg1.y !== undefined) {\n        this.x = arg1.x;\n        this.y = arg1.y;\n      }\n    }\n    /**\r\n     * Shifts point location to specified delta\r\n     * @param dx - Delta to be added to the `x`-coordinate\r\n     * @param dy - Delta to be added to the `y`-coordinate\r\n     */\n\n  }, {\n    key: \"shift\",\n    value: function shift(dx, dy) {\n      this.x += dx;\n      this.y += dy;\n    }\n    /**\r\n     * Returns a new point created from bounding this one to the `Rect` object rovided\r\n     * @remarks This method bounds the point to the rect with coordinates `[0, 0] x [r.width, r.height]`.\r\n     * @param r - A bounding box\r\n     * @returns A new `Point2D` object, with coordinates bounded to the box\r\n     */\n\n  }, {\n    key: \"boundToRect\",\n    value: function boundToRect(r) {\n      return new Point2D(this.x < 0 ? 0 : this.x > r.width ? r.width : this.x, this.y < 0 ? 0 : this.y > r.height ? r.height : this.y);\n    }\n    /**\r\n     * Calculates the square of the distance between two points\r\n     * @param p - Second point\r\n     * @returns The square of the distance\r\n     */\n\n  }, {\n    key: \"squareDistanceToPoint\",\n    value: function squareDistanceToPoint(p) {\n      return (this.x - p.x) * (this.x - p.x) + (this.y - p.y) * (this.y - p.y);\n    }\n    /**\r\n     * Calculates the square of the distance from this point to a line segment\r\n     * @param p1 - The first line segment point\r\n     * @param p2 - The second line segment point\r\n     * @returns The square of the distance\r\n     */\n\n  }, {\n    key: \"squareDistanceToLine\",\n    value: function squareDistanceToLine(p1, p2) {\n      var lineLength2 = p1.squareDistanceToPoint(p2);\n      var dist;\n\n      if (lineLength2 === 0.0) {\n        dist = this.squareDistanceToPoint(p1);\n      } else {\n        var t = ((this.x - p1.x) * (p2.x - p1.x) + (this.y - p1.y) * (p2.y - p1.y)) / lineLength2;\n        var k = Math.max(0, Math.min(1, t));\n        var p = new Point2D(p1.x + k * (p2.x - p1.x), p1.y + k * (p2.y - p1.y));\n        dist = this.squareDistanceToPoint(p);\n      }\n\n      return dist;\n    }\n    /**\r\n     * Creates a copy of this point\r\n     * @returns A new `Point2D` object with copied coordinates\r\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new Point2D(this.x, this.y);\n    }\n    /**\r\n     * Returns a string representation of the point in the format `\"{x, y}\"`.\r\n     * @returns A string representation of the point\r\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"{\".concat(this.x.toString(), \", \").concat(this.y.toString(), \"}\");\n    }\n    /**\r\n     * Returns a JSON representation of the point\r\n     * @returns An `IPoint` object with `x` and `y` numeric properties.\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        x: this.x,\n        y: this.y\n      };\n    }\n  }]);\n\n  return Point2D;\n}();\n\nexports.Point2D = Point2D;","map":null,"metadata":{},"sourceType":"script"}
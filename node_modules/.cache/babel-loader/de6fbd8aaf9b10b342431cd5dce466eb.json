{"ast":null,"code":"import { enc, lib, AES } from \"crypto-js\";\nimport Guard from \"./guard\";\n/**\n * Generates a random base64 encoded key to be used for encryption\n * @param keySize The key size to use, defaults to 32bit\n */\n\nexport function generateKey() {\n  var keySize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;\n  return lib.WordArray.random(keySize).toString(enc.Base64);\n}\n/**\n * Encrypts the specified message with the provided key\n * @param message The message to encrypt\n * @param secret The base64 encoded secret\n */\n\nexport function encrypt(message, secret) {\n  Guard.empty(message);\n  Guard.empty(secret);\n\n  try {\n    var secretBytes = enc.Base64.parse(secret);\n    var iv = lib.WordArray.random(24);\n    var encrypted = AES.encrypt(message, secretBytes, {\n      iv: iv\n    });\n    var json = {\n      ciphertext: encrypted.ciphertext.toString(),\n      iv: iv.toString()\n    };\n    var words = enc.Utf8.parse(JSON.stringify(json));\n    return enc.Base64.stringify(words);\n  } catch (e) {\n    throw new Error(\"Error encrypting data - \".concat(e.message));\n  }\n}\n/**\n * Encryptes a javascript object with the specified key\n * @param message - The javascript object to encrypt\n * @param secret - The secret to encrypt the message\n */\n\nexport function encryptObject(message, secret) {\n  Guard.null(message);\n  return encrypt(JSON.stringify(message), secret);\n}\n/**\n * Decrypts the specified message with the provided key\n * @param encodedMessage The base64 encoded encrypted data\n * @param secret The base64 encoded secret\n */\n\nexport function decrypt(encodedMessage, secret) {\n  Guard.empty(encodedMessage);\n  Guard.empty(secret);\n\n  try {\n    var secretBytes = enc.Base64.parse(secret);\n    var json = enc.Base64.parse(encodedMessage).toString(enc.Utf8);\n    var params = JSON.parse(json);\n    var iv = enc.Hex.parse(params.iv);\n    var cipherParams = lib.CipherParams.create({\n      ciphertext: enc.Hex.parse(params.ciphertext),\n      iv: enc.Hex.parse(params.iv)\n    });\n    var decrypted = AES.decrypt(cipherParams, secretBytes, {\n      iv: iv\n    });\n    return decrypted.toString(enc.Utf8);\n  } catch (e) {\n    throw new Error(\"Error decrypting data - \".concat(e.message));\n  }\n}\n/**\n * Decryptes a javascript object with the specified key\n * @param message - The encrypted base64 encded message\n * @param secret - The secret to decrypt the message\n */\n\nexport function decryptObject(encodedMessage, secret) {\n  var json = decrypt(encodedMessage, secret);\n  return JSON.parse(json);\n}","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/common/crypto.ts"],"names":["enc","lib","AES","Guard","generateKey","keySize","WordArray","random","toString","Base64","encrypt","message","secret","empty","secretBytes","parse","iv","encrypted","json","ciphertext","words","Utf8","JSON","stringify","e","Error","encryptObject","null","decrypt","encodedMessage","params","Hex","cipherParams","CipherParams","create","decrypted","decryptObject"],"mappings":"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","sourcesContent":["import { enc, lib, AES } from \"crypto-js\";\nimport Guard from \"./guard\";\n\n/**\n * Generates a random base64 encoded key to be used for encryption\n * @param keySize The key size to use, defaults to 32bit\n */\nexport function generateKey(keySize: number = 32): string {\n    return lib.WordArray.random(keySize).toString(enc.Base64);\n}\n\n/**\n * Encrypts the specified message with the provided key\n * @param message The message to encrypt\n * @param secret The base64 encoded secret\n */\nexport function encrypt(message: string, secret: string): string {\n    Guard.empty(message);\n    Guard.empty(secret);\n\n    try {\n        const secretBytes = enc.Base64.parse(secret);\n        const iv = lib.WordArray.random(24);\n        const encrypted = AES.encrypt(message, secretBytes, { iv });\n        const json = {\n            ciphertext: encrypted.ciphertext.toString(),\n            iv: iv.toString(),\n        };\n        const words = enc.Utf8.parse(JSON.stringify(json));\n\n        return enc.Base64.stringify(words);\n    } catch (e) {\n        throw new Error(`Error encrypting data - ${e.message}`);\n    }\n}\n\n/**\n * Encryptes a javascript object with the specified key\n * @param message - The javascript object to encrypt\n * @param secret - The secret to encrypt the message\n */\nexport function encryptObject(message: any, secret: string): string {\n    Guard.null(message);\n\n    return encrypt(JSON.stringify(message), secret);\n}\n\n/**\n * Decrypts the specified message with the provided key\n * @param encodedMessage The base64 encoded encrypted data\n * @param secret The base64 encoded secret\n */\nexport function decrypt(encodedMessage: string, secret: string): string {\n    Guard.empty(encodedMessage);\n    Guard.empty(secret);\n\n    try {\n        const secretBytes = enc.Base64.parse(secret);\n        const json = enc.Base64.parse(encodedMessage).toString(enc.Utf8);\n        const params = JSON.parse(json);\n        const iv = enc.Hex.parse(params.iv);\n        const cipherParams = lib.CipherParams.create({\n            ciphertext: enc.Hex.parse(params.ciphertext),\n            iv: enc.Hex.parse(params.iv),\n        });\n        const decrypted = AES.decrypt(cipherParams, secretBytes, { iv });\n\n        return decrypted.toString(enc.Utf8);\n    } catch (e) {\n        throw new Error(`Error decrypting data - ${e.message}`);\n    }\n}\n/**\n * Decryptes a javascript object with the specified key\n * @param message - The encrypted base64 encded message\n * @param secret - The secret to decrypt the message\n */\nexport function decryptObject<T = any>(encodedMessage: string, secret: string): T {\n    const json = decrypt(encodedMessage, secret);\n    return JSON.parse(json) as T;\n}\n"]},"metadata":{},"sourceType":"module"}
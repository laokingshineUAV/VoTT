{"ast":null,"code":"import { createPayloadAction, createAction } from \"./actionCreators\";\nimport { ActionTypes } from \"./actionTypes\";\n/**\n * Action to display alert when there's an error in the app\n * @member showError\n * @member clearError\n * @interface\n */\n\n/**\n * show alert popup to indicate error\n * @param appError {IAppError} the error to display in alert\n * @returns {(dispatch: Dispatch) => void}\n */\nexport function showError(appError) {\n  return function (dispatch) {\n    dispatch(showErrorAction(appError));\n  };\n}\n/**\n * clear alert popup\n * @returns {(dispatch: Dispatch) => void}\n */\n\nexport function clearError() {\n  return function (dispatch) {\n    dispatch(clearErrorAction());\n  };\n}\n/**\n * Show error action type\n */\n\n/**\n * Instance of show error action\n */\nexport var showErrorAction = createPayloadAction(ActionTypes.SHOW_ERROR);\n/**\n * Instance of clear error action\n * @type {() => Action<IClearErrorAction[\"type\"]>}\n */\n\nexport var clearErrorAction = createAction(ActionTypes.CLEAR_ERROR);","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/redux/actions/appErrorActions.ts"],"names":["createPayloadAction","createAction","ActionTypes","showError","appError","dispatch","showErrorAction","clearError","clearErrorAction","SHOW_ERROR","CLEAR_ERROR"],"mappings":"AAEA,SAASA,mBAAT,EAA8CC,YAA9C,QAAkE,kBAAlE;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA;;;;;;;AAWA;;;;;AAKA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAAsE;AACzE,SAAO,UAACC,QAAD,EAAwB;AAC3BA,IAAAA,QAAQ,CAACC,eAAe,CAACF,QAAD,CAAhB,CAAR;AACH,GAFD;AAGH;AAED;;;;;AAIA,OAAO,SAASG,UAAT,GAAoD;AACvD,SAAO,UAACF,QAAD,EAAwB;AAC3BA,IAAAA,QAAQ,CAACG,gBAAgB,EAAjB,CAAR;AACH,GAFD;AAGH;AAED;;;;AAcA;;;AAGA,OAAO,IAAMF,eAAe,GAAGN,mBAAmB,CAAsBE,WAAW,CAACO,UAAlC,CAA3C;AAEP;;;;;AAIA,OAAO,IAAMD,gBAAgB,GAAGP,YAAY,CAAoBC,WAAW,CAACQ,WAAhC,CAArC","sourcesContent":["import { Dispatch, Action } from \"redux\";\nimport { IAppError } from \"../../models/applicationState\";\nimport { createPayloadAction, IPayloadAction, createAction } from \"./actionCreators\";\nimport { ActionTypes } from \"./actionTypes\";\n\n/**\n * Action to display alert when there's an error in the app\n * @member showError\n * @member clearError\n * @interface\n */\nexport default interface IAppErrorActions {\n    showError(appError: IAppError): void;\n    clearError(): void;\n}\n\n/**\n * show alert popup to indicate error\n * @param appError {IAppError} the error to display in alert\n * @returns {(dispatch: Dispatch) => void}\n */\nexport function showError(appError: IAppError): (dispatch: Dispatch) => void {\n    return (dispatch: Dispatch) => {\n        dispatch(showErrorAction(appError));\n    };\n}\n\n/**\n * clear alert popup\n * @returns {(dispatch: Dispatch) => void}\n */\nexport function clearError(): (dispatch: Dispatch) => void {\n    return (dispatch: Dispatch) => {\n        dispatch(clearErrorAction());\n    };\n}\n\n/**\n * Show error action type\n */\nexport interface IShowAppErrorAction extends IPayloadAction<string, IAppError> {\n    type: ActionTypes.SHOW_ERROR;\n}\n\n/**\n * Clear error action type\n */\nexport interface IClearErrorAction extends Action<string> {\n    type: ActionTypes.CLEAR_ERROR;\n}\n\n/**\n * Instance of show error action\n */\nexport const showErrorAction = createPayloadAction<IShowAppErrorAction>(ActionTypes.SHOW_ERROR);\n\n/**\n * Instance of clear error action\n * @type {() => Action<IClearErrorAction[\"type\"]>}\n */\nexport const clearErrorAction = createAction<IClearErrorAction>(ActionTypes.CLEAR_ERROR);\n"]},"metadata":{},"sourceType":"module"}
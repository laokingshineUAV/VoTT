{"ast":null,"code":"import _toConsumableArray from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/pages/editorPage/editorPage.tsx\";\n\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport SplitPane from \"react-split-pane\";\nimport { bindActionCreators } from \"redux\";\nimport { SelectionMode } from \"vott-ct/lib/js/CanvasTools/Interface/ISelectorSettings\";\nimport HtmlFileReader from \"../../../../common/htmlFileReader\";\nimport { strings } from \"../../../../common/strings\";\nimport { AssetState, AssetType, EditorMode, AppError, ErrorCode } from \"../../../../models/applicationState\";\nimport { ToolbarItemFactory } from \"../../../../providers/toolbar/toolbarItemFactory\";\nimport * as applicationActions from \"../../../../redux/actions/applicationActions\";\nimport * as projectActions from \"../../../../redux/actions/projectActions\";\nimport { ToolbarItemName } from \"../../../../registerToolbar\";\nimport { AssetService } from \"../../../../services/assetService\";\nimport { AssetPreview } from \"../../common/assetPreview/assetPreview\";\nimport { KeyboardBinding } from \"../../common/keyboardBinding/keyboardBinding\";\nimport { KeyEventType } from \"../../common/keyboardManager/keyboardManager\";\nimport { TagInput } from \"../../common/tagInput/tagInput\";\nimport Canvas from \"./canvas\";\nimport CanvasHelpers from \"./canvasHelpers\";\nimport \"./editorPage.scss\";\nimport EditorSideBar from \"./editorSideBar\";\nimport { EditorToolbar } from \"./editorToolbar\";\nimport Alert from \"../../common/alert/alert\";\nimport Confirm from \"../../common/confirm/confirm\";\nimport { ActiveLearningService } from \"../../../../services/activeLearningService\";\nimport { toast } from \"react-toastify\";\n/**\n * Properties for Editor Page\n * @member project - Project being edited\n * @member recentProjects - Array of projects recently viewed/edited\n * @member actions - Project actions\n * @member applicationActions - Application setting actions\n */\n\nfunction mapStateToProps(state) {\n  return {\n    recentProjects: state.recentProjects,\n    project: state.currentProject,\n    appSettings: state.appSettings\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(projectActions, dispatch),\n    applicationActions: bindActionCreators(applicationActions, dispatch)\n  };\n}\n/**\n * @name - Editor Page\n * @description - Page for adding/editing/removing tags to assets\n */\n\n\nvar EditorPage = (_dec = connect(mapStateToProps, mapDispatchToProps), _dec(_class =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditorPage, _React$Component);\n\n  function EditorPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditorPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditorPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedTag: null,\n      lockedTags: [],\n      selectionMode: SelectionMode.RECT,\n      assets: [],\n      childAssets: [],\n      editorMode: EditorMode.Rectangle,\n      additionalSettings: {\n        videoSettings: _this.props.project ? _this.props.project.videoSettings : null,\n        activeLearningSettings: _this.props.project ? _this.props.project.activeLearningSettings : null\n      },\n      thumbnailSize: _this.props.appSettings.thumbnailSize || {\n        width: 175,\n        height: 155\n      },\n      isValid: true,\n      showInvalidRegionWarning: false\n    };\n    _this.activeLearningService = null;\n    _this.loadingProjectAssets = false;\n    _this.toolbarItems = ToolbarItemFactory.getToolbarItems();\n    _this.canvas = React.createRef();\n    _this.renameTagConfirm = React.createRef();\n    _this.deleteTagConfirm = React.createRef();\n\n    _this.onPageClick = function () {\n      _this.setState({\n        selectedRegions: []\n      });\n    };\n\n    _this.onSideBarResize = function (newWidth) {\n      _this.setState({\n        thumbnailSize: {\n          width: newWidth,\n          height: newWidth / (4 / 3)\n        }\n      }, function () {\n        return _this.canvas.current.forceResize();\n      });\n    };\n\n    _this.onSideBarResizeComplete = function () {\n      var appSettings = _objectSpread({}, _this.props.appSettings, {\n        thumbnailSize: _this.state.thumbnailSize\n      });\n\n      _this.props.applicationActions.saveAppSettings(appSettings);\n    };\n\n    _this.onTagClicked = function (tag) {\n      _this.setState({\n        selectedTag: tag.name,\n        lockedTags: []\n      }, function () {\n        return _this.canvas.current.applyTag(tag.name);\n      });\n    };\n\n    _this.confirmTagRenamed = function (tagName, newTagName) {\n      _this.renameTagConfirm.current.open(tagName, newTagName);\n    };\n\n    _this.onTagRenamed =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(tagName, newTagName) {\n        var assetUpdates, selectedAsset;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.props.actions.updateProjectTag(_this.props.project, tagName, newTagName);\n\n              case 2:\n                assetUpdates = _context.sent;\n                selectedAsset = assetUpdates.find(function (am) {\n                  return am.asset.id === _this.state.selectedAsset.asset.id;\n                });\n\n                if (selectedAsset) {\n                  if (selectedAsset) {\n                    _this.setState({\n                      selectedAsset: selectedAsset\n                    });\n                  }\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.confirmTagDeleted = function (tagName) {\n      _this.deleteTagConfirm.current.open(tagName);\n    };\n\n    _this.onTagDeleted =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(tagName) {\n        var assetUpdates, selectedAsset;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.props.actions.deleteProjectTag(_this.props.project, tagName);\n\n              case 2:\n                assetUpdates = _context2.sent;\n                selectedAsset = assetUpdates.find(function (am) {\n                  return am.asset.id === _this.state.selectedAsset.asset.id;\n                });\n\n                if (selectedAsset) {\n                  _this.setState({\n                    selectedAsset: selectedAsset\n                  });\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.onCtrlTagClicked = function (tag) {\n      var locked = _this.state.lockedTags;\n\n      _this.setState({\n        selectedTag: tag.name,\n        lockedTags: CanvasHelpers.toggleTag(locked, tag.name)\n      }, function () {\n        return _this.canvas.current.applyTag(tag.name);\n      });\n    };\n\n    _this.getTagFromKeyboardEvent = function (event) {\n      var key = parseInt(event.key, 10);\n\n      if (isNaN(key)) {\n        try {\n          key = parseInt(event.key.split(\"+\")[1], 10);\n        } catch (e) {\n          return;\n        }\n      }\n\n      var index;\n      var tags = _this.props.project.tags;\n\n      if (key === 0 && tags.length >= 10) {\n        index = 9;\n      } else if (key < 10) {\n        index = key - 1;\n      }\n\n      if (index < tags.length) {\n        return tags[index];\n      }\n\n      return null;\n    };\n\n    _this.handleTagHotKey = function (event) {\n      var tag = _this.getTagFromKeyboardEvent(event);\n\n      if (tag) {\n        _this.onTagClicked(tag);\n      }\n    };\n\n    _this.handleCtrlTagHotKey = function (event) {\n      var tag = _this.getTagFromKeyboardEvent(event);\n\n      if (tag) {\n        _this.onCtrlTagClicked(tag);\n      }\n    };\n\n    _this.onChildAssetSelected =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(childAsset) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(_this.state.selectedAsset && _this.state.selectedAsset.asset.id !== childAsset.id)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                _context3.next = 3;\n                return _this.selectAsset(childAsset);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.isTaggableAssetType = function (asset) {\n      return asset.type !== AssetType.Unknown && asset.type !== AssetType.Video;\n    };\n\n    _this.onAssetMetadataChanged =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(assetMetadata) {\n        var regionsWithoutTags, initialState, rootAsset, rootAssetMetadata, assetService, childAssets, assets, assetIndex;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                // If the asset contains any regions without tags, don't proceed.\n                regionsWithoutTags = assetMetadata.regions.filter(function (region) {\n                  return region.tags.length === 0;\n                });\n\n                if (!(regionsWithoutTags.length > 0)) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                _this.setState({\n                  isValid: false\n                });\n\n                return _context4.abrupt(\"return\");\n\n              case 4:\n                initialState = assetMetadata.asset.state; // The root asset can either be the actual asset being edited (ex: VideoFrame) or the top level / root\n                // asset selected from the side bar (image/video).\n\n                rootAsset = _objectSpread({}, assetMetadata.asset.parent || assetMetadata.asset);\n\n                if (_this.isTaggableAssetType(assetMetadata.asset)) {\n                  assetMetadata.asset.state = assetMetadata.regions.length > 0 ? AssetState.Tagged : AssetState.Visited;\n                } else if (assetMetadata.asset.state === AssetState.NotVisited) {\n                  assetMetadata.asset.state = AssetState.Visited;\n                } // Update root asset if not already in the \"Tagged\" state\n                // This is primarily used in the case where a Video Frame is being edited.\n                // We want to ensure that in this case the root video asset state is accurately\n                // updated to match that state of the asset.\n\n\n                if (!(rootAsset.id === assetMetadata.asset.id)) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                rootAsset.state = assetMetadata.asset.state;\n                _context4.next = 19;\n                break;\n\n              case 11:\n                _context4.next = 13;\n                return _this.props.actions.loadAssetMetadata(_this.props.project, rootAsset);\n\n              case 13:\n                rootAssetMetadata = _context4.sent;\n\n                if (!(rootAssetMetadata.asset.state !== AssetState.Tagged)) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                rootAssetMetadata.asset.state = assetMetadata.asset.state;\n                _context4.next = 18;\n                return _this.props.actions.saveAssetMetadata(_this.props.project, rootAssetMetadata);\n\n              case 18:\n                rootAsset.state = rootAssetMetadata.asset.state;\n\n              case 19:\n                if (!(initialState !== assetMetadata.asset.state || _this.state.selectedAsset !== assetMetadata)) {\n                  _context4.next = 22;\n                  break;\n                }\n\n                _context4.next = 22;\n                return _this.props.actions.saveAssetMetadata(_this.props.project, assetMetadata);\n\n              case 22:\n                _context4.next = 24;\n                return _this.props.actions.saveProject(_this.props.project);\n\n              case 24:\n                assetService = new AssetService(_this.props.project);\n                childAssets = assetService.getChildAssets(rootAsset); // Find and update the root asset in the internal state\n                // This forces the root assets that are displayed in the sidebar to\n                // accurately show their correct state (not-visited, visited or tagged)\n\n                assets = _toConsumableArray(_this.state.assets);\n                assetIndex = assets.findIndex(function (asset) {\n                  return asset.id === rootAsset.id;\n                });\n\n                if (assetIndex > -1) {\n                  assets[assetIndex] = _objectSpread({}, rootAsset);\n                }\n\n                _this.setState({\n                  childAssets: childAssets,\n                  assets: assets,\n                  isValid: true\n                });\n\n              case 30:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x5) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.onCanvasRendered =\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(canvas) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(_this.props.project.activeLearningSettings.autoDetect && !_this.state.selectedAsset.asset.predicted)) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                _context5.next = 3;\n                return _this.predictRegions(canvas);\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x6) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    _this.onSelectedRegionsChanged = function (selectedRegions) {\n      _this.setState({\n        selectedRegions: selectedRegions\n      });\n    };\n\n    _this.onTagsChanged =\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(tags) {\n        var project;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                project = _objectSpread({}, _this.props.project, {\n                  tags: tags\n                });\n                _context6.next = 3;\n                return _this.props.actions.saveProject(project);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x7) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    _this.onLockedTagsChanged = function (lockedTags) {\n      _this.setState({\n        lockedTags: lockedTags\n      });\n    };\n\n    _this.onToolbarItemSelected =\n    /*#__PURE__*/\n    function () {\n      var _ref7 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(toolbarItem) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.t0 = toolbarItem.props.name;\n                _context7.next = _context7.t0 === ToolbarItemName.DrawRectangle ? 3 : _context7.t0 === ToolbarItemName.DrawPolygon ? 5 : _context7.t0 === ToolbarItemName.CopyRectangle ? 7 : _context7.t0 === ToolbarItemName.SelectCanvas ? 9 : _context7.t0 === ToolbarItemName.PreviousAsset ? 11 : _context7.t0 === ToolbarItemName.NextAsset ? 14 : _context7.t0 === ToolbarItemName.CopyRegions ? 17 : _context7.t0 === ToolbarItemName.CutRegions ? 19 : _context7.t0 === ToolbarItemName.PasteRegions ? 21 : _context7.t0 === ToolbarItemName.RemoveAllRegions ? 23 : _context7.t0 === ToolbarItemName.ActiveLearning ? 25 : 28;\n                break;\n\n              case 3:\n                _this.setState({\n                  selectionMode: SelectionMode.RECT,\n                  editorMode: EditorMode.Rectangle\n                });\n\n                return _context7.abrupt(\"break\", 28);\n\n              case 5:\n                _this.setState({\n                  selectionMode: SelectionMode.POLYGON,\n                  editorMode: EditorMode.Polygon\n                });\n\n                return _context7.abrupt(\"break\", 28);\n\n              case 7:\n                _this.setState({\n                  selectionMode: SelectionMode.COPYRECT,\n                  editorMode: EditorMode.CopyRect\n                });\n\n                return _context7.abrupt(\"break\", 28);\n\n              case 9:\n                _this.setState({\n                  selectionMode: SelectionMode.NONE,\n                  editorMode: EditorMode.Select\n                });\n\n                return _context7.abrupt(\"break\", 28);\n\n              case 11:\n                _context7.next = 13;\n                return _this.goToRootAsset(-1);\n\n              case 13:\n                return _context7.abrupt(\"break\", 28);\n\n              case 14:\n                _context7.next = 16;\n                return _this.goToRootAsset(1);\n\n              case 16:\n                return _context7.abrupt(\"break\", 28);\n\n              case 17:\n                _this.canvas.current.copyRegions();\n\n                return _context7.abrupt(\"break\", 28);\n\n              case 19:\n                _this.canvas.current.cutRegions();\n\n                return _context7.abrupt(\"break\", 28);\n\n              case 21:\n                _this.canvas.current.pasteRegions();\n\n                return _context7.abrupt(\"break\", 28);\n\n              case 23:\n                _this.canvas.current.confirmRemoveAllRegions();\n\n                return _context7.abrupt(\"break\", 28);\n\n              case 25:\n                _context7.next = 27;\n                return _this.predictRegions();\n\n              case 27:\n                return _context7.abrupt(\"break\", 28);\n\n              case 28:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x8) {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n\n    _this.predictRegions =\n    /*#__PURE__*/\n    function () {\n      var _ref8 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(canvas) {\n        var toastId, updatedAssetMetadata;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                canvas = canvas || document.querySelector(\"canvas\");\n\n                if (canvas) {\n                  _context8.next = 3;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\");\n\n              case 3:\n                if (_this.activeLearningService.isModelLoaded()) {\n                  _context8.next = 18;\n                  break;\n                }\n\n                toastId = null;\n                _context8.prev = 5;\n                toastId = toast.info(strings.activeLearning.messages.loadingModel, {\n                  autoClose: false\n                });\n                _context8.next = 9;\n                return _this.activeLearningService.ensureModelLoaded();\n\n              case 9:\n                _context8.next = 15;\n                break;\n\n              case 11:\n                _context8.prev = 11;\n                _context8.t0 = _context8[\"catch\"](5);\n                toast.error(strings.activeLearning.messages.errorLoadModel);\n                return _context8.abrupt(\"return\");\n\n              case 15:\n                _context8.prev = 15;\n                toast.dismiss(toastId);\n                return _context8.finish(15);\n\n              case 18:\n                _context8.prev = 18;\n                _context8.next = 21;\n                return _this.activeLearningService.predictRegions(canvas, _this.state.selectedAsset);\n\n              case 21:\n                updatedAssetMetadata = _context8.sent;\n                _context8.next = 24;\n                return _this.onAssetMetadataChanged(updatedAssetMetadata);\n\n              case 24:\n                _this.setState({\n                  selectedAsset: updatedAssetMetadata\n                });\n\n                _context8.next = 30;\n                break;\n\n              case 27:\n                _context8.prev = 27;\n                _context8.t1 = _context8[\"catch\"](18);\n                throw new AppError(ErrorCode.ActiveLearningPredictionError, \"Error predicting regions\");\n\n              case 30:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[5, 11, 15, 18], [18, 27]]);\n      }));\n\n      return function (_x9) {\n        return _ref8.apply(this, arguments);\n      };\n    }();\n\n    _this.goToRootAsset =\n    /*#__PURE__*/\n    function () {\n      var _ref9 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(direction) {\n        var selectedRootAsset, currentIndex;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                selectedRootAsset = _this.state.selectedAsset.asset.parent || _this.state.selectedAsset.asset;\n                currentIndex = _this.state.assets.findIndex(function (asset) {\n                  return asset.id === selectedRootAsset.id;\n                });\n\n                if (!(direction > 0)) {\n                  _context9.next = 7;\n                  break;\n                }\n\n                _context9.next = 5;\n                return _this.selectAsset(_this.state.assets[Math.min(_this.state.assets.length - 1, currentIndex + 1)]);\n\n              case 5:\n                _context9.next = 9;\n                break;\n\n              case 7:\n                _context9.next = 9;\n                return _this.selectAsset(_this.state.assets[Math.max(0, currentIndex - 1)]);\n\n              case 9:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x10) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n\n    _this.onBeforeAssetSelected = function () {\n      if (!_this.state.isValid) {\n        _this.setState({\n          showInvalidRegionWarning: true\n        });\n      }\n\n      return _this.state.isValid;\n    };\n\n    _this.selectAsset =\n    /*#__PURE__*/\n    function () {\n      var _ref10 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11(asset) {\n        var assetMetadata, assetProps;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (!(_this.state.selectedAsset && _this.state.selectedAsset.asset.id === asset.id)) {\n                  _context11.next = 2;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\");\n\n              case 2:\n                if (_this.state.isValid) {\n                  _context11.next = 5;\n                  break;\n                }\n\n                _this.setState({\n                  showInvalidRegionWarning: true\n                });\n\n                return _context11.abrupt(\"return\");\n\n              case 5:\n                _context11.next = 7;\n                return _this.props.actions.loadAssetMetadata(_this.props.project, asset);\n\n              case 7:\n                assetMetadata = _context11.sent;\n                _context11.prev = 8;\n\n                if (assetMetadata.asset.size) {\n                  _context11.next = 14;\n                  break;\n                }\n\n                _context11.next = 12;\n                return HtmlFileReader.readAssetAttributes(asset);\n\n              case 12:\n                assetProps = _context11.sent;\n                assetMetadata.asset.size = {\n                  width: assetProps.width,\n                  height: assetProps.height\n                };\n\n              case 14:\n                _context11.next = 19;\n                break;\n\n              case 16:\n                _context11.prev = 16;\n                _context11.t0 = _context11[\"catch\"](8);\n                console.warn(\"Error computing asset size\");\n\n              case 19:\n                _this.setState({\n                  selectedAsset: assetMetadata\n                },\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee10() {\n                  return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n                    while (1) {\n                      switch (_context10.prev = _context10.next) {\n                        case 0:\n                          _context10.next = 2;\n                          return _this.onAssetMetadataChanged(assetMetadata);\n\n                        case 2:\n                        case \"end\":\n                          return _context10.stop();\n                      }\n                    }\n                  }, _callee10, this);\n                })));\n\n              case 20:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[8, 16]]);\n      }));\n\n      return function (_x11) {\n        return _ref10.apply(this, arguments);\n      };\n    }();\n\n    _this.loadProjectAssets =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee13() {\n      var rootProjectAssets, sourceAssets, rootAssets, lastVisited;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              if (!(_this.loadingProjectAssets || _this.state.assets.length > 0)) {\n                _context13.next = 2;\n                break;\n              }\n\n              return _context13.abrupt(\"return\");\n\n            case 2:\n              _this.loadingProjectAssets = true; // Get all root project assets\n\n              rootProjectAssets = _.values(_this.props.project.assets).filter(function (asset) {\n                return !asset.parent;\n              }); // Get all root assets from source asset provider\n\n              _context13.next = 6;\n              return _this.props.actions.loadAssets(_this.props.project);\n\n            case 6:\n              sourceAssets = _context13.sent;\n              // Merge and uniquify\n              rootAssets = _(rootProjectAssets).concat(sourceAssets).uniqBy(function (asset) {\n                return asset.id;\n              }).value();\n              lastVisited = rootAssets.find(function (asset) {\n                return asset.id === _this.props.project.lastVisitedAssetId;\n              });\n\n              _this.setState({\n                assets: rootAssets\n              },\n              /*#__PURE__*/\n              _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee12() {\n                return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n                  while (1) {\n                    switch (_context12.prev = _context12.next) {\n                      case 0:\n                        if (!(rootAssets.length > 0)) {\n                          _context12.next = 3;\n                          break;\n                        }\n\n                        _context12.next = 3;\n                        return _this.selectAsset(lastVisited ? lastVisited : rootAssets[0]);\n\n                      case 3:\n                        _this.loadingProjectAssets = false;\n\n                      case 4:\n                      case \"end\":\n                        return _context12.stop();\n                    }\n                  }\n                }, _callee12, this);\n              })));\n\n            case 10:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    _this.updateRootAssets = function () {\n      var updatedAssets = _toConsumableArray(_this.state.assets);\n\n      updatedAssets.forEach(function (asset) {\n        var projectAsset = _this.props.project.assets[asset.id];\n\n        if (projectAsset) {\n          asset.state = projectAsset.state;\n        }\n      });\n\n      _this.setState({\n        assets: updatedAssets\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(EditorPage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee14() {\n        var projectId, _project;\n\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                projectId = this.props.match.params[\"projectId\"];\n\n                if (!this.props.project) {\n                  _context14.next = 6;\n                  break;\n                }\n\n                _context14.next = 4;\n                return this.loadProjectAssets();\n\n              case 4:\n                _context14.next = 10;\n                break;\n\n              case 6:\n                if (!projectId) {\n                  _context14.next = 10;\n                  break;\n                }\n\n                _project = this.props.recentProjects.find(function (project) {\n                  return project.id === projectId;\n                });\n                _context14.next = 10;\n                return this.props.actions.loadProject(_project);\n\n              case 10:\n                this.activeLearningService = new ActiveLearningService(this.props.project.activeLearningSettings);\n\n              case 11:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function () {\n      var _componentDidUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee15(prevProps) {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                if (!(this.props.project && this.state.assets.length === 0)) {\n                  _context15.next = 3;\n                  break;\n                }\n\n                _context15.next = 3;\n                return this.loadProjectAssets();\n\n              case 3:\n                // Navigating directly to the page via URL (ie, http://vott/projects/a1b2c3dEf/edit) sets the default state\n                // before props has been set, this updates the project and additional settings to be valid once props are\n                // retrieved.\n                if (this.props.project && !prevProps.project) {\n                  this.setState({\n                    additionalSettings: {\n                      videoSettings: this.props.project ? this.props.project.videoSettings : null,\n                      activeLearningSettings: this.props.project ? this.props.project.activeLearningSettings : null\n                    }\n                  });\n                }\n\n                if (this.props.project && prevProps.project && this.props.project.tags !== prevProps.project.tags) {\n                  this.updateRootAssets();\n                }\n\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function componentDidUpdate(_x12) {\n        return _componentDidUpdate.apply(this, arguments);\n      }\n\n      return componentDidUpdate;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var project = this.props.project;\n      var _this$state = this.state,\n          assets = _this$state.assets,\n          selectedAsset = _this$state.selectedAsset;\n      var rootAssets = assets.filter(function (asset) {\n        return !asset.parent;\n      });\n\n      if (!project) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      return React.createElement(\"div\", {\n        className: \"editor-page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, _toConsumableArray(Array(10).keys()).map(function (index) {\n        return React.createElement(KeyboardBinding, {\n          displayName: strings.editorPage.tags.hotKey.apply,\n          key: index,\n          keyEventType: KeyEventType.KeyDown,\n          accelerators: [\"\".concat(index)],\n          icon: \"fa-tag\",\n          handler: _this2.handleTagHotKey,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        });\n      }), _toConsumableArray(Array(10).keys()).map(function (index) {\n        return React.createElement(KeyboardBinding, {\n          displayName: strings.editorPage.tags.hotKey.lock,\n          key: index,\n          keyEventType: KeyEventType.KeyDown,\n          accelerators: [\"CmdOrCtrl+\".concat(index)],\n          icon: \"fa-lock\",\n          handler: _this2.handleCtrlTagHotKey,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        });\n      }), React.createElement(SplitPane, {\n        split: \"vertical\",\n        defaultSize: this.state.thumbnailSize.width,\n        minSize: 100,\n        maxSize: 400,\n        paneStyle: {\n          display: \"flex\"\n        },\n        onChange: this.onSideBarResize,\n        onDragFinished: this.onSideBarResizeComplete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"editor-page-sidebar bg-lighter-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(EditorSideBar, {\n        assets: rootAssets,\n        selectedAsset: selectedAsset ? selectedAsset.asset : null,\n        onBeforeAssetSelected: this.onBeforeAssetSelected,\n        onAssetSelected: this.selectAsset,\n        thumbnailSize: this.state.thumbnailSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"editor-page-content\",\n        onClick: this.onPageClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"editor-page-content-main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"editor-page-content-main-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(EditorToolbar, {\n        project: this.props.project,\n        items: this.toolbarItems,\n        actions: this.props.actions,\n        onToolbarItemSelected: this.onToolbarItemSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"editor-page-content-main-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, selectedAsset && React.createElement(Canvas, {\n        ref: this.canvas,\n        selectedAsset: this.state.selectedAsset,\n        onAssetMetadataChanged: this.onAssetMetadataChanged,\n        onCanvasRendered: this.onCanvasRendered,\n        onSelectedRegionsChanged: this.onSelectedRegionsChanged,\n        editorMode: this.state.editorMode,\n        selectionMode: this.state.selectionMode,\n        project: this.props.project,\n        lockedTags: this.state.lockedTags,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(AssetPreview, {\n        additionalSettings: this.state.additionalSettings,\n        autoPlay: true,\n        controlsEnabled: this.state.isValid,\n        onBeforeAssetChanged: this.onBeforeAssetSelected,\n        onChildAssetSelected: this.onChildAssetSelected,\n        asset: this.state.selectedAsset.asset,\n        childAssets: this.state.childAssets,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"editor-page-right-sidebar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(TagInput, {\n        tags: this.props.project.tags,\n        lockedTags: this.state.lockedTags,\n        selectedRegions: this.state.selectedRegions,\n        onChange: this.onTagsChanged,\n        onLockedTagsChange: this.onLockedTagsChanged,\n        onTagClick: this.onTagClicked,\n        onCtrlTagClick: this.onCtrlTagClicked,\n        onTagRenamed: this.confirmTagRenamed,\n        onTagDeleted: this.confirmTagDeleted,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      })), React.createElement(Confirm, {\n        title: strings.editorPage.tags.rename.title,\n        ref: this.renameTagConfirm,\n        message: strings.editorPage.tags.rename.confirmation,\n        confirmButtonColor: \"danger\",\n        onConfirm: this.onTagRenamed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }), React.createElement(Confirm, {\n        title: strings.editorPage.tags.delete.title,\n        ref: this.deleteTagConfirm,\n        message: strings.editorPage.tags.delete.confirmation,\n        confirmButtonColor: \"danger\",\n        onConfirm: this.onTagDeleted,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }))), React.createElement(Alert, {\n        show: this.state.showInvalidRegionWarning,\n        title: strings.editorPage.messages.enforceTaggedRegions.title // tslint:disable-next-line:max-line-length\n        ,\n        message: strings.editorPage.messages.enforceTaggedRegions.description,\n        closeButtonColor: \"info\",\n        onClose: function onClose() {\n          return _this2.setState({\n            showInvalidRegionWarning: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EditorPage;\n}(React.Component)) || _class);\nexport { EditorPage as default };","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/pages/editorPage/editorPage.tsx"],"names":["_","React","connect","SplitPane","bindActionCreators","SelectionMode","HtmlFileReader","strings","AssetState","AssetType","EditorMode","AppError","ErrorCode","ToolbarItemFactory","applicationActions","projectActions","ToolbarItemName","AssetService","AssetPreview","KeyboardBinding","KeyEventType","TagInput","Canvas","CanvasHelpers","EditorSideBar","EditorToolbar","Alert","Confirm","ActiveLearningService","toast","mapStateToProps","state","recentProjects","project","currentProject","appSettings","mapDispatchToProps","dispatch","actions","EditorPage","selectedTag","lockedTags","selectionMode","RECT","assets","childAssets","editorMode","Rectangle","additionalSettings","videoSettings","props","activeLearningSettings","thumbnailSize","width","height","isValid","showInvalidRegionWarning","activeLearningService","loadingProjectAssets","toolbarItems","getToolbarItems","canvas","createRef","renameTagConfirm","deleteTagConfirm","onPageClick","setState","selectedRegions","onSideBarResize","newWidth","current","forceResize","onSideBarResizeComplete","saveAppSettings","onTagClicked","tag","name","applyTag","confirmTagRenamed","tagName","newTagName","open","onTagRenamed","updateProjectTag","assetUpdates","selectedAsset","find","am","asset","id","confirmTagDeleted","onTagDeleted","deleteProjectTag","onCtrlTagClicked","locked","toggleTag","getTagFromKeyboardEvent","event","key","parseInt","isNaN","split","e","index","tags","length","handleTagHotKey","handleCtrlTagHotKey","onChildAssetSelected","childAsset","selectAsset","isTaggableAssetType","type","Unknown","Video","onAssetMetadataChanged","assetMetadata","regionsWithoutTags","regions","filter","region","initialState","rootAsset","parent","Tagged","Visited","NotVisited","loadAssetMetadata","rootAssetMetadata","saveAssetMetadata","saveProject","assetService","getChildAssets","assetIndex","findIndex","onCanvasRendered","autoDetect","predicted","predictRegions","onSelectedRegionsChanged","onTagsChanged","onLockedTagsChanged","onToolbarItemSelected","toolbarItem","DrawRectangle","DrawPolygon","CopyRectangle","SelectCanvas","PreviousAsset","NextAsset","CopyRegions","CutRegions","PasteRegions","RemoveAllRegions","ActiveLearning","POLYGON","Polygon","COPYRECT","CopyRect","NONE","Select","goToRootAsset","copyRegions","cutRegions","pasteRegions","confirmRemoveAllRegions","document","querySelector","isModelLoaded","toastId","info","activeLearning","messages","loadingModel","autoClose","ensureModelLoaded","error","errorLoadModel","dismiss","updatedAssetMetadata","ActiveLearningPredictionError","direction","selectedRootAsset","currentIndex","Math","min","max","onBeforeAssetSelected","size","readAssetAttributes","assetProps","console","warn","loadProjectAssets","rootProjectAssets","values","loadAssets","sourceAssets","rootAssets","concat","uniqBy","value","lastVisited","lastVisitedAssetId","updateRootAssets","updatedAssets","forEach","projectAsset","projectId","match","params","loadProject","prevProps","Array","keys","map","editorPage","hotKey","apply","KeyDown","lock","display","rename","title","confirmation","delete","enforceTaggedRegions","description","Component"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport React, { RefObject } from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport SplitPane from \"react-split-pane\";\nimport { bindActionCreators } from \"redux\";\nimport { SelectionMode } from \"vott-ct/lib/js/CanvasTools/Interface/ISelectorSettings\";\nimport HtmlFileReader from \"../../../../common/htmlFileReader\";\nimport { strings } from \"../../../../common/strings\";\nimport {\n    AssetState, AssetType, EditorMode, IApplicationState,\n    IAppSettings, IAsset, IAssetMetadata, IProject, IRegion,\n    ISize, ITag, IAdditionalPageSettings, AppError, ErrorCode,\n} from \"../../../../models/applicationState\";\nimport { IToolbarItemRegistration, ToolbarItemFactory } from \"../../../../providers/toolbar/toolbarItemFactory\";\nimport IApplicationActions, * as applicationActions from \"../../../../redux/actions/applicationActions\";\nimport IProjectActions, * as projectActions from \"../../../../redux/actions/projectActions\";\nimport { ToolbarItemName } from \"../../../../registerToolbar\";\nimport { AssetService } from \"../../../../services/assetService\";\nimport { AssetPreview } from \"../../common/assetPreview/assetPreview\";\nimport { KeyboardBinding } from \"../../common/keyboardBinding/keyboardBinding\";\nimport { KeyEventType } from \"../../common/keyboardManager/keyboardManager\";\nimport { TagInput } from \"../../common/tagInput/tagInput\";\nimport { ToolbarItem } from \"../../toolbar/toolbarItem\";\nimport Canvas from \"./canvas\";\nimport CanvasHelpers from \"./canvasHelpers\";\nimport \"./editorPage.scss\";\nimport EditorSideBar from \"./editorSideBar\";\nimport { EditorToolbar } from \"./editorToolbar\";\nimport Alert from \"../../common/alert/alert\";\nimport Confirm from \"../../common/confirm/confirm\";\nimport { ActiveLearningService } from \"../../../../services/activeLearningService\";\nimport { toast } from \"react-toastify\";\n\n/**\n * Properties for Editor Page\n * @member project - Project being edited\n * @member recentProjects - Array of projects recently viewed/edited\n * @member actions - Project actions\n * @member applicationActions - Application setting actions\n */\nexport interface IEditorPageProps extends RouteComponentProps, React.Props<EditorPage> {\n    project: IProject;\n    recentProjects: IProject[];\n    appSettings: IAppSettings;\n    actions: IProjectActions;\n    applicationActions: IApplicationActions;\n}\n\n/**\n * State for Editor Page\n */\nexport interface IEditorPageState {\n    /** Array of assets in project */\n    assets: IAsset[];\n    /** The editor mode to set for canvas tools */\n    editorMode: EditorMode;\n    /** The selection mode to set for canvas tools */\n    selectionMode: SelectionMode;\n    /** The selected asset for the primary editing experience */\n    selectedAsset?: IAssetMetadata;\n    /** Currently selected region on current asset */\n    selectedRegions?: IRegion[];\n    /** The child assets used for nest asset typs */\n    childAssets?: IAsset[];\n    /** Additional settings for asset previews */\n    additionalSettings?: IAdditionalPageSettings;\n    /** Most recently selected tag */\n    selectedTag: string;\n    /** Tags locked for region labeling */\n    lockedTags: string[];\n    /** Size of the asset thumbnails to display in the side bar */\n    thumbnailSize: ISize;\n    /**\n     * Whether or not the editor is in a valid state\n     * State is invalid when a region has not been tagged\n     */\n    isValid: boolean;\n    /** Whether the show invalid region warning alert should display */\n    showInvalidRegionWarning: boolean;\n}\n\nfunction mapStateToProps(state: IApplicationState) {\n    return {\n        recentProjects: state.recentProjects,\n        project: state.currentProject,\n        appSettings: state.appSettings,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators(projectActions, dispatch),\n        applicationActions: bindActionCreators(applicationActions, dispatch),\n    };\n}\n\n/**\n * @name - Editor Page\n * @description - Page for adding/editing/removing tags to assets\n */\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class EditorPage extends React.Component<IEditorPageProps, IEditorPageState> {\n    public state: IEditorPageState = {\n        selectedTag: null,\n        lockedTags: [],\n        selectionMode: SelectionMode.RECT,\n        assets: [],\n        childAssets: [],\n        editorMode: EditorMode.Rectangle,\n        additionalSettings: {\n            videoSettings: (this.props.project) ? this.props.project.videoSettings : null,\n            activeLearningSettings: (this.props.project) ? this.props.project.activeLearningSettings : null,\n        },\n        thumbnailSize: this.props.appSettings.thumbnailSize || { width: 175, height: 155 },\n        isValid: true,\n        showInvalidRegionWarning: false,\n    };\n\n    private activeLearningService: ActiveLearningService = null;\n    private loadingProjectAssets: boolean = false;\n    private toolbarItems: IToolbarItemRegistration[] = ToolbarItemFactory.getToolbarItems();\n    private canvas: RefObject<Canvas> = React.createRef();\n    private renameTagConfirm: React.RefObject<Confirm> = React.createRef();\n    private deleteTagConfirm: React.RefObject<Confirm> = React.createRef();\n\n    public async componentDidMount() {\n        const projectId = this.props.match.params[\"projectId\"];\n        if (this.props.project) {\n            await this.loadProjectAssets();\n        } else if (projectId) {\n            const project = this.props.recentProjects.find((project) => project.id === projectId);\n            await this.props.actions.loadProject(project);\n        }\n\n        this.activeLearningService = new ActiveLearningService(this.props.project.activeLearningSettings);\n    }\n\n    public async componentDidUpdate(prevProps: Readonly<IEditorPageProps>) {\n        if (this.props.project && this.state.assets.length === 0) {\n            await this.loadProjectAssets();\n        }\n\n        // Navigating directly to the page via URL (ie, http://vott/projects/a1b2c3dEf/edit) sets the default state\n        // before props has been set, this updates the project and additional settings to be valid once props are\n        // retrieved.\n        if (this.props.project && !prevProps.project) {\n            this.setState({\n                additionalSettings: {\n                    videoSettings: (this.props.project) ? this.props.project.videoSettings : null,\n                    activeLearningSettings: (this.props.project) ? this.props.project.activeLearningSettings : null,\n                },\n            });\n        }\n\n        if (this.props.project && prevProps.project && this.props.project.tags !== prevProps.project.tags) {\n            this.updateRootAssets();\n        }\n    }\n\n    public render() {\n        const { project } = this.props;\n        const { assets, selectedAsset } = this.state;\n        const rootAssets = assets.filter((asset) => !asset.parent);\n\n        if (!project) {\n            return (<div>Loading...</div>);\n        }\n\n        return (\n            <div className=\"editor-page\">\n                {[...Array(10).keys()].map((index) => {\n                    return (<KeyboardBinding\n                        displayName={strings.editorPage.tags.hotKey.apply}\n                        key={index}\n                        keyEventType={KeyEventType.KeyDown}\n                        accelerators={[`${index}`]}\n                        icon={\"fa-tag\"}\n                        handler={this.handleTagHotKey} />);\n                })}\n                {[...Array(10).keys()].map((index) => {\n                    return (<KeyboardBinding\n                        displayName={strings.editorPage.tags.hotKey.lock}\n                        key={index}\n                        keyEventType={KeyEventType.KeyDown}\n                        accelerators={[`CmdOrCtrl+${index}`]}\n                        icon={\"fa-lock\"}\n                        handler={this.handleCtrlTagHotKey} />);\n                })}\n                <SplitPane split=\"vertical\"\n                    defaultSize={this.state.thumbnailSize.width}\n                    minSize={100}\n                    maxSize={400}\n                    paneStyle={{ display: \"flex\" }}\n                    onChange={this.onSideBarResize}\n                    onDragFinished={this.onSideBarResizeComplete}>\n                    <div className=\"editor-page-sidebar bg-lighter-1\">\n                        <EditorSideBar\n                            assets={rootAssets}\n                            selectedAsset={selectedAsset ? selectedAsset.asset : null}\n                            onBeforeAssetSelected={this.onBeforeAssetSelected}\n                            onAssetSelected={this.selectAsset}\n                            thumbnailSize={this.state.thumbnailSize}\n                        />\n                    </div>\n                    <div className=\"editor-page-content\" onClick={this.onPageClick}>\n                        <div className=\"editor-page-content-main\">\n                            <div className=\"editor-page-content-main-header\">\n                                <EditorToolbar project={this.props.project}\n                                    items={this.toolbarItems}\n                                    actions={this.props.actions}\n                                    onToolbarItemSelected={this.onToolbarItemSelected} />\n                            </div>\n                            <div className=\"editor-page-content-main-body\">\n                                {selectedAsset &&\n                                    <Canvas\n                                        ref={this.canvas}\n                                        selectedAsset={this.state.selectedAsset}\n                                        onAssetMetadataChanged={this.onAssetMetadataChanged}\n                                        onCanvasRendered={this.onCanvasRendered}\n                                        onSelectedRegionsChanged={this.onSelectedRegionsChanged}\n                                        editorMode={this.state.editorMode}\n                                        selectionMode={this.state.selectionMode}\n                                        project={this.props.project}\n                                        lockedTags={this.state.lockedTags}>\n                                        <AssetPreview\n                                            additionalSettings={this.state.additionalSettings}\n                                            autoPlay={true}\n                                            controlsEnabled={this.state.isValid}\n                                            onBeforeAssetChanged={this.onBeforeAssetSelected}\n                                            onChildAssetSelected={this.onChildAssetSelected}\n                                            asset={this.state.selectedAsset.asset}\n                                            childAssets={this.state.childAssets} />\n                                    </Canvas>\n                                }\n                            </div>\n                        </div>\n                        <div className=\"editor-page-right-sidebar\">\n                            <TagInput\n                                tags={this.props.project.tags}\n                                lockedTags={this.state.lockedTags}\n                                selectedRegions={this.state.selectedRegions}\n                                onChange={this.onTagsChanged}\n                                onLockedTagsChange={this.onLockedTagsChanged}\n                                onTagClick={this.onTagClicked}\n                                onCtrlTagClick={this.onCtrlTagClicked}\n                                onTagRenamed={this.confirmTagRenamed}\n                                onTagDeleted={this.confirmTagDeleted}\n                            />\n                        </div>\n                        <Confirm title={strings.editorPage.tags.rename.title}\n                            ref={this.renameTagConfirm}\n                            message={strings.editorPage.tags.rename.confirmation}\n                            confirmButtonColor=\"danger\"\n                            onConfirm={this.onTagRenamed} />\n                        <Confirm title={strings.editorPage.tags.delete.title}\n                            ref={this.deleteTagConfirm}\n                            message={strings.editorPage.tags.delete.confirmation}\n                            confirmButtonColor=\"danger\"\n                            onConfirm={this.onTagDeleted} />\n                    </div>\n                </SplitPane>\n                <Alert show={this.state.showInvalidRegionWarning}\n                    title={strings.editorPage.messages.enforceTaggedRegions.title}\n                    // tslint:disable-next-line:max-line-length\n                    message={strings.editorPage.messages.enforceTaggedRegions.description}\n                    closeButtonColor=\"info\"\n                    onClose={() => this.setState({ showInvalidRegionWarning: false })} />\n            </div>\n        );\n    }\n\n    private onPageClick = () => {\n        this.setState({\n            selectedRegions: [],\n        });\n    }\n\n    /**\n     * Called when the asset side bar is resized\n     * @param newWidth The new sidebar width\n     */\n    private onSideBarResize = (newWidth: number) => {\n        this.setState({\n            thumbnailSize: {\n                width: newWidth,\n                height: newWidth / (4 / 3),\n            },\n        }, () => this.canvas.current.forceResize());\n    }\n\n    /**\n     * Called when the asset sidebar has been completed\n     */\n    private onSideBarResizeComplete = () => {\n        const appSettings = {\n            ...this.props.appSettings,\n            thumbnailSize: this.state.thumbnailSize,\n        };\n\n        this.props.applicationActions.saveAppSettings(appSettings);\n    }\n\n    /**\n     * Called when a tag from footer is clicked\n     * @param tag Tag clicked\n     */\n    private onTagClicked = (tag: ITag): void => {\n        this.setState({\n            selectedTag: tag.name,\n            lockedTags: [],\n        }, () => this.canvas.current.applyTag(tag.name));\n    }\n\n    /**\n     * Open confirm dialog for tag renaming\n     */\n    private confirmTagRenamed = (tagName: string, newTagName: string): void => {\n        this.renameTagConfirm.current.open(tagName, newTagName);\n    }\n\n    /**\n     * Renames tag in assets and project, and saves files\n     * @param tagName Name of tag to be renamed\n     * @param newTagName New name of tag\n     */\n    private onTagRenamed = async (tagName: string, newTagName: string): Promise<void> => {\n        const assetUpdates = await this.props.actions.updateProjectTag(this.props.project, tagName, newTagName);\n        const selectedAsset = assetUpdates.find((am) => am.asset.id === this.state.selectedAsset.asset.id);\n\n        if (selectedAsset) {\n            if (selectedAsset) {\n                this.setState({ selectedAsset });\n            }\n        }\n    }\n\n    /**\n     * Open Confirm dialog for tag deletion\n     */\n    private confirmTagDeleted = (tagName: string): void => {\n        this.deleteTagConfirm.current.open(tagName);\n    }\n\n    /**\n     * Removes tag from assets and projects and saves files\n     * @param tagName Name of tag to be deleted\n     */\n    private onTagDeleted = async (tagName: string): Promise<void> => {\n        const assetUpdates = await this.props.actions.deleteProjectTag(this.props.project, tagName);\n        const selectedAsset = assetUpdates.find((am) => am.asset.id === this.state.selectedAsset.asset.id);\n\n        if (selectedAsset) {\n            this.setState({ selectedAsset });\n        }\n    }\n\n    private onCtrlTagClicked = (tag: ITag): void => {\n        const locked = this.state.lockedTags;\n        this.setState({\n            selectedTag: tag.name,\n            lockedTags: CanvasHelpers.toggleTag(locked, tag.name),\n        }, () => this.canvas.current.applyTag(tag.name));\n    }\n\n    private getTagFromKeyboardEvent = (event: KeyboardEvent): ITag => {\n        let key = parseInt(event.key, 10);\n        if (isNaN(key)) {\n            try {\n                key = parseInt(event.key.split(\"+\")[1], 10);\n            } catch (e) {\n                return;\n            }\n        }\n        let index: number;\n        const tags = this.props.project.tags;\n        if (key === 0 && tags.length >= 10) {\n            index = 9;\n        } else if (key < 10) {\n            index = key - 1;\n        }\n        if (index < tags.length) {\n            return tags[index];\n        }\n        return null;\n    }\n\n    /**\n     * Listens for {number key} and calls `onTagClicked` with tag corresponding to that number\n     * @param event KeyDown event\n     */\n    private handleTagHotKey = (event: KeyboardEvent): void => {\n        const tag = this.getTagFromKeyboardEvent(event);\n        if (tag) {\n            this.onTagClicked(tag);\n        }\n    }\n\n    private handleCtrlTagHotKey = (event: KeyboardEvent): void => {\n        const tag = this.getTagFromKeyboardEvent(event);\n        if (tag) {\n            this.onCtrlTagClicked(tag);\n        }\n    }\n\n    /**\n     * Raised when a child asset is selected on the Asset Preview\n     * ex) When a video is paused/seeked to on a video\n     */\n    private onChildAssetSelected = async (childAsset: IAsset) => {\n        if (this.state.selectedAsset && this.state.selectedAsset.asset.id !== childAsset.id) {\n            await this.selectAsset(childAsset);\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the current asset is taggable\n     */\n    private isTaggableAssetType = (asset: IAsset): boolean => {\n        return asset.type !== AssetType.Unknown && asset.type !== AssetType.Video;\n    }\n\n    /**\n     * Raised when the selected asset has been changed.\n     * This can either be a parent or child asset\n     */\n    private onAssetMetadataChanged = async (assetMetadata: IAssetMetadata): Promise<void> => {\n        // If the asset contains any regions without tags, don't proceed.\n        const regionsWithoutTags = assetMetadata.regions.filter((region) => region.tags.length === 0);\n\n        if (regionsWithoutTags.length > 0) {\n            this.setState({ isValid: false });\n            return;\n        }\n\n        const initialState = assetMetadata.asset.state;\n\n        // The root asset can either be the actual asset being edited (ex: VideoFrame) or the top level / root\n        // asset selected from the side bar (image/video).\n        const rootAsset = { ...(assetMetadata.asset.parent || assetMetadata.asset) };\n\n        if (this.isTaggableAssetType(assetMetadata.asset)) {\n            assetMetadata.asset.state = assetMetadata.regions.length > 0 ? AssetState.Tagged : AssetState.Visited;\n        } else if (assetMetadata.asset.state === AssetState.NotVisited) {\n            assetMetadata.asset.state = AssetState.Visited;\n        }\n\n        // Update root asset if not already in the \"Tagged\" state\n        // This is primarily used in the case where a Video Frame is being edited.\n        // We want to ensure that in this case the root video asset state is accurately\n        // updated to match that state of the asset.\n        if (rootAsset.id === assetMetadata.asset.id) {\n            rootAsset.state = assetMetadata.asset.state;\n        } else {\n            const rootAssetMetadata = await this.props.actions.loadAssetMetadata(this.props.project, rootAsset);\n\n            if (rootAssetMetadata.asset.state !== AssetState.Tagged) {\n                rootAssetMetadata.asset.state = assetMetadata.asset.state;\n                await this.props.actions.saveAssetMetadata(this.props.project, rootAssetMetadata);\n            }\n\n            rootAsset.state = rootAssetMetadata.asset.state;\n        }\n\n        // Only update asset metadata if state changes or is different\n        if (initialState !== assetMetadata.asset.state || this.state.selectedAsset !== assetMetadata) {\n            await this.props.actions.saveAssetMetadata(this.props.project, assetMetadata);\n        }\n\n        await this.props.actions.saveProject(this.props.project);\n\n        const assetService = new AssetService(this.props.project);\n        const childAssets = assetService.getChildAssets(rootAsset);\n\n        // Find and update the root asset in the internal state\n        // This forces the root assets that are displayed in the sidebar to\n        // accurately show their correct state (not-visited, visited or tagged)\n        const assets = [...this.state.assets];\n        const assetIndex = assets.findIndex((asset) => asset.id === rootAsset.id);\n        if (assetIndex > -1) {\n            assets[assetIndex] = {\n                ...rootAsset,\n            };\n        }\n\n        this.setState({ childAssets, assets, isValid: true });\n    }\n\n    /**\n     * Raised when the asset binary has been painted onto the canvas tools rendering canvas\n     */\n    private onCanvasRendered = async (canvas: HTMLCanvasElement) => {\n        // When active learning auto-detect is enabled\n        // run predictions when asset changes\n        if (this.props.project.activeLearningSettings.autoDetect && !this.state.selectedAsset.asset.predicted) {\n            await this.predictRegions(canvas);\n        }\n    }\n\n    private onSelectedRegionsChanged = (selectedRegions: IRegion[]) => {\n        this.setState({ selectedRegions });\n    }\n\n    private onTagsChanged = async (tags) => {\n        const project = {\n            ...this.props.project,\n            tags,\n        };\n\n        await this.props.actions.saveProject(project);\n    }\n\n    private onLockedTagsChanged = (lockedTags: string[]) => {\n        this.setState({ lockedTags });\n    }\n\n    private onToolbarItemSelected = async (toolbarItem: ToolbarItem): Promise<void> => {\n        switch (toolbarItem.props.name) {\n            case ToolbarItemName.DrawRectangle:\n                this.setState({\n                    selectionMode: SelectionMode.RECT,\n                    editorMode: EditorMode.Rectangle,\n                });\n                break;\n            case ToolbarItemName.DrawPolygon:\n                this.setState({\n                    selectionMode: SelectionMode.POLYGON,\n                    editorMode: EditorMode.Polygon,\n                });\n                break;\n            case ToolbarItemName.CopyRectangle:\n                this.setState({\n                    selectionMode: SelectionMode.COPYRECT,\n                    editorMode: EditorMode.CopyRect,\n                });\n                break;\n            case ToolbarItemName.SelectCanvas:\n                this.setState({\n                    selectionMode: SelectionMode.NONE,\n                    editorMode: EditorMode.Select,\n                });\n                break;\n            case ToolbarItemName.PreviousAsset:\n                await this.goToRootAsset(-1);\n                break;\n            case ToolbarItemName.NextAsset:\n                await this.goToRootAsset(1);\n                break;\n            case ToolbarItemName.CopyRegions:\n                this.canvas.current.copyRegions();\n                break;\n            case ToolbarItemName.CutRegions:\n                this.canvas.current.cutRegions();\n                break;\n            case ToolbarItemName.PasteRegions:\n                this.canvas.current.pasteRegions();\n                break;\n            case ToolbarItemName.RemoveAllRegions:\n                this.canvas.current.confirmRemoveAllRegions();\n                break;\n            case ToolbarItemName.ActiveLearning:\n                await this.predictRegions();\n                break;\n        }\n    }\n\n    private predictRegions = async (canvas?: HTMLCanvasElement) => {\n        canvas = canvas || document.querySelector(\"canvas\");\n        if (!canvas) {\n            return;\n        }\n\n        // Load the configured ML model\n        if (!this.activeLearningService.isModelLoaded()) {\n            let toastId: number = null;\n            try {\n                toastId = toast.info(strings.activeLearning.messages.loadingModel, { autoClose: false });\n                await this.activeLearningService.ensureModelLoaded();\n            } catch (e) {\n                toast.error(strings.activeLearning.messages.errorLoadModel);\n                return;\n            } finally {\n                toast.dismiss(toastId);\n            }\n        }\n\n        // Predict and add regions to current asset\n        try {\n            const updatedAssetMetadata = await this.activeLearningService\n                .predictRegions(canvas, this.state.selectedAsset);\n\n            await this.onAssetMetadataChanged(updatedAssetMetadata);\n            this.setState({ selectedAsset: updatedAssetMetadata });\n        } catch (e) {\n            throw new AppError(ErrorCode.ActiveLearningPredictionError, \"Error predicting regions\");\n        }\n    }\n\n    /**\n     * Navigates to the previous / next root asset on the sidebar\n     * @param direction Number specifying asset navigation\n     */\n    private goToRootAsset = async (direction: number) => {\n        const selectedRootAsset = this.state.selectedAsset.asset.parent || this.state.selectedAsset.asset;\n        const currentIndex = this.state.assets\n            .findIndex((asset) => asset.id === selectedRootAsset.id);\n\n        if (direction > 0) {\n            await this.selectAsset(this.state.assets[Math.min(this.state.assets.length - 1, currentIndex + 1)]);\n        } else {\n            await this.selectAsset(this.state.assets[Math.max(0, currentIndex - 1)]);\n        }\n    }\n\n    private onBeforeAssetSelected = (): boolean => {\n        if (!this.state.isValid) {\n            this.setState({ showInvalidRegionWarning: true });\n        }\n\n        return this.state.isValid;\n    }\n\n    private selectAsset = async (asset: IAsset): Promise<void> => {\n        // Nothing to do if we are already on the same asset.\n        if (this.state.selectedAsset && this.state.selectedAsset.asset.id === asset.id) {\n            return;\n        }\n\n        if (!this.state.isValid) {\n            this.setState({ showInvalidRegionWarning: true });\n            return;\n        }\n\n        const assetMetadata = await this.props.actions.loadAssetMetadata(this.props.project, asset);\n\n        try {\n            if (!assetMetadata.asset.size) {\n                const assetProps = await HtmlFileReader.readAssetAttributes(asset);\n                assetMetadata.asset.size = { width: assetProps.width, height: assetProps.height };\n            }\n        } catch (err) {\n            console.warn(\"Error computing asset size\");\n        }\n\n        this.setState({\n            selectedAsset: assetMetadata,\n        }, async () => {\n            await this.onAssetMetadataChanged(assetMetadata);\n        });\n    }\n\n    private loadProjectAssets = async (): Promise<void> => {\n        if (this.loadingProjectAssets || this.state.assets.length > 0) {\n            return;\n        }\n\n        this.loadingProjectAssets = true;\n\n        // Get all root project assets\n        const rootProjectAssets = _.values(this.props.project.assets)\n            .filter((asset) => !asset.parent);\n\n        // Get all root assets from source asset provider\n        const sourceAssets = await this.props.actions.loadAssets(this.props.project);\n\n        // Merge and uniquify\n        const rootAssets = _(rootProjectAssets)\n            .concat(sourceAssets)\n            .uniqBy((asset) => asset.id)\n            .value();\n\n        const lastVisited = rootAssets.find((asset) => asset.id === this.props.project.lastVisitedAssetId);\n\n        this.setState({\n            assets: rootAssets,\n        }, async () => {\n            if (rootAssets.length > 0) {\n                await this.selectAsset(lastVisited ? lastVisited : rootAssets[0]);\n            }\n            this.loadingProjectAssets = false;\n        });\n    }\n\n    /**\n     * Updates the root asset list from the project assets\n     */\n    private updateRootAssets = () => {\n        const updatedAssets = [...this.state.assets];\n        updatedAssets.forEach((asset) => {\n            const projectAsset = this.props.project.assets[asset.id];\n            if (projectAsset) {\n                asset.state = projectAsset.state;\n            }\n        });\n\n        this.setState({ assets: updatedAssets });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Rect_1 = require(\"../Core/Rect\");\n\nvar ToolbarIcon_1 = require(\"./ToolbarIcon\");\n\nvar ToolbarSelectIcon_1 = require(\"./ToolbarSelectIcon\");\n\nvar ToolbarSeparator_1 = require(\"./ToolbarSeparator\");\n\nvar ToolbarSwitchIcon_1 = require(\"./ToolbarSwitchIcon\");\n/* import * as SNAPSVG_TYPE from \"snapsvg\";\r\ndeclare var Snap: typeof SNAPSVG_TYPE; */\n\n\nvar Toolbar =\n/*#__PURE__*/\nfunction () {\n  function Toolbar(svgHost) {\n    _classCallCheck(this, Toolbar);\n\n    this.iconSpace = 8;\n    this.areHotKeysEnabled = true;\n    this.icons = new Array();\n    this.buildUIElements(svgHost);\n  }\n\n  _createClass(Toolbar, [{\n    key: \"addSelector\",\n    value: function addSelector(icon, actor) {\n      var _this = this;\n\n      var newIcon = new ToolbarSelectIcon_1.ToolbarSelectIcon(this.paper, icon, function (action) {\n        _this.select(action);\n\n        actor(action);\n      });\n      this.addIcon(newIcon);\n    }\n  }, {\n    key: \"addSwitch\",\n    value: function addSwitch(icon, actor) {\n      var newIcon = new ToolbarSwitchIcon_1.ToolbarSwitchIcon(this.paper, icon, function (action) {\n        actor(action);\n      });\n      this.addIcon(newIcon);\n    }\n  }, {\n    key: \"addSeparator\",\n    value: function addSeparator() {\n      var newIcon = new ToolbarSeparator_1.ToolbarSeparator(this.paper, ToolbarIcon_1.ToolbarIcon.IconWidth);\n      this.addIcon(newIcon);\n    }\n  }, {\n    key: \"select\",\n    value: function select(action) {\n      this.icons.forEach(function (icon) {\n        if (icon instanceof ToolbarSelectIcon_1.ToolbarSelectIcon) {\n          if (icon.description.action !== action) {\n            icon.unselect();\n          } else {\n            icon.select();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"setSwitch\",\n    value: function setSwitch(action, on) {\n      var switchIcon = this.findIconByAction(action);\n\n      if (switchIcon !== undefined && switchIcon instanceof ToolbarSwitchIcon_1.ToolbarSwitchIcon) {\n        on ? switchIcon.select() : switchIcon.unselect();\n      }\n    }\n  }, {\n    key: \"enableHotkeys\",\n    value: function enableHotkeys() {\n      this.areHotKeysEnabled = true;\n    }\n  }, {\n    key: \"disableHotkeys\",\n    value: function disableHotkeys() {\n      this.areHotKeysEnabled = false;\n    }\n  }, {\n    key: \"buildUIElements\",\n    value: function buildUIElements(svgHost) {\n      this.baseParent = svgHost;\n      this.paper = Snap(svgHost);\n      this.paperRect = new Rect_1.Rect(svgHost.width.baseVal.value, svgHost.height.baseVal.value);\n      var toolbarGroup = this.paper.g();\n      toolbarGroup.addClass(\"toolbarLayer\");\n      this.recalculateToolbarSize();\n      this.backgroundRect = this.paper.rect(0, 0, this.toolbarWidth, this.toolbarHeight);\n      this.backgroundRect.addClass(\"toolbarBGStyle\");\n      toolbarGroup.add(this.backgroundRect);\n      this.iconsLayer = this.paper.g();\n      this.iconsLayer.addClass(\"iconsLayerStyle\");\n      toolbarGroup.add(this.iconsLayer);\n      this.subscribeToKeyboardEvents();\n    }\n  }, {\n    key: \"recalculateToolbarSize\",\n    value: function recalculateToolbarSize(newIcon) {\n      if (newIcon === undefined) {\n        this.toolbarWidth = ToolbarIcon_1.ToolbarIcon.IconWidth + 2 * this.iconSpace;\n        this.toolbarHeight = this.icons.length * (ToolbarIcon_1.ToolbarIcon.IconHeight + this.iconSpace) + this.iconSpace;\n      } else {\n        var width = newIcon.width + 2 * this.iconSpace;\n\n        if (width > this.toolbarWidth) {\n          this.toolbarWidth = width;\n        }\n\n        this.toolbarHeight = this.toolbarHeight + newIcon.height + this.iconSpace;\n      }\n    }\n  }, {\n    key: \"updateToolbarSize\",\n    value: function updateToolbarSize() {\n      this.backgroundRect.attr({\n        height: this.toolbarHeight,\n        width: this.toolbarWidth\n      });\n    }\n  }, {\n    key: \"addIcon\",\n    value: function addIcon(newIcon) {\n      this.icons.push(newIcon);\n      this.iconsLayer.add(newIcon.node);\n      newIcon.move(this.iconSpace, this.toolbarHeight + this.iconSpace);\n      this.recalculateToolbarSize(newIcon);\n      this.updateToolbarSize();\n    }\n  }, {\n    key: \"findIconByKeycode\",\n    value: function findIconByKeycode(keycode) {\n      return this.icons.find(function (icon) {\n        return icon.description !== null && icon.description.keycode === keycode;\n      });\n    }\n  }, {\n    key: \"findIconByAction\",\n    value: function findIconByAction(action) {\n      return this.icons.find(function (icon) {\n        return icon.description !== null && icon.description.action === action;\n      });\n    }\n  }, {\n    key: \"subscribeToKeyboardEvents\",\n    value: function subscribeToKeyboardEvents() {\n      var _this2 = this;\n\n      window.addEventListener(\"keyup\", function (e) {\n        if (!(e.target instanceof HTMLInputElement) && !(e.target instanceof HTMLTextAreaElement) && !(e.target instanceof HTMLSelectElement)) {\n          if (_this2.areHotKeysEnabled && !e.ctrlKey && !e.altKey) {\n            var icon = _this2.findIconByKeycode(e.code);\n\n            if (icon !== undefined) {\n              if (icon instanceof ToolbarSelectIcon_1.ToolbarSelectIcon || icon instanceof ToolbarSwitchIcon_1.ToolbarSwitchIcon) {\n                icon.activate();\n              }\n            }\n          }\n        }\n      });\n    }\n  }]);\n\n  return Toolbar;\n}();\n\nexports.Toolbar = Toolbar;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/pages/connections/connectionsPage.tsx\";\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\nimport { strings, interpolate } from \"../../../../common/strings\";\nimport * as connectionActions from \"../../../../redux/actions/connectionActions\";\nimport CondensedList from \"../../common/condensedList/condensedList\";\nimport Confirm from \"../../common/confirm/confirm\";\nimport ConnectionForm from \"./connectionForm\";\nimport ConnectionItem from \"./connectionItem\";\nimport \"./connectionsPage.scss\";\nimport { toast } from \"react-toastify\";\n/**\n * Properties for Connection Page\n * @member connections - Array of Connections\n * @member actions - Actions to perform\n */\n\nfunction mapStateToProps(state) {\n  return {\n    connections: state.connections\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(connectionActions, dispatch)\n  };\n}\n/**\n * Page for viewing/editing connections\n */\n\n\nvar ConnectionPage = (_dec = connect(mapStateToProps, mapDispatchToProps), _dec(_class =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ConnectionPage, _React$Component);\n\n  function ConnectionPage(props, context) {\n    var _this;\n\n    _classCallCheck(this, ConnectionPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionPage).call(this, props, context));\n\n    _this.componentDidUpdate = function (prevProps) {\n      var prevConnectionId = prevProps.match.params[\"connectionId\"];\n      var newConnectionId = _this.props.match.params[\"connectionId\"];\n\n      if (prevConnectionId !== newConnectionId) {\n        _this.loadConnection(newConnectionId);\n      }\n    };\n\n    _this.onConnectionDelete =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(connection) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.props.actions.deleteConnection(connection);\n\n              case 2:\n                toast.info(interpolate(strings.connections.messages.deleteSuccess, {\n                  connection: connection\n                }));\n\n                if (_this.state.connection === connection) {\n                  _this.props.history.push(\"/connections\");\n\n                  _this.setState({\n                    connection: null\n                  });\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.onFormSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(connection) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.props.actions.saveConnection(connection);\n\n              case 2:\n                toast.success(interpolate(strings.connections.messages.saveSuccess, {\n                  connection: connection\n                }));\n\n                _this.props.history.goBack();\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      connection: null\n    };\n    _this.confirmDelete = React.createRef();\n    _this.onFormSubmit = _this.onFormSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onFormCancel = _this.onFormCancel.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onConnectionDelete = _this.onConnectionDelete.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ConnectionPage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var connectionId;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                connectionId = this.props.match.params[\"connectionId\"];\n\n                if (connectionId) {\n                  this.loadConnection(connectionId);\n                }\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"app-connections-page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"app-connections-page-list bg-lighter-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(CondensedList, {\n        title: strings.connections.title,\n        newLinkTo: \"/connections/create\",\n        onDelete: function onDelete(connection) {\n          return _this2.confirmDelete.current.open(connection);\n        },\n        Component: ConnectionItem,\n        items: this.props.connections,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      })), React.createElement(Confirm, {\n        ref: this.confirmDelete,\n        title: \"Delete Connection\" // tslint:disable-next-line:max-line-length\n        ,\n        message: function message(connection) {\n          return \"Are you sure you want to delete the connection '\".concat(connection.name, \"'?\");\n        },\n        confirmButtonColor: \"danger\",\n        onConfirm: function onConfirm(connection) {\n          return _this2.onConnectionDelete(connection);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/connections\",\n        render: function render(props) {\n          return React.createElement(\"div\", {\n            className: \"app-connections-page-detail m-3\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          }, React.createElement(\"h6\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, strings.connections.instructions));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/connections/:connectionId\",\n        render: function render(props) {\n          return React.createElement(ConnectionForm, {\n            connection: _this2.state.connection,\n            onSubmit: _this2.onFormSubmit,\n            onCancel: _this2.onFormCancel,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"loadConnection\",\n    value: function () {\n      var _loadConnection = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(connectionId) {\n        var connection;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                connection = this.props.connections.find(function (connection) {\n                  return connection.id === connectionId;\n                });\n\n                if (connection) {\n                  this.setState({\n                    connection: connection\n                  });\n                } else {\n                  this.setState({\n                    connection: null\n                  });\n                }\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function loadConnection(_x3) {\n        return _loadConnection.apply(this, arguments);\n      }\n\n      return loadConnection;\n    }()\n  }, {\n    key: \"onFormCancel\",\n    value: function onFormCancel() {\n      this.props.history.goBack();\n    }\n  }]);\n\n  return ConnectionPage;\n}(React.Component)) || _class);\nexport { ConnectionPage as default };","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/pages/connections/connectionsPage.tsx"],"names":["React","connect","Route","bindActionCreators","strings","interpolate","connectionActions","CondensedList","Confirm","ConnectionForm","ConnectionItem","toast","mapStateToProps","state","connections","mapDispatchToProps","dispatch","actions","ConnectionPage","props","context","componentDidUpdate","prevProps","prevConnectionId","match","params","newConnectionId","loadConnection","onConnectionDelete","connection","deleteConnection","info","messages","deleteSuccess","history","push","setState","onFormSubmit","saveConnection","success","saveSuccess","goBack","confirmDelete","createRef","bind","onFormCancel","connectionId","title","current","open","name","instructions","find","id","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, RouteComponentProps } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\nimport { strings, interpolate } from \"../../../../common/strings\";\nimport { IApplicationState, IConnection } from \"../../../../models/applicationState\";\nimport IConnectionActions, * as connectionActions from \"../../../../redux/actions/connectionActions\";\nimport CondensedList from \"../../common/condensedList/condensedList\";\nimport Confirm from \"../../common/confirm/confirm\";\nimport ConnectionForm from \"./connectionForm\";\nimport ConnectionItem from \"./connectionItem\";\nimport \"./connectionsPage.scss\";\nimport { toast } from \"react-toastify\";\n\n/**\n * Properties for Connection Page\n * @member connections - Array of Connections\n * @member actions - Actions to perform\n */\nexport interface IConnectionPageProps extends RouteComponentProps, React.Props<ConnectionPage> {\n    connections: IConnection[];\n    actions: IConnectionActions;\n}\n\n/**\n * State of Connection Page\n * @member connection - Connection currently being viewed/edited\n */\nexport interface IConnectionPageState {\n    connection: IConnection;\n}\n\nfunction mapStateToProps(state: IApplicationState) {\n    return {\n        connections: state.connections,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators(connectionActions, dispatch),\n    };\n}\n\n/**\n * Page for viewing/editing connections\n */\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class ConnectionPage extends React.Component<IConnectionPageProps, IConnectionPageState> {\n    private confirmDelete: React.RefObject<Confirm>;\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            connection: null,\n        };\n\n        this.confirmDelete = React.createRef<Confirm>();\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n        this.onFormCancel = this.onFormCancel.bind(this);\n        this.onConnectionDelete = this.onConnectionDelete.bind(this);\n    }\n\n    public async componentDidMount() {\n        const connectionId = this.props.match.params[\"connectionId\"];\n        if (connectionId) {\n            this.loadConnection(connectionId);\n        }\n    }\n\n    public componentDidUpdate = (prevProps) => {\n        const prevConnectionId = prevProps.match.params[\"connectionId\"];\n        const newConnectionId = this.props.match.params[\"connectionId\"];\n\n        if (prevConnectionId !== newConnectionId) {\n            this.loadConnection(newConnectionId);\n        }\n    }\n\n    public render() {\n        return (\n            <div className=\"app-connections-page\">\n                <div className=\"app-connections-page-list bg-lighter-1\">\n                    <CondensedList\n                        title={strings.connections.title}\n                        newLinkTo={\"/connections/create\"}\n                        onDelete={(connection) => this.confirmDelete.current.open(connection)}\n                        Component={ConnectionItem}\n                        items={this.props.connections} />\n                </div>\n\n                <Confirm ref={this.confirmDelete}\n                    title=\"Delete Connection\"\n                    // tslint:disable-next-line:max-line-length\n                    message={(connection: IConnection) => `Are you sure you want to delete the connection '${connection.name}'?`}\n                    confirmButtonColor=\"danger\"\n                    onConfirm={(connection) => this.onConnectionDelete(connection)} />\n\n                <Route exact path=\"/connections\" render={(props) =>\n                    <div className=\"app-connections-page-detail m-3\">\n                        <h6>{strings.connections.instructions}</h6>\n                    </div>\n                } />\n\n                <Route exact path=\"/connections/:connectionId\" render={(props) =>\n                    <ConnectionForm\n                        connection={this.state.connection}\n                        onSubmit={this.onFormSubmit}\n                        onCancel={this.onFormCancel} />\n                } />\n            </div>\n        );\n    }\n\n    private async loadConnection(connectionId: string) {\n        const connection = this.props.connections.find((connection) => connection.id === connectionId);\n        if (connection) {\n            this.setState({ connection });\n        } else {\n            this.setState({ connection: null });\n        }\n    }\n\n    private onConnectionDelete = async (connection: IConnection) => {\n        await this.props.actions.deleteConnection(connection);\n\n        toast.info(interpolate(strings.connections.messages.deleteSuccess, { connection }));\n\n        if (this.state.connection === connection) {\n            this.props.history.push(\"/connections\");\n            this.setState({ connection: null });\n        }\n    }\n\n    private onFormSubmit = async (connection: IConnection) => {\n        await this.props.actions.saveConnection(connection);\n        toast.success(interpolate(strings.connections.messages.saveSuccess, { connection }));\n\n        this.props.history.goBack();\n    }\n\n    private onFormCancel() {\n        this.props.history.goBack();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
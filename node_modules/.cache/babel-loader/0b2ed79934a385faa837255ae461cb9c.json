{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Element_1 = require(\"../Component/Element\");\n/**\r\n * The abstract class to define region selectors.\r\n */\n\n\nvar Selector =\n/*#__PURE__*/\nfunction (_Element_1$Element) {\n  _inherits(Selector, _Element_1$Element);\n\n  /**\r\n   * Creates new selector.\r\n   * @param parent - The parent (host) SVG-element.\r\n   * @param paper - The `Snap.Paper` element to draw on.\r\n   * @param boundRect - The bounding box for selector.\r\n   * @param callbacks - The collection of callbacks.\r\n   */\n  function Selector(parent, paper, boundRect, callbacks) {\n    var _this;\n\n    _classCallCheck(this, Selector);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Selector).call(this, paper, boundRect));\n    /**\r\n     * The flag to define if selector is enabled or disabled.\r\n     */\n\n    _this.isEnabled = true;\n    _this.parentNode = parent;\n\n    if (callbacks !== undefined) {\n      _this.callbacks = callbacks;\n    } else {\n      _this.callbacks = {\n        onLocked: null,\n        onSelectionBegin: null,\n        onSelectionEnd: null,\n        onUnlocked: null\n      };\n    }\n\n    return _this;\n  }\n  /**\r\n   * Enables and shows this selector.\r\n   */\n\n\n  _createClass(Selector, [{\n    key: \"enable\",\n    value: function enable() {\n      if (!this.isEnabled) {\n        this.isEnabled = true;\n        this.show();\n      }\n    }\n    /**\r\n     * Disables and hides this selector.\r\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this.isEnabled) {\n        this.isEnabled = false;\n        this.hide();\n      }\n    }\n    /**\r\n     * Helper function to subscribe collection of elements to specified listeners.\r\n     * @param listeners - The collection of `IEventDescriptor` objects.\r\n     */\n\n  }, {\n    key: \"subscribeToEvents\",\n    value: function subscribeToEvents(listeners) {\n      var _this2 = this;\n\n      listeners.forEach(function (e) {\n        e.base.addEventListener(e.event, _this2.enablify(e.listener.bind(_this2), e.bypass));\n      });\n    }\n    /**\r\n     * Helper function to wrap listener with the enablement flag.\r\n     * @param f - The function to wrap.\r\n     * @param bypass - The `bypass` flag to define whether event should be captured.\r\n     */\n\n  }, {\n    key: \"enablify\",\n    value: function enablify(f) {\n      var _this3 = this;\n\n      var bypass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return function (args) {\n        if (_this3.isEnabled || bypass) {\n          f(args);\n        }\n      };\n    }\n    /**\r\n     * Shows all the elements in specified array.\r\n     * @param elements - The array of elements to show.\r\n     */\n\n  }, {\n    key: \"showAll\",\n    value: function showAll(elements) {\n      window.requestAnimationFrame(function () {\n        elements.forEach(function (element) {\n          if (element.show !== undefined) {\n            element.show();\n          } else {\n            element.node.setAttribute(\"visibility\", \"visible\");\n          }\n        });\n      });\n    }\n    /**\r\n     * Hides all the elements in specified array.\r\n     * @param elements - The array of elements to hide.\r\n     */\n\n  }, {\n    key: \"hideAll\",\n    value: function hideAll(elements) {\n      window.requestAnimationFrame(function () {\n        elements.forEach(function (element) {\n          if (element.hide !== undefined) {\n            element.hide();\n          } else {\n            element.node.setAttribute(\"visibility\", \"hidden\");\n          }\n        });\n      });\n    }\n    /**\r\n     * Resizes all the elements to the `boundRect` of this element.\r\n     * @param elemenets - The array of elements to resize.\r\n     */\n\n  }, {\n    key: \"resizeAll\",\n    value: function resizeAll(elements) {\n      var _this4 = this;\n\n      window.requestAnimationFrame(function () {\n        elements.forEach(function (element) {\n          element.resize(_this4.boundRect.width, _this4.boundRect.height);\n        });\n      });\n    }\n    /**\r\n     * Helper function to move the cross element to specified position.\r\n     * @param cross - The cross element to move.\r\n     * @param pointTo - The new position of the cross element.\r\n     * @param square - The flag that movement should be related to reference point of a square\r\n     */\n\n  }, {\n    key: \"moveCross\",\n    value: function moveCross(cross, pointTo) {\n      var square = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      cross.move(pointTo, this.boundRect, square, ref);\n    }\n    /**\r\n     * Helper function to move a point element to specified position\r\n     * @param point - The point element to move.\r\n     * @param pointTo - The new position of the point.\r\n     */\n\n  }, {\n    key: \"movePoint\",\n    value: function movePoint(point, pointTo) {\n      point.attr({\n        cx: pointTo.x,\n        cy: pointTo.y\n      });\n    }\n    /**\r\n     * Helper function to move a line element to specified begin and end positions\r\n     * @param line - The line element to move.\r\n     * @param pointFrom - The begin point.\r\n     * @param pointTo - The end point.\r\n     */\n\n  }, {\n    key: \"moveLine\",\n    value: function moveLine(line, pointFrom, pointTo) {\n      line.attr({\n        x1: pointFrom.x,\n        x2: pointTo.x,\n        y1: pointFrom.y,\n        y2: pointTo.y\n      });\n    }\n  }]);\n\n  return Selector;\n}(Element_1.Element);\n\nexports.Selector = Selector;","map":null,"metadata":{},"sourceType":"script"}
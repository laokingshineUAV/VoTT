{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Point2D_1 = require(\"../../Core/Point2D\");\n\nvar Rect_1 = require(\"../../Core/Rect\");\n\nvar RegionData_1 = require(\"../../Core/RegionData\");\n\nvar CrossElement_1 = require(\"../Component/CrossElement\");\n\nvar MaskElement_1 = require(\"../Component/MaskElement\");\n\nvar RectElement_1 = require(\"../Component/RectElement\");\n\nvar Selector_1 = require(\"./Selector\");\n/**\r\n * Enum to specify selection mode.\r\n */\n\n\nvar SelectionModificator;\n\n(function (SelectionModificator) {\n  SelectionModificator[SelectionModificator[\"RECT\"] = 0] = \"RECT\";\n  SelectionModificator[SelectionModificator[\"SQUARE\"] = 1] = \"SQUARE\";\n})(SelectionModificator = exports.SelectionModificator || (exports.SelectionModificator = {}));\n/**\r\n * The selector to define a rect-region.\r\n */\n\n\nvar RectSelector =\n/*#__PURE__*/\nfunction (_Selector_1$Selector) {\n  _inherits(RectSelector, _Selector_1$Selector);\n\n  /**\r\n   * Creates new `RectSelector` object.\r\n   * @param parent - The parent SVG-element.\r\n   * @param paper - The `Snap.Paper` element to draw on.\r\n   * @param boundRect - The bounding box.\r\n   * @param callbacks - The collection of callbacks.\r\n   */\n  function RectSelector(parent, paper, boundRect, callbacks) {\n    var _this;\n\n    _classCallCheck(this, RectSelector);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RectSelector).call(this, parent, paper, boundRect, callbacks));\n    /**\r\n     * Internal flag for selection state.\r\n     */\n\n    _this.capturingState = false;\n    /**\r\n     * Internal flag for selection mode.\r\n     */\n\n    _this.isTwoPoints = false;\n    /**\r\n     * Internal flag for selection type.\r\n     */\n\n    _this.selectionModificator = SelectionModificator.RECT;\n\n    _this.buildUIElements();\n\n    _this.hide();\n\n    return _this;\n  }\n  /**\r\n   * Resizes the selector to specified `width` and `height`.\r\n   * @param width - The new `width`.\r\n   * @param height - The new `height`.\r\n   */\n\n\n  _createClass(RectSelector, [{\n    key: \"resize\",\n    value: function resize(width, height) {\n      _get(_getPrototypeOf(RectSelector.prototype), \"resize\", this).call(this, width, height);\n\n      this.resizeAll([this.mask, this.crossA, this.crossB]);\n    }\n    /**\r\n     * Hides the selector.\r\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      _get(_getPrototypeOf(RectSelector.prototype), \"hide\", this).call(this);\n\n      this.hideAll([this.crossA, this.crossB, this.mask]);\n    }\n    /**\r\n     * Shows the selector.\r\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      _get(_getPrototypeOf(RectSelector.prototype), \"show\", this).call(this);\n\n      this.crossA.show();\n    }\n    /**\r\n     * Builds selector's UI.\r\n     */\n\n  }, {\n    key: \"buildUIElements\",\n    value: function buildUIElements() {\n      this.node = this.paper.g();\n      this.node.addClass(\"rectSelector\");\n      this.crossA = new CrossElement_1.CrossElement(this.paper, this.boundRect);\n      this.crossB = new CrossElement_1.CrossElement(this.paper, this.boundRect);\n      this.selectionBox = new RectElement_1.RectElement(this.paper, this.boundRect, new Rect_1.Rect(0, 0));\n      this.selectionBox.node.addClass(\"selectionBoxStyle\");\n      this.mask = new MaskElement_1.MaskElement(this.paper, this.boundRect, this.selectionBox);\n      this.node.add(this.mask.node);\n      this.node.add(this.crossA.node);\n      this.node.add(this.crossB.node);\n      var listeners = [{\n        event: \"pointerenter\",\n        listener: this.onPointerEnter,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"pointerleave\",\n        listener: this.onPointerLeave,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"pointerdown\",\n        listener: this.onPointerDown,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"pointerup\",\n        listener: this.onPointerUp,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"pointermove\",\n        listener: this.onPointerMove,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"keydown\",\n        listener: this.onKeyDown,\n        base: window,\n        bypass: false\n      }, {\n        event: \"keyup\",\n        listener: this.onKeyUp,\n        base: window,\n        bypass: true\n      }];\n      this.subscribeToEvents(listeners);\n    }\n    /**\r\n     * Helper function to move the rect element to specified locations.\r\n     * @param box - The box to move.\r\n     * @param pa - The first corner point.\r\n     * @param pb - The opposite corner point.\r\n     */\n\n  }, {\n    key: \"moveSelectionBox\",\n    value: function moveSelectionBox(box, pa, pb) {\n      var x = pa.x < pb.x ? pa.x : pb.x;\n      var y = pa.y < pb.y ? pa.y : pb.y;\n      var w = Math.abs(pa.x - pb.x);\n      var h = Math.abs(pa.y - pb.y);\n      box.move(new Point2D_1.Point2D(x, y));\n      box.resize(w, h);\n    }\n    /**\r\n     * Listener for the pointer enter event.\r\n     * @param e PointerEvent\r\n     */\n\n  }, {\n    key: \"onPointerEnter\",\n    value: function onPointerEnter(e) {\n      var _this2 = this;\n\n      window.requestAnimationFrame(function () {\n        _this2.crossA.show();\n      });\n    }\n    /**\r\n     * Listener for the pointer leave event.\r\n     * @param e PointerEvent\r\n     */\n\n  }, {\n    key: \"onPointerLeave\",\n    value: function onPointerLeave(e) {\n      var _this3 = this;\n\n      window.requestAnimationFrame(function () {\n        var rect = _this3.parentNode.getClientRects();\n\n        var p = new Point2D_1.Point2D(e.clientX - rect[0].left, e.clientY - rect[0].top);\n\n        if (!_this3.capturingState) {\n          _this3.hideAll([_this3.crossA, _this3.crossB, _this3.selectionBox]);\n        } else if (_this3.isTwoPoints && _this3.capturingState) {\n          _this3.moveCross(_this3.crossB, p);\n\n          _this3.moveSelectionBox(_this3.selectionBox, _this3.crossA, _this3.crossB);\n        }\n      });\n    }\n    /**\r\n     * Listener for the pointer down event.\r\n     * @param e PointerEvent\r\n     */\n\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(e) {\n      var _this4 = this;\n\n      window.requestAnimationFrame(function () {\n        if (!_this4.isTwoPoints) {\n          _this4.capturingState = true;\n\n          _this4.parentNode.setPointerCapture(e.pointerId);\n\n          _this4.moveCross(_this4.crossB, _this4.crossA);\n\n          _this4.moveSelectionBox(_this4.selectionBox, _this4.crossA, _this4.crossB);\n\n          _this4.showAll([_this4.mask, _this4.crossB, _this4.selectionBox]);\n\n          if (typeof _this4.callbacks.onSelectionBegin === \"function\") {\n            _this4.callbacks.onSelectionBegin();\n          }\n        }\n      });\n    }\n    /**\r\n     * Listener for the pointer up event.\r\n     * @param e PointerEvent\r\n     */\n\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(e) {\n      var _this5 = this;\n\n      window.requestAnimationFrame(function () {\n        var rect = _this5.parentNode.getClientRects();\n\n        var p = new Point2D_1.Point2D(e.clientX - rect[0].left, e.clientY - rect[0].top);\n\n        if (!_this5.isTwoPoints) {\n          _this5.capturingState = false;\n\n          _this5.parentNode.releasePointerCapture(e.pointerId);\n\n          _this5.hideAll([_this5.crossB, _this5.mask]);\n\n          if (typeof _this5.callbacks.onSelectionEnd === \"function\") {\n            var x = Math.min(_this5.crossA.x, _this5.crossB.x);\n            var y = Math.min(_this5.crossA.y, _this5.crossB.y);\n            var w = Math.abs(_this5.crossA.x - _this5.crossB.x);\n            var h = Math.abs(_this5.crossA.y - _this5.crossB.y);\n\n            _this5.callbacks.onSelectionEnd(RegionData_1.RegionData.BuildRectRegionData(x, y, w, h));\n          }\n        } else {\n          if (_this5.capturingState) {\n            _this5.capturingState = false;\n\n            _this5.hideAll([_this5.crossB, _this5.mask]);\n\n            if (typeof _this5.callbacks.onSelectionEnd === \"function\") {\n              var _x = Math.min(_this5.crossA.x, _this5.crossB.x);\n\n              var _y = Math.min(_this5.crossA.y, _this5.crossB.y);\n\n              var _w = Math.abs(_this5.crossA.x - _this5.crossB.x);\n\n              var _h = Math.abs(_this5.crossA.y - _this5.crossB.y);\n\n              _this5.callbacks.onSelectionEnd(RegionData_1.RegionData.BuildRectRegionData(_x, _y, _w, _h));\n            }\n\n            _this5.moveCross(_this5.crossA, p);\n\n            _this5.moveCross(_this5.crossB, p);\n          } else {\n            _this5.capturingState = true;\n\n            _this5.moveCross(_this5.crossB, p);\n\n            _this5.moveSelectionBox(_this5.selectionBox, _this5.crossA, _this5.crossB);\n\n            _this5.showAll([_this5.crossA, _this5.crossB, _this5.selectionBox, _this5.mask]);\n\n            if (typeof _this5.callbacks.onSelectionBegin === \"function\") {\n              _this5.callbacks.onSelectionBegin();\n            }\n          }\n        }\n      });\n    }\n    /**\r\n     * Listener for the pointer move event.\r\n     * @param e PointerEvent\r\n     */\n\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(e) {\n      var _this6 = this;\n\n      window.requestAnimationFrame(function () {\n        var rect = _this6.parentNode.getClientRects();\n\n        var p = new Point2D_1.Point2D(e.clientX - rect[0].left, e.clientY - rect[0].top);\n\n        _this6.crossA.show();\n\n        if (!_this6.isTwoPoints) {\n          if (_this6.capturingState) {\n            _this6.moveCross(_this6.crossB, p, _this6.selectionModificator === SelectionModificator.SQUARE, _this6.crossA);\n\n            _this6.moveSelectionBox(_this6.selectionBox, _this6.crossA, _this6.crossB);\n          } else {\n            _this6.moveCross(_this6.crossA, p);\n          }\n        } else {\n          if (_this6.capturingState) {\n            _this6.moveCross(_this6.crossB, p, _this6.selectionModificator === SelectionModificator.SQUARE, _this6.crossA);\n\n            _this6.moveSelectionBox(_this6.selectionBox, _this6.crossA, _this6.crossB);\n          } else {\n            _this6.moveCross(_this6.crossA, p);\n\n            _this6.moveCross(_this6.crossB, p);\n          }\n        }\n      });\n      e.preventDefault();\n    }\n    /**\r\n     * Listener for the key down event.\r\n     * @param e KeyboardEvent\r\n     */\n\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(e) {\n      // Holding shift key enable square drawing mode\n      if (e.shiftKey) {\n        this.selectionModificator = SelectionModificator.SQUARE;\n      }\n\n      if (e.ctrlKey && !this.capturingState) {\n        this.isTwoPoints = true;\n      }\n    }\n    /**\r\n     * Listener for the key up event.\r\n     * @param e KeyboardEvent\r\n     */\n\n  }, {\n    key: \"onKeyUp\",\n    value: function onKeyUp(e) {\n      // Holding shift key enable square drawing mode\n      if (!e.shiftKey) {\n        this.selectionModificator = SelectionModificator.RECT;\n      } // Holding Ctrl key to enable two point selection mode\n\n\n      if (!e.ctrlKey && this.isTwoPoints) {\n        this.isTwoPoints = false;\n        this.capturingState = false;\n        this.moveCross(this.crossA, this.crossB);\n        this.hideAll([this.crossB, this.selectionBox, this.mask]);\n      }\n    }\n  }]);\n\n  return RectSelector;\n}(Selector_1.Selector);\n\nexports.RectSelector = RectSelector;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport shortid from \"shortid\";\nimport { AppError, ErrorCode, RegionType, AssetState, AssetType } from \"../models/applicationState\";\nimport packageJson from \"../../package.json\";\nimport { AssetService } from \"./assetService\";\nimport HtmlFileReader from \"../common/htmlFileReader\";\nimport { normalizeSlashes } from \"../common/utils\";\nimport Guard from \"../common/guard\";\n/**\n * Functions required for an import service\n * @member convertProject - Converts a v1 project to v2 project\n */\n\n/**\n * @name - Import Service\n * @description - Functions for importing v1 projects to v2 application\n */\nvar ImportService =\n/*#__PURE__*/\nfunction () {\n  function ImportService() {\n    _classCallCheck(this, ImportService);\n  }\n\n  _createClass(ImportService, [{\n    key: \"convertProject\",\n\n    /**\n     * Converts given v1 project information to v2 format\n     * @param projectInfo The project file information and content\n     */\n    value: function () {\n      var _convertProject = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(projectInfo) {\n        var originalProject, connection, parsedTags;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Guard.null(projectInfo);\n                _context.prev = 1;\n                originalProject = JSON.parse(projectInfo.content);\n                _context.next = 8;\n                break;\n\n              case 5:\n                _context.prev = 5;\n                _context.t0 = _context[\"catch\"](1);\n                throw new AppError(ErrorCode.ProjectInvalidJson, \"Error parsing JSON\");\n\n              case 8:\n                parsedTags = this.parseTags(originalProject);\n                connection = this.generateConnection(projectInfo); // map v1 values to v2 values\n\n                return _context.abrupt(\"return\", {\n                  id: shortid.generate(),\n                  name: projectInfo.file.name.split(\".\")[0],\n                  version: packageJson.version,\n                  securityToken: \"\".concat(projectInfo.file.name.split(\".\")[0], \" Token\"),\n                  description: \"Converted V1 Project\",\n                  tags: parsedTags,\n                  sourceConnection: connection,\n                  targetConnection: connection,\n                  exportFormat: null,\n                  videoSettings: {\n                    frameExtractionRate: originalProject.framerate ? Number(originalProject.framerate) : 15\n                  },\n                  activeLearningSettings: null,\n                  autoSave: true\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 5]]);\n      }));\n\n      function convertProject(_x) {\n        return _convertProject.apply(this, arguments);\n      }\n\n      return convertProject;\n    }()\n    /**\n     * Generate assets based on V1 Project frames and regions\n     * @param v1Project Original v1 Project Content and File Information\n     * @param v2Project Partially converted v2 project file\n     */\n\n  }, {\n    key: \"generateAssets\",\n    value: function () {\n      var _generateAssets = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(v1Project, v2Project) {\n        var originalProject, generatedAssetMetadata, frames;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                Guard.null(v1Project);\n                Guard.null(v2Project);\n                generatedAssetMetadata = [];\n                this.assetService = new AssetService(v2Project);\n                originalProject = JSON.parse(v1Project.content);\n                frames = Object.keys(originalProject.frames).map(function (frameName) {\n                  return {\n                    name: frameName,\n                    regions: originalProject.frames[frameName]\n                  };\n                });\n\n                if (!this.isVideoProject(v1Project)) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                _context2.next = 9;\n                return this.generateVideoAssets(v1Project, frames);\n\n              case 9:\n                generatedAssetMetadata = _context2.sent;\n                _context2.next = 15;\n                break;\n\n              case 12:\n                _context2.next = 14;\n                return this.generateImageAssets(v1Project, frames);\n\n              case 14:\n                generatedAssetMetadata = _context2.sent;\n\n              case 15:\n                return _context2.abrupt(\"return\", generatedAssetMetadata);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function generateAssets(_x2, _x3) {\n        return _generateAssets.apply(this, arguments);\n      }\n\n      return generateAssets;\n    }()\n    /**\n     * Generate assets for V1 Image Project frames and regions\n     * @param v1Project - v1 Project content and file information\n     * @param frames - Array of frames in v1 project\n     */\n\n  }, {\n    key: \"generateImageAssets\",\n    value: function () {\n      var _generateImageAssets = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(v1Project, frames) {\n        var _this = this;\n\n        var projectPath;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                projectPath = normalizeSlashes(v1Project.file.path.replace(/\\.[^/.]+$/, \"\"));\n                _context4.next = 3;\n                return frames.mapAsync(\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee3(frame) {\n                    var filePath, asset, assetState;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            filePath = \"\".concat(projectPath, \"/\").concat(frame.name);\n                            asset = AssetService.createAssetFromFilePath(filePath);\n                            assetState = _this.getAssetState(frame);\n                            _context3.next = 5;\n                            return _this.createAssetMetadata(asset, assetState, frame.regions);\n\n                          case 5:\n                            return _context3.abrupt(\"return\", _context3.sent);\n\n                          case 6:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, this);\n                  }));\n\n                  return function (_x6) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 3:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function generateImageAssets(_x4, _x5) {\n        return _generateImageAssets.apply(this, arguments);\n      }\n\n      return generateImageAssets;\n    }()\n    /**\n     * Generate assets for V1 Video Project frames and regions\n     * @param v1Project - v1 Project content and file information\n     * @param frames - Array of frames in v1 project\n     */\n\n  }, {\n    key: \"generateVideoAssets\",\n    value: function () {\n      var _generateVideoAssets = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(v1Project, frames) {\n        var _this2 = this;\n\n        var parentVideoAsset, originalProject, videoFrameAssets, taggedAssets, parentAssetState, parentAssetMetadata;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.createParentVideoAsset(v1Project);\n\n              case 2:\n                parentVideoAsset = _context6.sent;\n                originalProject = JSON.parse(v1Project.content);\n                _context6.next = 6;\n                return frames.mapAsync(\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee5(frame) {\n                    var frameInt, timestamp, asset, assetState;\n                    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            frameInt = Number(frame.name);\n                            timestamp = (frameInt - 1) / Number(originalProject.framerate);\n                            asset = _this2.createVideoFrameAsset(parentVideoAsset, timestamp);\n                            assetState = _this2.getAssetState(frame);\n                            _context5.next = 6;\n                            return _this2.createAssetMetadata(asset, assetState, frame.regions, parentVideoAsset);\n\n                          case 6:\n                            return _context5.abrupt(\"return\", _context5.sent);\n\n                          case 7:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5, this);\n                  }));\n\n                  return function (_x9) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }());\n\n              case 6:\n                videoFrameAssets = _context6.sent;\n                taggedAssets = videoFrameAssets.filter(function (assetMetadata) {\n                  return assetMetadata.asset.state === AssetState.Tagged;\n                });\n                parentAssetState = taggedAssets.length > 0 ? AssetState.Tagged : AssetState.Visited;\n                _context6.next = 11;\n                return this.createAssetMetadata(parentVideoAsset, parentAssetState, []);\n\n              case 11:\n                parentAssetMetadata = _context6.sent;\n                return _context6.abrupt(\"return\", [parentAssetMetadata].concat(videoFrameAssets));\n\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function generateVideoAssets(_x7, _x8) {\n        return _generateVideoAssets.apply(this, arguments);\n      }\n\n      return generateVideoAssets;\n    }()\n    /**\n     * Checks to see if the specified project is a video project\n     * @param v1Project The original v1 project file info\n     */\n\n  }, {\n    key: \"isVideoProject\",\n    value: function isVideoProject(v1Project) {\n      var pathParts = v1Project.file.path.split(/[\\\\\\/]/);\n      var fileName = pathParts[pathParts.length - 1];\n      var fileNameParts = fileName.split(\".\");\n      return fileNameParts[1] && AssetService.getAssetType(fileNameParts[1]) === AssetType.Video;\n    }\n    /**\n     * Generate parent asset based on V1 Project video assets\n     * @param v1Project - V1 Project Content and File Information\n     */\n\n  }, {\n    key: \"createParentVideoAsset\",\n    value: function () {\n      var _createParentVideoAsset = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(v1Project) {\n        var filePath, parentAsset, assetProps;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                filePath = v1Project.file.path.replace(/\\.[^/.]+$/, \"\");\n                parentAsset = AssetService.createAssetFromFilePath(filePath, filePath.replace(/^.*[\\\\\\/]/, \"\"));\n                _context7.next = 4;\n                return HtmlFileReader.readAssetAttributes(parentAsset);\n\n              case 4:\n                assetProps = _context7.sent;\n                parentAsset.size = {\n                  height: assetProps.height,\n                  width: assetProps.width\n                };\n                parentAsset.state = AssetState.Visited;\n                return _context7.abrupt(\"return\", parentAsset);\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function createParentVideoAsset(_x10) {\n        return _createParentVideoAsset.apply(this, arguments);\n      }\n\n      return createParentVideoAsset;\n    }()\n    /**\n     * Generate connections from v1 project file location\n     * @param project - V1 Project Content and File Information\n     */\n\n  }, {\n    key: \"generateConnection\",\n    value: function generateConnection(project) {\n      var folderPath = this.isVideoProject(project) ? project.file.path.replace(/[^(\\/|\\\\)]*$/, \"\") : project.file.path.replace(\".json\", \"\");\n      var connection = {\n        id: shortid.generate(),\n        name: \"\".concat(project.file.name.split(\".\")[0], \" Connection\"),\n        providerType: \"localFileSystemProxy\",\n        providerOptions: {\n          folderPath: normalizeSlashes(folderPath)\n        }\n      };\n      return connection;\n    }\n    /**\n     * Parse v1 project's tag string and return array of ITags\n     * @param project - V1 Project Content and File Information\n     */\n\n  }, {\n    key: \"parseTags\",\n    value: function parseTags(project) {\n      var tagStrings = project.inputTags.split(\",\");\n      return tagStrings.map(function (tagName, index) {\n        return {\n          name: tagName,\n          color: project.tag_colors[index]\n        };\n      }).filter(function (tag) {\n        return !!tag.name;\n      });\n    }\n    /**\n     * Generate regions based on V1 Project asset metadata\n     * @param metadata - Asset Metadata from asset created from file path\n     * @param frameRegions - V1 Regions within the V1 Frame\n     */\n\n  }, {\n    key: \"addRegions\",\n    value: function addRegions(metadata, frameRegions) {\n      frameRegions.forEach(function (region) {\n        var generatedRegion = {\n          id: region.UID,\n          type: RegionType.Rectangle,\n          tags: region.tags,\n          points: [{\n            x: region.x1,\n            y: region.y1\n          }, {\n            x: region.x1,\n            y: region.y2\n          }, {\n            x: region.x2,\n            y: region.y1\n          }, {\n            x: region.x2,\n            y: region.y2\n          }],\n          boundingBox: {\n            height: region.y2 - region.y1,\n            width: region.x2 - region.x1,\n            left: region.x1,\n            top: region.y1\n          }\n        };\n        metadata.regions.push(generatedRegion);\n      });\n    }\n    /**\n     * Creates a child video frame asset\n     * @param parent The parent video asset\n     * @param timestamp The timestamp for the child video frame\n     */\n\n  }, {\n    key: \"createVideoFrameAsset\",\n    value: function createVideoFrameAsset(parent, timestamp) {\n      return _objectSpread({}, AssetService.createAssetFromFilePath(\"\".concat(parent.path, \"#t=\").concat(timestamp)), {\n        timestamp: timestamp,\n        parent: parent,\n        type: AssetType.VideoFrame,\n        size: parent.size\n      });\n    }\n    /**\n     * Gets the v2 asset state for the specified v1 asset frame\n     * @param frame The v1 asset frame\n     */\n\n  }, {\n    key: \"getAssetState\",\n    value: function getAssetState(frame) {\n      return frame.regions.length > 0 ? AssetState.Tagged : AssetState.Visited;\n    }\n    /**\n     * Creates an asset metadata for the specified asset\n     * @param asset The converted v2 asset\n     * @param assetState The new v2 asset state\n     * @param frameRegions The v1 asset regions\n     * @param parent The v2 parent asset (Used for video assets)\n     */\n\n  }, {\n    key: \"createAssetMetadata\",\n    value: function () {\n      var _createAssetMetadata = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(asset, assetState, frameRegions, parent) {\n        var metadata;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.assetService.getAssetMetadata(asset);\n\n              case 2:\n                metadata = _context8.sent;\n                this.addRegions(metadata, frameRegions);\n                metadata.asset.state = assetState;\n\n                if (parent) {\n                  metadata.asset.parent = parent;\n                }\n\n                if (metadata.asset.size) {\n                  _context8.next = 10;\n                  break;\n                }\n\n                _context8.next = 9;\n                return HtmlFileReader.readAssetAttributes(asset);\n\n              case 9:\n                metadata.asset.size = _context8.sent;\n\n              case 10:\n                return _context8.abrupt(\"return\", metadata);\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function createAssetMetadata(_x11, _x12, _x13, _x14) {\n        return _createAssetMetadata.apply(this, arguments);\n      }\n\n      return createAssetMetadata;\n    }()\n  }]);\n\n  return ImportService;\n}();\n\nexport { ImportService as default };","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/services/importService.ts"],"names":["shortid","AppError","ErrorCode","RegionType","AssetState","AssetType","packageJson","AssetService","HtmlFileReader","normalizeSlashes","Guard","ImportService","projectInfo","null","originalProject","JSON","parse","content","ProjectInvalidJson","parsedTags","parseTags","connection","generateConnection","id","generate","name","file","split","version","securityToken","description","tags","sourceConnection","targetConnection","exportFormat","videoSettings","frameExtractionRate","framerate","Number","activeLearningSettings","autoSave","v1Project","v2Project","generatedAssetMetadata","assetService","frames","Object","keys","map","frameName","regions","isVideoProject","generateVideoAssets","generateImageAssets","projectPath","path","replace","mapAsync","frame","filePath","asset","createAssetFromFilePath","assetState","getAssetState","createAssetMetadata","createParentVideoAsset","parentVideoAsset","frameInt","timestamp","createVideoFrameAsset","videoFrameAssets","taggedAssets","filter","assetMetadata","state","Tagged","parentAssetState","length","Visited","parentAssetMetadata","concat","pathParts","fileName","fileNameParts","getAssetType","Video","parentAsset","readAssetAttributes","assetProps","size","height","width","project","folderPath","providerType","providerOptions","tagStrings","inputTags","tagName","index","color","tag_colors","tag","metadata","frameRegions","forEach","region","generatedRegion","UID","type","Rectangle","points","x","x1","y","y1","y2","x2","boundingBox","left","top","push","parent","VideoFrame","getAssetMetadata","addRegions"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\nimport {\n    IProject, ITag, IConnection, AppError, ErrorCode,\n    IAssetMetadata, IRegion, RegionType, AssetState, IFileInfo,\n    IAsset, AssetType, ModelPathType,\n} from \"../models/applicationState\";\nimport { IV1Project, IV1Region } from \"../models/v1Models\";\nimport packageJson from \"../../package.json\";\nimport { AssetService } from \"./assetService\";\nimport HtmlFileReader from \"../common/htmlFileReader\";\nimport { normalizeSlashes } from \"../common/utils\";\nimport Guard from \"../common/guard\";\n\n/**\n * Functions required for an import service\n * @member convertProject - Converts a v1 project to v2 project\n */\ninterface IImportService {\n    convertProject(project: IFileInfo): Promise<IProject>;\n    generateAssets(v1Project: IFileInfo, v2Project: IProject): Promise<IAssetMetadata[]>;\n}\n\ninterface IV1Frame {\n    name: string | number;\n    regions: IV1Region[];\n}\n\n/**\n * @name - Import Service\n * @description - Functions for importing v1 projects to v2 application\n */\nexport default class ImportService implements IImportService {\n    private assetService: AssetService;\n\n    /**\n     * Converts given v1 project information to v2 format\n     * @param projectInfo The project file information and content\n     */\n    public async convertProject(projectInfo: IFileInfo): Promise<IProject> {\n        Guard.null(projectInfo);\n\n        let originalProject: IV1Project;\n        let connection: IConnection;\n        let parsedTags: ITag[];\n\n        try {\n            originalProject = JSON.parse(projectInfo.content as string);\n        } catch (e) {\n            throw new AppError(ErrorCode.ProjectInvalidJson, \"Error parsing JSON\");\n        }\n\n        parsedTags = this.parseTags(originalProject);\n        connection = this.generateConnection(projectInfo);\n\n        // map v1 values to v2 values\n        return {\n            id: shortid.generate(),\n            name: projectInfo.file.name.split(\".\")[0],\n            version: packageJson.version,\n            securityToken: `${projectInfo.file.name.split(\".\")[0]} Token`,\n            description: \"Converted V1 Project\",\n            tags: parsedTags,\n            sourceConnection: connection,\n            targetConnection: connection,\n            exportFormat: null,\n            videoSettings: {\n                frameExtractionRate: originalProject.framerate ? Number(originalProject.framerate) : 15,\n            },\n            activeLearningSettings: null,\n            autoSave: true,\n        };\n    }\n\n    /**\n     * Generate assets based on V1 Project frames and regions\n     * @param v1Project Original v1 Project Content and File Information\n     * @param v2Project Partially converted v2 project file\n     */\n    public async generateAssets(v1Project: IFileInfo, v2Project: IProject): Promise<IAssetMetadata[]> {\n        Guard.null(v1Project);\n        Guard.null(v2Project);\n\n        let originalProject: IV1Project;\n        let generatedAssetMetadata: IAssetMetadata[] = [];\n        this.assetService = new AssetService(v2Project);\n\n        originalProject = JSON.parse(v1Project.content as string);\n\n        const frames: IV1Frame[] = Object.keys(originalProject.frames).map((frameName) => {\n            return {\n                name: frameName,\n                regions: originalProject.frames[frameName],\n            };\n        });\n\n        if (this.isVideoProject(v1Project)) {\n            generatedAssetMetadata = await this.generateVideoAssets(v1Project, frames);\n        } else {\n            generatedAssetMetadata = await this.generateImageAssets(v1Project, frames);\n        }\n\n        return generatedAssetMetadata;\n    }\n\n    /**\n     * Generate assets for V1 Image Project frames and regions\n     * @param v1Project - v1 Project content and file information\n     * @param frames - Array of frames in v1 project\n     */\n    private async generateImageAssets(v1Project: IFileInfo, frames: IV1Frame[]): Promise<IAssetMetadata[]> {\n        const projectPath = normalizeSlashes(v1Project.file.path.replace(/\\.[^/.]+$/, \"\"));\n\n        return await frames.mapAsync(async (frame) => {\n            const filePath = `${projectPath}/${frame.name}`;\n            const asset = AssetService.createAssetFromFilePath(filePath);\n            const assetState = this.getAssetState(frame);\n\n            return await this.createAssetMetadata(asset, assetState, frame.regions);\n        });\n    }\n\n    /**\n     * Generate assets for V1 Video Project frames and regions\n     * @param v1Project - v1 Project content and file information\n     * @param frames - Array of frames in v1 project\n     */\n    private async generateVideoAssets(v1Project: IFileInfo, frames: IV1Frame[]): Promise<IAssetMetadata[]> {\n        const parentVideoAsset = await this.createParentVideoAsset(v1Project);\n        const originalProject = JSON.parse(v1Project.content as string);\n\n        const videoFrameAssets = await frames.mapAsync(async (frame) => {\n            const frameInt = Number(frame.name);\n            const timestamp = (frameInt - 1) / Number(originalProject.framerate);\n            const asset = this.createVideoFrameAsset(parentVideoAsset, timestamp);\n            const assetState = this.getAssetState(frame);\n\n            return await this.createAssetMetadata(asset, assetState, frame.regions, parentVideoAsset);\n        });\n\n        const taggedAssets = videoFrameAssets\n            .filter((assetMetadata) => assetMetadata.asset.state === AssetState.Tagged);\n        const parentAssetState = taggedAssets.length > 0 ? AssetState.Tagged : AssetState.Visited;\n        const parentAssetMetadata = await this.createAssetMetadata(parentVideoAsset, parentAssetState, []);\n\n        return [parentAssetMetadata].concat(videoFrameAssets);\n    }\n\n    /**\n     * Checks to see if the specified project is a video project\n     * @param v1Project The original v1 project file info\n     */\n    private isVideoProject(v1Project: IFileInfo): boolean {\n        const pathParts = v1Project.file.path.split(/[\\\\\\/]/);\n        const fileName = pathParts[pathParts.length - 1];\n        const fileNameParts = fileName.split(\".\");\n\n        return fileNameParts[1] && AssetService.getAssetType(fileNameParts[1]) === AssetType.Video;\n    }\n\n    /**\n     * Generate parent asset based on V1 Project video assets\n     * @param v1Project - V1 Project Content and File Information\n     */\n    private async createParentVideoAsset(v1Project: IFileInfo): Promise<IAsset> {\n        const filePath = v1Project.file.path.replace(/\\.[^/.]+$/, \"\");\n        const parentAsset = AssetService.createAssetFromFilePath(filePath, filePath.replace(/^.*[\\\\\\/]/, \"\"));\n        const assetProps = await HtmlFileReader.readAssetAttributes(parentAsset);\n\n        parentAsset.size = { height: assetProps.height, width: assetProps.width };\n        parentAsset.state = AssetState.Visited;\n\n        return parentAsset;\n    }\n\n    /**\n     * Generate connections from v1 project file location\n     * @param project - V1 Project Content and File Information\n     */\n    private generateConnection(project: IFileInfo): IConnection {\n        const folderPath = this.isVideoProject(project)\n            ? project.file.path.replace(/[^(\\/|\\\\)]*$/, \"\")\n            : project.file.path.replace(\".json\", \"\");\n\n        const connection: IConnection = {\n            id: shortid.generate(),\n            name: `${project.file.name.split(\".\")[0]} Connection`,\n            providerType: \"localFileSystemProxy\",\n            providerOptions: {\n                folderPath: normalizeSlashes(folderPath),\n            },\n        };\n\n        return connection;\n    }\n\n    /**\n     * Parse v1 project's tag string and return array of ITags\n     * @param project - V1 Project Content and File Information\n     */\n    private parseTags(project: IV1Project): ITag[] {\n        const tagStrings = project.inputTags.split(\",\");\n\n        return tagStrings\n            .map((tagName, index) => {\n                return {\n                    name: tagName,\n                    color: project.tag_colors[index],\n                } as ITag;\n            })\n            .filter((tag) => !!tag.name);\n    }\n\n    /**\n     * Generate regions based on V1 Project asset metadata\n     * @param metadata - Asset Metadata from asset created from file path\n     * @param frameRegions - V1 Regions within the V1 Frame\n     */\n    private addRegions(metadata: IAssetMetadata, frameRegions: IV1Region[]): void {\n        frameRegions.forEach((region) => {\n            const generatedRegion: IRegion = {\n                id: region.UID,\n                type: RegionType.Rectangle,\n                tags: region.tags,\n                points: [\n                    { x: region.x1, y: region.y1 },\n                    { x: region.x1, y: region.y2 },\n                    { x: region.x2, y: region.y1 },\n                    { x: region.x2, y: region.y2 },\n                ],\n                boundingBox: {\n                    height: (region.y2 - region.y1),\n                    width: (region.x2 - region.x1),\n                    left: region.x1,\n                    top: region.y1,\n                },\n            };\n            metadata.regions.push(generatedRegion);\n        });\n    }\n\n    /**\n     * Creates a child video frame asset\n     * @param parent The parent video asset\n     * @param timestamp The timestamp for the child video frame\n     */\n    private createVideoFrameAsset(parent: IAsset, timestamp: number): IAsset {\n        return {\n            ...AssetService.createAssetFromFilePath(`${parent.path}#t=${timestamp}`),\n            timestamp,\n            parent,\n            type: AssetType.VideoFrame,\n            size: parent.size,\n        };\n    }\n\n    /**\n     * Gets the v2 asset state for the specified v1 asset frame\n     * @param frame The v1 asset frame\n     */\n    private getAssetState(frame: IV1Frame): AssetState {\n        return frame.regions.length > 0 ? AssetState.Tagged : AssetState.Visited;\n    }\n\n    /**\n     * Creates an asset metadata for the specified asset\n     * @param asset The converted v2 asset\n     * @param assetState The new v2 asset state\n     * @param frameRegions The v1 asset regions\n     * @param parent The v2 parent asset (Used for video assets)\n     */\n    private async createAssetMetadata(\n        asset: IAsset,\n        assetState: AssetState,\n        frameRegions: IV1Region[],\n        parent?: IAsset,\n    ): Promise<IAssetMetadata> {\n        const metadata = await this.assetService.getAssetMetadata(asset);\n        this.addRegions(metadata, frameRegions);\n        metadata.asset.state = assetState;\n\n        if (parent) {\n            metadata.asset.parent = parent;\n        }\n\n        if (!metadata.asset.size) {\n            metadata.asset.size = await HtmlFileReader.readAssetAttributes(asset);\n        }\n\n        return metadata;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
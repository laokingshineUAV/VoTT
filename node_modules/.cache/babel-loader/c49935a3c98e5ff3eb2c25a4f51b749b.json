{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/pages/editorPage/editorSideBar.tsx\";\nimport React from \"react\";\nimport { AutoSizer, List } from \"react-virtualized\";\nimport { AssetState } from \"../../../../models/applicationState\";\nimport { AssetPreview } from \"../../common/assetPreview/assetPreview\";\nimport { strings } from \"../../../../common/strings\";\n/**\n * Properties for Editor Side Bar\n * @member assets - Array of assets to be previewed\n * @member onAssetSelected - Function to call when asset from side bar is selected\n * @member selectedAsset - Asset initially selected\n * @member thumbnailSize - The size of the asset thumbnails\n */\n\n/**\n * @name - Editor Side Bar\n * @description - Side bar for editor page\n */\nvar EditorSideBar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditorSideBar, _React$Component);\n\n  function EditorSideBar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditorSideBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditorSideBar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      scrollToIndex: _this.props.selectedAsset ? _this.props.assets.findIndex(function (asset) {\n        return asset.id === _this.props.selectedAsset.id;\n      }) : 0\n    };\n    _this.listRef = React.createRef();\n\n    _this.getRowHeight = function (width) {\n      return width / (4 / 3) + 16;\n    };\n\n    _this.selectAsset = function (selectedAsset) {\n      var scrollToIndex = _this.props.assets.findIndex(function (asset) {\n        return asset.id === selectedAsset.id;\n      });\n\n      _this.setState({\n        scrollToIndex: scrollToIndex\n      }, function () {\n        _this.listRef.current.forceUpdateGrid();\n      });\n    };\n\n    _this.onAssetClicked = function (asset) {\n      if (_this.props.onBeforeAssetSelected) {\n        if (!_this.props.onBeforeAssetSelected()) {\n          return;\n        }\n      }\n\n      _this.selectAsset(asset);\n\n      _this.props.onAssetSelected(asset);\n    };\n\n    _this.rowRenderer = function (_ref) {\n      var key = _ref.key,\n          index = _ref.index,\n          style = _ref.style;\n      var asset = _this.props.assets[index];\n      var selectedAsset = _this.props.selectedAsset;\n      return React.createElement(\"div\", {\n        key: key,\n        style: style,\n        className: _this.getAssetCssClassNames(asset, selectedAsset),\n        onClick: function onClick() {\n          return _this.onAssetClicked(asset);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"asset-item-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, _this.renderBadges(asset), React.createElement(AssetPreview, {\n        asset: asset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"asset-item-metadata\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"asset-filename\",\n        title: asset.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, asset.name), asset.size && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, asset.size.width, \" x \", asset.size.height)));\n    };\n\n    _this.renderBadges = function (asset) {\n      switch (asset.state) {\n        case AssetState.Tagged:\n          return React.createElement(\"span\", {\n            title: strings.editorPage.tagged,\n            className: \"badge badge-tagged\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fas fa-tag\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135\n            },\n            __self: this\n          }));\n\n        case AssetState.Visited:\n          return React.createElement(\"span\", {\n            title: strings.editorPage.visited,\n            className: \"badge badge-visited\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fas fa-eye\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142\n            },\n            __self: this\n          }));\n\n        default:\n          return null;\n      }\n    };\n\n    _this.getAssetCssClassNames = function (asset) {\n      var selectedAsset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var cssClasses = [\"asset-item\"];\n\n      if (selectedAsset && selectedAsset.id === asset.id) {\n        cssClasses.push(\"selected\");\n      }\n\n      return cssClasses.join(\" \");\n    };\n\n    return _this;\n  }\n\n  _createClass(EditorSideBar, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"editor-page-sidebar-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(AutoSizer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, function (_ref2) {\n        var height = _ref2.height,\n            width = _ref2.width;\n        return React.createElement(List, {\n          ref: _this2.listRef,\n          className: \"asset-list\",\n          height: height,\n          width: width,\n          rowCount: _this2.props.assets.length,\n          rowHeight: function rowHeight() {\n            return _this2.getRowHeight(width);\n          },\n          rowRenderer: _this2.rowRenderer,\n          overscanRowCount: 2,\n          scrollToIndex: _this2.state.scrollToIndex,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        });\n      }));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.thumbnailSize !== this.props.thumbnailSize) {\n        this.listRef.current.recomputeRowHeights();\n      }\n\n      if (!prevProps.selectedAsset && !this.props.selectedAsset) {\n        return;\n      }\n\n      if (!prevProps.selectedAsset && this.props.selectedAsset || prevProps.selectedAsset.id !== this.props.selectedAsset.id) {\n        this.selectAsset(this.props.selectedAsset);\n      }\n    }\n  }]);\n\n  return EditorSideBar;\n}(React.Component);\n\nexport { EditorSideBar as default };","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/pages/editorPage/editorSideBar.tsx"],"names":["React","AutoSizer","List","AssetState","AssetPreview","strings","EditorSideBar","state","scrollToIndex","props","selectedAsset","assets","findIndex","asset","id","listRef","createRef","getRowHeight","width","selectAsset","setState","current","forceUpdateGrid","onAssetClicked","onBeforeAssetSelected","onAssetSelected","rowRenderer","key","index","style","getAssetCssClassNames","renderBadges","name","size","height","Tagged","editorPage","tagged","Visited","visited","cssClasses","push","join","length","prevProps","thumbnailSize","recomputeRowHeights","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { AutoSizer, List } from \"react-virtualized\";\nimport { IAsset, AssetState, ISize } from \"../../../../models/applicationState\";\nimport { AssetPreview } from \"../../common/assetPreview/assetPreview\";\nimport { strings } from \"../../../../common/strings\";\n\n/**\n * Properties for Editor Side Bar\n * @member assets - Array of assets to be previewed\n * @member onAssetSelected - Function to call when asset from side bar is selected\n * @member selectedAsset - Asset initially selected\n * @member thumbnailSize - The size of the asset thumbnails\n */\nexport interface IEditorSideBarProps {\n    assets: IAsset[];\n    onAssetSelected: (asset: IAsset) => void;\n    onBeforeAssetSelected?: () => boolean;\n    selectedAsset?: IAsset;\n    thumbnailSize?: ISize;\n}\n\n/**\n * State for Editor Side Bar\n * @member selectedAsset - Asset selected from side bar\n */\nexport interface IEditorSideBarState {\n    scrollToIndex: number;\n}\n\n/**\n * @name - Editor Side Bar\n * @description - Side bar for editor page\n */\nexport default class EditorSideBar extends React.Component<IEditorSideBarProps, IEditorSideBarState> {\n    public state: IEditorSideBarState = {\n        scrollToIndex: this.props.selectedAsset\n            ? this.props.assets.findIndex((asset) => asset.id === this.props.selectedAsset.id)\n            : 0,\n    };\n\n    private listRef: React.RefObject<List> = React.createRef();\n\n    public render() {\n        return (\n            <div className=\"editor-page-sidebar-nav\">\n                <AutoSizer>\n                    {({ height, width }) => (\n                        <List\n                            ref={this.listRef}\n                            className=\"asset-list\"\n                            height={height}\n                            width={width}\n                            rowCount={this.props.assets.length}\n                            rowHeight={() => this.getRowHeight(width)}\n                            rowRenderer={this.rowRenderer}\n                            overscanRowCount={2}\n                            scrollToIndex={this.state.scrollToIndex}\n                        />\n                    )}\n                </AutoSizer>\n            </div>\n        );\n    }\n\n    public componentDidUpdate(prevProps: IEditorSideBarProps) {\n        if (prevProps.thumbnailSize !== this.props.thumbnailSize) {\n            this.listRef.current.recomputeRowHeights();\n        }\n\n        if (!prevProps.selectedAsset && !this.props.selectedAsset) {\n            return;\n        }\n\n        if ((!prevProps.selectedAsset && this.props.selectedAsset) ||\n            prevProps.selectedAsset.id !== this.props.selectedAsset.id) {\n            this.selectAsset(this.props.selectedAsset);\n        }\n    }\n\n    private getRowHeight = (width: number) => {\n        return width / (4 / 3) + 16;\n    }\n\n    private selectAsset = (selectedAsset: IAsset): void => {\n        const scrollToIndex = this.props.assets.findIndex((asset) => asset.id === selectedAsset.id);\n\n        this.setState({\n            scrollToIndex,\n        }, () => {\n            this.listRef.current.forceUpdateGrid();\n        });\n    }\n\n    private onAssetClicked = (asset: IAsset): void => {\n        if (this.props.onBeforeAssetSelected) {\n            if (!this.props.onBeforeAssetSelected()) {\n                return;\n            }\n        }\n\n        this.selectAsset(asset);\n        this.props.onAssetSelected(asset);\n    }\n\n    private rowRenderer = ({ key, index, style }): JSX.Element => {\n        const asset = this.props.assets[index];\n        const selectedAsset = this.props.selectedAsset;\n\n        return (\n            <div key={key} style={style}\n                className={this.getAssetCssClassNames(asset, selectedAsset)}\n                onClick={() => this.onAssetClicked(asset)}>\n                <div className=\"asset-item-image\">\n                    {this.renderBadges(asset)}\n                    <AssetPreview asset={asset} />\n                </div>\n                <div className=\"asset-item-metadata\">\n                    <span className=\"asset-filename\" title={asset.name}>{asset.name}</span>\n                    {asset.size &&\n                        <span>\n                            {asset.size.width} x {asset.size.height}\n                        </span>\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    private renderBadges = (asset: IAsset): JSX.Element => {\n        switch (asset.state) {\n            case AssetState.Tagged:\n                return (\n                    <span title={strings.editorPage.tagged}\n                        className=\"badge badge-tagged\">\n                        <i className=\"fas fa-tag\"></i>\n                    </span>\n                );\n            case AssetState.Visited:\n                return (\n                    <span title={strings.editorPage.visited}\n                        className=\"badge badge-visited\">\n                        <i className=\"fas fa-eye\"></i>\n                    </span>\n                );\n            default:\n                return null;\n        }\n    }\n\n    private getAssetCssClassNames = (asset: IAsset, selectedAsset: IAsset = null): string => {\n        const cssClasses = [\"asset-item\"];\n        if (selectedAsset && selectedAsset.id === asset.id) {\n            cssClasses.push(\"selected\");\n        }\n\n        return cssClasses.join(\" \");\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { PropertiesPluginIdentifier } from \"@microsoft/applicationinsights-common\";\n/**\r\n * Module to include Microsoft Application Insights in React applications.\r\n *\r\n * @export\r\n * @class ReactAI\r\n */\n\nvar ReactAI =\n/** @class */\nfunction () {\n  function ReactAI() {\n    this.extensionId = \"ApplicationInsightsReactUsage\";\n    this.ApplicationInsightsAnalyticsIdentifier = \"ApplicationInsightsAnalytics\";\n    this.identifier = this.extensionId;\n    this.priority = 190;\n    this.contextProps = {};\n    this.debug = false;\n    this.processTelemetry = this.customDimensionsInitializer.bind(this);\n  }\n\n  ReactAI.prototype.setNextPlugin = function (plugin) {\n    this.nextPlugin = plugin;\n  };\n\n  Object.defineProperty(ReactAI.prototype, \"context\", {\n    /**\r\n     * Returns the current value of context/custom dimensions.\r\n     *\r\n     * @readonly\r\n     * @type {{ [key: string]: any }}\r\n     * @memberof ReactAI\r\n     */\n    get: function get() {\n      return this.contextProps || {};\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReactAI.prototype, \"isDebugMode\", {\n    /**\r\n     * Returns if ReactAI is in debug mode.\r\n     *\r\n     * @readonly\r\n     * @type {boolean}\r\n     * @memberof ReactAI\r\n     */\n    get: function get() {\n      return this.debug;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Initializes a singleton instance of ReactAI based on supplied parameters.\r\n   *\r\n   * @param {IReactAISettings} settings\r\n   * @memberof ReactAI\r\n   */\n\n  ReactAI.prototype.initialize = function (settings, core, extensions) {\n    var _this = this;\n\n    var reactAISettings = settings.extensionConfig && settings.extensionConfig[this.identifier] ? settings.extensionConfig[this.identifier] : {\n      debug: false\n    };\n    this.debug = reactAISettings.debug || false;\n    this.setContext(reactAISettings.initialContext || {}, true);\n    extensions.forEach(function (ext) {\n      var identifier = ext.identifier;\n\n      if (identifier === _this.ApplicationInsightsAnalyticsIdentifier) {\n        _this.appInsights = ext;\n      }\n\n      if (identifier === PropertiesPluginIdentifier) {\n        _this.propertiesPlugin = ext;\n      }\n    });\n\n    if (reactAISettings.history) {\n      this.addHistoryListener(reactAISettings.history);\n      var pageViewTelemetry = {\n        uri: reactAISettings.history.location.pathname,\n        properties: this.context\n      };\n\n      this._trackInitialPageViewInternal(pageViewTelemetry);\n    }\n  }; // internal only, public method for testing\n\n\n  ReactAI.prototype._trackInitialPageViewInternal = function (telemetry) {\n    // Record initial page view, since history.listen is not fired for the initial page\n    // (see: https://github.com/ReactTraining/history/issues/479#issuecomment-307544999 )\n    this.appInsights.trackPageView(telemetry);\n    this.debugLog(\"recording initial page view.\", \"uri: \" + location.pathname);\n  };\n  /**\r\n   * Set custom context/custom dimensions for Application Insights\r\n   *\r\n   * @param {{ [key: string]: any }} properties - custom properties to add to all outbound Application Insights telemetry\r\n   * @param {boolean} [clearPrevious=false] - if false(default) multiple calls to setContext will append to/overwrite existing custom dimensions, if true the values are reset\r\n   * @memberof ReactAI\r\n   */\n\n\n  ReactAI.prototype.setContext = function (properties, clearPrevious) {\n    if (clearPrevious === void 0) {\n      clearPrevious = false;\n    }\n\n    if (clearPrevious) {\n      this.contextProps = {};\n      this.debugLog(\"context is reset.\");\n    }\n\n    properties = properties || {};\n\n    for (var key in properties) {\n      if (properties.hasOwnProperty(key)) {\n        this.contextProps[key] = properties[key];\n      }\n    }\n\n    this.debugLog(\"context is set to:\", this.context);\n  };\n\n  ReactAI.prototype.customDimensionsInitializer = function (envelope) {\n    envelope.baseData = envelope.baseData || {};\n    envelope.baseData.properties = envelope.baseData.properties || {};\n    var properties = envelope.baseData.properties;\n    var props = this.context;\n\n    for (var key in props) {\n      if (props.hasOwnProperty(key)) {\n        properties[key] = props[key];\n      }\n    }\n\n    if (this.nextPlugin != null) {\n      this.nextPlugin.processTelemetry(envelope);\n    }\n  };\n\n  ReactAI.prototype.addHistoryListener = function (history) {\n    var _this = this;\n\n    history.listen(function (location, action) {\n      // Timeout to ensure any changes to the DOM made by route changes get included in pageView telemetry\n      setTimeout(function () {\n        var pageViewTelemetry = {\n          uri: location.pathname,\n          properties: _this.context\n        };\n\n        _this.appInsights.trackPageView(pageViewTelemetry);\n\n        _this.debugLog(\"recording page view.\", \"uri: \" + location.pathname + \" action: \" + action);\n      }, 500);\n    });\n  };\n\n  ReactAI.prototype.debugLog = function (message, payload) {\n    if (this.isDebugMode) {\n      console.log(\"ReactAI: \" + message, payload === undefined ? \"\" : payload);\n    }\n  };\n\n  return ReactAI;\n}();\n\nexport var reactAI = new ReactAI();","map":null,"metadata":{},"sourceType":"module"}
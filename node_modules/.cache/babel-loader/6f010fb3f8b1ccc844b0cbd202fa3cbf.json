{"ast":null,"code":"import { AppInsightsDeprecated } from \"./ApplicationInsightsDeprecated\";\nimport { Initialization as ApplicationInsights } from \"./Initialization\";\n\nvar ApplicationInsightsContainer =\n/** @class */\nfunction () {\n  function ApplicationInsightsContainer() {}\n\n  ApplicationInsightsContainer.getAppInsights = function (snippet, version) {\n    var initialization = new ApplicationInsights(snippet);\n    var legacyMode = version !== 2.0 ? true : false; // Two target scenarios:\n    // 1. Customer runs v1 snippet + runtime. If customer updates just cdn location to new SDK, it will run in compat mode so old apis work\n    // 2. Customer updates to new snippet (that uses cdn location to new SDK. This is same as a new customer onboarding\n    // and all api signatures are expected to map to new SDK. Note new snippet specifies version\n\n    if (version === 2.0) {\n      initialization.updateSnippetDefinitions(snippet);\n      initialization.loadAppInsights(legacyMode);\n      return initialization; // default behavior with new snippet\n    } else {\n      var legacy = new AppInsightsDeprecated(snippet, initialization); // target scenario old snippet + updated endpoint\n\n      legacy.updateSnippetDefinitions(snippet);\n      initialization.loadAppInsights(legacyMode);\n      return legacy;\n    }\n  };\n\n  return ApplicationInsightsContainer;\n}();\n\nexport { ApplicationInsightsContainer };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * An abstract visial component to define a component of region presentation UI.\r\n */\n\nvar RegionComponent =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Creates a new UI component (part of the region).\r\n   * @param paper - The `Snap.Paper` object to draw on.\r\n   * @param paperRect - The parent bounding box for created component.\r\n   * @param regionData - The `RegionData` object shared across components. Used also for initial setup.\r\n   * @param callbacks - The external callbacks collection.\r\n   */\n  function RegionComponent(paper, paperRect, regionData) {\n    var callbacks = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n    _classCallCheck(this, RegionComponent);\n\n    /**\r\n     * Defines if the component is visible.\r\n     */\n    this.isVisible = true;\n    /**\r\n     * Defines if the component is in a frozen state.\r\n     */\n\n    this.isFrozen = false;\n    /**\r\n     * Defines if the component is selected.\r\n     */\n\n    this.isSelected = false;\n    this.paper = paper;\n    this.paperRect = paperRect;\n    this.regionData = regionData;\n    this.callbacks = {\n      onChange: null,\n      onManipulationBegin: null,\n      onManipulationEnd: null\n    };\n\n    if (callbacks !== null && callbacks !== undefined) {\n      if (callbacks.onManipulationBegin !== undefined) {\n        this.callbacks.onManipulationBegin = callbacks.onManipulationBegin;\n      }\n\n      if (callbacks.onManipulationEnd !== undefined) {\n        this.callbacks.onManipulationEnd = callbacks.onManipulationEnd;\n      }\n\n      if (callbacks.onChange !== undefined) {\n        this.callbacks.onChange = callbacks.onChange;\n      }\n    }\n  }\n  /**\r\n   * The `x`-coordinate of the component. Defined through the `regionaData`.\r\n   */\n\n\n  _createClass(RegionComponent, [{\n    key: \"hide\",\n\n    /**\r\n     * Switches the component presentstion to the hidden state.\r\n     */\n    value: function hide() {\n      this.node.node.setAttribute(\"visibility\", \"hidden\");\n      this.isVisible = false;\n    }\n    /**\r\n     * Switches the component presentation to the visibile state.\r\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.node.node.setAttribute(\"visibility\", \"visible\");\n      this.isVisible = true;\n    }\n    /**\r\n     * Selects the component.\r\n     */\n\n  }, {\n    key: \"select\",\n    value: function select() {\n      this.isSelected = true;\n      this.node.addClass(\"selected\");\n    }\n    /**\r\n     * Unselecets the component.\r\n     */\n\n  }, {\n    key: \"unselect\",\n    value: function unselect() {\n      this.isSelected = false;\n      this.node.removeClass(\"selected\");\n    }\n    /**\r\n     * Switches the component to the frozen state.\r\n     */\n\n  }, {\n    key: \"freeze\",\n    value: function freeze() {\n      this.isFrozen = true;\n    }\n    /**\r\n     * Switches the component to the unfrozen state.\r\n     */\n\n  }, {\n    key: \"unfreeze\",\n    value: function unfreeze() {\n      this.isFrozen = false;\n    }\n  }, {\n    key: \"move\",\n    value: function move(arg1, arg2) {\n      this.regionData.move(arg1, arg2);\n      this.redraw();\n    }\n    /**\r\n     * Resizes the component to specified `width` and `height`.\r\n     * @param width - The new `width` for the component.\r\n     * @param height - The new `height` for the component.\r\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      this.regionData.resize(width, height);\n      this.redraw();\n    }\n    /**\r\n     * Resizes the bounding box for the component.\r\n     * @param width - The new `width` of the bounding box.\r\n     * @param height - The new `height` of the bounding box.\r\n     */\n\n  }, {\n    key: \"resizePaper\",\n    value: function resizePaper(width, height) {\n      this.paperRect.resize(width, height);\n    }\n    /**\r\n     * The wrapper around external `onChange` callback. Checks whether the callback is defined.\r\n     * @param region - Reference to the component.\r\n     * @param regionData - The `RegionData` object to be passed.\r\n     * @param eventType - The event type.\r\n     * @param multiSelection - The flag for multiple regions selection.\r\n     */\n\n  }, {\n    key: \"onChange\",\n    value: function onChange(region, regionData, eventType, multiSelection) {\n      if (this.callbacks.onChange !== null && this.callbacks.onChange !== undefined) {\n        this.callbacks.onChange(region, regionData, eventType, multiSelection);\n      }\n    }\n    /**\r\n     * The wrapper around external `onManipulationBegin` callback. Checks whether the callback is defined.\r\n     * @param region - Reference to the component.\r\n     */\n\n  }, {\n    key: \"onManipulationBegin\",\n    value: function onManipulationBegin(region) {\n      if (this.callbacks.onManipulationBegin !== null && this.callbacks.onManipulationBegin !== undefined) {\n        this.callbacks.onManipulationBegin(region);\n      }\n    }\n    /**\r\n     * The wrapper around external `onManupulationEnd` callback. Checks whether the callback is defined.\r\n     * @param region - Reference to the component.\r\n     */\n\n  }, {\n    key: \"onManipulationEnd\",\n    value: function onManipulationEnd(region) {\n      if (this.callbacks.onManipulationEnd !== null && this.callbacks.onManipulationEnd !== undefined) {\n        this.callbacks.onManipulationEnd(region);\n      }\n    }\n    /**\r\n     * Subscrubes the component elements according to provided event descriptors. Binds to the `this` object.\r\n     * @param listeners - The collection of event descriptors.\r\n     */\n\n  }, {\n    key: \"subscribeToEvents\",\n    value: function subscribeToEvents(listeners) {\n      var _this = this;\n\n      listeners.forEach(function (e) {\n        e.base.addEventListener(e.event, _this.makeFreezable(e.listener.bind(_this), e.bypass));\n      });\n    }\n    /**\r\n     * A helper function to make event listeners froozen if the component state is frozen.\r\n     * @param f - Function to wrap.\r\n     * @param bypass - A flag whether event should bypass.\r\n     */\n\n  }, {\n    key: \"makeFreezable\",\n    value: function makeFreezable(f) {\n      var _this2 = this;\n\n      var bypass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return function (args) {\n        if (!_this2.isFrozen || bypass) {\n          f(args);\n        }\n      };\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this.regionData.x;\n    }\n    /**\r\n     * The `y`-coordinate of the component. Defined through the `regionaData`.\r\n     */\n\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this.regionData.y;\n    }\n    /**\r\n     * The `width` of the component. Defined through the `regionaData`.\r\n     */\n\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this.regionData.boundRect.width;\n    }\n    /**\r\n     * The `height` of the component. Defined through the `regionaData`.\r\n     */\n\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.regionData.boundRect.height;\n    }\n    /**\r\n     * The `area` of the component. Defined through the `regionaData`.\r\n     */\n\n  }, {\n    key: \"area\",\n    get: function get() {\n      return this.regionData.area;\n    }\n    /**\r\n     * The `boundRect` of the component. Defined through the `regionaData`.\r\n     * @remarks Returns the `Rect` object of the same `width` and `height` as the component.\r\n     */\n\n  }, {\n    key: \"boundRect\",\n    get: function get() {\n      return this.regionData.boundRect;\n    }\n  }]);\n\n  return RegionComponent;\n}();\n\nexports.RegionComponent = RegionComponent;","map":null,"metadata":{},"sourceType":"script"}
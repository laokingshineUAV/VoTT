{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Mappers from \"../models/appendBlobMappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class representing a AppendBlob. */\n\nvar AppendBlob =\n/** @class */\nfunction () {\n  /**\n   * Create a AppendBlob.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  function AppendBlob(client) {\n    this.client = client;\n  }\n\n  AppendBlob.prototype.create = function (contentLength, options, callback) {\n    return this.client.sendOperationRequest({\n      contentLength: contentLength,\n      options: options\n    }, createOperationSpec, callback);\n  };\n\n  AppendBlob.prototype.appendBlock = function (body, contentLength, options, callback) {\n    return this.client.sendOperationRequest({\n      body: body,\n      contentLength: contentLength,\n      options: options\n    }, appendBlockOperationSpec, callback);\n  };\n\n  return AppendBlob;\n}();\n\nexport { AppendBlob }; // Operation Specifications\n\nvar serializer = new msRest.Serializer(Mappers, true);\nvar createOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout],\n  headerParameters: [Parameters.contentLength, Parameters.metadata, Parameters.version, Parameters.requestId, Parameters.blobType1, Parameters.blobContentType, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentMD5, Parameters.blobCacheControl, Parameters.blobContentDisposition, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch],\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar appendBlockOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp13],\n  headerParameters: [Parameters.contentLength, Parameters.transactionalContentMD5, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.maxSize, Parameters.appendPosition, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch],\n  requestBody: {\n    parameterPath: \"body\",\n    mapper: {\n      required: true,\n      serializedName: \"body\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobAppendBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};","map":null,"metadata":{},"sourceType":"module"}
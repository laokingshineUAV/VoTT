{"ast":null,"code":"import _defineProperty from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { Env } from \"./common/environment\";\nimport { reactAI } from \"react-appinsights\";\nimport history from \"./history\";\nimport { ApplicationInsights, SeverityLevel } from \"@microsoft/applicationinsights-web\";\nimport { version } from \"../package.json\";\nimport { isElectron } from \"./common/hostProcess\";\nimport { config } from \"dotenv\"; // vott-app-insights\n\nconfig();\nvar instrumentationKey = process.env.REACT_APP_INSTRUMENTATION_KEY;\nvar debug = false;\nvar maxBatchSize = 250;\n\nif (Env.get() !== \"production\") {\n  // for development/testing\n  // myho-appinsights\n  debug = true;\n  maxBatchSize = 0; // send telemetry as soon as it's collected\n}\n\nvar appInsights;\n/**\n * create an app insights connection for web version\n * do nothing for electron mode\n */\n\nexport function setUpAppInsights() {\n  if (isElectron()) {\n    return;\n  }\n\n  reactAI.setContext({\n    AppVersion: version\n  });\n  var config = {\n    instrumentationKey: instrumentationKey,\n    maxBatchSize: maxBatchSize,\n    extensions: [reactAI],\n    extensionConfig: _defineProperty({}, reactAI.extensionId, {\n      debug: debug,\n      history: history // required for tracking router changes\n\n    })\n  };\n  appInsights = new ApplicationInsights({\n    config: config\n  });\n  appInsights.loadAppInsights();\n}\n/**\n * send exception event to AppInsights\n * @param appError object containing the error type and error message\n */\n\nexport function trackError(appError) {\n  if (isElectron()) {\n    return;\n  }\n\n  var error = new Error(appError.errorCode);\n  var exceptionTelemetry = {\n    error: error,\n    properties: {\n      message: appError.message\n    },\n    severityLevel: SeverityLevel.Error\n  };\n  appInsights.trackException(exceptionTelemetry);\n}\n/**\n * send custom event tracking redux action\n * @param action a redux action\n */\n\nexport function trackReduxAction(action) {\n  if (isElectron()) {\n    return;\n  }\n\n  appInsights.trackEvent({\n    name: action.type\n  });\n}","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/telemetry.ts"],"names":["Env","reactAI","history","ApplicationInsights","SeverityLevel","version","isElectron","config","instrumentationKey","process","env","REACT_APP_INSTRUMENTATION_KEY","debug","maxBatchSize","get","appInsights","setUpAppInsights","setContext","AppVersion","extensions","extensionConfig","extensionId","loadAppInsights","trackError","appError","error","Error","errorCode","exceptionTelemetry","properties","message","severityLevel","trackException","trackReduxAction","action","trackEvent","name","type"],"mappings":";AAAA,SAASA,GAAT,QAAoB,sBAApB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,mBAAT,EAAmDC,aAAnD,QAAwE,oCAAxE;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AAGA,SAASC,MAAT,QAAuB,QAAvB,C,CAEA;;AACAA,MAAM;AACN,IAAMC,kBAAkB,GAAGC,OAAO,CAACC,GAAR,CAAYC,6BAAvC;AAEA,IAAIC,KAAK,GAAG,KAAZ;AACA,IAAIC,YAAY,GAAG,GAAnB;;AAEA,IAAIb,GAAG,CAACc,GAAJ,OAAc,YAAlB,EAAgC;AAC5B;AACA;AACAF,EAAAA,KAAK,GAAG,IAAR;AACAC,EAAAA,YAAY,GAAG,CAAf,CAJ4B,CAIT;AACtB;;AAED,IAAIE,WAAJ;AAEA;;;;;AAIA,OAAO,SAASC,gBAAT,GAA4B;AAC/B,MAAIV,UAAU,EAAd,EAAkB;AACd;AACH;;AAEDL,EAAAA,OAAO,CAACgB,UAAR,CAAmB;AACfC,IAAAA,UAAU,EAAEb;AADG,GAAnB;AAIA,MAAME,MAAM,GAAG;AACXC,IAAAA,kBAAkB,EAAlBA,kBADW;AAEXK,IAAAA,YAAY,EAAZA,YAFW;AAGXM,IAAAA,UAAU,EAAE,CAAClB,OAAD,CAHD;AAIXmB,IAAAA,eAAe,sBACVnB,OAAO,CAACoB,WADE,EACY;AACnBT,MAAAA,KAAK,EAALA,KADmB;AAEnBV,MAAAA,OAAO,EAAPA,OAFmB,CAET;;AAFS,KADZ;AAJJ,GAAf;AAYAa,EAAAA,WAAW,GAAG,IAAIZ,mBAAJ,CAAwB;AAACI,IAAAA,MAAM,EAANA;AAAD,GAAxB,CAAd;AACAQ,EAAAA,WAAW,CAACO,eAAZ;AACH;AAED;;;;;AAIA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA+C;AAClD,MAAIlB,UAAU,EAAd,EAAkB;AACd;AACH;;AAED,MAAMmB,KAAK,GAAG,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,SAAnB,CAAd;AACA,MAAMC,kBAAuC,GAAG;AAC5CH,IAAAA,KAAK,EAALA,KAD4C;AAE5CI,IAAAA,UAAU,EAAE;AACRC,MAAAA,OAAO,EAAEN,QAAQ,CAACM;AADV,KAFgC;AAK5CC,IAAAA,aAAa,EAAE3B,aAAa,CAACsB;AALe,GAAhD;AAQAX,EAAAA,WAAW,CAACiB,cAAZ,CAA2BJ,kBAA3B;AACH;AAED;;;;;AAIA,OAAO,SAASK,gBAAT,CAA0BC,MAA1B,EAAgD;AACnD,MAAI5B,UAAU,EAAd,EAAkB;AACd;AACH;;AAEDS,EAAAA,WAAW,CAACoB,UAAZ,CAAuB;AACnBC,IAAAA,IAAI,EAAEF,MAAM,CAACG;AADM,GAAvB;AAGH","sourcesContent":["import { Env } from \"./common/environment\";\nimport { reactAI } from \"react-appinsights\";\nimport history from \"./history\";\nimport { ApplicationInsights, IExceptionTelemetry, SeverityLevel } from \"@microsoft/applicationinsights-web\";\nimport { version } from \"../package.json\";\nimport { isElectron } from \"./common/hostProcess\";\nimport { Action } from \"redux\";\nimport { IAppError } from \"./models/applicationState\";\nimport { config } from \"dotenv\";\n\n// vott-app-insights\nconfig();\nconst instrumentationKey = process.env.REACT_APP_INSTRUMENTATION_KEY;\n\nlet debug = false;\nlet maxBatchSize = 250;\n\nif (Env.get() !== \"production\") {\n    // for development/testing\n    // myho-appinsights\n    debug = true;\n    maxBatchSize = 0;  // send telemetry as soon as it's collected\n}\n\nlet appInsights;\n\n/**\n * create an app insights connection for web version\n * do nothing for electron mode\n */\nexport function setUpAppInsights() {\n    if (isElectron()) {\n        return;\n    }\n\n    reactAI.setContext({\n        AppVersion: version,\n    });\n\n    const config = {\n        instrumentationKey,\n        maxBatchSize,\n        extensions: [reactAI],\n        extensionConfig: {\n            [reactAI.extensionId]: {\n                debug,\n                history,  // required for tracking router changes\n            },\n        },\n    };\n\n    appInsights = new ApplicationInsights({config});\n    appInsights.loadAppInsights();\n}\n\n/**\n * send exception event to AppInsights\n * @param appError object containing the error type and error message\n */\nexport function trackError(appError: IAppError): void {\n    if (isElectron()) {\n        return;\n    }\n\n    const error = new Error(appError.errorCode);\n    const exceptionTelemetry: IExceptionTelemetry = {\n        error,\n        properties: {\n            message: appError.message,\n        },\n        severityLevel: SeverityLevel.Error,\n    };\n\n    appInsights.trackException(exceptionTelemetry);\n}\n\n/**\n * send custom event tracking redux action\n * @param action a redux action\n */\nexport function trackReduxAction(action: Action): void {\n    if (isElectron()) {\n        return;\n    }\n\n    appInsights.trackEvent({\n        name: action.type,\n    });\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Point2D_1 = require(\"../../Core/Point2D\");\n\nvar IRegionCallbacks_1 = require(\"../../Interface/IRegionCallbacks\");\n\nvar RegionComponent_1 = require(\"./RegionComponent\");\n/**\r\n * An abstract visual component used internall to draw anchor points that allow\r\n * region points moving and this component resizing.\r\n */\n\n\nvar AnchorsComponent =\n/*#__PURE__*/\nfunction (_RegionComponent_1$Re) {\n  _inherits(AnchorsComponent, _RegionComponent_1$Re);\n\n  /**\r\n   * Creates a new `AnchorsComponent` object.\r\n   * @param paper - The `Snap.Paper` object to draw on.\r\n   * @param paperRect - The parent bounding box for created component.\r\n   * @param regionData - The `RegionData` object shared across components. Used also for initial setup.\r\n   * @param callbacks - The external callbacks collection.\r\n   */\n  function AnchorsComponent(paper) {\n    var _this;\n\n    var paperRect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var regionData = arguments.length > 2 ? arguments[2] : undefined;\n    var callbacks = arguments.length > 3 ? arguments[3] : undefined;\n\n    _classCallCheck(this, AnchorsComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnchorsComponent).call(this, paper, paperRect, regionData, callbacks));\n    /**\r\n     * The index of currently active anchor.\r\n     */\n\n    _this.activeAnchorIndex = -1;\n    _this.node = paper.g();\n\n    _this.node.addClass(\"anchorsLayer\");\n\n    _this.anchors = [];\n    _this.anchorsNode = paper.g();\n\n    _this.buildAnchors();\n\n    _this.ghostAnchor = _this.createAnchor(paper, 0, 0, \"ghost\", AnchorsComponent.DEFAULT_GHOST_ANCHOR_RADIUS);\n\n    _this.ghostAnchor.attr({\n      display: \"none\"\n    });\n\n    _this.node.add(_this.anchorsNode);\n\n    _this.node.add(_this.ghostAnchor);\n\n    var listeners = [{\n      event: \"pointerenter\",\n      listener: _this.onGhostPointerEnter,\n      base: _this.ghostAnchor.node,\n      bypass: false\n    }, {\n      event: \"pointerleave\",\n      listener: _this.onGhostPointerLeave,\n      base: _this.ghostAnchor.node,\n      bypass: false\n    }, {\n      event: \"pointerdown\",\n      listener: _this.onGhostPointerDown,\n      base: _this.ghostAnchor.node,\n      bypass: false\n    }, {\n      event: \"pointerup\",\n      listener: _this.onGhostPointerUp,\n      base: _this.ghostAnchor.node,\n      bypass: false\n    }, {\n      event: \"pointermove\",\n      listener: _this.onGhostPointerMove,\n      base: _this.ghostAnchor.node,\n      bypass: false\n    }];\n\n    _this.subscribeToEvents(listeners);\n\n    return _this;\n  }\n  /**\r\n   * Redraws the visual on the component.\r\n   */\n\n\n  _createClass(AnchorsComponent, [{\n    key: \"redraw\",\n    value: function redraw() {\n      var _this2 = this;\n\n      if (this.regionData.points !== null && this.regionData.points.length > 0) {\n        window.requestAnimationFrame(function () {\n          _this2.regionData.points.forEach(function (p, index) {\n            _this2.anchors[index].attr({\n              cx: p.x,\n              cy: p.y\n            });\n          });\n        });\n      }\n    }\n    /**\r\n     * Switches the component to the frozen state.\r\n     */\n\n  }, {\n    key: \"freeze\",\n    value: function freeze() {\n      _get(_getPrototypeOf(AnchorsComponent.prototype), \"freeze\", this).call(this);\n\n      this.ghostAnchor.undrag();\n      this.onManipulationEnd();\n    }\n    /**\r\n     * Creates a collection on anchors.\r\n     */\n\n  }, {\n    key: \"buildAnchors\",\n    value: function buildAnchors() {\n      this.buildPointAnchors();\n    }\n    /**\r\n     * Creates a collection of anchor points.\r\n     */\n\n  }, {\n    key: \"buildPointAnchors\",\n    value: function buildPointAnchors() {\n      var _this3 = this;\n\n      this.regionData.points.forEach(function (point, index) {\n        var anchor = _this3.createAnchor(_this3.paper, point.x, point.y);\n\n        _this3.anchors.push(anchor);\n\n        _this3.anchorsNode.add(anchor);\n\n        _this3.subscribeAnchorToEvents(anchor, index);\n      });\n    }\n    /**\r\n     * Helper function to subscribe anchor to activation event.\r\n     * @param anchor - The anchor for wire up.\r\n     * @param index - The index of the anchor used to define which one is active.\r\n     */\n\n  }, {\n    key: \"subscribeAnchorToEvents\",\n    value: function subscribeAnchorToEvents(anchor, index) {\n      var _this4 = this;\n\n      anchor.node.addEventListener(\"pointerenter\", function (e) {\n        if (!_this4.isFrozen) {\n          // Set drag origin point to current anchor\n          _this4.dragOrigin = _this4.regionData.points[index];\n          _this4.activeAnchorIndex = index; // Move ghost anchor to current anchor position\n\n          window.requestAnimationFrame(function () {\n            _this4.ghostAnchor.attr({\n              cx: _this4.dragOrigin.x,\n              cy: _this4.dragOrigin.y,\n              display: \"block\"\n            });\n          });\n\n          _this4.onManipulationBegin();\n        }\n      });\n    }\n    /**\r\n     * Helper function to create a new anchor.\r\n     * @param paper - The `Snap.Paper` object to draw on.\r\n     * @param x - The `x`-coordinate of the acnhor.\r\n     * @param y - The `y`-coordinate of the anchor.\r\n     * @param style - Additional css style class to be applied.\r\n     * @param r - The radius of the anchor.\r\n     */\n\n  }, {\n    key: \"createAnchor\",\n    value: function createAnchor(paper, x, y, style) {\n      var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : AnchorsComponent.DEFAULT_ANCHOR_RADIUS;\n      var a = paper.circle(x, y, r);\n      a.addClass(\"anchorStyle\");\n\n      if (style !== undefined && style !== \"\") {\n        a.addClass(style);\n      }\n\n      return a;\n    }\n    /**\r\n     * Callback for the dragbegin event.\r\n     */\n\n  }, {\n    key: \"anchorDragBegin\",\n    value: function anchorDragBegin() {} // do nothing\n\n    /**\r\n     * Callback for the dragmove event. Uses `dragOrigin` to calculate new position.\r\n     * @param dx - Diff in the `x`-coordinate.\r\n     * @param dy - Diff in the `y`-coordinate.\r\n     * @param x - New `x`-coordinate.\r\n     * @param y - New `y`-coordinate.\r\n     * @remarks This method calls the `updateRegion` method to actually make any changes in data.\r\n     */\n\n  }, {\n    key: \"anchorDragMove\",\n    value: function anchorDragMove(dx, dy, x, y) {\n      var _this5 = this;\n\n      var p = new Point2D_1.Point2D(this.dragOrigin.x + dx, this.dragOrigin.y + dy);\n\n      if (this.paperRect !== null) {\n        p = p.boundToRect(this.paperRect);\n      }\n\n      window.requestAnimationFrame(function () {\n        _this5.ghostAnchor.attr({\n          cx: p.x,\n          cy: p.y\n        });\n      });\n      this.updateRegion(p);\n    }\n    /**\r\n     * Callback for the dranend event.\r\n     */\n\n  }, {\n    key: \"anchorDragEnd\",\n    value: function anchorDragEnd() {\n      var _this6 = this;\n\n      window.requestAnimationFrame(function () {\n        _this6.ghostAnchor.attr({\n          display: \"none\"\n        });\n      });\n      this.activeAnchorIndex = -1;\n    }\n    /**\r\n     * Callback for the pointerenter event for the ghost anchor.\r\n     * @param e - PointerEvent object.\r\n     */\n\n  }, {\n    key: \"onGhostPointerEnter\",\n    value: function onGhostPointerEnter(e) {\n      this.ghostAnchor.drag(this.anchorDragMove.bind(this), this.anchorDragBegin.bind(this), this.anchorDragEnd.bind(this));\n      this.onManipulationBegin();\n    }\n    /**\r\n     * Callback for the pointerleave event for the ghost anchor.\r\n     * @param e - PointerEvent object.\r\n     */\n\n  }, {\n    key: \"onGhostPointerLeave\",\n    value: function onGhostPointerLeave(e) {\n      var _this7 = this;\n\n      this.ghostAnchor.undrag();\n      window.requestAnimationFrame(function () {\n        _this7.ghostAnchor.attr({\n          display: \"none\"\n        });\n      });\n      this.activeAnchorIndex = -1;\n      this.onManipulationEnd();\n    }\n    /**\r\n     * Callback for the pointerdown event for the ghost anchor.\r\n     * @param e - PointerEvent object.\r\n     */\n\n  }, {\n    key: \"onGhostPointerDown\",\n    value: function onGhostPointerDown(e) {\n      this.ghostAnchor.node.setPointerCapture(e.pointerId);\n      this.dragOrigin = new Point2D_1.Point2D(e.offsetX, e.offsetY);\n      this.onChange(this, this.regionData.copy(), IRegionCallbacks_1.ChangeEventType.MOVEBEGIN);\n    }\n    /**\r\n     * Callback for the pointermove event for the ghost anchor.\r\n     * @param e - PointerEvent object.\r\n     */\n\n  }, {\n    key: \"onGhostPointerMove\",\n    value: function onGhostPointerMove(e) {} // do nothing\n\n    /**\r\n     * Callback for the pointerup event for the ghost anchor.\r\n     * @param e - PointerEvent object.\r\n     */\n\n  }, {\n    key: \"onGhostPointerUp\",\n    value: function onGhostPointerUp(e) {\n      this.ghostAnchor.node.releasePointerCapture(e.pointerId);\n      this.onChange(this, this.regionData.copy(), IRegionCallbacks_1.ChangeEventType.MOVEEND);\n    }\n  }]);\n\n  return AnchorsComponent;\n}(RegionComponent_1.RegionComponent);\n/**\r\n * Default radius for anchor poitns. Can be redefined through CSS styles.\r\n */\n\n\nAnchorsComponent.DEFAULT_ANCHOR_RADIUS = 3;\n/**\r\n * Defailt radius for the ghost anchor, used activate dragging. Can be redefined through CSS styles.\r\n */\n\nAnchorsComponent.DEFAULT_GHOST_ANCHOR_RADIUS = 7;\nexports.AnchorsComponent = AnchorsComponent;","map":null,"metadata":{},"sourceType":"script"}
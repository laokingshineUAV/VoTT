{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/pages/projectSettings/projectMetrics.tsx\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport { AssetState } from \"../../../../models/applicationState\";\nimport { AssetService } from \"../../../../services/assetService\";\nimport { strings, interpolate } from \"../../../../common/strings\";\nimport { XYPlot, Sunburst, Hint, DiscreteColorLegend, HorizontalGridLines, XAxis, YAxis, VerticalBarSeries } from \"react-vis\";\nimport \"react-vis/dist/styles/radial-chart.scss\";\nimport \"react-vis/dist/styles/plot.scss\";\nimport \"./projectSettingsPage.scss\";\n/**\n * Required properties for Project Metrics\n * @member project - Current project to fill metrics table\n */\n\n/**\n * @name - Project Form\n * @description -\n */\nvar ProjectMetrics =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProjectMetrics, _React$Component);\n\n  function ProjectMetrics() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ProjectMetrics);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ProjectMetrics)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loading: true,\n      hoveredCell: null,\n      sourceAssets: [],\n      projectAssetsMetadata: []\n    };\n\n    _this.refresh = function () {\n      _this.forceUpdate();\n    };\n\n    _this.getTaggedAssetCount = function () {\n      var metadata = _this.state.projectAssetsMetadata;\n\n      var taggedAssets = _.filter(metadata, function (m) {\n        // ignore video asset root container\n        return m.asset.state === AssetState.Tagged && m.regions.length > 0;\n      });\n\n      return taggedAssets.length;\n    };\n\n    _this.getAverageTagCount = function () {\n      var taggedAssetCount = _this.getTaggedAssetCount();\n\n      if (taggedAssetCount === 0) {\n        return 0;\n      }\n\n      var tags = _this.getAllTagReferences();\n\n      return (tags.length / taggedAssetCount).toFixed(2);\n    };\n\n    _this.getVisitedAssetsCount = function () {\n      var metadata = _this.state.projectAssetsMetadata;\n\n      var visitedAssets = _.filter(metadata, function (m) {\n        return m.asset.state === AssetState.Visited || m.asset.state === AssetState.Tagged;\n      });\n\n      return visitedAssets.length;\n    };\n\n    _this.getRegionsCount = function () {\n      var regions = _this.getRegions();\n\n      return regions.length;\n    };\n\n    _this.getSourceAssetCount = function () {\n      var assets = _this.state.projectAssetsMetadata.map(function (e) {\n        return e.asset.name;\n      });\n\n      var projectAssetSet = new Set(_this.state.sourceAssets.map(function (e) {\n        return e.name;\n      }).concat(assets));\n      return projectAssetSet.size;\n    };\n\n    _this.getTagsCounts = function () {\n      var projectTags = _.keyBy(_this.props.project.tags, function (tag) {\n        return tag.name;\n      });\n\n      var tagReferences = _this.getAllTagReferences();\n\n      var map = new Map();\n      tagReferences.forEach(function (t) {\n        var projectTag = projectTags[t];\n\n        if (!projectTag) {\n          return;\n        }\n\n        var tagMetric = map.get(t) || {\n          tag: projectTag,\n          count: 0\n        };\n        tagMetric.count++;\n        map.set(t, tagMetric);\n      });\n\n      _this.props.project.tags.forEach(function (tag) {\n        if (!map.get(tag.name)) {\n          map.set(tag.name, {\n            tag: tag,\n            count: 0\n          });\n        }\n      });\n\n      return map;\n    };\n\n    _this.getRegions = function () {\n      var assetsMetadata = _this.state.projectAssetsMetadata; // find all assets with non-zero regions, extract regions\n\n      var regions = [];\n      assetsMetadata.forEach(function (m) {\n        if (m.regions.length > 0) {\n          regions.push(m.regions);\n        }\n      });\n      return _.flatten(regions);\n    };\n\n    _this.getAllTagReferences = function () {\n      var regions = _this.getRegions();\n\n      var tags = [];\n      regions.forEach(function (r) {\n        tags.push(r.tags);\n      });\n      return _.flatten(tags);\n    };\n\n    return _this;\n  }\n\n  _createClass(ProjectMetrics, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setState({\n                  loading: true\n                });\n                _context.next = 3;\n                return this.getAssetsAndMetadata();\n\n              case 3:\n                window.addEventListener(\"resize\", this.refresh);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.refresh);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"condensed-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        className: \"condensed-list-header bg-darker-2 p-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-chart-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, strings.projectMetrics.title)), React.createElement(\"div\", {\n        className: \"condensed-list-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, this.state.loading && React.createElement(\"div\", {\n        className: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-circle-notch fa-spin fa-2x\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })), !this.state.loading && this.renderMetrics()));\n    }\n  }, {\n    key: \"buildValue\",\n    value: function buildValue(hoveredCell) {\n      var radius = hoveredCell.radius,\n          angle = hoveredCell.angle,\n          angle0 = hoveredCell.angle0;\n      var truedAngle = (angle + angle0) / 2;\n      return {\n        x: radius * Math.cos(truedAngle),\n        y: radius * Math.sin(truedAngle)\n      };\n    }\n  }, {\n    key: \"renderMetrics\",\n    value: function renderMetrics() {\n      var _this2 = this;\n\n      var sourceAssetCount = this.getSourceAssetCount();\n      var taggedAssetCount = this.getTaggedAssetCount();\n      var visitedAssetCount = this.getVisitedAssetsCount();\n      var assetChartSize = window.innerWidth >= 1920 ? 250 : 200;\n      var assetChartData = {\n        animation: true,\n        title: \"asset-count\",\n        children: [{\n          title: interpolate(strings.projectMetrics.visitedAssets, {\n            count: visitedAssetCount\n          }),\n          children: [{\n            title: interpolate(strings.projectMetrics.taggedAssets, {\n              count: taggedAssetCount\n            }),\n            bigness: 1,\n            children: [],\n            clr: \"#70c400\",\n            size: taggedAssetCount,\n            dontRotateLabel: true\n          }, {\n            bigness: 1,\n            children: [],\n            clr: \"#ff8c00\",\n            title: interpolate(strings.projectMetrics.nonTaggedAssets, {\n              count: visitedAssetCount - taggedAssetCount\n            }),\n            size: visitedAssetCount - taggedAssetCount,\n            dontRotateLabel: true\n          }],\n          clr: \"#4894fe\",\n          dontRotateLabel: true\n        }, {\n          title: interpolate(strings.projectMetrics.nonVisitedAssets, {\n            count: sourceAssetCount - visitedAssetCount\n          }),\n          bigness: 1,\n          children: [],\n          clr: \"#e81123\",\n          dontRotateLabel: true,\n          labelStyle: {\n            fontSize: 15,\n            fontWeight: \"bold\"\n          },\n          size: sourceAssetCount - visitedAssetCount\n        }]\n      };\n      var tagChartData = [];\n      this.getTagsCounts().forEach(function (value) {\n        tagChartData.push({\n          x: value.tag.name,\n          y: value.count,\n          color: value.tag.color\n        });\n      });\n      var hoveredCell = this.state.hoveredCell;\n      var legend = [{\n        title: interpolate(strings.projectMetrics.visitedAssets, {\n          count: visitedAssetCount\n        }),\n        color: \"#4894fe\"\n      }, {\n        title: interpolate(strings.projectMetrics.nonVisitedAssets, {\n          count: sourceAssetCount - visitedAssetCount\n        }),\n        color: \"#e81123\"\n      }, {\n        title: interpolate(strings.projectMetrics.taggedAssets, {\n          count: taggedAssetCount\n        }),\n        color: \"#70c400\"\n      }, {\n        title: interpolate(strings.projectMetrics.nonTaggedAssets, {\n          count: visitedAssetCount - taggedAssetCount\n        }),\n        color: \"#ff8c00\"\n      }];\n      return React.createElement(\"div\", {\n        className: \"m-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, strings.projectMetrics.assetsSectionTitle), React.createElement(\"p\", {\n        className: \"my-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, strings.projectMetrics.totalAssetCount, \":\", React.createElement(\"strong\", {\n        className: \"px-1 metric-total-asset-count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, sourceAssetCount), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"asset-chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(Sunburst, {\n        data: assetChartData,\n        style: {\n          stroke: \"#fff\"\n        },\n        onValueMouseOver: function onValueMouseOver(v) {\n          return _this2.setState({\n            hoveredCell: v.x && v.y ? v : null\n          });\n        },\n        onValueMouseOut: function onValueMouseOut(v) {\n          return _this2.setState({\n            hoveredCell: null\n          });\n        },\n        height: assetChartSize,\n        margin: {\n          top: 50,\n          bottom: 50,\n          left: 50,\n          right: 50\n        },\n        getLabel: function getLabel(d) {\n          return d.name;\n        },\n        getSize: function getSize(d) {\n          return d.size;\n        },\n        getColor: function getColor(d) {\n          return d.clr;\n        },\n        width: assetChartSize,\n        padAngle: function padAngle() {\n          return 0.05;\n        },\n        hideRootNode: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, hoveredCell ? React.createElement(Hint, {\n        value: this.buildValue(hoveredCell),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"hint-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"hint-content-box\",\n        style: {\n          background: hoveredCell.clr\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"px-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, hoveredCell.title))) : null), React.createElement(DiscreteColorLegend, {\n        items: legend,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"my-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, strings.projectMetrics.tagsSectionTitle), React.createElement(\"p\", {\n        className: \"my-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, strings.projectMetrics.totalTagCount, \":\", React.createElement(\"strong\", {\n        className: \"px-1 metric-total-tag-count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, this.props.project.tags.length)), React.createElement(\"p\", {\n        className: \"my-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, strings.projectMetrics.totalRegionCount, \":\", React.createElement(\"strong\", {\n        className: \"px-1 metric-total-region-count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, this.getRegionsCount())), React.createElement(\"p\", {\n        className: \"my-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, strings.projectMetrics.avgTagCountPerAsset, \":\", React.createElement(\"strong\", {\n        className: \"px-1 metric-avg-tag-count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, this.getAverageTagCount())), React.createElement(XYPlot, {\n        className: \"tag-chart\",\n        margin: {\n          bottom: 150\n        },\n        xType: \"ordinal\",\n        colorType: \"literal\",\n        width: 300,\n        height: 400,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(HorizontalGridLines, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }), React.createElement(XAxis, {\n        tickLabelAngle: -45,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }), React.createElement(YAxis, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }), React.createElement(VerticalBarSeries, {\n        data: tagChartData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }))));\n    }\n  }, {\n    key: \"getAssetsAndMetadata\",\n    value: function () {\n      var _getAssetsAndMetadata = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var assetService, sourceAssets, assetsMap, assets, projectAssetsMetadata;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assetService = new AssetService(this.props.project);\n                _context2.next = 3;\n                return assetService.getAssets();\n\n              case 3:\n                sourceAssets = _context2.sent;\n                assetsMap = this.props.project.assets;\n                assets = _.values(assetsMap);\n                _context2.next = 8;\n                return assets.mapAsync(function (asset) {\n                  return assetService.getAssetMetadata(asset);\n                });\n\n              case 8:\n                projectAssetsMetadata = _context2.sent;\n                this.setState({\n                  loading: false,\n                  sourceAssets: sourceAssets,\n                  projectAssetsMetadata: projectAssetsMetadata\n                });\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getAssetsAndMetadata() {\n        return _getAssetsAndMetadata.apply(this, arguments);\n      }\n\n      return getAssetsAndMetadata;\n    }()\n    /**\n     * Count the number of tagged images or video frames\n     */\n\n  }]);\n\n  return ProjectMetrics;\n}(React.Component);\n\nexport { ProjectMetrics as default };","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/pages/projectSettings/projectMetrics.tsx"],"names":["React","_","AssetState","AssetService","strings","interpolate","XYPlot","Sunburst","Hint","DiscreteColorLegend","HorizontalGridLines","XAxis","YAxis","VerticalBarSeries","ProjectMetrics","state","loading","hoveredCell","sourceAssets","projectAssetsMetadata","refresh","forceUpdate","getTaggedAssetCount","metadata","taggedAssets","filter","m","asset","Tagged","regions","length","getAverageTagCount","taggedAssetCount","tags","getAllTagReferences","toFixed","getVisitedAssetsCount","visitedAssets","Visited","getRegionsCount","getRegions","getSourceAssetCount","assets","map","e","name","projectAssetSet","Set","concat","size","getTagsCounts","projectTags","keyBy","props","project","tag","tagReferences","Map","forEach","t","projectTag","tagMetric","get","count","set","assetsMetadata","push","flatten","r","setState","getAssetsAndMetadata","window","addEventListener","removeEventListener","projectMetrics","title","renderMetrics","radius","angle","angle0","truedAngle","x","Math","cos","y","sin","sourceAssetCount","visitedAssetCount","assetChartSize","innerWidth","assetChartData","animation","children","bigness","clr","dontRotateLabel","nonTaggedAssets","nonVisitedAssets","labelStyle","fontSize","fontWeight","tagChartData","value","color","legend","assetsSectionTitle","totalAssetCount","stroke","v","top","bottom","left","right","d","buildValue","background","tagsSectionTitle","totalTagCount","totalRegionCount","avgTagCountPerAsset","assetService","getAssets","assetsMap","values","mapAsync","getAssetMetadata","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SACIC,UADJ,QAGO,qCAHP;AAIA,SAASC,YAAT,QAA6B,mCAA7B;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,4BAArC;AACA,SACiBC,MADjB,EACoCC,QADpC,EAC8CC,IAD9C,EACoDC,mBADpD,EAEIC,mBAFJ,EAEyBC,KAFzB,EAEgCC,KAFhC,EAEuCC,iBAFvC,QAGO,WAHP;AAIA,OAAO,yCAAP;AACA,OAAO,iCAAP;AACA,OAAO,4BAAP;AAEA;;;;;AAeA;;;;IAIqBC,c;;;;;;;;;;;;;;;;;UACVC,K,GAAQ;AACXC,MAAAA,OAAO,EAAE,IADE;AAEXC,MAAAA,WAAW,EAAE,IAFF;AAGXC,MAAAA,YAAY,EAAE,EAHH;AAIXC,MAAAA,qBAAqB,EAAE;AAJZ,K;;UAyCPC,O,GAAU,YAAM;AACpB,YAAKC,WAAL;AACH,K;;UAkLOC,mB,GAAsB,YAAM;AAChC,UAAMC,QAAQ,GAAG,MAAKR,KAAL,CAAWI,qBAA5B;;AAEA,UAAMK,YAAY,GAAGvB,CAAC,CAACwB,MAAF,CAASF,QAAT,EACjB,UAACG,CAAD,EAAO;AACH;AACA,eAAOA,CAAC,CAACC,KAAF,CAAQZ,KAAR,KAAkBb,UAAU,CAAC0B,MAA7B,IAAuCF,CAAC,CAACG,OAAF,CAAUC,MAAV,GAAmB,CAAjE;AACH,OAJgB,CAArB;;AAMA,aAAON,YAAY,CAACM,MAApB;AACH,K;;UAKOC,kB,GAAqB,YAAM;AAC/B,UAAMC,gBAAgB,GAAG,MAAKV,mBAAL,EAAzB;;AAEA,UAAIU,gBAAgB,KAAK,CAAzB,EAA4B;AACxB,eAAO,CAAP;AACH;;AAED,UAAMC,IAAI,GAAG,MAAKC,mBAAL,EAAb;;AACA,aAAO,CAACD,IAAI,CAACH,MAAL,GAAcE,gBAAf,EAAiCG,OAAjC,CAAyC,CAAzC,CAAP;AACH,K;;UAKOC,qB,GAAwB,YAAM;AAClC,UAAMb,QAAQ,GAAG,MAAKR,KAAL,CAAWI,qBAA5B;;AACA,UAAMkB,aAAa,GAAGpC,CAAC,CAACwB,MAAF,CAASF,QAAT,EAAmB,UAACG,CAAD,EAAO;AAC5C,eAAOA,CAAC,CAACC,KAAF,CAAQZ,KAAR,KAAkBb,UAAU,CAACoC,OAA7B,IAAwCZ,CAAC,CAACC,KAAF,CAAQZ,KAAR,KAAkBb,UAAU,CAAC0B,MAA5E;AACH,OAFqB,CAAtB;;AAIA,aAAOS,aAAa,CAACP,MAArB;AACH,K;;UAKOS,e,GAAkB,YAAM;AAC5B,UAAMV,OAAO,GAAG,MAAKW,UAAL,EAAhB;;AACA,aAAOX,OAAO,CAACC,MAAf;AACH,K;;UAMOW,mB,GAAsB,YAAM;AAChC,UAAMC,MAAM,GAAG,MAAK3B,KAAL,CAAWI,qBAAX,CAAiCwB,GAAjC,CAAqC,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACjB,KAAF,CAAQkB,IAAf;AAAA,OAArC,CAAf;;AACA,UAAMC,eAAe,GAAG,IAAIC,GAAJ,CAAQ,MAAKhC,KAAL,CAAWG,YAAX,CAAwByB,GAAxB,CAA4B,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACC,IAAT;AAAA,OAA5B,EAA2CG,MAA3C,CAAkDN,MAAlD,CAAR,CAAxB;AAEA,aAAOI,eAAe,CAACG,IAAvB;AACH,K;;UAKOC,a,GAAgB,YAAiD;AACrE,UAAMC,WAAW,GAAGlD,CAAC,CAACmD,KAAF,CAAQ,MAAKC,KAAL,CAAWC,OAAX,CAAmBrB,IAA3B,EAAiC,UAACsB,GAAD;AAAA,eAASA,GAAG,CAACV,IAAb;AAAA,OAAjC,CAApB;;AACA,UAAMW,aAAa,GAAG,MAAKtB,mBAAL,EAAtB;;AAEA,UAAMS,GAAG,GAAG,IAAIc,GAAJ,EAAZ;AACAD,MAAAA,aAAa,CAACE,OAAd,CAAsB,UAACC,CAAD,EAAO;AACzB,YAAMC,UAAU,GAAGT,WAAW,CAACQ,CAAD,CAA9B;;AACA,YAAI,CAACC,UAAL,EAAiB;AACb;AACH;;AAED,YAAMC,SAAS,GAAGlB,GAAG,CAACmB,GAAJ,CAAQH,CAAR,KAAc;AAAEJ,UAAAA,GAAG,EAAEK,UAAP;AAAmBG,UAAAA,KAAK,EAAE;AAA1B,SAAhC;AACAF,QAAAA,SAAS,CAACE,KAAV;AACApB,QAAAA,GAAG,CAACqB,GAAJ,CAAQL,CAAR,EAAWE,SAAX;AACH,OATD;;AAWA,YAAKR,KAAL,CAAWC,OAAX,CAAmBrB,IAAnB,CAAwByB,OAAxB,CAAgC,UAACH,GAAD,EAAS;AACrC,YAAI,CAACZ,GAAG,CAACmB,GAAJ,CAAQP,GAAG,CAACV,IAAZ,CAAL,EAAwB;AACpBF,UAAAA,GAAG,CAACqB,GAAJ,CAAQT,GAAG,CAACV,IAAZ,EAAkB;AAAEU,YAAAA,GAAG,EAAHA,GAAF;AAAOQ,YAAAA,KAAK,EAAE;AAAd,WAAlB;AACH;AACJ,OAJD;;AAMA,aAAOpB,GAAP;AACH,K;;UAKOH,U,GAAa,YAAiB;AAClC,UAAMyB,cAAc,GAAG,MAAKlD,KAAL,CAAWI,qBAAlC,CADkC,CAGlC;;AACA,UAAMU,OAAO,GAAG,EAAhB;AACAoC,MAAAA,cAAc,CAACP,OAAf,CAAuB,UAAChC,CAAD,EAAO;AAC1B,YAAIA,CAAC,CAACG,OAAF,CAAUC,MAAV,GAAmB,CAAvB,EAA0B;AACtBD,UAAAA,OAAO,CAACqC,IAAR,CAAcxC,CAAC,CAACG,OAAhB;AACH;AACJ,OAJD;AAMA,aAAO5B,CAAC,CAACkE,OAAF,CAAUtC,OAAV,CAAP;AACH,K;;UAKOK,mB,GAAsB,YAAgB;AAC1C,UAAML,OAAO,GAAG,MAAKW,UAAL,EAAhB;;AAEA,UAAMP,IAAI,GAAG,EAAb;AACAJ,MAAAA,OAAO,CAAC6B,OAAR,CAAgB,UAACU,CAAD,EAAO;AACnBnC,QAAAA,IAAI,CAACiC,IAAL,CAAUE,CAAC,CAACnC,IAAZ;AACH,OAFD;AAIA,aAAOhC,CAAC,CAACkE,OAAF,CAAkBlC,IAAlB,CAAP;AACH,K;;;;;;;;;;;;;;;AAvUG,qBAAKoC,QAAL,CAAc;AACVrD,kBAAAA,OAAO,EAAE;AADC,iBAAd;;uBAIM,KAAKsD,oBAAL,E;;;AACNC,gBAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKpD,OAAvC;;;;;;;;;;;;;;;;;;2CAG0B;AAC1BmD,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqC,KAAKrD,OAA1C;AACH;;;6BAEe;AACZ,aACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,uCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOhB,OAAO,CAACsE,cAAR,CAAuBC,KAA9B,CAFJ,CADJ,EAKI;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK5D,KAAL,CAAWC,OAAX,IACG;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,SAAS,EAAC,mCAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFR,EAMK,CAAC,KAAKD,KAAL,CAAWC,OAAZ,IACG,KAAK4D,aAAL,EAPR,CALJ,CADJ;AAkBH;;;+BAMkB3D,W,EAAa;AAAA,UACpB4D,MADoB,GACM5D,WADN,CACpB4D,MADoB;AAAA,UACZC,KADY,GACM7D,WADN,CACZ6D,KADY;AAAA,UACLC,MADK,GACM9D,WADN,CACL8D,MADK;AAE5B,UAAMC,UAAU,GAAG,CAACF,KAAK,GAAGC,MAAT,IAAmB,CAAtC;AACA,aAAO;AACHE,QAAAA,CAAC,EAAEJ,MAAM,GAAGK,IAAI,CAACC,GAAL,CAASH,UAAT,CADT;AAEHI,QAAAA,CAAC,EAAEP,MAAM,GAAGK,IAAI,CAACG,GAAL,CAASL,UAAT;AAFT,OAAP;AAIH;;;oCAEuB;AAAA;;AACpB,UAAMM,gBAAgB,GAAG,KAAK7C,mBAAL,EAAzB;AACA,UAAMT,gBAAgB,GAAG,KAAKV,mBAAL,EAAzB;AACA,UAAMiE,iBAAiB,GAAG,KAAKnD,qBAAL,EAA1B;AACA,UAAMoD,cAAc,GAAGjB,MAAM,CAACkB,UAAP,IAAqB,IAArB,GAA4B,GAA5B,GAAkC,GAAzD;AAEA,UAAMC,cAAc,GAAG;AACnBC,QAAAA,SAAS,EAAE,IADQ;AAEnBhB,QAAAA,KAAK,EAAE,aAFY;AAGnBiB,QAAAA,QAAQ,EAAE,CACN;AACIjB,UAAAA,KAAK,EAAEtE,WAAW,CAACD,OAAO,CAACsE,cAAR,CAAuBrC,aAAxB,EAAuC;AAAE0B,YAAAA,KAAK,EAAEwB;AAAT,WAAvC,CADtB;AAEIK,UAAAA,QAAQ,EAAE,CACN;AACIjB,YAAAA,KAAK,EAAEtE,WAAW,CAACD,OAAO,CAACsE,cAAR,CAAuBlD,YAAxB,EAAsC;AAAEuC,cAAAA,KAAK,EAAE/B;AAAT,aAAtC,CADtB;AAEI6D,YAAAA,OAAO,EAAE,CAFb;AAGID,YAAAA,QAAQ,EAAE,EAHd;AAIIE,YAAAA,GAAG,EAAE,SAJT;AAKI7C,YAAAA,IAAI,EAAEjB,gBALV;AAMI+D,YAAAA,eAAe,EAAE;AANrB,WADM,EASN;AACIF,YAAAA,OAAO,EAAE,CADb;AAEID,YAAAA,QAAQ,EAAE,EAFd;AAGIE,YAAAA,GAAG,EAAE,SAHT;AAIInB,YAAAA,KAAK,EAAEtE,WAAW,CAACD,OAAO,CAACsE,cAAR,CAAuBsB,eAAxB,EACd;AAAEjC,cAAAA,KAAK,EAAEwB,iBAAiB,GAAGvD;AAA7B,aADc,CAJtB;AAMIiB,YAAAA,IAAI,EAAEsC,iBAAiB,GAAGvD,gBAN9B;AAOI+D,YAAAA,eAAe,EAAE;AAPrB,WATM,CAFd;AAqBID,UAAAA,GAAG,EAAE,SArBT;AAsBIC,UAAAA,eAAe,EAAE;AAtBrB,SADM,EAyBN;AACIpB,UAAAA,KAAK,EAAEtE,WAAW,CAACD,OAAO,CAACsE,cAAR,CAAuBuB,gBAAxB,EACd;AAAElC,YAAAA,KAAK,EAAEuB,gBAAgB,GAAGC;AAA5B,WADc,CADtB;AAGIM,UAAAA,OAAO,EAAE,CAHb;AAIID,UAAAA,QAAQ,EAAE,EAJd;AAKIE,UAAAA,GAAG,EAAE,SALT;AAMIC,UAAAA,eAAe,EAAE,IANrB;AAOIG,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,EADF;AAERC,YAAAA,UAAU,EAAE;AAFJ,WAPhB;AAWInD,UAAAA,IAAI,EAAEqC,gBAAgB,GAAGC;AAX7B,SAzBM;AAHS,OAAvB;AA4CA,UAAMc,YAAY,GAAG,EAArB;AACA,WAAKnD,aAAL,GAAqBQ,OAArB,CAA6B,UAAC4C,KAAD,EAAW;AACpCD,QAAAA,YAAY,CAACnC,IAAb,CAAkB;AACde,UAAAA,CAAC,EAAEqB,KAAK,CAAC/C,GAAN,CAAUV,IADC;AAEduC,UAAAA,CAAC,EAAEkB,KAAK,CAACvC,KAFK;AAGdwC,UAAAA,KAAK,EAAED,KAAK,CAAC/C,GAAN,CAAUgD;AAHH,SAAlB;AAKH,OAND;AAnDoB,UA2DZtF,WA3DY,GA2DI,KAAKF,KA3DT,CA2DZE,WA3DY;AA6DpB,UAAMuF,MAAM,GAAG,CACX;AACI7B,QAAAA,KAAK,EAAEtE,WAAW,CAACD,OAAO,CAACsE,cAAR,CAAuBrC,aAAxB,EACd;AAAE0B,UAAAA,KAAK,EAAEwB;AAAT,SADc,CADtB;AAGIgB,QAAAA,KAAK,EAAE;AAHX,OADW,EAMX;AACI5B,QAAAA,KAAK,EAAEtE,WAAW,CAACD,OAAO,CAACsE,cAAR,CAAuBuB,gBAAxB,EACd;AAAElC,UAAAA,KAAK,EAAEuB,gBAAgB,GAAGC;AAA5B,SADc,CADtB;AAGIgB,QAAAA,KAAK,EAAE;AAHX,OANW,EAWX;AACI5B,QAAAA,KAAK,EAAEtE,WAAW,CAACD,OAAO,CAACsE,cAAR,CAAuBlD,YAAxB,EAAsC;AAAEuC,UAAAA,KAAK,EAAE/B;AAAT,SAAtC,CADtB;AAEIuE,QAAAA,KAAK,EAAE;AAFX,OAXW,EAeX;AACI5B,QAAAA,KAAK,EAAEtE,WAAW,CAACD,OAAO,CAACsE,cAAR,CAAuBsB,eAAxB,EACd;AAAEjC,UAAAA,KAAK,EAAEwB,iBAAiB,GAAGvD;AAA7B,SADc,CADtB;AAGIuE,QAAAA,KAAK,EAAE;AAHX,OAfW,CAAf;AAqBA,aACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKnG,OAAO,CAACsE,cAAR,CAAuB+B,kBAA5B,CADJ,EAEI;AAAG,QAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKrG,OAAO,CAACsE,cAAR,CAAuBgC,eAD5B,OAEQ;AAAQ,QAAA,SAAS,EAAC,+BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmDpB,gBAAnD,CAFR,EAEqF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFrF,CAFJ,EAMI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AACI,QAAA,IAAI,EAAEI,cADV;AAEI,QAAA,KAAK,EAAE;AAAEiB,UAAAA,MAAM,EAAE;AAAV,SAFX;AAGI,QAAA,gBAAgB,EAAE,0BAACC,CAAD;AAAA,iBACd,MAAI,CAACvC,QAAL,CAAc;AAAEpD,YAAAA,WAAW,EAAE2F,CAAC,CAAC3B,CAAF,IAAO2B,CAAC,CAACxB,CAAT,GAAawB,CAAb,GAAiB;AAAhC,WAAd,CADc;AAAA,SAHtB;AAMI,QAAA,eAAe,EAAE,yBAACA,CAAD;AAAA,iBAAO,MAAI,CAACvC,QAAL,CAAc;AAAEpD,YAAAA,WAAW,EAAE;AAAf,WAAd,CAAP;AAAA,SANrB;AAOI,QAAA,MAAM,EAAEuE,cAPZ;AAQI,QAAA,MAAM,EAAE;AAAEqB,UAAAA,GAAG,EAAE,EAAP;AAAWC,UAAAA,MAAM,EAAE,EAAnB;AAAuBC,UAAAA,IAAI,EAAE,EAA7B;AAAiCC,UAAAA,KAAK,EAAE;AAAxC,SARZ;AASI,QAAA,QAAQ,EAAE,kBAACC,CAAD;AAAA,iBAAOA,CAAC,CAACpE,IAAT;AAAA,SATd;AAUI,QAAA,OAAO,EAAE,iBAACoE,CAAD;AAAA,iBAAOA,CAAC,CAAChE,IAAT;AAAA,SAVb;AAWI,QAAA,QAAQ,EAAE,kBAACgE,CAAD;AAAA,iBAAOA,CAAC,CAACnB,GAAT;AAAA,SAXd;AAYI,QAAA,KAAK,EAAEN,cAZX;AAaI,QAAA,QAAQ,EAAE;AAAA,iBAAM,IAAN;AAAA,SAbd;AAcI,QAAA,YAAY,EAAE,IAdlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAgBKvE,WAAW,GACR,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,KAAKiG,UAAL,CAAgBjG,WAAhB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAkC,QAAA,KAAK,EAAE;AAAEkG,UAAAA,UAAU,EAAElG,WAAW,CAAC6E;AAA1B,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwB7E,WAAW,CAAC0D,KAApC,CAFJ,CADJ,CADQ,GAOR,IAvBR,CADJ,EA0BI,oBAAC,mBAAD;AAAqB,QAAA,KAAK,EAAE6B,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA1BJ,CANJ,EAkCI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKpG,OAAO,CAACsE,cAAR,CAAuB0C,gBAA5B,CADJ,EAEI;AAAG,QAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKhH,OAAO,CAACsE,cAAR,CAAuB2C,aAD5B,OAEI;AAAQ,QAAA,SAAS,EAAC,6BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiD,KAAKhE,KAAL,CAAWC,OAAX,CAAmBrB,IAAnB,CAAwBH,MAAzE,CAFJ,CAFJ,EAMI;AAAG,QAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK1B,OAAO,CAACsE,cAAR,CAAuB4C,gBAD5B,OAEI;AAAQ,QAAA,SAAS,EAAC,gCAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoD,KAAK/E,eAAL,EAApD,CAFJ,CANJ,EAUI;AAAG,QAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKnC,OAAO,CAACsE,cAAR,CAAuB6C,mBAD5B,OAEI;AAAQ,QAAA,SAAS,EAAC,2BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+C,KAAKxF,kBAAL,EAA/C,CAFJ,CAVJ,EAcI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,WAAlB;AACI,QAAA,MAAM,EAAE;AAAE+E,UAAAA,MAAM,EAAE;AAAV,SADZ;AAEI,QAAA,KAAK,EAAC,SAFV;AAGI,QAAA,SAAS,EAAC,SAHd;AAII,QAAA,KAAK,EAAE,GAJX;AAKI,QAAA,MAAM,EAAE,GALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMI,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,EAOI,oBAAC,KAAD;AAAO,QAAA,cAAc,EAAE,CAAC,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,EAQI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,EASI,oBAAC,iBAAD;AACI,QAAA,IAAI,EAAET,YADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATJ,CAdJ,CAlCJ,CADJ;AAiEH;;;;;;;;;;;;AAGSmB,gBAAAA,Y,GAAe,IAAIrH,YAAJ,CAAiB,KAAKkD,KAAL,CAAWC,OAA5B,C;;uBACMkE,YAAY,CAACC,SAAb,E;;;AAArBvG,gBAAAA,Y;AAEAwG,gBAAAA,S,GAAY,KAAKrE,KAAL,CAAWC,OAAX,CAAmBZ,M;AAC/BA,gBAAAA,M,GAASzC,CAAC,CAAC0H,MAAF,CAASD,SAAT,C;;uBACqBhF,MAAM,CAACkF,QAAP,CAAgB,UAACjG,KAAD;AAAA,yBAAW6F,YAAY,CAACK,gBAAb,CAA8BlG,KAA9B,CAAX;AAAA,iBAAhB,C;;;AAA9BR,gBAAAA,qB;AAEN,qBAAKkD,QAAL,CAAc;AACVrD,kBAAAA,OAAO,EAAE,KADC;AAEVE,kBAAAA,YAAY,EAAZA,YAFU;AAGVC,kBAAAA,qBAAqB,EAArBA;AAHU,iBAAd;;;;;;;;;;;;;;;;AAOJ;;;;;;;EA3NwCnB,KAAK,CAAC8H,S;;SAA7BhH,c","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport {\n    AssetState, IAsset, IAssetMetadata,\n    IProject, IRegion, ITag, IPoint, AssetType,\n} from \"../../../../models/applicationState\";\nimport { AssetService } from \"../../../../services/assetService\";\nimport { strings, interpolate } from \"../../../../common/strings\";\nimport {\n    RadialChart, XYPlot, ArcSeries, Sunburst, Hint, DiscreteColorLegend,\n    HorizontalGridLines, XAxis, YAxis, VerticalBarSeries,\n} from \"react-vis\";\nimport \"react-vis/dist/styles/radial-chart.scss\";\nimport \"react-vis/dist/styles/plot.scss\";\nimport \"./projectSettingsPage.scss\";\n\n/**\n * Required properties for Project Metrics\n * @member project - Current project to fill metrics table\n */\nexport interface IProjectMetricsProps {\n    project: IProject;\n}\n\nexport interface IProjectMetricsState {\n    loading: boolean;\n    hoveredCell: any;\n    sourceAssets: IAsset[];\n    projectAssetsMetadata: IAssetMetadata[];\n}\n\n/**\n * @name - Project Form\n * @description -\n */\nexport default class ProjectMetrics extends React.Component<IProjectMetricsProps, IProjectMetricsState> {\n    public state = {\n        loading: true,\n        hoveredCell: null,\n        sourceAssets: [],\n        projectAssetsMetadata: [],\n    };\n\n    public async componentDidMount() {\n        this.setState({\n            loading: true,\n        });\n\n        await this.getAssetsAndMetadata();\n        window.addEventListener(\"resize\", this.refresh);\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.refresh);\n    }\n\n    public render() {\n        return (\n            <div className=\"condensed-list\">\n                <h6 className=\"condensed-list-header bg-darker-2 p-2\">\n                    <i className=\"fas fa-chart-bar\" />\n                    <span>{strings.projectMetrics.title}</span>\n                </h6>\n                <div className=\"condensed-list-body\">\n                    {this.state.loading &&\n                        <div className=\"loading\">\n                            <i className=\"fas fa-circle-notch fa-spin fa-2x\" />\n                        </div>\n                    }\n                    {!this.state.loading &&\n                        this.renderMetrics()\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    private refresh = () => {\n        this.forceUpdate();\n    }\n\n    private buildValue(hoveredCell) {\n        const { radius, angle, angle0 } = hoveredCell;\n        const truedAngle = (angle + angle0) / 2;\n        return {\n            x: radius * Math.cos(truedAngle),\n            y: radius * Math.sin(truedAngle),\n        };\n    }\n\n    private renderMetrics() {\n        const sourceAssetCount = this.getSourceAssetCount();\n        const taggedAssetCount = this.getTaggedAssetCount();\n        const visitedAssetCount = this.getVisitedAssetsCount();\n        const assetChartSize = window.innerWidth >= 1920 ? 250 : 200;\n\n        const assetChartData = {\n            animation: true,\n            title: \"asset-count\",\n            children: [\n                {\n                    title: interpolate(strings.projectMetrics.visitedAssets, { count: visitedAssetCount }),\n                    children: [\n                        {\n                            title: interpolate(strings.projectMetrics.taggedAssets, { count: taggedAssetCount }),\n                            bigness: 1,\n                            children: [],\n                            clr: \"#70c400\",\n                            size: taggedAssetCount,\n                            dontRotateLabel: true,\n                        },\n                        {\n                            bigness: 1,\n                            children: [],\n                            clr: \"#ff8c00\",\n                            title: interpolate(strings.projectMetrics.nonTaggedAssets,\n                                { count: visitedAssetCount - taggedAssetCount }),\n                            size: visitedAssetCount - taggedAssetCount,\n                            dontRotateLabel: true,\n                        },\n                    ],\n                    clr: \"#4894fe\",\n                    dontRotateLabel: true,\n                },\n                {\n                    title: interpolate(strings.projectMetrics.nonVisitedAssets,\n                        { count: sourceAssetCount - visitedAssetCount }),\n                    bigness: 1,\n                    children: [],\n                    clr: \"#e81123\",\n                    dontRotateLabel: true,\n                    labelStyle: {\n                        fontSize: 15,\n                        fontWeight: \"bold\",\n                    },\n                    size: sourceAssetCount - visitedAssetCount,\n                },\n            ],\n        };\n\n        const tagChartData = [];\n        this.getTagsCounts().forEach((value) => {\n            tagChartData.push({\n                x: value.tag.name,\n                y: value.count,\n                color: value.tag.color,\n            });\n        });\n\n        const { hoveredCell } = this.state;\n\n        const legend = [\n            {\n                title: interpolate(strings.projectMetrics.visitedAssets,\n                    { count: visitedAssetCount }),\n                color: \"#4894fe\",\n            },\n            {\n                title: interpolate(strings.projectMetrics.nonVisitedAssets,\n                    { count: sourceAssetCount - visitedAssetCount }),\n                color: \"#e81123\",\n            },\n            {\n                title: interpolate(strings.projectMetrics.taggedAssets, { count: taggedAssetCount }),\n                color: \"#70c400\",\n            },\n            {\n                title: interpolate(strings.projectMetrics.nonTaggedAssets,\n                    { count: visitedAssetCount - taggedAssetCount }),\n                color: \"#ff8c00\",\n            }];\n\n        return (\n            <div className=\"m-3\">\n                <h4>{strings.projectMetrics.assetsSectionTitle}</h4>\n                <p className=\"my-1\">\n                    {strings.projectMetrics.totalAssetCount}:\n                        <strong className=\"px-1 metric-total-asset-count\">{sourceAssetCount}</strong><br />\n                </p>\n                <div className=\"asset-chart\">\n                    <Sunburst\n                        data={assetChartData}\n                        style={{ stroke: \"#fff\" }}\n                        onValueMouseOver={(v) =>\n                            this.setState({ hoveredCell: v.x && v.y ? v : null })\n                        }\n                        onValueMouseOut={(v) => this.setState({ hoveredCell: null })}\n                        height={assetChartSize}\n                        margin={{ top: 50, bottom: 50, left: 50, right: 50 }}\n                        getLabel={(d) => d.name}\n                        getSize={(d) => d.size}\n                        getColor={(d) => d.clr}\n                        width={assetChartSize}\n                        padAngle={() => 0.05}\n                        hideRootNode={true}\n                    >\n                        {hoveredCell ? (\n                            <Hint value={this.buildValue(hoveredCell)}>\n                                <div className=\"hint-content\">\n                                    <div className=\"hint-content-box\" style={{ background: hoveredCell.clr }} />\n                                    <span className=\"px-2\">{hoveredCell.title}</span>\n                                </div>\n                            </Hint>\n                        ) : null}\n                    </Sunburst>\n                    <DiscreteColorLegend items={legend} />\n                </div>\n                <div className=\"my-4\">\n                    <h4>{strings.projectMetrics.tagsSectionTitle}</h4>\n                    <p className=\"my-1\">\n                        {strings.projectMetrics.totalTagCount}:\n                        <strong className=\"px-1 metric-total-tag-count\">{this.props.project.tags.length}</strong>\n                    </p>\n                    <p className=\"my-1\">\n                        {strings.projectMetrics.totalRegionCount}:\n                        <strong className=\"px-1 metric-total-region-count\">{this.getRegionsCount()}</strong>\n                    </p>\n                    <p className=\"my-1\">\n                        {strings.projectMetrics.avgTagCountPerAsset}:\n                        <strong className=\"px-1 metric-avg-tag-count\">{this.getAverageTagCount()}</strong>\n                    </p>\n                    <XYPlot className=\"tag-chart\"\n                        margin={{ bottom: 150 }}\n                        xType=\"ordinal\"\n                        colorType=\"literal\"\n                        width={300}\n                        height={400}>\n                        <HorizontalGridLines />\n                        <XAxis tickLabelAngle={-45} />\n                        <YAxis />\n                        <VerticalBarSeries\n                            data={tagChartData}\n                        />\n                    </XYPlot>\n                </div>\n            </div>\n        );\n    }\n\n    private async getAssetsAndMetadata() {\n        const assetService = new AssetService(this.props.project);\n        const sourceAssets = await assetService.getAssets();\n\n        const assetsMap = this.props.project.assets;\n        const assets = _.values(assetsMap);\n        const projectAssetsMetadata = await assets.mapAsync((asset) => assetService.getAssetMetadata(asset));\n\n        this.setState({\n            loading: false,\n            sourceAssets,\n            projectAssetsMetadata,\n        });\n    }\n\n    /**\n     * Count the number of tagged images or video frames\n     */\n    private getTaggedAssetCount = () => {\n        const metadata = this.state.projectAssetsMetadata;\n\n        const taggedAssets = _.filter(metadata,\n            (m) => {\n                // ignore video asset root container\n                return m.asset.state === AssetState.Tagged && m.regions.length > 0;\n            });\n\n        return taggedAssets.length;\n    }\n\n    /**\n     * Count the avg number of tags per image or video frame\n     */\n    private getAverageTagCount = () => {\n        const taggedAssetCount = this.getTaggedAssetCount();\n\n        if (taggedAssetCount === 0) {\n            return 0;\n        }\n\n        const tags = this.getAllTagReferences();\n        return (tags.length / taggedAssetCount).toFixed(2);\n    }\n\n    /**\n     * The number of visited image or video frames\n     */\n    private getVisitedAssetsCount = () => {\n        const metadata = this.state.projectAssetsMetadata;\n        const visitedAssets = _.filter(metadata, (m) => {\n            return m.asset.state === AssetState.Visited || m.asset.state === AssetState.Tagged;\n        });\n\n        return visitedAssets.length;\n    }\n\n    /**\n     * Total regions drawn on all assets\n     */\n    private getRegionsCount = () => {\n        const regions = this.getRegions();\n        return regions.length;\n    }\n\n    /**\n     * Total number of source assets in the project\n     *   Note: video frames are not counted, only the video container\n     */\n    private getSourceAssetCount = () => {\n        const assets = this.state.projectAssetsMetadata.map((e) => e.asset.name);\n        const projectAssetSet = new Set(this.state.sourceAssets.map((e) => e.name).concat(assets));\n\n        return projectAssetSet.size;\n    }\n\n    /**\n     * a map of asset count per tag\n     */\n    private getTagsCounts = (): Map<string, { tag: ITag, count: number }> => {\n        const projectTags = _.keyBy(this.props.project.tags, (tag) => tag.name);\n        const tagReferences = this.getAllTagReferences();\n\n        const map = new Map<string, { tag: ITag, count: number }>();\n        tagReferences.forEach((t) => {\n            const projectTag = projectTags[t];\n            if (!projectTag) {\n                return;\n            }\n\n            const tagMetric = map.get(t) || { tag: projectTag, count: 0 };\n            tagMetric.count++;\n            map.set(t, tagMetric);\n        });\n\n        this.props.project.tags.forEach((tag) => {\n            if (!map.get(tag.name)) {\n                map.set(tag.name, { tag, count: 0 });\n            }\n        });\n\n        return map;\n    }\n\n    /**\n     * retrieve the list of regions drawn\n     */\n    private getRegions = (): IRegion[] => {\n        const assetsMetadata = this.state.projectAssetsMetadata;\n\n        // find all assets with non-zero regions, extract regions\n        const regions = [];\n        assetsMetadata.forEach((m) => {\n            if (m.regions.length > 0) {\n                regions.push((m.regions));\n            }\n        });\n\n        return _.flatten(regions);\n    }\n\n    /**\n     * retrieve the list of tags assigned\n     */\n    private getAllTagReferences = (): string[] => {\n        const regions = this.getRegions();\n\n        const tags = [];\n        regions.forEach((r) => {\n            tags.push(r.tags);\n        });\n\n        return _.flatten<string>(tags);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/common/tagInput/tagInputItem.tsx\";\nimport React from \"react\";\nexport var TagEditMode;\n\n(function (TagEditMode) {\n  TagEditMode[\"Color\"] = \"color\";\n  TagEditMode[\"Name\"] = \"name\";\n})(TagEditMode || (TagEditMode = {}));\n\nvar TagInputItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TagInputItem, _React$Component);\n\n  function TagInputItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TagInputItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TagInputItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isBeingEdited: false,\n      isLocked: false,\n      tagEditMode: null\n    };\n\n    _this.onColorClick = function (e) {\n      e.stopPropagation();\n      var ctrlKey = e.ctrlKey || e.metaKey;\n      var altKey = e.altKey;\n\n      _this.setState({\n        tagEditMode: TagEditMode.Color\n      }, function () {\n        return _this.props.onClick(_this.props.tag, {\n          ctrlKey: ctrlKey,\n          altKey: altKey,\n          clickedColor: true\n        });\n      });\n    };\n\n    _this.onNameClick = function (e) {\n      e.stopPropagation();\n      var ctrlKey = e.ctrlKey || e.metaKey;\n      var altKey = e.altKey;\n\n      _this.setState({\n        tagEditMode: TagEditMode.Name\n      }, function () {\n        return _this.props.onClick(_this.props.tag, {\n          ctrlKey: ctrlKey,\n          altKey: altKey\n        });\n      });\n    };\n\n    _this.getItemClassName = function () {\n      var classNames = [\"tag-item\"];\n\n      if (_this.props.isSelected) {\n        classNames.push(\"tag-item-selected\");\n      }\n\n      if (_this.props.appliedToSelectedRegions) {\n        classNames.push(\"tag-item-applied\");\n      }\n\n      return classNames.join(\" \");\n    };\n\n    _this.getTagContent = function () {\n      var displayIndex = _this.getDisplayIndex();\n\n      return React.createElement(\"div\", {\n        className: \"tag-name-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"tag-name-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, _this.state.isBeingEdited && _this.state.tagEditMode === TagEditMode.Name ? React.createElement(\"input\", {\n        className: \"tag-name-editor \".concat(_this.getContentClassName()),\n        type: \"text\",\n        defaultValue: _this.props.tag.name,\n        onKeyDown: function onKeyDown(e) {\n          return _this.handleNameEdit(e);\n        },\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }) : React.createElement(\"span\", {\n        title: _this.props.tag.name,\n        className: _this.getContentClassName(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, _this.props.tag.name)), React.createElement(\"div\", {\n        className: \"tag-lock-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, _this.props.isLocked && React.createElement(\"i\", {\n        className: \"fas fa-lock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"tag-index\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, displayIndex !== null && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"[\", displayIndex, \"]\")));\n    };\n\n    _this.handleNameEdit = function (e) {\n      if (e.key === \"Enter\") {\n        var newTagName = e.target.value;\n\n        _this.props.onChange(_this.props.tag, _objectSpread({}, _this.props.tag, {\n          name: newTagName\n        }));\n      } else if (e.key === \"Escape\") {\n        _this.setState({\n          isBeingEdited: false\n        });\n      }\n    };\n\n    _this.getContentClassName = function () {\n      var classNames = [\"tag-name-text px-2\"];\n\n      if (_this.state.isBeingEdited && _this.state.tagEditMode === TagEditMode.Color) {\n        classNames.push(\" tag-color-edit\");\n      }\n\n      return classNames.join(\" \");\n    };\n\n    _this.getDisplayIndex = function () {\n      var index = _this.props.index;\n      var displayIndex = index === 9 ? 0 : index + 1;\n      return displayIndex < 10 ? displayIndex : null;\n    };\n\n    return _this;\n  }\n\n  _createClass(TagInputItem, [{\n    key: \"render\",\n    value: function render() {\n      var style = {\n        background: this.props.tag.color\n      };\n      return React.createElement(\"div\", {\n        className: \"tag-item-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, this.props.tag && React.createElement(\"li\", {\n        className: this.getItemClassName(),\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"tag-color\",\n        onClick: this.onColorClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"tag-content\",\n        onClick: this.onNameClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, this.getTagContent()), this.state.isLocked && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.isBeingEdited !== this.props.isBeingEdited) {\n        this.setState({\n          isBeingEdited: this.props.isBeingEdited\n        });\n      }\n\n      if (prevProps.isLocked !== this.props.isLocked) {\n        this.setState({\n          isLocked: this.props.isLocked\n        });\n      }\n    }\n  }]);\n\n  return TagInputItem;\n}(React.Component);\n\nexport { TagInputItem as default };","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/common/tagInput/tagInputItem.tsx"],"names":["React","TagEditMode","TagInputItem","state","isBeingEdited","isLocked","tagEditMode","onColorClick","e","stopPropagation","ctrlKey","metaKey","altKey","setState","Color","props","onClick","tag","clickedColor","onNameClick","Name","getItemClassName","classNames","isSelected","push","appliedToSelectedRegions","join","getTagContent","displayIndex","getDisplayIndex","getContentClassName","name","handleNameEdit","key","newTagName","target","value","onChange","index","style","background","color","prevProps","Component"],"mappings":"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","sourcesContent":["import React, { MouseEvent } from \"react\";\nimport { ITag } from \"../../../../models/applicationState\";\n\nexport enum TagEditMode {\n    Color = \"color\",\n    Name = \"name\",\n}\n\nexport interface ITagClickProps {\n    ctrlKey?: boolean;\n    altKey?: boolean;\n    clickedColor?: boolean;\n}\n\n/**\n * Properties for tag input item\n */\nexport interface ITagInputItemProps {\n    /** Tag represented by item */\n    tag: ITag;\n    /** Index of tag within tags array */\n    index: number;\n    /** Tag is currently being edited */\n    isBeingEdited: boolean;\n    /** Tag is currently locked for application */\n    isLocked: boolean;\n    /** Tag is currently selected */\n    isSelected: boolean;\n    /** Tag is currently applied to one of the selected regions */\n    appliedToSelectedRegions: boolean;\n    /** Function to call upon clicking item */\n    onClick: (tag: ITag, props: ITagClickProps) => void;\n    /** Apply updates to tag */\n    onChange: (oldTag: ITag, newTag: ITag) => void;\n}\n\nexport interface ITagInputItemState {\n    /** Tag is currently being edited */\n    isBeingEdited: boolean;\n    /** Tag is currently locked for application */\n    isLocked: boolean;\n    /** Mode of tag editing (text or color) */\n    tagEditMode: TagEditMode;\n}\n\nexport default class TagInputItem extends React.Component<ITagInputItemProps, ITagInputItemState> {\n    public state: ITagInputItemState = {\n        isBeingEdited: false,\n        isLocked: false,\n        tagEditMode: null,\n    };\n\n    public render() {\n        const style: any = {\n            background: this.props.tag.color,\n        };\n        return (\n            <div className={\"tag-item-block\"}>\n                {\n                    this.props.tag &&\n                    <li className={this.getItemClassName()} style={style}>\n                        <div\n                            className={`tag-color`}\n                            onClick={this.onColorClick}>\n                        </div>\n                        <div\n                            className={\"tag-content\"}\n                            onClick={this.onNameClick}>\n                            {this.getTagContent()}\n                        </div>\n                        {\n                            this.state.isLocked &&\n                            <div></div>\n                        }\n                    </li>\n                }\n            </div>\n        );\n    }\n\n    public componentDidUpdate(prevProps: ITagInputItemProps) {\n        if (prevProps.isBeingEdited !== this.props.isBeingEdited) {\n            this.setState({\n                isBeingEdited: this.props.isBeingEdited,\n            });\n        }\n\n        if (prevProps.isLocked !== this.props.isLocked) {\n            this.setState({\n                isLocked: this.props.isLocked,\n            });\n        }\n    }\n\n    private onColorClick = (e: MouseEvent) => {\n        e.stopPropagation();\n\n        const ctrlKey = e.ctrlKey || e.metaKey;\n        const altKey = e.altKey;\n        this.setState({\n            tagEditMode: TagEditMode.Color,\n        }, () => this.props.onClick(this.props.tag, { ctrlKey, altKey, clickedColor: true }));\n    }\n\n    private onNameClick = (e: MouseEvent) => {\n        e.stopPropagation();\n\n        const ctrlKey = e.ctrlKey || e.metaKey;\n        const altKey = e.altKey;\n        this.setState({\n            tagEditMode: TagEditMode.Name,\n        }, () => this.props.onClick(this.props.tag, { ctrlKey, altKey }));\n    }\n\n    private getItemClassName = () => {\n        const classNames = [\"tag-item\"];\n        if (this.props.isSelected) {\n            classNames.push(\"tag-item-selected\");\n        }\n        if (this.props.appliedToSelectedRegions) {\n            classNames.push(\"tag-item-applied\");\n        }\n        return classNames.join(\" \");\n    }\n\n    private getTagContent = () => {\n        const displayIndex = this.getDisplayIndex();\n        return (\n            <div className={\"tag-name-container\"}>\n                <div className=\"tag-name-body\">\n                    {\n                        (this.state.isBeingEdited && this.state.tagEditMode === TagEditMode.Name)\n                            ?\n                            <input\n                                className={`tag-name-editor ${this.getContentClassName()}`}\n                                type=\"text\"\n                                defaultValue={this.props.tag.name}\n                                onKeyDown={(e) => this.handleNameEdit(e)}\n                                autoFocus={true}\n                            />\n                            :\n                            <span title={this.props.tag.name} className={this.getContentClassName()}>\n                                {this.props.tag.name}\n                            </span>\n                    }\n                </div>\n                <div className=\"tag-lock-icon\">\n                    {this.props.isLocked &&\n                        <i className=\"fas fa-lock\" />\n                    }\n                </div>\n                <div className={\"tag-index\"}>\n                    {(displayIndex !== null) && <span>[{displayIndex}]</span>}\n                </div>\n            </div>\n        );\n    }\n\n    private handleNameEdit = (e) => {\n        if (e.key === \"Enter\") {\n            const newTagName = e.target.value;\n            this.props.onChange(this.props.tag, {\n                ...this.props.tag,\n                name: newTagName,\n            });\n        } else if (e.key === \"Escape\") {\n            this.setState({\n                isBeingEdited: false,\n            });\n        }\n    }\n\n    private getContentClassName = () => {\n        const classNames = [\"tag-name-text px-2\"];\n        if (this.state.isBeingEdited && this.state.tagEditMode === TagEditMode.Color) {\n            classNames.push(\" tag-color-edit\");\n        }\n        return classNames.join(\" \");\n    }\n\n    private getDisplayIndex = () => {\n        const index = this.props.index;\n        const displayIndex = (index === 9) ? 0 : index + 1;\n        return (displayIndex < 10) ? displayIndex : null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
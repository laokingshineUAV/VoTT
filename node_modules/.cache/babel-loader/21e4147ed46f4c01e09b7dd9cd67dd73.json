{"ast":null,"code":"import _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport Guard from \"./guard\";\nimport { encryptObject, decryptObject } from \"./crypto\";\n/**\n * Generates a random integer in provided range\n * @param min Lower bound of random number generation - INCLUSIVE\n * @param max Upper bound of random number generation - EXCLUSIVE\n */\n\nexport function randomIntInRange(min, max) {\n  if (min > max) {\n    throw new Error(\"min (\".concat(min, \") can't be bigger than max (\").concat(max, \")\"));\n  }\n\n  if (min === max) {\n    return min;\n  }\n\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; // The maximum is exclusive and the minimum is inclusive\n}\n/**\n * Common key codes used throughout application\n */\n\nexport var KeyCodes = {\n  comma: 188,\n  enter: 13,\n  backspace: 8,\n  ctrl: 17,\n  shift: 16,\n  tab: 9\n};\n/**\n * Generates a query string from the key/values of a JSON object\n * @param object The json object\n * @returns A value representing a URL compatible query string\n */\n\nexport function createQueryString(object) {\n  Guard.null(object);\n  var parts = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = Object.getOwnPropertyNames(object)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n      parts.push(\"\".concat(key, \"=\").concat(encodeURIComponent(object[key])));\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return parts.join(\"&\");\n}\nexport function encodeFileURI(path, additionalEncodings) {\n  // encodeURI() will not encode: ~!@#$&*()=:/,;?+'\n  // extend it to support all of these except # and ?\n  // all other non encoded characters are implicitly supported with no reason to encoding them\n  var matchString = /(#|\\?)/g;\n  var encodings = {\n    \"\\#\": \"%23\",\n    \"\\?\": \"%3F\"\n  };\n  var encodedURI = \"file:\".concat(encodeURI(normalizeSlashes(path)));\n\n  if (additionalEncodings) {\n    return encodedURI.replace(matchString, function (match) {\n      return encodings[match];\n    });\n  }\n\n  return encodedURI;\n}\nexport function normalizeSlashes(path) {\n  return path.replace(/\\\\/g, \"/\");\n}\n/**\n * Encrypts sensitive settings for the specified project and returns the result\n * @param project The project to encrypt\n * @param securityToken The security token used to encrypt the project\n */\n\nexport function encryptProject(project, securityToken) {\n  var encrypted = _objectSpread({}, project, {\n    sourceConnection: _objectSpread({}, project.sourceConnection),\n    targetConnection: _objectSpread({}, project.targetConnection),\n    exportFormat: project.exportFormat ? _objectSpread({}, project.exportFormat) : null\n  });\n\n  encrypted.sourceConnection.providerOptions = encryptProviderOptions(project.sourceConnection.providerOptions, securityToken.key);\n  encrypted.targetConnection.providerOptions = encryptProviderOptions(project.targetConnection.providerOptions, securityToken.key);\n\n  if (encrypted.exportFormat) {\n    encrypted.exportFormat.providerOptions = encryptProviderOptions(project.exportFormat.providerOptions, securityToken.key);\n  }\n\n  return encrypted;\n}\n/**\n * Decrypts sensitive settings for the specified project and return the result\n * @param project The project to decrypt\n * @param securityToken The security token used to decrypt the project\n */\n\nexport function decryptProject(project, securityToken) {\n  var decrypted = _objectSpread({}, project, {\n    sourceConnection: _objectSpread({}, project.sourceConnection),\n    targetConnection: _objectSpread({}, project.targetConnection),\n    exportFormat: project.exportFormat ? _objectSpread({}, project.exportFormat) : null\n  });\n\n  decrypted.sourceConnection.providerOptions = decryptProviderOptions(decrypted.sourceConnection.providerOptions, securityToken.key);\n  decrypted.targetConnection.providerOptions = decryptProviderOptions(decrypted.targetConnection.providerOptions, securityToken.key);\n\n  if (decrypted.exportFormat) {\n    decrypted.exportFormat.providerOptions = decryptProviderOptions(decrypted.exportFormat.providerOptions, securityToken.key);\n  }\n\n  return decrypted;\n}\n\nfunction encryptProviderOptions(providerOptions, secret) {\n  if (!providerOptions) {\n    return null;\n  }\n\n  if (providerOptions.encrypted) {\n    return providerOptions;\n  }\n\n  return {\n    encrypted: encryptObject(providerOptions, secret)\n  };\n}\n\nfunction decryptProviderOptions(providerOptions, secret) {\n  var secureString = providerOptions;\n\n  if (!(secureString && secureString.encrypted)) {\n    return providerOptions;\n  }\n\n  return decryptObject(providerOptions.encrypted, secret);\n}","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/common/utils.ts"],"names":["Guard","encryptObject","decryptObject","randomIntInRange","min","max","Error","Math","ceil","floor","random","KeyCodes","comma","enter","backspace","ctrl","shift","tab","createQueryString","object","null","parts","Object","getOwnPropertyNames","key","push","encodeURIComponent","join","encodeFileURI","path","additionalEncodings","matchString","encodings","encodedURI","encodeURI","normalizeSlashes","replace","match","encryptProject","project","securityToken","encrypted","sourceConnection","targetConnection","exportFormat","providerOptions","encryptProviderOptions","decryptProject","decrypted","decryptProviderOptions","secret","secureString"],"mappings":"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","sourcesContent":["import Guard from \"./guard\";\nimport { IProject, ISecurityToken, IProviderOptions, ISecureString } from \"../models/applicationState\";\nimport { encryptObject, decryptObject } from \"./crypto\";\n\n/**\n * Generates a random integer in provided range\n * @param min Lower bound of random number generation - INCLUSIVE\n * @param max Upper bound of random number generation - EXCLUSIVE\n */\nexport function randomIntInRange(min: number, max: number) {\n    if (min > max) {\n        throw new Error(`min (${min}) can't be bigger than max (${max})`);\n    }\n\n    if (min === max) {\n        return min;\n    }\n\n    min = Math.ceil(min);\n    max = Math.floor(max);\n\n    return Math.floor(Math.random() * (max - min)) + min; // The maximum is exclusive and the minimum is inclusive\n}\n\n/**\n * Common key codes used throughout application\n */\nexport const KeyCodes = {\n    comma: 188,\n    enter: 13,\n    backspace: 8,\n    ctrl: 17,\n    shift: 16,\n    tab: 9,\n};\n\n/**\n * Generates a query string from the key/values of a JSON object\n * @param object The json object\n * @returns A value representing a URL compatible query string\n */\nexport function createQueryString(object: any): string {\n    Guard.null(object);\n\n    const parts: any[] = [];\n\n    for (const key of Object.getOwnPropertyNames(object)) {\n        parts.push(`${key}=${encodeURIComponent(object[key])}`);\n    }\n\n    return parts.join(\"&\");\n}\n\nexport function encodeFileURI(path: string, additionalEncodings?: boolean): string {\n    // encodeURI() will not encode: ~!@#$&*()=:/,;?+'\n    // extend it to support all of these except # and ?\n    // all other non encoded characters are implicitly supported with no reason to encoding them\n    const matchString = /(#|\\?)/g;\n    const encodings = {\n        \"\\#\": \"%23\",\n        \"\\?\": \"%3F\",\n        };\n    const encodedURI = `file:${encodeURI(normalizeSlashes(path))}`;\n    if (additionalEncodings) {\n        return encodedURI.replace(matchString, (match) => encodings[match]);\n    }\n    return encodedURI;\n}\n\nexport function normalizeSlashes(path: string): string {\n    return path.replace(/\\\\/g, \"/\");\n}\n\n/**\n * Encrypts sensitive settings for the specified project and returns the result\n * @param project The project to encrypt\n * @param securityToken The security token used to encrypt the project\n */\nexport function encryptProject(project: IProject, securityToken: ISecurityToken): IProject {\n    const encrypted: IProject = {\n        ...project,\n        sourceConnection: { ...project.sourceConnection },\n        targetConnection: { ...project.targetConnection },\n        exportFormat: project.exportFormat ? { ...project.exportFormat } : null,\n    };\n\n    encrypted.sourceConnection.providerOptions =\n        encryptProviderOptions(project.sourceConnection.providerOptions, securityToken.key);\n    encrypted.targetConnection.providerOptions =\n        encryptProviderOptions(project.targetConnection.providerOptions, securityToken.key);\n\n    if (encrypted.exportFormat) {\n        encrypted.exportFormat.providerOptions =\n            encryptProviderOptions(project.exportFormat.providerOptions, securityToken.key);\n    }\n\n    return encrypted;\n}\n\n/**\n * Decrypts sensitive settings for the specified project and return the result\n * @param project The project to decrypt\n * @param securityToken The security token used to decrypt the project\n */\nexport function decryptProject(project: IProject, securityToken: ISecurityToken): IProject {\n    const decrypted: IProject = {\n        ...project,\n        sourceConnection: { ...project.sourceConnection },\n        targetConnection: { ...project.targetConnection },\n        exportFormat: project.exportFormat ? { ...project.exportFormat } : null,\n    };\n\n    decrypted.sourceConnection.providerOptions =\n        decryptProviderOptions(decrypted.sourceConnection.providerOptions, securityToken.key);\n    decrypted.targetConnection.providerOptions =\n        decryptProviderOptions(decrypted.targetConnection.providerOptions, securityToken.key);\n\n    if (decrypted.exportFormat) {\n        decrypted.exportFormat.providerOptions =\n            decryptProviderOptions(decrypted.exportFormat.providerOptions, securityToken.key);\n    }\n\n    return decrypted;\n}\n\nfunction encryptProviderOptions(providerOptions: IProviderOptions | ISecureString, secret: string): ISecureString {\n    if (!providerOptions) {\n        return null;\n    }\n\n    if (providerOptions.encrypted) {\n        return providerOptions as ISecureString;\n    }\n\n    return {\n        encrypted: encryptObject(providerOptions, secret),\n    };\n}\n\nfunction decryptProviderOptions<T = IProviderOptions>(providerOptions: IProviderOptions | ISecureString, secret): T {\n    const secureString = providerOptions as ISecureString;\n    if (!(secureString && secureString.encrypted)) {\n        return providerOptions as T;\n    }\n\n    return decryptObject(providerOptions.encrypted, secret) as T;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { ActionTypes } from \"../actions/actionTypes\";\n\n/**\n * Reducer for recent projects. Actions handled:\n * LOAD_PROJECT_SUCCESS\n * SAVE_PROJECT_SUCCESS\n * DELETE_PROJECT_SUCCESS\n * SAVE_CONNECTION_SUCCESS\n * @param state - Array of recent projects\n * @param action - Action that was dispatched\n */\nexport var reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (!state) {\n    state = [];\n  }\n\n  var newState = null;\n\n  switch (action.type) {\n    case ActionTypes.SAVE_PROJECT_SUCCESS:\n      return [_objectSpread({}, action.payload)].concat(_toConsumableArray(state.filter(function (project) {\n        return project.id !== action.payload.id;\n      })));\n\n    case ActionTypes.DELETE_PROJECT_SUCCESS:\n      return _toConsumableArray(state.filter(function (project) {\n        return project.id !== action.payload.id;\n      }));\n\n    case ActionTypes.SAVE_CONNECTION_SUCCESS:\n      newState = state.map(function (project) {\n        var updatedProject = _objectSpread({}, project);\n\n        if (project.sourceConnection.id === action.payload.id) {\n          updatedProject.sourceConnection = _objectSpread({}, action.payload);\n        }\n\n        if (project.targetConnection.id === action.payload.id) {\n          updatedProject.targetConnection = _objectSpread({}, action.payload);\n        }\n\n        return updatedProject;\n      });\n      return newState;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/redux/reducers/recentProjectsReducer.ts"],"names":["ActionTypes","reducer","state","action","newState","type","SAVE_PROJECT_SUCCESS","payload","filter","project","id","DELETE_PROJECT_SUCCESS","SAVE_CONNECTION_SUCCESS","map","updatedProject","sourceConnection","targetConnection"],"mappings":";;AACA,SAASA,WAAT,QAA4B,wBAA5B;;AAIA;;;;;;;;;AASA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAA2D;AAAA,MAA1DC,KAA0D,uEAAtC,EAAsC;AAAA,MAAlCC,MAAkC;;AAC9E,MAAI,CAACD,KAAL,EAAY;AACRA,IAAAA,KAAK,GAAG,EAAR;AACH;;AAED,MAAIE,QAAoB,GAAG,IAA3B;;AAEA,UAAQD,MAAM,CAACE,IAAf;AACI,SAAKL,WAAW,CAACM,oBAAjB;AACI,gCACSH,MAAM,CAACI,OADhB,6BAEOL,KAAK,CAACM,MAAN,CAAa,UAACC,OAAD;AAAA,eAAaA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACI,OAAP,CAAeG,EAA3C;AAAA,OAAb,CAFP;;AAIJ,SAAKV,WAAW,CAACW,sBAAjB;AACI,gCAAWT,KAAK,CAACM,MAAN,CAAa,UAACC,OAAD;AAAA,eAAaA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACI,OAAP,CAAeG,EAA3C;AAAA,OAAb,CAAX;;AACJ,SAAKV,WAAW,CAACY,uBAAjB;AACIR,MAAAA,QAAQ,GAAGF,KAAK,CAACW,GAAN,CAAU,UAACJ,OAAD,EAAa;AAC9B,YAAMK,cAAc,qBAAQL,OAAR,CAApB;;AACA,YAAIA,OAAO,CAACM,gBAAR,CAAyBL,EAAzB,KAAgCP,MAAM,CAACI,OAAP,CAAeG,EAAnD,EAAuD;AACnDI,UAAAA,cAAc,CAACC,gBAAf,qBAAuCZ,MAAM,CAACI,OAA9C;AACH;;AACD,YAAIE,OAAO,CAACO,gBAAR,CAAyBN,EAAzB,KAAgCP,MAAM,CAACI,OAAP,CAAeG,EAAnD,EAAuD;AACnDI,UAAAA,cAAc,CAACE,gBAAf,qBAAuCb,MAAM,CAACI,OAA9C;AACH;;AACD,eAAOO,cAAP;AACH,OATU,CAAX;AAUA,aAAOV,QAAP;;AACJ;AACI,aAAOF,KAAP;AArBR;AAuBH,CA9BM","sourcesContent":["import _ from \"lodash\";\nimport { ActionTypes } from \"../actions/actionTypes\";\nimport { IProject } from \"../../models/applicationState\";\nimport { AnyAction } from \"../actions/actionCreators\";\n\n/**\n * Reducer for recent projects. Actions handled:\n * LOAD_PROJECT_SUCCESS\n * SAVE_PROJECT_SUCCESS\n * DELETE_PROJECT_SUCCESS\n * SAVE_CONNECTION_SUCCESS\n * @param state - Array of recent projects\n * @param action - Action that was dispatched\n */\nexport const reducer = (state: IProject[] = [], action: AnyAction): IProject[] => {\n    if (!state) {\n        state = [];\n    }\n\n    let newState: IProject[] = null;\n\n    switch (action.type) {\n        case ActionTypes.SAVE_PROJECT_SUCCESS:\n            return [\n                { ...action.payload },\n                ...state.filter((project) => project.id !== action.payload.id),\n            ];\n        case ActionTypes.DELETE_PROJECT_SUCCESS:\n            return [...state.filter((project) => project.id !== action.payload.id)];\n        case ActionTypes.SAVE_CONNECTION_SUCCESS:\n            newState = state.map((project) => {\n                const updatedProject = { ...project };\n                if (project.sourceConnection.id === action.payload.id) {\n                    updatedProject.sourceConnection = { ...action.payload };\n                }\n                if (project.targetConnection.id === action.payload.id) {\n                    updatedProject.targetConnection = { ...action.payload };\n                }\n                return updatedProject;\n            });\n            return newState;\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}
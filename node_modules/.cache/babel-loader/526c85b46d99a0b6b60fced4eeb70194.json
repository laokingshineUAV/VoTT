{"ast":null,"code":"import { deserializationPolicy } from \"@azure/ms-rest-js\";\nimport { BrowserPolicyFactory } from \"./BrowserPolicyFactory\";\nimport { StorageClientContext } from \"./generated/lib/storageClientContext\";\nimport { LoggingPolicyFactory } from \"./LoggingPolicyFactory\";\nimport { Pipeline } from \"./Pipeline\";\nimport { RetryPolicyFactory } from \"./RetryPolicyFactory\";\nimport { TelemetryPolicyFactory } from \"./TelemetryPolicyFactory\";\nimport { UniqueRequestIDPolicyFactory } from \"./UniqueRequestIDPolicyFactory\";\nimport { escapeURLPath } from \"./utils/utils.common\";\nexport { deserializationPolicy };\n/**\n * A ServiceURL represents a based URL class for ServiceURL, ContainerURL and etc.\n *\n * @export\n * @class StorageURL\n */\n\nvar StorageURL =\n/** @class */\nfunction () {\n  /**\n   * Creates an instance of StorageURL.\n   * @param {string} url\n   * @param {Pipeline} pipeline\n   * @memberof StorageURL\n   */\n  function StorageURL(url, pipeline) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.pipeline = pipeline;\n    this.storageClientContext = new StorageClientContext(this.url, pipeline.toServiceClientOptions()); // Override protocol layer's default content-type\n\n    var storageClientContext = this.storageClientContext;\n    storageClientContext.requestContentType = undefined;\n  }\n  /**\n   * A static method used to create a new Pipeline object with Credential provided.\n   *\n   * @static\n   * @param {Credential} credential Such as AnonymousCredential, SharedKeyCredential or TokenCredential.\n   * @param {INewPipelineOptions} [pipelineOptions] Optional. Options.\n   * @returns {Pipeline} A new Pipeline object.\n   * @memberof Pipeline\n   */\n\n\n  StorageURL.newPipeline = function (credential, pipelineOptions) {\n    if (pipelineOptions === void 0) {\n      pipelineOptions = {};\n    } // Order is important. Closer to the API at the top & closer to the network at the bottom.\n    // The credential's policy factory must appear close to the wire so it can sign any\n    // changes made by other factories (like UniqueRequestIDPolicyFactory)\n\n\n    var factories = [new TelemetryPolicyFactory(pipelineOptions.telemetry), new UniqueRequestIDPolicyFactory(), new BrowserPolicyFactory(), deserializationPolicy(), new RetryPolicyFactory(pipelineOptions.retryOptions), new LoggingPolicyFactory(), credential];\n    return new Pipeline(factories, {\n      HTTPClient: pipelineOptions.httpClient,\n      logger: pipelineOptions.logger\n    });\n  };\n\n  return StorageURL;\n}();\n\nexport { StorageURL };","map":null,"metadata":{},"sourceType":"module"}
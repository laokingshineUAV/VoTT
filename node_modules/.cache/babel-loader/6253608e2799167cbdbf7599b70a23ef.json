{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Color_1 = require(\"../Core/Colors/Color\");\n\nvar HSLColor_1 = require(\"./Colors/HSLColor\");\n\nvar LABColor_1 = require(\"./Colors/LABColor\");\n/**\r\n * Represents meta-data for a tag\r\n * @remarks\r\n * 1. To represent the color Tag class uses only the hue component\r\n * and generates a number of color variations based on that value.\r\n * 2. The `Tag` object is *immutable*, all public properties are readonly.\r\n */\n\n\nvar Tag =\n/*#__PURE__*/\nfunction () {\n  function Tag(name, color) {\n    var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n\n    _classCallCheck(this, Tag);\n\n    this.tagColorPure = \"\";\n    this.tagColorAccent = \"\";\n    this.tagColorHighlight = \"\";\n    this.tagColorShadow = \"\";\n    this.tagColorNoColor = \"\";\n    this.tagColorDark = \"\";\n    this.tagName = name;\n\n    if (typeof color === \"number\") {\n      this.colorObj = new Color_1.Color(new HSLColor_1.HSLColor(color % 360 / 360.0, 1, 0.5));\n    } else if (typeof color === \"string\") {\n      this.colorObj = new Color_1.Color(color);\n    } else if (color instanceof Color_1.Color) {\n      this.colorObj = color;\n    }\n\n    this.tagID = id;\n  }\n  /**\r\n   * Creates a new tag based on extracting specific properties from any provided object\r\n   * @param data - An `ITag` object with `name`, `colorHue` and `id` properties\r\n   * @returns A new `Tag` object\r\n   */\n\n\n  _createClass(Tag, [{\n    key: \"copy\",\n\n    /**\r\n     * Creates a copy of this tag\r\n     * @returns A new `Tag` object with copied properties\r\n     */\n    value: function copy() {\n      return new Tag(this.tagName, this.colorObj, this.tagID);\n    }\n    /**\r\n     * Returns a JSON representation of the tag\r\n     * @returns An `ITag` object with `name`, `colorHue` and `id` properties\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        name: this.tagName,\n        colorHue: this.colorHue,\n        color: this.colorObj.sRGB.toHex(),\n        id: this.tagID\n      };\n    }\n  }, {\n    key: \"colorHue\",\n\n    /**\r\n     * The hue-value of the tag's color. *Readonly*\r\n     */\n    get: function get() {\n      return this.colorObj.HSL.h * 360;\n    }\n    /**\r\n     * The tag's color in hex format. *Readonly*\r\n     */\n\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this.colorObj.sRGB.toHex();\n    }\n    /**\r\n     * The `name` of the tag. *Readonly*\r\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.tagName;\n    }\n    /**\r\n     * The `id` of the tag. *Readonly*\r\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this.tagID;\n    }\n    /**\r\n     * Returns the pure color variation of the tag's color\r\n     * @returns String hsl(H, 100%, 50%)\r\n     */\n\n  }, {\n    key: \"colorPure\",\n    get: function get() {\n      if (this.tagColorPure === \"\") {\n        this.tagColorPure = this.colorObj.sRGB.toHex(); // OLD: `hsl(${this.tagHue.toString()}, 100%, 50%)`;\n      }\n\n      return this.tagColorPure;\n    }\n    /**\r\n     * Returns the accent color variation of the tag's color.\r\n     * Accent = almost pure, alpha = 0.8.\r\n     * @returns Hex string for the color\r\n     */\n\n  }, {\n    key: \"colorAccent\",\n    get: function get() {\n      if (this.tagColorAccent === \"\") {\n        this.tagColorAccent = this.colorObj.sRGB.toHex(0.8); // OLD: `hsla(${this.tagHue.toString()}, 100%, 50%, 0.5)`;\n      }\n\n      return this.tagColorAccent;\n    }\n    /**\r\n     * Returns the highlight color variation of the tag's color.\r\n     * Highlight = grayed pure, alpha = 0.4\r\n     * @returns Hex string for the color\r\n     */\n\n  }, {\n    key: \"colorHighlight\",\n    get: function get() {\n      if (this.tagColorHighlight === \"\") {\n        var lab = this.colorObj.LAB.toArray();\n        var highlight = new LABColor_1.LABColor(lab[0] * 0.7, lab[1] * 0.7, lab[2] * 0.7);\n        this.tagColorHighlight = highlight.toSRGB().truncate().toHex(0.4); // OLD: `hsla(${this.tagHue.toString()}, 80%, 40%, 0.3)`;\n      }\n\n      return this.tagColorHighlight;\n    }\n    /**\r\n     * Returns the shadow color variation of the tag's color\r\n     * Shadow = grayed pure, alpha = 0.2\r\n     * @returns Hex string for the color\r\n     */\n\n  }, {\n    key: \"colorShadow\",\n    get: function get() {\n      if (this.tagColorShadow === \"\") {\n        var lab = this.colorObj.LAB.toArray();\n        var shadow = new LABColor_1.LABColor(lab[0] * 0.6, lab[1] * 0.6, lab[2] * 0.6);\n        this.tagColorShadow = shadow.toSRGB().truncate().toHex(0.2); // OLD: `hsla(${this.tagHue.toString()}, 50%, 30%, 0.2)`;\n      }\n\n      return this.tagColorShadow;\n    }\n    /**\r\n     * Returns the dark color variation of the tag's color.\r\n     * Dark = pure with decreased lightness and grayed.\r\n     * @returns Hex string for the color\r\n     */\n\n  }, {\n    key: \"colorDark\",\n    get: function get() {\n      if (this.tagColorDark === \"\") {\n        var lab = this.colorObj.LAB.toArray();\n        var dark = new LABColor_1.LABColor(lab[0] * 0.5, lab[1] * 0.5, lab[2] * 0.5);\n        this.tagColorDark = dark.toSRGB().truncate().toHex(0.8); // OLD: `hsla(${this.tagHue.toString()}, 50%, 30%, 0.8)`;\n      }\n\n      return this.tagColorDark;\n    }\n    /**\r\n     * Returns the fully transparent color variation of the tag's color\r\n     * @returns Hex string for the color\r\n     */\n\n  }, {\n    key: \"colorNoColor\",\n    get: function get() {\n      if (this.tagColorNoColor === \"\") {\n        this.tagColorNoColor = \"rgba(0, 0, 0, 0.0)\";\n      }\n\n      return this.tagColorNoColor;\n    }\n  }], [{\n    key: \"BuildFromJSON\",\n    value: function BuildFromJSON(data) {\n      if (data.color !== undefined) {\n        return new Tag(data.name, new Color_1.Color(data.color), data.id === undefined ? \"\" : data.id);\n      } else if (data.colorHue !== undefined) {\n        return new Tag(data.name, new Color_1.Color(new HSLColor_1.HSLColor(data.colorHue % 360 / 360.0, 1, 0.5)), data.id === undefined ? \"\" : data.id);\n      }\n    }\n    /**\r\n     * Extracts the hue component from a provided CSS color string\r\n     * @param color - A CSS-color in \"#RRGGBB\" or \"#RGB\" format\r\n     * @returns A hue value for provided color\r\n     * @deprecated Use the Color class instead.\r\n     */\n\n  }, {\n    key: \"getHueFromColor\",\n    value: function getHueFromColor(color) {\n      var c = new Color_1.Color(color);\n      return c.HSL.h * 360;\n    }\n  }]);\n\n  return Tag;\n}();\n\nexports.Tag = Tag;","map":null,"metadata":{},"sourceType":"script"}
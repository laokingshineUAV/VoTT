{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/common/errorHandler/errorHandler.tsx\";\nimport React from \"react\";\nimport { ErrorCode, AppError } from \"../../../../models/applicationState\";\nimport { strings } from \"../../../../common/strings\";\nimport Alert from \"../alert/alert\";\nimport { Env } from \"../../../../common/environment\";\nimport { trackError } from \"../../../../telemetry\";\n/**\n * Component properties for ErrorHandler component\n */\n\n/**\n * Component for catching and handling global application errors\n */\nexport var ErrorHandler =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ErrorHandler, _React$Component);\n\n  function ErrorHandler(props, context) {\n    var _this;\n\n    _classCallCheck(this, ErrorHandler);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ErrorHandler).call(this, props, context));\n    _this.onWindowError = _this.onWindowError.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onUnhandedRejection = _this.onUnhandedRejection.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ErrorHandler, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"error\", this.onWindowError, true);\n      window.addEventListener(\"unhandledrejection\", this.onUnhandedRejection, true);\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      window.removeEventListener(\"error\", this.onWindowError);\n      window.removeEventListener(\"unhandledrejection\", this.onUnhandedRejection);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var showError = !!this.props.error;\n      var localizedError = null;\n\n      if (showError) {\n        localizedError = this.getLocalizedError(this.props.error);\n      }\n\n      if (!showError) {\n        return null;\n      }\n\n      return React.createElement(Alert, {\n        title: localizedError ? localizedError.title : \"\",\n        message: localizedError ? localizedError.message : \"\",\n        closeButtonColor: \"secondary\",\n        show: showError,\n        onClose: this.props.onClearError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      });\n    }\n    /**\n     * Unhandled errors that bubbled up to top of stack\n     * @param evt Error Event\n     */\n\n  }, {\n    key: \"onWindowError\",\n    value: function onWindowError(evt) {\n      this.handleError(evt.error);\n      evt.preventDefault();\n    }\n    /**\n     * Handles async / promise based errors\n     * @param evt Unhandled Rejection Event\n     */\n\n  }, {\n    key: \"onUnhandedRejection\",\n    value: function onUnhandedRejection(evt) {\n      this.handleError(evt.reason || evt.detail);\n      evt.preventDefault();\n    }\n    /**\n     * Handles various error format scenarios\n     * @param error The error to handle\n     */\n\n  }, {\n    key: \"handleError\",\n    value: function handleError(error) {\n      if (!error) {\n        return;\n      } // This is a special case where we don't need to throw an\n      // exception. The error is thrown from within a few layers\n      // of components, so we don't have access to ReactDnD (drag and drop)\n      // directly. The action is performed correctly, so we\n      // don't need to display the error here\n\n\n      if (this.isReactDnDError(error)) {\n        return;\n      }\n\n      var appError = null; // Promise rejection with reason\n\n      if (typeof error === \"string\") {\n        // Promise rejection with string base reason\n        appError = {\n          errorCode: ErrorCode.Unknown,\n          message: error || this.getUnknownErrorMessage(error)\n        };\n      } else if (error instanceof AppError) {\n        // Promise rejection with AppError\n        var reason = error;\n        appError = {\n          title: reason.title || strings.errors.unknown.title,\n          errorCode: reason.errorCode,\n          message: reason.message || this.getUnknownErrorMessage(error)\n        };\n      } else if (error instanceof Error) {\n        // Promise rejection with other error like object\n        var _reason = error;\n        appError = {\n          title: _reason.name || strings.errors.unknown.title,\n          errorCode: ErrorCode.Unknown,\n          message: _reason.message || this.getUnknownErrorMessage(error)\n        };\n      } else {\n        appError = {\n          title: strings.errors.unknown.title,\n          errorCode: ErrorCode.Unknown,\n          message: this.getUnknownErrorMessage(error)\n        };\n      } // appInsights: track error event\n\n\n      trackError(appError);\n      this.props.onError(appError);\n    }\n  }, {\n    key: \"getUnknownErrorMessage\",\n    value: function getUnknownErrorMessage(e) {\n      if (Env.get() !== \"production\") {\n        return React.createElement(\"pre\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, JSON.stringify(e, null, 2));\n      } else {\n        return strings.errors.unknown.message;\n      }\n    }\n    /**\n     * Gets a localized version of the error\n     * @param appError The error thrown by the application\n     */\n\n  }, {\n    key: \"getLocalizedError\",\n    value: function getLocalizedError(appError) {\n      if (appError.errorCode === ErrorCode.Unknown) {\n        return appError;\n      }\n\n      var localizedError = strings.errors[appError.errorCode];\n\n      if (!localizedError) {\n        return appError;\n      }\n\n      return {\n        errorCode: appError.errorCode,\n        message: localizedError.message,\n        title: localizedError.title\n      };\n    }\n  }, {\n    key: \"isReactDnDError\",\n    value: function isReactDnDError(e) {\n      return e && e.name === \"Invariant Violation\" && e.message === \"Expected to find a valid target.\";\n    }\n  }]);\n\n  return ErrorHandler;\n}(React.Component);","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/common/errorHandler/errorHandler.tsx"],"names":["React","ErrorCode","AppError","strings","Alert","Env","trackError","ErrorHandler","props","context","onWindowError","bind","onUnhandedRejection","window","addEventListener","removeEventListener","showError","error","localizedError","getLocalizedError","title","message","onClearError","evt","handleError","preventDefault","reason","detail","isReactDnDError","appError","errorCode","Unknown","getUnknownErrorMessage","errors","unknown","Error","name","onError","e","get","JSON","stringify","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { IAppError, ErrorCode, AppError } from \"../../../../models/applicationState\";\nimport { strings } from \"../../../../common/strings\";\nimport Alert from \"../alert/alert\";\nimport { Env } from \"../../../../common/environment\";\nimport { trackError } from \"../../../../telemetry\";\n\n/**\n * Component properties for ErrorHandler component\n */\nexport interface IErrorHandlerProps extends React.Props<ErrorHandler> {\n    error: IAppError;\n    onError: (error: IAppError) => void;\n    onClearError: () => void;\n}\n\n/**\n * Component for catching and handling global application errors\n */\nexport class ErrorHandler extends React.Component<IErrorHandlerProps> {\n    constructor(props, context) {\n        super(props, context);\n\n        this.onWindowError = this.onWindowError.bind(this);\n        this.onUnhandedRejection = this.onUnhandedRejection.bind(this);\n    }\n\n    public componentDidMount() {\n        window.addEventListener(\"error\", this.onWindowError, true);\n        window.addEventListener(\"unhandledrejection\", this.onUnhandedRejection, true);\n    }\n\n    public componentWillMount() {\n        window.removeEventListener(\"error\", this.onWindowError);\n        window.removeEventListener(\"unhandledrejection\", this.onUnhandedRejection);\n    }\n\n    public render() {\n        const showError = !!this.props.error;\n        let localizedError: IAppError = null;\n        if (showError) {\n            localizedError = this.getLocalizedError(this.props.error);\n        }\n\n        if (!showError) {\n            return null;\n        }\n\n        return (\n            <Alert title={localizedError ? localizedError.title : \"\"}\n                message={localizedError ? localizedError.message : \"\"}\n                closeButtonColor=\"secondary\"\n                show={showError}\n                onClose={this.props.onClearError} />\n        );\n    }\n\n    /**\n     * Unhandled errors that bubbled up to top of stack\n     * @param evt Error Event\n     */\n    private onWindowError(evt: ErrorEvent) {\n        this.handleError(evt.error);\n        evt.preventDefault();\n    }\n\n    /**\n     * Handles async / promise based errors\n     * @param evt Unhandled Rejection Event\n     */\n    private onUnhandedRejection(evt: any) {\n        this.handleError(evt.reason || evt.detail);\n        evt.preventDefault();\n    }\n\n    /**\n     * Handles various error format scenarios\n     * @param error The error to handle\n     */\n    private handleError(error: string | Error | AppError) {\n        if (!error) {\n            return;\n        }\n\n        // This is a special case where we don't need to throw an\n        // exception. The error is thrown from within a few layers\n        // of components, so we don't have access to ReactDnD (drag and drop)\n        // directly. The action is performed correctly, so we\n        // don't need to display the error here\n        if (this.isReactDnDError(error)) {\n            return;\n        }\n        let appError: IAppError = null;\n        // Promise rejection with reason\n        if (typeof (error) === \"string\") {\n            // Promise rejection with string base reason\n            appError = {\n                errorCode: ErrorCode.Unknown,\n                message: error || this.getUnknownErrorMessage(error),\n            };\n        } else if (error instanceof AppError) {\n            // Promise rejection with AppError\n            const reason = error as IAppError;\n            appError = {\n                title: reason.title || strings.errors.unknown.title,\n                errorCode: reason.errorCode,\n                message: reason.message || this.getUnknownErrorMessage(error),\n            };\n        } else if (error instanceof Error) {\n            // Promise rejection with other error like object\n            const reason = error as Error;\n            appError = {\n                title: reason.name || strings.errors.unknown.title,\n                errorCode: ErrorCode.Unknown,\n                message: reason.message || this.getUnknownErrorMessage(error),\n            };\n        } else {\n            appError = {\n                title: strings.errors.unknown.title,\n                errorCode: ErrorCode.Unknown,\n                message: this.getUnknownErrorMessage(error),\n            };\n        }\n\n        // appInsights: track error event\n        trackError(appError);\n\n        this.props.onError(appError);\n    }\n\n    private getUnknownErrorMessage(e) {\n        if (Env.get() !== \"production\") {\n            return (<pre>{JSON.stringify(e, null, 2)}</pre>);\n        } else {\n            return strings.errors.unknown.message;\n        }\n    }\n\n    /**\n     * Gets a localized version of the error\n     * @param appError The error thrown by the application\n     */\n    private getLocalizedError(appError: IAppError): IAppError {\n        if (appError.errorCode === ErrorCode.Unknown) {\n            return appError;\n        }\n        const localizedError = strings.errors[appError.errorCode];\n        if (!localizedError) {\n            return appError;\n        }\n        return {\n            errorCode: appError.errorCode,\n            message: localizedError.message,\n            title: localizedError.title,\n        };\n    }\n\n    private isReactDnDError(e) {\n        return e && e.name === \"Invariant Violation\" && e.message === \"Expected to find a valid target.\";\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
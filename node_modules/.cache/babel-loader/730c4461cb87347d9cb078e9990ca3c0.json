{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Util, DateTimeUtils } from '@microsoft/applicationinsights-common';\nimport { LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js';\n/**\r\n* Class encapsulates sending page view performance telemetry.\r\n*/\n\nvar PageViewPerformanceManager =\n/** @class */\nfunction () {\n  function PageViewPerformanceManager(core) {\n    this.MAX_DURATION_ALLOWED = 3600000; // 1h\n\n    if (core) {\n      this._logger = core.logger;\n    }\n  }\n\n  PageViewPerformanceManager.prototype.populatePageViewPerformanceEvent = function (pageViewPerformance) {\n    pageViewPerformance.isValid = false;\n    /*\r\n     * http://www.w3.org/TR/navigation-timing/#processing-model\r\n     *  |-navigationStart\r\n     *  |             |-connectEnd\r\n     *  |             ||-requestStart\r\n     *  |             ||             |-responseStart\r\n     *  |             ||             |              |-responseEnd\r\n     *  |             ||             |              |\r\n     *  |             ||             |              |         |-loadEventEnd\r\n     *  |---network---||---request---|---response---|---dom---|\r\n     *  |--------------------------total----------------------|\r\n     */\n\n    var timing = this.getPerformanceTiming();\n\n    if (timing) {\n      var total = DateTimeUtils.GetDuration(timing.navigationStart, timing.loadEventEnd);\n      var network = DateTimeUtils.GetDuration(timing.navigationStart, timing.connectEnd);\n      var request = DateTimeUtils.GetDuration(timing.requestStart, timing.responseStart);\n      var response = DateTimeUtils.GetDuration(timing.responseStart, timing.responseEnd);\n      var dom = DateTimeUtils.GetDuration(timing.responseEnd, timing.loadEventEnd);\n\n      if (total == 0) {\n        this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.ErrorPVCalc, \"error calculating page view performance.\", {\n          total: total,\n          network: network,\n          request: request,\n          response: response,\n          dom: dom\n        });\n      } else if (!this.shouldCollectDuration(total, network, request, response, dom)) {\n        this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.InvalidDurationValue, \"Invalid page load duration value. Browser perf data won't be sent.\", {\n          total: total,\n          network: network,\n          request: request,\n          response: response,\n          dom: dom\n        });\n      } else if (total < Math.floor(network) + Math.floor(request) + Math.floor(response) + Math.floor(dom)) {\n        // some browsers may report individual components incorrectly so that the sum of the parts will be bigger than total PLT\n        // in this case, don't report client performance from this page\n        this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.ClientPerformanceMathError, \"client performance math error.\", {\n          total: total,\n          network: network,\n          request: request,\n          response: response,\n          dom: dom\n        });\n      } else {\n        pageViewPerformance.durationMs = total; // // convert to timespans\n\n        pageViewPerformance.perfTotal = pageViewPerformance.duration = Util.msToTimeSpan(total);\n        pageViewPerformance.networkConnect = Util.msToTimeSpan(network);\n        pageViewPerformance.sentRequest = Util.msToTimeSpan(request);\n        pageViewPerformance.receivedResponse = Util.msToTimeSpan(response);\n        pageViewPerformance.domProcessing = Util.msToTimeSpan(dom);\n        pageViewPerformance.isValid = true;\n      }\n    }\n  };\n\n  PageViewPerformanceManager.prototype.getPerformanceTiming = function () {\n    if (this.isPerformanceTimingSupported()) {\n      return window.performance.timing;\n    }\n\n    return null;\n  };\n  /**\r\n  * Returns true is window performance timing API is supported, false otherwise.\r\n  */\n\n\n  PageViewPerformanceManager.prototype.isPerformanceTimingSupported = function () {\n    return typeof window != \"undefined\" && window.performance && window.performance.timing;\n  };\n  /**\r\n  * As page loads different parts of performance timing numbers get set. When all of them are set we can report it.\r\n  * Returns true if ready, false otherwise.\r\n  */\n\n\n  PageViewPerformanceManager.prototype.isPerformanceTimingDataReady = function () {\n    var timing = window.performance.timing;\n    return timing.domainLookupStart > 0 && timing.navigationStart > 0 && timing.responseStart > 0 && timing.requestStart > 0 && timing.loadEventEnd > 0 && timing.responseEnd > 0 && timing.connectEnd > 0 && timing.domLoading > 0;\n  };\n  /**\r\n  * This method tells if given durations should be excluded from collection.\r\n  */\n\n\n  PageViewPerformanceManager.prototype.shouldCollectDuration = function () {\n    var durations = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      durations[_i] = arguments[_i];\n    } // a full list of Google crawlers user agent strings - https://support.google.com/webmasters/answer/1061943?hl=en\n\n\n    var botAgentNames = ['googlebot', 'adsbot-google', 'apis-google', 'mediapartners-google'];\n    var userAgent = navigator.userAgent;\n    var isGoogleBot = false;\n\n    if (userAgent) {\n      for (var i_1 = 0; i_1 < botAgentNames.length; i_1++) {\n        isGoogleBot = isGoogleBot || userAgent.toLowerCase().indexOf(botAgentNames[i_1]) !== -1;\n      }\n    }\n\n    if (isGoogleBot) {\n      // Don't report durations for GoogleBot, it is returning invalid values in performance.timing API.\n      return false;\n    } else {\n      // for other page views, don't report if it's outside of a reasonable range\n      for (var i = 0; i < durations.length; i++) {\n        if (durations[i] >= this.MAX_DURATION_ALLOWED) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  return PageViewPerformanceManager;\n}();\n\nexport { PageViewPerformanceManager };","map":null,"metadata":{},"sourceType":"module"}
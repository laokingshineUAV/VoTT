{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar RegionComponent_1 = require(\"./RegionComponent\");\n/**\r\n * An abstract visual component used internall do draw tags data for regions.\r\n */\n\n\nvar TagsComponent =\n/*#__PURE__*/\nfunction (_RegionComponent_1$Re) {\n  _inherits(TagsComponent, _RegionComponent_1$Re);\n\n  /**\r\n   * Creates a new `TagsComponent` object.\r\n   * @param paper - The `Snap.Paper` object to draw on.\r\n   * @param paperRect - The parent bounding box for created component.\r\n   * @param regionData - The `RegionData` object shared across components. Used also for initial setup.\r\n   * @param tags - The `TagsDescriptor` object presenting colors and names for region tags.\r\n   * @param styleId - The unique css style id for region.\r\n   * @param styleSheet - The regerence to the stylesheet object for rules insection.\r\n   * @param tagsUpdateOptions - The settings for redrawing tags.\r\n   */\n  function TagsComponent(paper, paperRect, regionData, tags, styleId, styleSheet, tagsUpdateOptions) {\n    var _this;\n\n    _classCallCheck(this, TagsComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TagsComponent).call(this, paper, paperRect, regionData, null));\n    /**\r\n     * Reference to the stylesheet element.\r\n     */\n\n    _this.styleSheet = null;\n    /**\r\n     * Default styling rules.\r\n     */\n\n    _this.styleMap = [];\n    /**\r\n     * Light styling rules used when `showRegionBackground` is set to `false`.\r\n     */\n\n    _this.styleLightMap = [];\n    _this.styleId = styleId;\n    _this.styleSheet = styleSheet;\n    _this.tags = tags;\n    _this.tagsUpdateOptions = tagsUpdateOptions;\n    _this.node = paper.g();\n\n    _this.node.addClass(\"tagsLayer\");\n\n    return _this;\n  }\n  /**\r\n   * Updates component with new `TagsDescriptor` object and new drawing settings.\r\n   * @param tags - The new `TagsDescriptor` object.\r\n   * @param options - The new drawing settings.\r\n   */\n\n\n  _createClass(TagsComponent, [{\n    key: \"updateTags\",\n    value: function updateTags(tags, options) {\n      this.tags = tags;\n      this.tagsUpdateOptions = options;\n      this.rebuildTagLabels();\n      this.clearStyleMaps();\n      this.initStyleMaps(tags);\n      var showBackground = options !== undefined ? options.showRegionBackground : true;\n      this.applyStyleMaps(showBackground);\n    }\n    /**\r\n     * Clears current styling rules.\r\n     */\n\n  }, {\n    key: \"clearStyleMaps\",\n    value: function clearStyleMaps() {\n      while (this.styleSheet.cssRules.length > 0) {\n        this.styleSheet.deleteRule(0);\n      }\n    }\n    /**\r\n     * Inserts the styling rules into the `styleSheet` object.\r\n     * @param showRegionBackground - The flag to make background visible or transparent.\r\n     */\n\n  }, {\n    key: \"applyStyleMaps\",\n    value: function applyStyleMaps() {\n      var _this2 = this;\n\n      var showRegionBackground = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      // Map primary tag color\n      if (this.tags && this.tags.primary !== undefined) {\n        window.requestAnimationFrame(function () {\n          var sm = showRegionBackground ? _this2.styleMap : _this2.styleLightMap;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = sm[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var r = _step.value;\n\n              _this2.styleSheet.insertRule(\"\".concat(r.rule, \"{\").concat(r.style, \"}\"), 0);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        });\n      }\n    }\n  }]);\n\n  return TagsComponent;\n}(RegionComponent_1.RegionComponent);\n\nexports.TagsComponent = TagsComponent;","map":null,"metadata":{},"sourceType":"script"}
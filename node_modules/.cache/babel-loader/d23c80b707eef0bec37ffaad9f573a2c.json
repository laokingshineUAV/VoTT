{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as shortid from \"shortid\";\nimport { Deferred } from \"./deferred\";\nexport var IpcRendererProxy =\n/*#__PURE__*/\nfunction () {\n  function IpcRendererProxy() {\n    _classCallCheck(this, IpcRendererProxy);\n  }\n\n  _createClass(IpcRendererProxy, null, [{\n    key: \"initialize\",\n    value: function initialize() {\n      if (IpcRendererProxy.initialized) {\n        return;\n      }\n\n      IpcRendererProxy.ipcRenderer = window.require(\"electron\").ipcRenderer;\n      IpcRendererProxy.ipcRenderer.on(\"ipc-renderer-proxy\", function (sender, message) {\n        var deferred = IpcRendererProxy.pending[message.id];\n\n        if (!deferred) {\n          throw new Error(\"Cannot find deferred with id '\".concat(message.id, \"'\"));\n        }\n\n        if (message.error) {\n          deferred.reject(message.error);\n        } else {\n          deferred.resolve(message.result);\n        }\n\n        delete IpcRendererProxy.pending[message.id];\n      });\n      IpcRendererProxy.initialized = true;\n    }\n  }, {\n    key: \"send\",\n    value: function send(type, args) {\n      IpcRendererProxy.initialize();\n      var id = shortid.generate();\n      var deferred = new Deferred();\n      IpcRendererProxy.pending[id] = deferred;\n      var outgoingArgs = {\n        id: id,\n        type: type,\n        args: args\n      };\n      IpcRendererProxy.ipcRenderer.send(\"ipc-main-proxy\", outgoingArgs);\n      return deferred.promise;\n    }\n  }]);\n\n  return IpcRendererProxy;\n}();\nIpcRendererProxy.pending = {};\nIpcRendererProxy.initialized = false;","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/common/ipcRendererProxy.ts"],"names":["shortid","Deferred","IpcRendererProxy","initialized","ipcRenderer","window","require","on","sender","message","deferred","pending","id","Error","error","reject","resolve","result","type","args","initialize","generate","outgoingArgs","send","promise"],"mappings":";;AAAA,OAAO,KAAKA,OAAZ,MAAyB,SAAzB;AAEA,SAASC,QAAT,QAAyB,YAAzB;AAEA,WAAaC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,iCAI+B;AACvB,UAAIA,gBAAgB,CAACC,WAArB,EAAkC;AAC9B;AACH;;AAEDD,MAAAA,gBAAgB,CAACE,WAAjB,GAAgCC,MAAD,CAAgBC,OAAhB,CAAwB,UAAxB,EAAoCF,WAAnE;AACAF,MAAAA,gBAAgB,CAACE,WAAjB,CAA6BG,EAA7B,CAAgC,oBAAhC,EAAsD,UAACC,MAAD,EAASC,OAAT,EAA2C;AAC7F,YAAMC,QAAQ,GAAGR,gBAAgB,CAACS,OAAjB,CAAyBF,OAAO,CAACG,EAAjC,CAAjB;;AAEA,YAAI,CAACF,QAAL,EAAe;AACX,gBAAM,IAAIG,KAAJ,yCAA2CJ,OAAO,CAACG,EAAnD,OAAN;AACH;;AAED,YAAIH,OAAO,CAACK,KAAZ,EAAmB;AACfJ,UAAAA,QAAQ,CAACK,MAAT,CAAgBN,OAAO,CAACK,KAAxB;AACH,SAFD,MAEO;AACHJ,UAAAA,QAAQ,CAACM,OAAT,CAAiBP,OAAO,CAACQ,MAAzB;AACH;;AAED,eAAOf,gBAAgB,CAACS,OAAjB,CAAyBF,OAAO,CAACG,EAAjC,CAAP;AACH,OAdD;AAgBAV,MAAAA,gBAAgB,CAACC,WAAjB,GAA+B,IAA/B;AACH;AA3BL;AAAA;AAAA,yBA6BuCe,IA7BvC,EA6BqDC,IA7BrD,EA6BqF;AAC7EjB,MAAAA,gBAAgB,CAACkB,UAAjB;AAEA,UAAMR,EAAE,GAAGZ,OAAO,CAACqB,QAAR,EAAX;AACA,UAAMX,QAAQ,GAAG,IAAIT,QAAJ,EAAjB;AACAC,MAAAA,gBAAgB,CAACS,OAAjB,CAAyBC,EAAzB,IAA+BF,QAA/B;AAEA,UAAMY,YAAoC,GAAG;AACzCV,QAAAA,EAAE,EAAFA,EADyC;AAEzCM,QAAAA,IAAI,EAAJA,IAFyC;AAGzCC,QAAAA,IAAI,EAAJA;AAHyC,OAA7C;AAMAjB,MAAAA,gBAAgB,CAACE,WAAjB,CAA6BmB,IAA7B,CAAkC,gBAAlC,EAAoDD,YAApD;AAEA,aAAOZ,QAAQ,CAACc,OAAhB;AACH;AA7CL;;AAAA;AAAA;AAAatB,gB,CAEKS,O,GAA2C,E;AAFhDT,gB,CA+CMC,W,GAAuB,K","sourcesContent":["import * as shortid from \"shortid\";\nimport { IpcProxyMessage } from \"../electron/common/ipcProxy\";\nimport { Deferred } from \"./deferred\";\n\nexport class IpcRendererProxy {\n\n    public static pending: { [id: string]: Deferred<any> } = {};\n\n    public static initialize() {\n        if (IpcRendererProxy.initialized) {\n            return;\n        }\n\n        IpcRendererProxy.ipcRenderer = (window as any).require(\"electron\").ipcRenderer;\n        IpcRendererProxy.ipcRenderer.on(\"ipc-renderer-proxy\", (sender, message: IpcProxyMessage<any>) => {\n            const deferred = IpcRendererProxy.pending[message.id];\n\n            if (!deferred) {\n                throw new Error(`Cannot find deferred with id '${message.id}'`);\n            }\n\n            if (message.error) {\n                deferred.reject(message.error);\n            } else {\n                deferred.resolve(message.result);\n            }\n\n            delete IpcRendererProxy.pending[message.id];\n        });\n\n        IpcRendererProxy.initialized = true;\n    }\n\n    public static send<TResult, TArgs>(type: string, args?: TArgs): Promise<TResult> {\n        IpcRendererProxy.initialize();\n\n        const id = shortid.generate();\n        const deferred = new Deferred<TResult>();\n        IpcRendererProxy.pending[id] = deferred;\n\n        const outgoingArgs: IpcProxyMessage<TArgs> = {\n            id,\n            type,\n            args,\n        };\n\n        IpcRendererProxy.ipcRenderer.send(\"ipc-main-proxy\", outgoingArgs);\n\n        return deferred.promise;\n    }\n    private static ipcRenderer;\n    private static initialized: boolean = false;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Data, Envelope, RemoteDependencyData, Event, Exception, Metric, PageView, Trace, PageViewPerformance, CtxTagKeys, HttpMethod } from '@microsoft/applicationinsights-common';\nimport { CoreUtils, LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js'; // these two constants are used to filter out properties not needed when trying to extract custom properties and measurements from the incoming payload\n\nvar baseType = \"baseType\";\nvar baseData = \"baseData\";\n\nvar EnvelopeCreator =\n/** @class */\nfunction () {\n  function EnvelopeCreator() {}\n\n  EnvelopeCreator.extractProperties = function (data) {\n    var customProperties = null;\n\n    for (var key in data) {\n      if (data.hasOwnProperty(key)) {\n        var value = data[key];\n\n        if (typeof value !== \"number\") {\n          if (!customProperties) {\n            customProperties = {};\n          }\n\n          customProperties[key] = value;\n        }\n      }\n    }\n\n    return customProperties;\n  };\n\n  EnvelopeCreator.extractPropsAndMeasurements = function (data, properties, measurements) {\n    if (!CoreUtils.isNullOrUndefined(data)) {\n      for (var key in data) {\n        if (data.hasOwnProperty(key)) {\n          var value = data[key];\n\n          if (typeof value === \"number\") {\n            measurements[key] = value;\n          } else if (typeof value === \"string\") {\n            properties[key] = value;\n          } else {\n            properties[key] = JSON.stringify(value);\n          }\n        }\n      }\n    }\n  }; // TODO: Do we want this to take logger as arg or use this._logger as nonstatic?\n\n\n  EnvelopeCreator.createEnvelope = function (logger, envelopeType, telemetryItem, data) {\n    var envelope = new Envelope(logger, data, envelopeType);\n    envelope.iKey = telemetryItem.iKey;\n    var iKeyNoDashes = telemetryItem.iKey.replace(/-/g, \"\");\n    envelope.name = envelope.name.replace(\"{0}\", iKeyNoDashes); // extract all extensions from ctx\n\n    EnvelopeCreator.extractPartAExtensions(telemetryItem, envelope); // loop through the envelope tags (extension of Part A) and pick out the ones that should go in outgoing envelope tags\n\n    if (!telemetryItem.tags) {\n      telemetryItem.tags = [];\n    }\n\n    return envelope;\n  };\n  /*\r\n   * Maps Part A data from CS 4.0\r\n   */\n\n\n  EnvelopeCreator.extractPartAExtensions = function (item, env) {\n    // todo: switch to keys from common in this method\n    if (!env.tags) {\n      env.tags = [];\n    }\n\n    if (!item.ext) {\n      item.ext = {};\n    }\n\n    if (!item.tags) {\n      item.tags = [];\n    }\n\n    if (item.ext.user) {\n      if (item.ext.user.authId) {\n        env.tags[CtxTagKeys.userAuthUserId] = item.ext.user.authId;\n      }\n\n      var userId = item.ext.user.id || item.ext.user.localId;\n\n      if (userId) {\n        env.tags[CtxTagKeys.userId] = userId;\n      }\n    }\n\n    if (item.ext.app) {\n      if (item.ext.app.sesId) {\n        env.tags[CtxTagKeys.sessionId] = item.ext.app.sesId;\n      }\n    }\n\n    if (item.ext.device) {\n      if (item.ext.device.id || item.ext.device.localId) {\n        env.tags[CtxTagKeys.deviceId] = item.ext.device.id || item.ext.device.localId;\n      }\n\n      if (item.ext.device.ip) {\n        env.tags[CtxTagKeys.deviceIp] = item.ext.device.ip;\n      }\n    }\n\n    if (item.ext.web) {\n      var web = item.ext.web;\n\n      if (web.browserLang) {\n        env.tags[CtxTagKeys.deviceLanguage] = web.browserLang;\n      }\n\n      if (web.browserVer) {\n        env.tags[CtxTagKeys.deviceBrowserVersion] = web.browserVer;\n      }\n\n      if (web.browser) {\n        env.tags[CtxTagKeys.deviceBrowser] = web.browser;\n      }\n\n      env.data = env.data || {};\n      env.data.baseData = env.data.baseData || {};\n      env.data.baseData.properties = env.data.baseData.properties || {};\n\n      if (web.domain) {\n        env.data.baseData.properties['domain'] = web.domain;\n      }\n\n      if (web.isManual) {\n        env.data.baseData.properties['isManual'] = web.isManual.toString();\n      }\n\n      if (web.screenRes) {\n        env.data.baseData.properties['screenRes'] = web.screenRes;\n      }\n\n      if (web.userConsent) {\n        env.data.baseData.properties['userConsent'] = web.userConsent.toString();\n      }\n    }\n\n    if (item.ext.device) {\n      if (item.ext.device.model) {\n        env.tags[CtxTagKeys.deviceModel] = item.ext.device.model;\n      }\n    }\n\n    if (item.ext.os && item.ext.os.name) {\n      env.tags[CtxTagKeys.deviceOS] = item.ext.os.name;\n    }\n\n    if (item.ext.device) {\n      if (item.ext.device.deviceType) {\n        env.tags[CtxTagKeys.deviceType] = item.ext.device.deviceType;\n      }\n    } // No support for mapping Trace.traceState to 2.0 as it is currently empty\n\n\n    if (item.ext.trace) {\n      if (item.ext.trace.parentID) {\n        env.tags[CtxTagKeys.operationParentId] = item.ext.trace.parentID;\n      }\n\n      if (item.ext.trace.name) {\n        env.tags[CtxTagKeys.operationName] = item.ext.trace.name;\n      }\n\n      if (item.ext.trace.traceID) {\n        env.tags[CtxTagKeys.operationId] = item.ext.trace.traceID;\n      }\n    } // Sample 4.0 schema\n    //  {\n    //     \"time\" : \"2018-09-05T22:51:22.4936Z\",\n    //     \"name\" : \"MetricWithNamespace\",\n    //     \"iKey\" : \"ABC-5a4cbd20-e601-4ef5-a3c6-5d6577e4398e\",\n    //     \"ext\": {  \"cloud\": {\n    //          \"role\": \"WATSON3\",\n    //          \"roleInstance\": \"CO4AEAP00000260\"\n    //      }, \n    //      \"device\": {}, \"correlation\": {} },\n    //      \"tags\": [\n    //        { \"amazon.region\" : \"east2\" },\n    //        { \"os.expid\" : \"wp:02df239\" }\n    //     ]\n    //   }\n\n\n    var tgs = {};\n    item.tags.forEach(function (tg) {\n      tgs = tslib_1.__assign({}, tgs, tg);\n    });\n    env.tags = tslib_1.__assign({}, env.tags, tgs);\n  };\n\n  return EnvelopeCreator;\n}();\n\nexport { EnvelopeCreator };\n\nvar DependencyEnvelopeCreator =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DependencyEnvelopeCreator, _super);\n\n  function DependencyEnvelopeCreator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DependencyEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\n    this._logger = logger;\n\n    if (CoreUtils.isNullOrUndefined(telemetryItem.baseData)) {\n      this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"telemetryItem.baseData cannot be null.\");\n    }\n\n    var customMeasurements = telemetryItem.baseData.measurements || {};\n    var customProperties = telemetryItem.baseData.properties || {};\n    EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, customProperties, customMeasurements);\n    var bd = telemetryItem.baseData;\n\n    if (CoreUtils.isNullOrUndefined(bd)) {\n      logger.warnToConsole(\"Invalid input for dependency data\");\n      return null;\n    }\n\n    var id = bd.id;\n    var absoluteUrl = bd.target;\n    var command = bd.name;\n    var duration = bd.duration;\n    var success = bd.success;\n    var resultCode = bd.responseCode;\n    var requestAPI = bd.type;\n    var method = bd.properties && bd.properties[HttpMethod] ? bd.properties[HttpMethod] : \"GET\";\n    var baseData = new RemoteDependencyData(logger, id, absoluteUrl, command, duration, success, resultCode, method, requestAPI, customProperties, customMeasurements);\n    var data = new Data(RemoteDependencyData.dataType, baseData);\n    return EnvelopeCreator.createEnvelope(logger, RemoteDependencyData.envelopeType, telemetryItem, data);\n  };\n\n  DependencyEnvelopeCreator.DependencyEnvelopeCreator = new DependencyEnvelopeCreator();\n  return DependencyEnvelopeCreator;\n}(EnvelopeCreator);\n\nexport { DependencyEnvelopeCreator };\n\nvar EventEnvelopeCreator =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(EventEnvelopeCreator, _super);\n\n  function EventEnvelopeCreator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  EventEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\n    this._logger = logger;\n\n    if (CoreUtils.isNullOrUndefined(telemetryItem.baseData)) {\n      this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"telemetryItem.baseData cannot be null.\");\n    }\n\n    var customProperties = {};\n    var customMeasurements = {};\n\n    if (telemetryItem.baseType !== Event.dataType) {\n      customProperties['baseTypeSource'] = telemetryItem.baseType; // save the passed in base type as a property\n    }\n\n    if (telemetryItem.baseType === Event.dataType) {\n      customProperties = telemetryItem.baseData.properties || {};\n      customMeasurements = telemetryItem.baseData.measurements || {};\n    } else {\n      if (telemetryItem.baseData) {\n        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.baseData, customProperties, customMeasurements);\n      }\n    } // Exract root level properties from part C telemetryItem.data\n\n\n    EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, customProperties, customMeasurements);\n    var eventName = telemetryItem.baseData.name;\n    var baseData = new Event(logger, eventName, customProperties, customMeasurements);\n    var data = new Data(Event.dataType, baseData);\n    return EnvelopeCreator.createEnvelope(logger, Event.envelopeType, telemetryItem, data);\n  };\n\n  EventEnvelopeCreator.EventEnvelopeCreator = new EventEnvelopeCreator();\n  return EventEnvelopeCreator;\n}(EnvelopeCreator);\n\nexport { EventEnvelopeCreator };\n\nvar ExceptionEnvelopeCreator =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ExceptionEnvelopeCreator, _super);\n\n  function ExceptionEnvelopeCreator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ExceptionEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\n    this._logger = logger;\n\n    if (CoreUtils.isNullOrUndefined(telemetryItem.baseData)) {\n      this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"telemetryItem.baseData cannot be null.\");\n    }\n\n    var baseData = telemetryItem.baseData;\n    var data = new Data(Exception.dataType, baseData);\n    return EnvelopeCreator.createEnvelope(logger, Exception.envelopeType, telemetryItem, data);\n  };\n\n  ExceptionEnvelopeCreator.ExceptionEnvelopeCreator = new ExceptionEnvelopeCreator();\n  return ExceptionEnvelopeCreator;\n}(EnvelopeCreator);\n\nexport { ExceptionEnvelopeCreator };\n\nvar MetricEnvelopeCreator =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MetricEnvelopeCreator, _super);\n\n  function MetricEnvelopeCreator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MetricEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\n    this._logger = logger;\n\n    if (CoreUtils.isNullOrUndefined(telemetryItem.baseData)) {\n      this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"telemetryItem.baseData cannot be null.\");\n    }\n\n    var props = telemetryItem.baseData.properties || {};\n    var customProperties = EnvelopeCreator.extractProperties(telemetryItem.data);\n    customProperties = tslib_1.__assign({}, props, customProperties);\n    var name = telemetryItem.baseData.name;\n    var average = telemetryItem.baseData.average;\n    var sampleCount = telemetryItem.baseData.sampleCount;\n    var min = telemetryItem.baseData.min;\n    var max = telemetryItem.baseData.max;\n    var baseData = new Metric(logger, name, average, sampleCount, min, max, customProperties);\n    var data = new Data(Metric.dataType, baseData);\n    return EnvelopeCreator.createEnvelope(logger, Metric.envelopeType, telemetryItem, data);\n  };\n\n  MetricEnvelopeCreator.MetricEnvelopeCreator = new MetricEnvelopeCreator();\n  return MetricEnvelopeCreator;\n}(EnvelopeCreator);\n\nexport { MetricEnvelopeCreator };\n\nvar PageViewEnvelopeCreator =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PageViewEnvelopeCreator, _super);\n\n  function PageViewEnvelopeCreator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PageViewEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\n    this._logger = logger;\n\n    if (CoreUtils.isNullOrUndefined(telemetryItem.baseData)) {\n      this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"telemetryItem.baseData cannot be null.\");\n    } // Since duration is not part of the domain properties in Common Schema, extract it from part C\n\n\n    var duration = undefined;\n\n    if (!CoreUtils.isNullOrUndefined(telemetryItem.baseData) && !CoreUtils.isNullOrUndefined(telemetryItem.baseData.properties)) {\n      duration = telemetryItem.baseData.properties.duration;\n      delete telemetryItem.baseData.properties.duration;\n    }\n\n    var bd = telemetryItem.baseData;\n    var name = bd.name;\n    var url = bd.uri;\n    var id = bd.id;\n    var properties = bd.properties || {};\n    var measurements = bd.measurements || {}; // refUri is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\n\n    if (!CoreUtils.isNullOrUndefined(bd.refUri)) {\n      properties[\"refUri\"] = bd.refUri;\n    } // pageType is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\n\n\n    if (!CoreUtils.isNullOrUndefined(bd.pageType)) {\n      properties[\"pageType\"] = bd.pageType;\n    } // isLoggedIn is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\n\n\n    if (!CoreUtils.isNullOrUndefined(bd.isLoggedIn)) {\n      properties[\"isLoggedIn\"] = bd.isLoggedIn.toString();\n    } // pageTags is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\n\n\n    if (!CoreUtils.isNullOrUndefined(bd.properties)) {\n      var pageTags = bd.properties;\n\n      for (var key in pageTags) {\n        if (pageTags.hasOwnProperty(key)) {\n          properties[key] = pageTags[key];\n        }\n      }\n    }\n\n    var baseData = new PageView(logger, name, url, duration, properties, measurements, id);\n    var data = new Data(PageView.dataType, baseData);\n    return EnvelopeCreator.createEnvelope(logger, PageView.envelopeType, telemetryItem, data);\n  };\n\n  PageViewEnvelopeCreator.PageViewEnvelopeCreator = new PageViewEnvelopeCreator();\n  return PageViewEnvelopeCreator;\n}(EnvelopeCreator);\n\nexport { PageViewEnvelopeCreator };\n\nvar PageViewPerformanceEnvelopeCreator =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PageViewPerformanceEnvelopeCreator, _super);\n\n  function PageViewPerformanceEnvelopeCreator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PageViewPerformanceEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\n    this._logger = logger;\n\n    if (CoreUtils.isNullOrUndefined(telemetryItem.baseData)) {\n      this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"telemetryItem.baseData cannot be null.\");\n    }\n\n    var bd = telemetryItem.baseData;\n    var name = bd.name;\n    var url = bd.uri;\n    var properties = bd.properties;\n    var measurements = bd.measurements;\n    var baseData = new PageViewPerformance(logger, name, url, undefined, properties, measurements);\n    var data = new Data(PageViewPerformance.dataType, baseData);\n    return EnvelopeCreator.createEnvelope(logger, PageViewPerformance.envelopeType, telemetryItem, data);\n  };\n\n  PageViewPerformanceEnvelopeCreator.PageViewPerformanceEnvelopeCreator = new PageViewPerformanceEnvelopeCreator();\n  return PageViewPerformanceEnvelopeCreator;\n}(EnvelopeCreator);\n\nexport { PageViewPerformanceEnvelopeCreator };\n\nvar TraceEnvelopeCreator =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TraceEnvelopeCreator, _super);\n\n  function TraceEnvelopeCreator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TraceEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\n    this._logger = logger;\n\n    if (CoreUtils.isNullOrUndefined(telemetryItem.baseData)) {\n      this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"telemetryItem.baseData cannot be null.\");\n    }\n\n    var message = telemetryItem.baseData.message;\n    var severityLevel = telemetryItem.baseData.severityLevel;\n    var customProperties = EnvelopeCreator.extractProperties(telemetryItem.data);\n\n    var props = tslib_1.__assign({}, customProperties, telemetryItem.baseData.properties);\n\n    var baseData = new Trace(logger, message, severityLevel, props);\n    var data = new Data(Trace.dataType, baseData);\n    return EnvelopeCreator.createEnvelope(logger, Trace.envelopeType, telemetryItem, data);\n  };\n\n  TraceEnvelopeCreator.TraceEnvelopeCreator = new TraceEnvelopeCreator();\n  return TraceEnvelopeCreator;\n}(EnvelopeCreator);\n\nexport { TraceEnvelopeCreator };","map":null,"metadata":{},"sourceType":"module"}
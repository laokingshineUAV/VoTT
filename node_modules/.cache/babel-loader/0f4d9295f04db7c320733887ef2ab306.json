{"ast":null,"code":"import _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _ from \"lodash\";\nimport { ExportProvider } from \"./exportProvider\";\nimport Guard from \"../../common/guard\";\nimport { AzureCustomVisionService } from \"./azureCustomVision/azureCustomVisionService\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\n/**\n * Options for Azure Custom Vision Service\n */\n\nexport var NewOrExisting;\n/**\n * Azure regions\n */\n\n(function (NewOrExisting) {\n  NewOrExisting[\"New\"] = \"new\";\n  NewOrExisting[\"Existing\"] = \"existing\";\n})(NewOrExisting || (NewOrExisting = {}));\n\nexport var AzureRegion;\n/**\n * @name - Azure Custom Vision Provider\n * @description - Exports a VoTT project into an Azure custom vision project\n */\n\n(function (AzureRegion) {\n  AzureRegion[\"EastUS\"] = \"eastus\";\n  AzureRegion[\"EastUS2\"] = \"eastus2\";\n  AzureRegion[\"NorthCentralUS\"] = \"northcentralus\";\n  AzureRegion[\"SouthCentralUS\"] = \"southcentralus\";\n  AzureRegion[\"WestUS2\"] = \"westus2\";\n  AzureRegion[\"WestEurope\"] = \"westeurope\";\n  AzureRegion[\"NorthEurope\"] = \"northeurope\";\n  AzureRegion[\"SoutheastAsia\"] = \"southeastasia\";\n  AzureRegion[\"AustraliaEast\"] = \"australiaeast\";\n  AzureRegion[\"CentralIndia\"] = \"centralindia\";\n  AzureRegion[\"UKSouth\"] = \"uksouth\";\n  AzureRegion[\"JapanEast\"] = \"japaneast\";\n})(AzureRegion || (AzureRegion = {}));\n\nexport var AzureCustomVisionProvider =\n/*#__PURE__*/\nfunction (_ExportProvider) {\n  _inherits(AzureCustomVisionProvider, _ExportProvider);\n\n  function AzureCustomVisionProvider(project, options) {\n    var _this;\n\n    _classCallCheck(this, AzureCustomVisionProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AzureCustomVisionProvider).call(this, project, options));\n    Guard.null(options);\n\n    if (!options.region) {\n      options.region = AzureRegion.SouthCentralUS;\n    }\n\n    var cusomVisionServiceOptions = {\n      apiKey: options.apiKey,\n      baseUrl: \"https://\".concat(options.region, \".api.cognitive.microsoft.com/customvision/v2.2/Training\")\n    };\n    _this.customVisionService = new AzureCustomVisionService(cusomVisionServiceOptions);\n    return _this;\n  }\n  /**\n   * Exports the configured assets to the Azure Custom Vision service\n   * @returns The upload results\n   */\n\n\n  _createClass(AzureCustomVisionProvider, [{\n    key: \"export\",\n    value: function () {\n      var _export2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var customVisionTags, assetsToExport, tagMap, results;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.syncTags();\n\n              case 2:\n                customVisionTags = _context2.sent;\n                _context2.next = 5;\n                return this.getAssetsForExport();\n\n              case 5:\n                assetsToExport = _context2.sent;\n                tagMap = _.keyBy(customVisionTags, \"name\");\n                _context2.next = 9;\n                return assetsToExport.mapAsync(\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee(asset) {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.prev = 0;\n                            _context.next = 3;\n                            return _this2.uploadAsset(asset, tagMap);\n\n                          case 3:\n                            return _context.abrupt(\"return\", {\n                              asset: asset,\n                              success: true\n                            });\n\n                          case 6:\n                            _context.prev = 6;\n                            _context.t0 = _context[\"catch\"](0);\n                            return _context.abrupt(\"return\", {\n                              asset: asset,\n                              success: false,\n                              error: _context.t0\n                            });\n\n                          case 9:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this, [[0, 6]]);\n                  }));\n\n                  return function (_x) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 9:\n                results = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  completed: results.filter(function (r) {\n                    return r.success;\n                  }),\n                  errors: results.filter(function (r) {\n                    return !r.success;\n                  }),\n                  count: results.length\n                });\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _export() {\n        return _export2.apply(this, arguments);\n      }\n\n      return _export;\n    }()\n    /**\n     * Creates a new azure custom vision project if a new project has been configured\n     * @param exportFormat - The export configuration options\n     */\n\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(exportFormat) {\n        var customVisionOptions, customVisionProject;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                customVisionOptions = exportFormat.providerOptions;\n\n                if (!(customVisionOptions.newOrExisting === NewOrExisting.Existing)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", Promise.resolve(customVisionOptions));\n\n              case 3:\n                customVisionProject = {\n                  name: customVisionOptions.name,\n                  description: customVisionOptions.description,\n                  classificationType: customVisionOptions.classificationType,\n                  domainId: customVisionOptions.domainId,\n                  projectType: customVisionOptions.projectType\n                };\n                _context3.next = 6;\n                return this.customVisionService.create(customVisionProject);\n\n              case 6:\n                customVisionProject = _context3.sent;\n                return _context3.abrupt(\"return\", {\n                  assetState: customVisionOptions.assetState,\n                  region: customVisionOptions.region,\n                  apiKey: customVisionOptions.apiKey,\n                  projectId: customVisionProject.id,\n                  newOrExisting: NewOrExisting.Existing\n                });\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function save(_x2) {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n    /**\n     * Creates any new tags not already defined within the custom vision project\n     * @returns All tags from the custom vision project\n     */\n\n  }, {\n    key: \"syncTags\",\n    value: function () {\n      var _syncTags = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var _this3 = this;\n\n        var customVisionOptions, customVisionTags, customVisionTagNames, createTagTasks, newTags;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                customVisionOptions = this.project.exportFormat.providerOptions;\n                _context4.next = 3;\n                return this.customVisionService.getProjectTags(customVisionOptions.projectId);\n\n              case 3:\n                customVisionTags = _context4.sent;\n                customVisionTagNames = _.keyBy(customVisionTags, \"name\");\n                _context4.next = 7;\n                return this.project.tags.filter(function (projectTag) {\n                  return !customVisionTagNames[projectTag.name];\n                }).map(function (projectTag) {\n                  var newTag = {\n                    name: projectTag.name\n                  };\n                  return _this3.customVisionService.createTag(customVisionOptions.projectId, newTag);\n                });\n\n              case 7:\n                createTagTasks = _context4.sent;\n                _context4.next = 10;\n                return Promise.all(createTagTasks);\n\n              case 10:\n                newTags = _context4.sent;\n                return _context4.abrupt(\"return\", customVisionTags.concat(newTags));\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function syncTags() {\n        return _syncTags.apply(this, arguments);\n      }\n\n      return syncTags;\n    }()\n    /**\n     * Uploads the asset binary to azure custom vision service and configured tagged regions\n     * @param assetMetadata - The asset to upload\n     * @param tags - The global tag list from custom vision service\n     */\n\n  }, {\n    key: \"uploadAsset\",\n    value: function () {\n      var _uploadAsset = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(assetMetadata, tags) {\n        var _this4 = this;\n\n        var blob, newImage, allRegions;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return HtmlFileReader.getAssetBlob(assetMetadata.asset);\n\n              case 2:\n                blob = _context5.sent;\n                _context5.next = 5;\n                return this.customVisionService.createImage(this.options.projectId, blob);\n\n              case 5:\n                newImage = _context5.sent;\n\n                if (newImage) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", Promise.reject(\"Error uploading asset binary with id \\\"\".concat(assetMetadata.asset.id, \"\\\"\")));\n\n              case 8:\n                allRegions = []; // Generate the regions for Azure Custom Vision\n\n                assetMetadata.regions.forEach(function (region) {\n                  if (region.boundingBox) {\n                    region.tags.forEach(function (tagName) {\n                      var customVisionTag = tags[tagName];\n\n                      if (customVisionTag) {\n                        var boundingBox = _this4.getBoundingBoxValue(assetMetadata.asset.size, region.boundingBox);\n\n                        var newRegion = _objectSpread({\n                          imageId: newImage.id,\n                          tagId: customVisionTag.id\n                        }, boundingBox);\n\n                        allRegions.push(newRegion);\n                      }\n                    });\n                  }\n                }); // Associate regions with newly uploaded image\n                // Azure custom vision service API is smart enough to detect that an image already exists with the same binary\n\n                if (!(allRegions.length > 0)) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                _context5.next = 13;\n                return this.customVisionService.createRegions(this.options.projectId, allRegions);\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function uploadAsset(_x3, _x4) {\n        return _uploadAsset.apply(this, arguments);\n      }\n\n      return uploadAsset;\n    }()\n    /**\n     * Converts absolute bounding box values to relative bounding box values\n     * @param size The actual size of the asset\n     * @param boundingBox The actual bounding box coordinates\n     */\n\n  }, {\n    key: \"getBoundingBoxValue\",\n    value: function getBoundingBoxValue(size, boundingBox) {\n      return {\n        left: boundingBox.left / size.width,\n        top: boundingBox.top / size.height,\n        width: boundingBox.width / size.width,\n        height: boundingBox.height / size.height\n      };\n    }\n  }]);\n\n  return AzureCustomVisionProvider;\n}(ExportProvider);","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/providers/export/azureCustomVision.ts"],"names":["_","ExportProvider","Guard","AzureCustomVisionService","HtmlFileReader","NewOrExisting","AzureRegion","AzureCustomVisionProvider","project","options","null","region","SouthCentralUS","cusomVisionServiceOptions","apiKey","baseUrl","customVisionService","syncTags","customVisionTags","getAssetsForExport","assetsToExport","tagMap","keyBy","mapAsync","asset","uploadAsset","success","error","results","completed","filter","r","errors","count","length","exportFormat","customVisionOptions","providerOptions","newOrExisting","Existing","Promise","resolve","customVisionProject","name","description","classificationType","domainId","projectType","create","assetState","projectId","id","getProjectTags","customVisionTagNames","tags","projectTag","map","newTag","createTag","createTagTasks","all","newTags","concat","assetMetadata","getAssetBlob","blob","createImage","newImage","reject","allRegions","regions","forEach","boundingBox","tagName","customVisionTag","getBoundingBoxValue","size","newRegion","imageId","tagId","push","createRegions","left","width","top","height"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport { ExportProvider, ExportAssetState, IExportResults } from \"./exportProvider\";\nimport Guard from \"../../common/guard\";\nimport {\n    IProject, IExportFormat, IAssetMetadata,\n    IBoundingBox, ISize, IExportProviderOptions,\n} from \"../../models/applicationState\";\nimport {\n    AzureCustomVisionService, IAzureCustomVisionServiceOptions, IAzureCustomVisionProject,\n    IAzureCustomVisionTag, IAzureCustomVisionRegion,\n} from \"./azureCustomVision/azureCustomVisionService\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\n\n/**\n * Options for Azure Custom Vision Service\n */\nexport interface IAzureCustomVisionExportOptions extends IExportProviderOptions {\n    assetState: ExportAssetState;\n    newOrExisting: NewOrExisting;\n    region: AzureRegion;\n    apiKey: string;\n    projectId?: string;\n    name?: string;\n    description?: string;\n    projectType?: string;\n    classificationType?: string;\n    domainId?: string;\n}\n\n/**\n * Enum for new or existing Custom Vision projects\n */\nexport interface ITagList {\n    [index: string]: IAzureCustomVisionTag;\n}\n\nexport enum NewOrExisting {\n    New = \"new\",\n    Existing = \"existing\",\n}\n\n/**\n * Azure regions\n */\nexport enum AzureRegion {\n    EastUS = \"eastus\",\n    EastUS2 = \"eastus2\",\n    NorthCentralUS = \"northcentralus\",\n    SouthCentralUS = \"southcentralus\",\n    WestUS2 = \"westus2\",\n    WestEurope = \"westeurope\",\n    NorthEurope = \"northeurope\",\n    SoutheastAsia = \"southeastasia\",\n    AustraliaEast = \"australiaeast\",\n    CentralIndia = \"centralindia\",\n    UKSouth = \"uksouth\",\n    JapanEast = \"japaneast\",\n}\n\n/**\n * @name - Azure Custom Vision Provider\n * @description - Exports a VoTT project into an Azure custom vision project\n */\nexport class AzureCustomVisionProvider extends ExportProvider<IAzureCustomVisionExportOptions> {\n    private customVisionService: AzureCustomVisionService;\n\n    constructor(project: IProject, options: IAzureCustomVisionExportOptions) {\n        super(project, options);\n        Guard.null(options);\n\n        if (!options.region) {\n            options.region = AzureRegion.SouthCentralUS;\n        }\n\n        const cusomVisionServiceOptions: IAzureCustomVisionServiceOptions = {\n            apiKey: options.apiKey,\n            baseUrl: `https://${options.region}.api.cognitive.microsoft.com/customvision/v2.2/Training`,\n        };\n        this.customVisionService = new AzureCustomVisionService(cusomVisionServiceOptions);\n    }\n\n    /**\n     * Exports the configured assets to the Azure Custom Vision service\n     * @returns The upload results\n     */\n    public async export(): Promise<IExportResults> {\n        const customVisionTags = await this.syncTags();\n        const assetsToExport = await this.getAssetsForExport();\n        const tagMap = _.keyBy(customVisionTags, \"name\");\n\n        const results = await assetsToExport.mapAsync(async (asset) => {\n            try {\n                await this.uploadAsset(asset, tagMap);\n                return {\n                    asset,\n                    success: true,\n                };\n            } catch (e) {\n                return {\n                    asset,\n                    success: false,\n                    error: e,\n                };\n            }\n        });\n\n        return {\n            completed: results.filter((r) => r.success),\n            errors: results.filter((r) => !r.success),\n            count: results.length,\n        };\n    }\n\n    /**\n     * Creates a new azure custom vision project if a new project has been configured\n     * @param exportFormat - The export configuration options\n     */\n    public async save(exportFormat: IExportFormat): Promise<IAzureCustomVisionExportOptions> {\n        const customVisionOptions = exportFormat.providerOptions as IAzureCustomVisionExportOptions;\n\n        if (customVisionOptions.newOrExisting === NewOrExisting.Existing) {\n            return Promise.resolve(customVisionOptions);\n        }\n\n        let customVisionProject: IAzureCustomVisionProject = {\n            name: customVisionOptions.name,\n            description: customVisionOptions.description,\n            classificationType: customVisionOptions.classificationType,\n            domainId: customVisionOptions.domainId,\n            projectType: customVisionOptions.projectType,\n        };\n\n        customVisionProject = await this.customVisionService.create(customVisionProject);\n\n        return {\n            assetState: customVisionOptions.assetState,\n            region: customVisionOptions.region,\n            apiKey: customVisionOptions.apiKey,\n            projectId: customVisionProject.id,\n            newOrExisting: NewOrExisting.Existing,\n        };\n    }\n\n    /**\n     * Creates any new tags not already defined within the custom vision project\n     * @returns All tags from the custom vision project\n     */\n    private async syncTags(): Promise<IAzureCustomVisionTag[]> {\n        const customVisionOptions = this.project.exportFormat.providerOptions as IAzureCustomVisionExportOptions;\n        const customVisionTags = await this.customVisionService.getProjectTags(customVisionOptions.projectId);\n        const customVisionTagNames = _.keyBy(customVisionTags, \"name\");\n\n        const createTagTasks = await this.project.tags\n            .filter((projectTag) => {\n                return !customVisionTagNames[projectTag.name];\n            }).map((projectTag) => {\n                const newTag: IAzureCustomVisionTag = {\n                    name: projectTag.name,\n                };\n                return this.customVisionService.createTag(customVisionOptions.projectId, newTag);\n            });\n\n        const newTags = await Promise.all(createTagTasks);\n        return customVisionTags.concat(newTags);\n    }\n\n    /**\n     * Uploads the asset binary to azure custom vision service and configured tagged regions\n     * @param assetMetadata - The asset to upload\n     * @param tags - The global tag list from custom vision service\n     */\n    private async uploadAsset(assetMetadata: IAssetMetadata, tags: ITagList): Promise<void> {\n        const blob = await HtmlFileReader.getAssetBlob(assetMetadata.asset);\n\n        // Upload new image to the custom vision service\n        const newImage = await this.customVisionService.createImage(this.options.projectId, blob);\n\n        if (!newImage) {\n            return Promise.reject(`Error uploading asset binary with id \"${assetMetadata.asset.id}\"`);\n        }\n\n        const allRegions: IAzureCustomVisionRegion[] = [];\n\n        // Generate the regions for Azure Custom Vision\n        assetMetadata.regions.forEach((region) => {\n            if (region.boundingBox) {\n                region.tags.forEach((tagName) => {\n                    const customVisionTag = tags[tagName];\n                    if (customVisionTag) {\n                        const boundingBox = this.getBoundingBoxValue(assetMetadata.asset.size, region.boundingBox);\n                        const newRegion: IAzureCustomVisionRegion = {\n                            imageId: newImage.id,\n                            tagId: customVisionTag.id,\n                            ...boundingBox,\n                        };\n                        allRegions.push(newRegion);\n                    }\n                });\n            }\n        });\n\n        // Associate regions with newly uploaded image\n        // Azure custom vision service API is smart enough to detect that an image already exists with the same binary\n        if (allRegions.length > 0) {\n            await this.customVisionService.createRegions(this.options.projectId, allRegions);\n        }\n    }\n\n    /**\n     * Converts absolute bounding box values to relative bounding box values\n     * @param size The actual size of the asset\n     * @param boundingBox The actual bounding box coordinates\n     */\n    private getBoundingBoxValue(size: ISize, boundingBox: IBoundingBox): IBoundingBox {\n        return {\n            left: boundingBox.left / size.width,\n            top: boundingBox.top / size.height,\n            width: boundingBox.width / size.width,\n            height: boundingBox.height / size.height,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
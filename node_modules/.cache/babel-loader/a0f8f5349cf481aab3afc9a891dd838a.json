{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar RegionComponent_1 = require(\"./Component/RegionComponent\");\n/* import * as SNAPSVG_TYPE from \"snapsvg\";\r\ndeclare var Snap: typeof SNAPSVG_TYPE; */\n\n\nvar Region =\n/*#__PURE__*/\nfunction (_RegionComponent_1$Re) {\n  _inherits(Region, _RegionComponent_1$Re);\n\n  /**\r\n   * Creates new `Region` object.\r\n   * @param paper - The `Snap.Paper` object to draw on.\r\n   * @param paperRect - The parent bounding box for created component.\r\n   * @param regionData - The `RegionData` object shared across components. Used also for initial setup.\r\n   * @param callbacks - The external callbacks collection.\r\n   * @param id - The region `id` used to identify regions in `RegionsManager`.\r\n   * @param tagsDescriptor - The descriptor of region tags.\r\n   * @param tagsUpdateOptions - The drawing options for tags.\r\n   */\n  function Region(paper) {\n    var _this;\n\n    var paperRect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var regionData = arguments.length > 2 ? arguments[2] : undefined;\n    var callbacks = arguments.length > 3 ? arguments[3] : undefined;\n    var id = arguments.length > 4 ? arguments[4] : undefined;\n    var tagsDescriptor = arguments.length > 5 ? arguments[5] : undefined;\n    var tagsUpdateOptions = arguments.length > 6 ? arguments[6] : undefined;\n\n    _classCallCheck(this, Region);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Region).call(this, paper, paperRect, regionData, callbacks));\n    /**\r\n     * The reference to the CSSStyleSheet object.\r\n     */\n\n    _this.styleSheet = null;\n    _this.ID = id;\n    _this.tags = tagsDescriptor;\n    _this.regionID = _this.s8();\n    _this.styleID = \"region_\".concat(_this.regionID, \"_style\");\n    _this.styleSheet = _this.insertStyleSheet();\n    _this.tagsUpdateOptions = tagsUpdateOptions;\n    _this.UI = [];\n    return _this;\n  }\n  /**\r\n   * Clear region styles.\r\n   */\n\n\n  _createClass(Region, [{\n    key: \"removeStyles\",\n    value: function removeStyles() {\n      document.getElementById(this.styleID).remove();\n    }\n    /**\r\n     * The callback function fot internal components.\r\n     * @param component - Reference to the UI component.\r\n     * @param regionData - New RegionData object.\r\n     * @param state - New state of the region.\r\n     * @param multiSelection - Flag for multiselection.\r\n     */\n\n  }, {\n    key: \"onChange\",\n    value: function onChange(component, regionData, state) {\n      var multiSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      this.regionData.initFrom(regionData);\n      this.redraw();\n\n      _get(_getPrototypeOf(Region.prototype), \"onChange\", this).call(this, this, this.regionData.copy(), state, multiSelection);\n    }\n    /**\r\n     * Updates region tags.\r\n     * @param tags - The new tags descriptor object.\r\n     * @param options - The tags drawing options.\r\n     */\n\n  }, {\n    key: \"updateTags\",\n    value: function updateTags(tags, options) {\n      this.tags = tags;\n      this.tagsUpdateOptions = options;\n    }\n  }, {\n    key: \"move\",\n    value: function move(arg1, arg2) {\n      _get(_getPrototypeOf(Region.prototype), \"move\", this).call(this, arg1, arg2);\n\n      this.redraw();\n    }\n    /**\r\n     * Resizes the region to specified `width` and `height`.\r\n     * @param width - The new region width.\r\n     * @param height - The new region height.\r\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      _get(_getPrototypeOf(Region.prototype), \"resize\", this).call(this, width, height);\n\n      this.redraw();\n    }\n    /**\r\n     * Redraws the region component.\r\n     */\n\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      this.UI.forEach(function (element) {\n        element.redraw();\n      });\n    }\n    /**\r\n     * Visually freeze the region.\r\n     */\n\n  }, {\n    key: \"freeze\",\n    value: function freeze() {\n      _get(_getPrototypeOf(Region.prototype), \"freeze\", this).call(this);\n\n      this.node.addClass(\"old\");\n      this.UI.forEach(function (element) {\n        element.freeze();\n      });\n    }\n    /**\r\n     * Visually unfreeze the region.\r\n     */\n\n  }, {\n    key: \"unfreeze\",\n    value: function unfreeze() {\n      _get(_getPrototypeOf(Region.prototype), \"unfreeze\", this).call(this);\n\n      this.node.removeClass(\"old\");\n      this.UI.forEach(function (element) {\n        element.unfreeze();\n      });\n    }\n    /**\r\n     * Internal helper function to generate random id.\r\n     */\n\n  }, {\n    key: \"s8\",\n    value: function s8() {\n      return Math.floor((1 + Math.random()) * 0x100000000).toString(16).substring(1);\n    }\n    /**\r\n     * Helper function to insert a new stylesheet into the document.\r\n     */\n\n  }, {\n    key: \"insertStyleSheet\",\n    value: function insertStyleSheet() {\n      var style = document.createElement(\"style\");\n      style.setAttribute(\"id\", this.styleID);\n      document.head.appendChild(style);\n      return style.sheet;\n    }\n  }]);\n\n  return Region;\n}(RegionComponent_1.RegionComponent);\n\nexports.Region = Region;","map":null,"metadata":{},"sourceType":"script"}
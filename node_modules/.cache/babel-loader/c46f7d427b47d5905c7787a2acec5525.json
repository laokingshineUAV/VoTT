{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { BaseRequestPolicy, HttpPipelineLogLevel } from \"@azure/ms-rest-js\";\nimport { HTTPURLConnection, URLConstants } from \"../utils/constants\";\nimport { getURLParameter, setURLParameter } from \"../utils/utils.common\"; // Default values of IRetryOptions\n\nvar DEFAULT_REQUEST_LOG_OPTIONS = {\n  logWarningIfTryOverThreshold: 3000\n};\n/**\n * LoggingPolicy is a policy used to log requests.\n *\n * @class LoggingPolicy\n * @extends {BaseRequestPolicy}\n */\n\nvar LoggingPolicy =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(LoggingPolicy, _super);\n  /**\n   * Creates an instance of LoggingPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {IRequestLogOptions} [loggingOptions=DEFAULT_REQUEST_LOG_OPTIONS]\n   * @memberof LoggingPolicy\n   */\n\n\n  function LoggingPolicy(nextPolicy, options, loggingOptions) {\n    if (loggingOptions === void 0) {\n      loggingOptions = DEFAULT_REQUEST_LOG_OPTIONS;\n    }\n\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this.tryCount = 0;\n    _this.operationStartTime = new Date();\n    _this.requestStartTime = new Date();\n    _this.loggingOptions = loggingOptions;\n    return _this;\n  }\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof LoggingPolicy\n   */\n\n\n  LoggingPolicy.prototype.sendRequest = function (request) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var safeURL, response, requestEndTime, requestCompletionTime, operationDuration, currentLevel, logMessage, errorString, messageInfo, err_1;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.tryCount++;\n            this.requestStartTime = new Date();\n\n            if (this.tryCount === 1) {\n              this.operationStartTime = this.requestStartTime;\n            }\n\n            safeURL = request.url;\n\n            if (getURLParameter(safeURL, URLConstants.Parameters.SIGNATURE)) {\n              safeURL = setURLParameter(safeURL, URLConstants.Parameters.SIGNATURE, \"*****\");\n            }\n\n            this.log(HttpPipelineLogLevel.INFO, \"'\" + safeURL + \"'==> OUTGOING REQUEST (Try number=\" + this.tryCount + \").\");\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._nextPolicy.sendRequest(request)];\n\n          case 2:\n            response = _a.sent();\n            requestEndTime = new Date();\n            requestCompletionTime = requestEndTime.getTime() - this.requestStartTime.getTime();\n            operationDuration = requestEndTime.getTime() - this.operationStartTime.getTime();\n            currentLevel = HttpPipelineLogLevel.INFO;\n            logMessage = \"\";\n\n            if (this.shouldLog(HttpPipelineLogLevel.INFO)) {\n              // Assume success and default to informational logging.\n              logMessage = \"Successfully Received Response. \";\n            } // If the response took too long, we'll upgrade to warning.\n\n\n            if (requestCompletionTime >= this.loggingOptions.logWarningIfTryOverThreshold) {\n              // Log a warning if the try duration exceeded the specified threshold.\n              if (this.shouldLog(HttpPipelineLogLevel.WARNING)) {\n                currentLevel = HttpPipelineLogLevel.WARNING;\n                logMessage = \"SLOW OPERATION. Duration > \" + this.loggingOptions.logWarningIfTryOverThreshold + \" ms. \";\n              }\n            }\n\n            if (response.status >= 400 && response.status <= 499 && response.status !== HTTPURLConnection.HTTP_NOT_FOUND && response.status !== HTTPURLConnection.HTTP_CONFLICT && response.status !== HTTPURLConnection.HTTP_PRECON_FAILED && response.status !== HTTPURLConnection.HTTP_RANGE_NOT_SATISFIABLE || response.status >= 500 && response.status <= 509) {\n              errorString = \"REQUEST ERROR: HTTP request failed with status code: \" + response.status + \". \";\n              logMessage = errorString;\n              currentLevel = HttpPipelineLogLevel.ERROR;\n            }\n\n            messageInfo = \"Request try:\" + this.tryCount + \", status:\" + response.status + \" request duration:\" + requestCompletionTime + \" ms, operation duration:\" + operationDuration + \" ms\\n\";\n            this.log(currentLevel, logMessage + messageInfo);\n            return [2\n            /*return*/\n            , response];\n\n          case 3:\n            err_1 = _a.sent();\n            this.log(HttpPipelineLogLevel.ERROR, \"Unexpected failure attempting to make request. Error message: \" + err_1.message);\n            throw err_1;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return LoggingPolicy;\n}(BaseRequestPolicy);\n\nexport { LoggingPolicy };","map":null,"metadata":{},"sourceType":"module"}
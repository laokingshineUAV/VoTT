{"ast":null,"code":"\"use strict\";\n\nvar _construct = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/construct\");\n\nvar _toConsumableArray = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Tag_1 = require(\"./Tag\");\n/**\r\n * Represents a composition of region tags\r\n */\n\n\nvar TagsDescriptor =\n/*#__PURE__*/\nfunction () {\n  _createClass(TagsDescriptor, [{\n    key: \"all\",\n\n    /**\r\n     * Returns an array of all tags (no order guaranteed). *Readonly*\r\n     */\n    get: function get() {\n      return this.allTags.map(function (tag) {\n        return tag.copy();\n      });\n    }\n    /**\r\n     * Returns the primary tag. *Readonly*\r\n     */\n\n  }, {\n    key: \"primary\",\n    get: function get() {\n      if (this.primaryTag !== null) {\n        return this.primaryTag.copy();\n      } else {\n        return null;\n      }\n    }\n    /**\r\n     * Returns an array of all secondary tags (no order guaranteed). *Readonly*\r\n     */\n\n  }, {\n    key: \"secondary\",\n    get: function get() {\n      var _this = this;\n\n      if (this.primaryTag !== null) {\n        return this.all.filter(function (tag) {\n          return tag.name !== _this.primary.name;\n        });\n      } else {\n        return this.all;\n      }\n    }\n    /**\r\n     * Creates a new `TagDescriptor` object with specified tags\r\n     * @param primaryTag - Primary `Tag` for the descriptor\r\n     * @param secondaryTags - An array of secondary tags (optional)\r\n     */\n\n  }], [{\n    key: \"BuildFromJSON\",\n\n    /**\r\n     * Creates a new `TagDescriptor` object based on extracting specific properties from any provided object\r\n     * @remarks The `TagDescriptor` object is *immutable*. All public properties return copies of objects.\r\n     * @param data - An `ITagDescriptor` object with the `primary` and `secondary`\r\n     * properties implementing `ITag` and `ITag[]` interfaces\r\n     * @returns A new `TagDescriptor` object\r\n     */\n    value: function BuildFromJSON(data) {\n      var p = null;\n\n      if (data.primary !== null && data.primary !== undefined) {\n        p = Tag_1.Tag.BuildFromJSON(data.primary);\n      }\n\n      var s = data.secondary === undefined ? [] : data.secondary.map(function (tag) {\n        return Tag_1.Tag.BuildFromJSON(tag);\n      });\n      return new TagsDescriptor(p, s);\n    }\n  }]);\n\n  function TagsDescriptor(arg1) {\n    var arg2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, TagsDescriptor);\n\n    // empty TagsDescriptor\n    if (arg1 === undefined) {\n      this.primaryTag = null;\n      this.allTags = [];\n    } else if (arg1 instanceof Tag_1.Tag) {\n      // arg1 = primaryTag, arg2 = secondaryTag\n      if (arg2 instanceof Array) {\n        this.allTags = _construct(Array, [arg1].concat(_toConsumableArray(arg2)));\n      } else {\n        this.allTags = [arg1];\n      }\n\n      this.primaryTag = arg1;\n    } else if (arg1 instanceof Array) {\n      // arg1 = tags, ignore arg2\n      this.allTags = arg1.map(function (tag) {\n        return tag.copy();\n      });\n\n      if (arg1.length > 0) {\n        this.primaryTag = arg1[0];\n      } else {\n        this.primaryTag = null;\n      }\n    } else if (arg1 === null) {\n      // arg1 = null | undefined, ignore\n      if (arg2 instanceof Array) {\n        this.allTags = arg2.map(function (tag) {\n          return tag.copy();\n        });\n      } else {\n        this.allTags = [];\n      }\n\n      this.primaryTag = null;\n    }\n  }\n  /**\r\n   * Returns a string with a comma separated list of tags with primary tag first (if present)\r\n   */\n\n\n  _createClass(TagsDescriptor, [{\n    key: \"toString\",\n    value: function toString() {\n      var str = \"\";\n\n      if (this.primaryTag !== null) {\n        str += this.primaryTag.name;\n        this.secondary.forEach(function (tag) {\n          str += \", \" + tag.name;\n        });\n      } else {\n        this.secondary.forEach(function (tag) {\n          str += \", \" + tag.name;\n        });\n        str = str.substring(2, str.length);\n      }\n\n      return str;\n    }\n    /**\r\n     * Returns an `ITagsDescriptor` object with `primary` and `secondary` properties\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      if (this.primaryTag !== null) {\n        return {\n          primary: this.primaryTag.toJSON(),\n          secondary: this.secondary.map(function (tag) {\n            return tag.toJSON();\n          })\n        };\n      } else {\n        return {\n          primary: null,\n          secondary: this.secondary.map(function (tag) {\n            return tag.toJSON();\n          })\n        };\n      }\n    }\n  }]);\n\n  return TagsDescriptor;\n}();\n\nexports.TagsDescriptor = TagsDescriptor;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import { forEachAsync as arrayForEachAsync, mapAsync } from \"./common/extensions/array\";\nimport { forEachAsync as mapForEachAsync } from \"./common/extensions/map\";\nexport default function registerMixins() {\n  if (!Array.prototype.forEachAsync) {\n    Array.prototype.forEachAsync = arrayForEachAsync;\n  }\n\n  if (!Array.prototype.mapAsync) {\n    Array.prototype.mapAsync = mapAsync;\n  }\n\n  if (!Map.prototype.forEachAsync) {\n    Map.prototype.forEachAsync = mapForEachAsync;\n  }\n}","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/registerMixins.ts"],"names":["forEachAsync","arrayForEachAsync","mapAsync","mapForEachAsync","registerMixins","Array","prototype","Map"],"mappings":"AAAA,SAASA,YAAY,IAAIC,iBAAzB,EAA4CC,QAA5C,QAA4D,2BAA5D;AACA,SAASF,YAAY,IAAIG,eAAzB,QAAgD,yBAAhD;AAkCA,eAAe,SAASC,cAAT,GAA0B;AACrC,MAAI,CAACC,KAAK,CAACC,SAAN,CAAgBN,YAArB,EAAmC;AAC/BK,IAAAA,KAAK,CAACC,SAAN,CAAgBN,YAAhB,GAA+BC,iBAA/B;AACH;;AAED,MAAI,CAACI,KAAK,CAACC,SAAN,CAAgBJ,QAArB,EAA+B;AAC3BG,IAAAA,KAAK,CAACC,SAAN,CAAgBJ,QAAhB,GAA2BA,QAA3B;AACH;;AAED,MAAI,CAACK,GAAG,CAACD,SAAJ,CAAcN,YAAnB,EAAiC;AAC7BO,IAAAA,GAAG,CAACD,SAAJ,CAAcN,YAAd,GAA6BG,eAA7B;AACH;AACJ","sourcesContent":["import { forEachAsync as arrayForEachAsync, mapAsync } from \"./common/extensions/array\";\nimport { forEachAsync as mapForEachAsync } from \"./common/extensions/map\";\n\ndeclare global {\n    // tslint:disable-next-line:interface-name\n    interface Array<T> {\n        /**\n         * Processes items in the array within the specified batch size (default: 5)\n         * @param this The array to process\n         * @param action The action to perform on each item in the array\n         * @param batchSize The batch size for actions to perform in parallel (default: 5)\n         */\n        forEachAsync(action: (item: T) => Promise<void>, batchSize?: number): Promise<void>;\n\n        /**\n         * Maps items in the array in async batches with the specified action\n         * @param this The array to process\n         * @param action The transformer action to perform on each item in the array\n         * @param batchSize The batch size for actions to perform in parallel (default: 5);\n         */\n        mapAsync<R>(action: (item: T) => Promise<R>, batchSize?: number): Promise<R[]>;\n    }\n\n    // tslint:disable-next-line:interface-name\n    interface Map<K, V> {\n        /**\n         * Processes items in the map within the specified batch size (default: 5)\n         * @param this The map to process\n         * @param action The action to perform on each item in the map\n         * @param batchSize The batch size for actions to perform in parallel (default: 5)\n         */\n        forEachAsync(action: (value: V, key: K) => Promise<void>, batchSize?: number): Promise<void>;\n    }\n}\n\nexport default function registerMixins() {\n    if (!Array.prototype.forEachAsync) {\n        Array.prototype.forEachAsync = arrayForEachAsync;\n    }\n\n    if (!Array.prototype.mapAsync) {\n        Array.prototype.mapAsync = mapAsync;\n    }\n\n    if (!Map.prototype.forEachAsync) {\n        Map.prototype.forEachAsync = mapForEachAsync;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
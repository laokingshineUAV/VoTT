{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { HttpHeaders } from \"@azure/ms-rest-js\";\nimport { HeaderConstants } from \"../utils/constants\";\nimport { CredentialPolicy } from \"./CredentialPolicy\";\n/**\n * TokenCredentialPolicy is a policy used to sign HTTP request with a token.\n * Such as an OAuth bearer token.\n *\n * @export\n * @class TokenCredentialPolicy\n * @extends {CredentialPolicy}\n */\n\nvar TokenCredentialPolicy =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TokenCredentialPolicy, _super);\n  /**\n   * Creates an instance of TokenCredentialPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {TokenCredential} tokenCredential\n   * @memberof TokenCredentialPolicy\n   */\n\n\n  function TokenCredentialPolicy(nextPolicy, options, tokenCredential) {\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this.tokenCredential = tokenCredential;\n    _this.authorizationScheme = HeaderConstants.AUTHORIZATION_SCHEME;\n    return _this;\n  }\n  /**\n   * Sign request with token.\n   *\n   * @protected\n   * @param {WebResource} request\n   * @returns {WebResource}\n   * @memberof TokenCredentialPolicy\n   */\n\n\n  TokenCredentialPolicy.prototype.signRequest = function (request) {\n    if (!request.headers) {\n      request.headers = new HttpHeaders();\n    }\n\n    request.headers.set(HeaderConstants.AUTHORIZATION, this.authorizationScheme + \" \" + this.tokenCredential.token);\n    return request;\n  };\n\n  return TokenCredentialPolicy;\n}(CredentialPolicy);\n\nexport { TokenCredentialPolicy };","map":null,"metadata":{},"sourceType":"module"}
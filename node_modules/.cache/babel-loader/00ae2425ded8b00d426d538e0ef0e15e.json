{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ToolbarItemType;\n\n(function (ToolbarItemType) {\n  ToolbarItemType[ToolbarItemType[\"SELECTOR\"] = 0] = \"SELECTOR\";\n  ToolbarItemType[ToolbarItemType[\"SWITCH\"] = 1] = \"SWITCH\";\n  ToolbarItemType[ToolbarItemType[\"SEPARATOR\"] = 2] = \"SEPARATOR\";\n})(ToolbarItemType = exports.ToolbarItemType || (exports.ToolbarItemType = {}));\n\nvar ToolbarIcon =\n/*#__PURE__*/\nfunction () {\n  function ToolbarIcon(paper, icon) {\n    _classCallCheck(this, ToolbarIcon);\n\n    this.isSelected = false;\n    this.paper = paper;\n\n    if (icon !== undefined && icon !== null) {\n      this.description = icon;\n\n      if (icon.width !== undefined) {\n        this.width = icon.width;\n      } else {\n        this.width = ToolbarIcon.IconWidth;\n      }\n\n      if (icon.height !== undefined) {\n        this.height = icon.height;\n      } else {\n        this.height = ToolbarIcon.IconHeight;\n      }\n    } else {\n      this.description = null;\n      this.width = ToolbarIcon.IconWidth;\n      this.height = ToolbarIcon.IconHeight;\n    }\n  }\n\n  _createClass(ToolbarIcon, [{\n    key: \"move\",\n    value: function move(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      this.width = width;\n      this.height = height;\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      this.node.addClass(\"selected\");\n      this.isSelected = true;\n    }\n  }, {\n    key: \"unselect\",\n    value: function unselect() {\n      this.node.removeClass(\"selected\");\n      this.isSelected = false;\n    }\n  }, {\n    key: \"toggleSelection\",\n    value: function toggleSelection() {\n      if (this.isSelected) {\n        this.unselect();\n      } else {\n        this.select();\n      }\n    }\n  }]);\n\n  return ToolbarIcon;\n}();\n\nToolbarIcon.IconWidth = 48;\nToolbarIcon.IconHeight = 48;\nexports.ToolbarIcon = ToolbarIcon;","map":null,"metadata":{},"sourceType":"script"}
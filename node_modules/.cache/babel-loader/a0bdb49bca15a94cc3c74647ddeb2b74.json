{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { StorageType } from \"./Enums\";\nimport { CoreUtils, _InternalMessageId, LoggingSeverity } from \"@microsoft/applicationinsights-core-js\";\nimport { RequestHeaders } from \"./RequestResponseHeaders\";\nimport { DataSanitizer } from \"./Telemetry/Common/DataSanitizer\";\n\nvar Util =\n/** @class */\nfunction () {\n  function Util() {}\n  /*\r\n   * Force the SDK not to use local and session storage\r\n  */\n\n\n  Util.disableStorage = function () {\n    Util._canUseLocalStorage = false;\n    Util._canUseSessionStorage = false;\n  };\n  /**\r\n   * Gets the localStorage object if available\r\n   * @return {Storage} - Returns the storage object if available else returns null\r\n   */\n\n\n  Util._getLocalStorageObject = function () {\n    if (Util.canUseLocalStorage()) {\n      return Util._getVerifiedStorageObject(StorageType.LocalStorage);\n    }\n\n    return null;\n  };\n  /**\r\n   * Tests storage object (localStorage or sessionStorage) to verify that it is usable\r\n   * More details here: https://mathiasbynens.be/notes/localstorage-pattern\r\n   * @param storageType Type of storage\r\n   * @return {Storage} Returns storage object verified that it is usable\r\n   */\n\n\n  Util._getVerifiedStorageObject = function (storageType) {\n    var storage = null;\n    var fail;\n    var uid;\n\n    try {\n      if (typeof window === 'undefined') {\n        return null;\n      }\n\n      uid = new Date();\n      storage = storageType === StorageType.LocalStorage ? window.localStorage : window.sessionStorage;\n      storage.setItem(uid, uid);\n      fail = storage.getItem(uid) != uid;\n      storage.removeItem(uid);\n\n      if (fail) {\n        storage = null;\n      }\n    } catch (exception) {\n      storage = null;\n    }\n\n    return storage;\n  };\n  /**\r\n   *  Checks if endpoint URL is application insights internal injestion service URL.\r\n   *\r\n   *  @param endpointUrl Endpoint URL to check.\r\n   *  @returns {boolean} True if if endpoint URL is application insights internal injestion service URL.\r\n   */\n\n\n  Util.isInternalApplicationInsightsEndpoint = function (endpointUrl) {\n    return Util._internalEndpoints.indexOf(endpointUrl.toLowerCase()) !== -1;\n  };\n  /**\r\n   *  Check if the browser supports local storage.\r\n   *\r\n   *  @returns {boolean} True if local storage is supported.\r\n   */\n\n\n  Util.canUseLocalStorage = function () {\n    if (Util._canUseLocalStorage === undefined) {\n      Util._canUseLocalStorage = !!Util._getVerifiedStorageObject(StorageType.LocalStorage);\n    }\n\n    return Util._canUseLocalStorage;\n  };\n  /**\r\n   *  Get an object from the browser's local storage\r\n   *\r\n   *  @param {string} name - the name of the object to get from storage\r\n   *  @returns {string} The contents of the storage object with the given name. Null if storage is not supported.\r\n   */\n\n\n  Util.getStorage = function (logger, name) {\n    var storage = Util._getLocalStorageObject();\n\n    if (storage !== null) {\n      try {\n        return storage.getItem(name);\n      } catch (e) {\n        Util._canUseLocalStorage = false;\n        logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotReadLocalStorage, \"Browser failed read of local storage. \" + Util.getExceptionName(e), {\n          exception: Util.dump(e)\n        });\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   *  Set the contents of an object in the browser's local storage\r\n   *\r\n   *  @param {string} name - the name of the object to set in storage\r\n   *  @param {string} data - the contents of the object to set in storage\r\n   *  @returns {boolean} True if the storage object could be written.\r\n   */\n\n\n  Util.setStorage = function (logger, name, data) {\n    var storage = Util._getLocalStorageObject();\n\n    if (storage !== null) {\n      try {\n        storage.setItem(name, data);\n        return true;\n      } catch (e) {\n        Util._canUseLocalStorage = false;\n        logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotWriteLocalStorage, \"Browser failed write to local storage. \" + Util.getExceptionName(e), {\n          exception: Util.dump(e)\n        });\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   *  Remove an object from the browser's local storage\r\n   *\r\n   *  @param {string} name - the name of the object to remove from storage\r\n   *  @returns {boolean} True if the storage object could be removed.\r\n   */\n\n\n  Util.removeStorage = function (logger, name) {\n    var storage = Util._getLocalStorageObject();\n\n    if (storage !== null) {\n      try {\n        storage.removeItem(name);\n        return true;\n      } catch (e) {\n        Util._canUseLocalStorage = false;\n        logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserFailedRemovalFromLocalStorage, \"Browser failed removal of local storage item. \" + Util.getExceptionName(e), {\n          exception: Util.dump(e)\n        });\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Gets the sessionStorage object if available\r\n   * @return {Storage} - Returns the storage object if available else returns null\r\n   */\n\n\n  Util._getSessionStorageObject = function () {\n    if (Util.canUseSessionStorage()) {\n      return Util._getVerifiedStorageObject(StorageType.SessionStorage);\n    }\n\n    return null;\n  };\n  /**\r\n   *  Check if the browser supports session storage.\r\n   *\r\n   *  @returns {boolean} True if session storage is supported.\r\n   */\n\n\n  Util.canUseSessionStorage = function () {\n    if (Util._canUseSessionStorage === undefined) {\n      Util._canUseSessionStorage = !!Util._getVerifiedStorageObject(StorageType.SessionStorage);\n    }\n\n    return Util._canUseSessionStorage;\n  };\n  /**\r\n   *  Gets the list of session storage keys\r\n   *\r\n   *  @returns {string[]} List of session storage keys\r\n   */\n\n\n  Util.getSessionStorageKeys = function () {\n    var keys = [];\n\n    if (Util.canUseSessionStorage()) {\n      for (var key in window.sessionStorage) {\n        keys.push(key);\n      }\n    }\n\n    return keys;\n  };\n  /**\r\n   *  Get an object from the browser's session storage\r\n   *\r\n   *  @param {string} name - the name of the object to get from storage\r\n   *  @returns {string} The contents of the storage object with the given name. Null if storage is not supported.\r\n   */\n\n\n  Util.getSessionStorage = function (logger, name) {\n    var storage = Util._getSessionStorageObject();\n\n    if (storage !== null) {\n      try {\n        return storage.getItem(name);\n      } catch (e) {\n        Util._canUseSessionStorage = false;\n        logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotReadSessionStorage, \"Browser failed read of session storage. \" + Util.getExceptionName(e), {\n          exception: Util.dump(e)\n        });\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   *  Set the contents of an object in the browser's session storage\r\n   *\r\n   *  @param {string} name - the name of the object to set in storage\r\n   *  @param {string} data - the contents of the object to set in storage\r\n   *  @returns {boolean} True if the storage object could be written.\r\n   */\n\n\n  Util.setSessionStorage = function (logger, name, data) {\n    var storage = Util._getSessionStorageObject();\n\n    if (storage !== null) {\n      try {\n        storage.setItem(name, data);\n        return true;\n      } catch (e) {\n        Util._canUseSessionStorage = false;\n        logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotWriteSessionStorage, \"Browser failed write to session storage. \" + Util.getExceptionName(e), {\n          exception: Util.dump(e)\n        });\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   *  Remove an object from the browser's session storage\r\n   *\r\n   *  @param {string} name - the name of the object to remove from storage\r\n   *  @returns {boolean} True if the storage object could be removed.\r\n   */\n\n\n  Util.removeSessionStorage = function (logger, name) {\n    var storage = Util._getSessionStorageObject();\n\n    if (storage !== null) {\n      try {\n        storage.removeItem(name);\n        return true;\n      } catch (e) {\n        Util._canUseSessionStorage = false;\n        logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserFailedRemovalFromSessionStorage, \"Browser failed removal of session storage item. \" + Util.getExceptionName(e), {\n          exception: Util.dump(e)\n        });\n      }\n    }\n\n    return false;\n  };\n  /*\r\n   * Force the SDK not to store and read any data from cookies\r\n   */\n\n\n  Util.disableCookies = function () {\n    Util._canUseCookies = false;\n  };\n  /*\r\n   * helper method to tell if document.cookie object is available\r\n   */\n\n\n  Util.canUseCookies = function (logger) {\n    if (Util._canUseCookies === undefined) {\n      Util._canUseCookies = false;\n\n      try {\n        Util._canUseCookies = Util.document.cookie !== undefined;\n      } catch (e) {\n        logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotAccessCookie, \"Cannot access document.cookie - \" + Util.getExceptionName(e), {\n          exception: Util.dump(e)\n        });\n      }\n\n      ;\n    }\n\n    return Util._canUseCookies;\n  };\n  /**\r\n   * helper method to set userId and sessionId cookie\r\n   */\n\n\n  Util.setCookie = function (logger, name, value, domain) {\n    var domainAttrib = \"\";\n    var secureAttrib = \"\";\n\n    if (domain) {\n      domainAttrib = \";domain=\" + domain;\n    }\n\n    if (Util.document.location && Util.document.location.protocol === \"https:\") {\n      secureAttrib = \";secure\";\n    }\n\n    if (Util.canUseCookies(logger)) {\n      Util.document.cookie = name + \"=\" + value + domainAttrib + \";path=/\" + secureAttrib;\n    }\n  };\n\n  Util.stringToBoolOrDefault = function (str, defaultValue) {\n    if (defaultValue === void 0) {\n      defaultValue = false;\n    }\n\n    if (str === undefined || str === null) {\n      return defaultValue;\n    }\n\n    return str.toString().toLowerCase() === \"true\";\n  };\n  /**\r\n   * helper method to access userId and sessionId cookie\r\n   */\n\n\n  Util.getCookie = function (logger, name) {\n    if (!Util.canUseCookies(logger)) {\n      return;\n    }\n\n    var value = \"\";\n\n    if (name && name.length) {\n      var cookieName = name + \"=\";\n      var cookies = Util.document.cookie.split(\";\");\n\n      for (var i = 0; i < cookies.length; i++) {\n        var cookie = cookies[i];\n        cookie = Util.trim(cookie);\n\n        if (cookie && cookie.indexOf(cookieName) === 0) {\n          value = cookie.substring(cookieName.length, cookies[i].length);\n          break;\n        }\n      }\n    }\n\n    return value;\n  };\n  /**\r\n   * Deletes a cookie by setting it's expiration time in the past.\r\n   * @param name - The name of the cookie to delete.\r\n   */\n\n\n  Util.deleteCookie = function (logger, name) {\n    if (Util.canUseCookies(logger)) {\n      // Setting the expiration date in the past immediately removes the cookie\n      Util.document.cookie = name + \"=;path=/;expires=Thu, 01 Jan 1970 00:00:01 GMT;\";\n    }\n  };\n  /**\r\n   * helper method to trim strings (IE8 does not implement String.prototype.trim)\r\n   */\n\n\n  Util.trim = function (str) {\n    if (typeof str !== \"string\") return str;\n    return str.replace(/^\\s+|\\s+$/g, \"\");\n  };\n  /**\r\n   * generate random id string\r\n   */\n\n\n  Util.newId = function () {\n    var base64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var result = \"\"; // tslint:disable-next-line:insecure-random\n\n    var random = Math.random() * 1073741824; //5 symbols in base64, almost maxint\n\n    while (random > 0) {\n      var char = base64chars.charAt(random % 64);\n      result += char;\n      random = Math.floor(random / 64);\n    }\n\n    return result;\n  };\n  /**\r\n   * Check if an object is of type Array\r\n   */\n\n\n  Util.isArray = function (obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\n  };\n  /**\r\n   * Check if an object is of type Error\r\n   */\n\n\n  Util.isError = function (obj) {\n    return Object.prototype.toString.call(obj) === \"[object Error]\";\n  };\n  /**\r\n   * Check if an object is of type Date\r\n   */\n\n\n  Util.isDate = function (obj) {\n    return Object.prototype.toString.call(obj) === \"[object Date]\";\n  };\n  /**\r\n   * Convert a date to I.S.O. format in IE8\r\n   */\n\n\n  Util.toISOStringForIE8 = function (date) {\n    if (Util.isDate(date)) {\n      if (Date.prototype.toISOString) {\n        return date.toISOString();\n      } else {\n        var pad = function pad(num) {\n          var r = String(num);\n\n          if (r.length === 1) {\n            r = \"0\" + r;\n          }\n\n          return r;\n        };\n\n        return date.getUTCFullYear() + \"-\" + pad(date.getUTCMonth() + 1) + \"-\" + pad(date.getUTCDate()) + \"T\" + pad(date.getUTCHours()) + \":\" + pad(date.getUTCMinutes()) + \":\" + pad(date.getUTCSeconds()) + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5) + \"Z\";\n      }\n    }\n  };\n  /**\r\n   * Gets IE version if we are running on IE, or null otherwise\r\n   */\n\n\n  Util.getIEVersion = function (userAgentStr) {\n    if (userAgentStr === void 0) {\n      userAgentStr = null;\n    }\n\n    var myNav = userAgentStr ? userAgentStr.toLowerCase() : navigator.userAgent.toLowerCase();\n    return myNav.indexOf('msie') != -1 ? parseInt(myNav.split('msie')[1]) : null;\n  };\n  /**\r\n   * Convert ms to c# time span format\r\n   */\n\n\n  Util.msToTimeSpan = function (totalms) {\n    if (isNaN(totalms) || totalms < 0) {\n      totalms = 0;\n    }\n\n    totalms = Math.round(totalms);\n    var ms = \"\" + totalms % 1000;\n    var sec = \"\" + Math.floor(totalms / 1000) % 60;\n    var min = \"\" + Math.floor(totalms / (1000 * 60)) % 60;\n    var hour = \"\" + Math.floor(totalms / (1000 * 60 * 60)) % 24;\n    var days = Math.floor(totalms / (1000 * 60 * 60 * 24));\n    ms = ms.length === 1 ? \"00\" + ms : ms.length === 2 ? \"0\" + ms : ms;\n    sec = sec.length < 2 ? \"0\" + sec : sec;\n    min = min.length < 2 ? \"0\" + min : min;\n    hour = hour.length < 2 ? \"0\" + hour : hour;\n    return (days > 0 ? days + \".\" : \"\") + hour + \":\" + min + \":\" + sec + \".\" + ms;\n  };\n  /**\r\n  * Checks if error has no meaningful data inside. Ususally such errors are received by window.onerror when error\r\n  * happens in a script from other domain (cross origin, CORS).\r\n  */\n\n\n  Util.isCrossOriginError = function (message, url, lineNumber, columnNumber, error) {\n    return (message === \"Script error.\" || message === \"Script error\") && !error;\n  };\n  /**\r\n  * Returns string representation of an object suitable for diagnostics logging.\r\n  */\n\n\n  Util.dump = function (object) {\n    var objectTypeDump = Object.prototype.toString.call(object);\n    var propertyValueDump = JSON.stringify(object);\n\n    if (objectTypeDump === \"[object Error]\") {\n      propertyValueDump = \"{ stack: '\" + object.stack + \"', message: '\" + object.message + \"', name: '\" + object.name + \"'\";\n    }\n\n    return objectTypeDump + propertyValueDump;\n  };\n  /**\r\n  * Returns the name of object if it's an Error. Otherwise, returns empty string.\r\n  */\n\n\n  Util.getExceptionName = function (object) {\n    var objectTypeDump = Object.prototype.toString.call(object);\n\n    if (objectTypeDump === \"[object Error]\") {\n      return object.name;\n    }\n\n    return \"\";\n  };\n  /**\r\n   * Adds an event handler for the specified event\r\n   * @param eventName {string} - The name of the event\r\n   * @param callback {any} - The callback function that needs to be executed for the given event\r\n   * @return {boolean} - true if the handler was successfully added\r\n   */\n\n\n  Util.addEventHandler = function (eventName, callback) {\n    if (typeof window === 'undefined' || !window || typeof eventName !== 'string' || typeof callback !== 'function') {\n      return false;\n    } // Create verb for the event\n\n\n    var verbEventName = 'on' + eventName; // check if addEventListener is available\n\n    if (window.addEventListener) {\n      window.addEventListener(eventName, callback, false);\n    } else if (window[\"attachEvent\"]) {\n      window[\"attachEvent\"](verbEventName, callback);\n    } else {\n      return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Tells if a browser supports a Beacon API\r\n   */\n\n\n  Util.IsBeaconApiSupported = function () {\n    return 'sendBeacon' in navigator && navigator.sendBeacon;\n  };\n\n  Util.document = typeof document !== \"undefined\" ? document : {};\n  Util._canUseCookies = undefined;\n  Util._canUseLocalStorage = undefined;\n  Util._canUseSessionStorage = undefined; // listing only non-geo specific locations \n\n  Util._internalEndpoints = [\"https://dc.services.visualstudio.com/v2/track\", \"https://breeze.aimon.applicationinsights.io/v2/track\", \"https://dc-int.services.visualstudio.com/v2/track\"];\n  Util.NotSpecified = \"not_specified\";\n  return Util;\n}();\n\nexport { Util };\n\nvar UrlHelper =\n/** @class */\nfunction () {\n  function UrlHelper() {}\n\n  UrlHelper.parseUrl = function (url) {\n    if (!UrlHelper.htmlAnchorElement) {\n      UrlHelper.htmlAnchorElement = !!UrlHelper.document.createElement ? UrlHelper.document.createElement('a') : {};\n    }\n\n    UrlHelper.htmlAnchorElement.href = url;\n    return UrlHelper.htmlAnchorElement;\n  };\n\n  UrlHelper.getAbsoluteUrl = function (url) {\n    var result;\n    var a = UrlHelper.parseUrl(url);\n\n    if (a) {\n      result = a.href;\n    }\n\n    return result;\n  };\n\n  UrlHelper.getPathName = function (url) {\n    var result;\n    var a = UrlHelper.parseUrl(url);\n\n    if (a) {\n      result = a.pathname;\n    }\n\n    return result;\n  };\n\n  UrlHelper.getCompleteUrl = function (method, absoluteUrl) {\n    if (method) {\n      return method.toUpperCase() + \" \" + absoluteUrl;\n    } else {\n      return absoluteUrl;\n    }\n  };\n\n  UrlHelper.document = typeof document !== \"undefined\" ? document : {};\n  return UrlHelper;\n}();\n\nexport { UrlHelper };\n\nvar CorrelationIdHelper =\n/** @class */\nfunction () {\n  function CorrelationIdHelper() {}\n  /**\r\n  * Checks if a request url is not on a excluded domain list and if it is safe to add correlation headers\r\n  */\n\n\n  CorrelationIdHelper.canIncludeCorrelationHeader = function (config, requestUrl, currentHost) {\n    if (config && config.disableCorrelationHeaders) {\n      return false;\n    }\n\n    if (!requestUrl) {\n      return false;\n    }\n\n    var requestHost = UrlHelper.parseUrl(requestUrl).host.toLowerCase();\n\n    if ((!config || !config.enableCorsCorrelation) && requestHost !== currentHost) {\n      return false;\n    }\n\n    var excludedDomains = config && config.correlationHeaderExcludedDomains;\n\n    if (!excludedDomains || excludedDomains.length == 0) {\n      return true;\n    }\n\n    for (var i = 0; i < excludedDomains.length; i++) {\n      var regex = new RegExp(excludedDomains[i].toLowerCase().replace(/\\./g, \"\\.\").replace(/\\*/g, \".*\"));\n\n      if (regex.test(requestHost)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n  * Combines target appId and target role name from response header.\r\n  */\n\n\n  CorrelationIdHelper.getCorrelationContext = function (responseHeader) {\n    if (responseHeader) {\n      var correlationId = CorrelationIdHelper.getCorrelationContextValue(responseHeader, RequestHeaders.requestContextTargetKey);\n\n      if (correlationId && correlationId !== CorrelationIdHelper.correlationIdPrefix) {\n        return correlationId;\n      }\n    }\n  };\n  /**\r\n  * Gets key from correlation response header\r\n  */\n\n\n  CorrelationIdHelper.getCorrelationContextValue = function (responseHeader, key) {\n    if (responseHeader) {\n      var keyValues = responseHeader.split(\",\");\n\n      for (var i = 0; i < keyValues.length; ++i) {\n        var keyValue = keyValues[i].split(\"=\");\n\n        if (keyValue.length == 2 && keyValue[0] == key) {\n          return keyValue[1];\n        }\n      }\n    }\n  };\n\n  CorrelationIdHelper.correlationIdPrefix = \"cid-v1:\";\n  return CorrelationIdHelper;\n}();\n\nexport { CorrelationIdHelper };\n\nvar AjaxHelper =\n/** @class */\nfunction () {\n  function AjaxHelper() {}\n\n  AjaxHelper.ParseDependencyPath = function (logger, absoluteUrl, method, commandName) {\n    var target,\n        name = commandName,\n        data = commandName;\n\n    if (absoluteUrl && absoluteUrl.length > 0) {\n      var parsedUrl = UrlHelper.parseUrl(absoluteUrl);\n      target = parsedUrl.host;\n\n      if (!name) {\n        if (parsedUrl.pathname != null) {\n          var pathName = parsedUrl.pathname.length === 0 ? \"/\" : parsedUrl.pathname;\n\n          if (pathName.charAt(0) !== '/') {\n            pathName = \"/\" + pathName;\n          }\n\n          data = parsedUrl.pathname;\n          name = DataSanitizer.sanitizeString(logger, method ? method + \" \" + pathName : pathName);\n        } else {\n          name = DataSanitizer.sanitizeString(logger, absoluteUrl);\n        }\n      }\n    } else {\n      target = commandName;\n      name = commandName;\n    }\n\n    return {\n      target: target,\n      name: name,\n      data: data\n    };\n  };\n\n  return AjaxHelper;\n}();\n\nexport { AjaxHelper };\n/**\r\n * A utility class that helps getting time related parameters\r\n */\n\nvar DateTimeUtils =\n/** @class */\nfunction () {\n  function DateTimeUtils() {}\n  /**\r\n   * Get the number of milliseconds since 1970/01/01 in local timezone\r\n   */\n\n\n  DateTimeUtils.Now = typeof window === 'undefined' ? function () {\n    return new Date().getTime();\n  } : window.performance && window.performance.now && window.performance.timing ? function () {\n    return window.performance.now() + window.performance.timing.navigationStart;\n  } : function () {\n    return new Date().getTime();\n  };\n  /**\r\n   * Gets duration between two timestamps\r\n   */\n\n  DateTimeUtils.GetDuration = function (start, end) {\n    var result = null;\n\n    if (start !== 0 && end !== 0 && !CoreUtils.isNullOrUndefined(start) && !CoreUtils.isNullOrUndefined(end)) {\n      result = end - start;\n    }\n\n    return result;\n  };\n\n  return DateTimeUtils;\n}();\n\nexport { DateTimeUtils };","map":null,"metadata":{},"sourceType":"module"}
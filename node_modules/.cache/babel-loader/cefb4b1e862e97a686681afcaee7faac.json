{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { KeyboardContext } from \"../keyboardManager/keyboardManager\";\nimport React from \"react\";\n/**\n * Properties needed for a keyboard binding\n */\n\nexport var KeyboardBinding =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(KeyboardBinding, _React$Component);\n\n  function KeyboardBinding() {\n    _classCallCheck(this, KeyboardBinding);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(KeyboardBinding).apply(this, arguments));\n  }\n\n  _createClass(KeyboardBinding, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.context && this.context.keyboard) {\n        this.deregisterBinding = this.context.keyboard.registerBinding(this.props);\n      } else {\n        console.warn(\"Keyboard Mananger context cannot be found - Keyboard binding has NOT been set.\");\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.deregisterBinding) {\n        this.deregisterBinding();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return KeyboardBinding;\n}(React.Component);\nKeyboardBinding.contextType = KeyboardContext;","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/common/keyboardBinding/keyboardBinding.tsx"],"names":["KeyboardContext","React","KeyboardBinding","context","keyboard","deregisterBinding","registerBinding","props","console","warn","Component","contextType"],"mappings":";;;;;AAAA,SAASA,eAAT,QAAgE,oCAAhE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA;;;;AAgBA,WAAaC,eAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,wCAK+B;AACvB,UAAI,KAAKC,OAAL,IAAgB,KAAKA,OAAL,CAAaC,QAAjC,EAA2C;AACvC,aAAKC,iBAAL,GAAyB,KAAKF,OAAL,CAAaC,QAAb,CAAsBE,eAAtB,CAAsC,KAAKC,KAA3C,CAAzB;AACH,OAFD,MAEO;AACHC,QAAAA,OAAO,CAACC,IAAR,CAAa,gFAAb;AACH;AACJ;AAXL;AAAA;AAAA,2CAakC;AAC1B,UAAI,KAAKJ,iBAAT,EAA4B;AACxB,aAAKA,iBAAL;AACH;AACJ;AAjBL;AAAA;AAAA,6BAmBoB;AACZ,aAAO,IAAP;AACH;AArBL;;AAAA;AAAA,EAAqCJ,KAAK,CAACS,SAA3C;AAAaR,e,CACKS,W,GAAcX,e","sourcesContent":["import { KeyboardContext, IKeyboardContext, KeyEventType } from \"../keyboardManager/keyboardManager\";\nimport React from \"react\";\n\n/**\n * Properties needed for a keyboard binding\n */\nexport interface IKeyboardBindingProps {\n    /** Keys that the action is bound to */\n    accelerators: string[];\n    /** Friendly name for keyboard binding for display in help menu */\n    displayName: string;\n    /** Action to trigger upon key event */\n    handler: (evt?: KeyboardEvent) => void;\n    /** Type of key event (keypress, keyup, keydown) */\n    keyEventType?: KeyEventType;\n    /** Icon to display in help menu */\n    icon?: string;\n}\n\nexport class KeyboardBinding extends React.Component<IKeyboardBindingProps> {\n    public static contextType = KeyboardContext;\n    public context!: IKeyboardContext;\n    private deregisterBinding: () => void;\n\n    public componentDidMount() {\n        if (this.context && this.context.keyboard) {\n            this.deregisterBinding = this.context.keyboard.registerBinding(this.props);\n        } else {\n            console.warn(\"Keyboard Mananger context cannot be found - Keyboard binding has NOT been set.\");\n        }\n    }\n\n    public componentWillUnmount() {\n        if (this.deregisterBinding) {\n            this.deregisterBinding();\n        }\n    }\n\n    public render() {\n        return null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
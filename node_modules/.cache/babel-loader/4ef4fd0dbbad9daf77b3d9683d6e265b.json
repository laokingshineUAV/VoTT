{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { SessionStorageSendBuffer, ArraySendBuffer } from './SendBuffer';\nimport { DependencyEnvelopeCreator, EventEnvelopeCreator, ExceptionEnvelopeCreator, MetricEnvelopeCreator, PageViewEnvelopeCreator, PageViewPerformanceEnvelopeCreator, TraceEnvelopeCreator } from './EnvelopeCreator';\nimport { EventValidator } from './TelemetryValidation/EventValidator';\nimport { TraceValidator } from './TelemetryValidation/TraceValidator';\nimport { ExceptionValidator } from './TelemetryValidation/ExceptionValidator';\nimport { MetricValidator } from './TelemetryValidation/MetricValidator';\nimport { PageViewPerformanceValidator } from './TelemetryValidation/PageViewPerformanceValidator';\nimport { PageViewValidator } from './TelemetryValidation/PageViewValidator';\nimport { RemoteDepdencyValidator } from './TelemetryValidation/RemoteDepdencyValidator';\nimport { Serializer } from './Serializer'; // todo move to channel\n\nimport { DisabledPropertyName, RequestHeaders, Util, PageView, Event, Trace, Exception, Metric, PageViewPerformance, RemoteDependencyData, ConfigurationManager, ProcessLegacy } from '@microsoft/applicationinsights-common';\nimport { _InternalMessageId, LoggingSeverity } from '@microsoft/applicationinsights-core-js';\nimport { CoreUtils } from '@microsoft/applicationinsights-core-js';\nimport { Offline } from './Offline';\n\nvar Sender =\n/** @class */\nfunction () {\n  function Sender() {\n    this.priority = 1001;\n    /**\r\n     * Whether XMLHttpRequest object is supported. Older version of IE (8,9) do not support it.\r\n     */\n\n    this._XMLHttpRequestSupported = false;\n    this.identifier = \"AppInsightsChannelPlugin\";\n  }\n\n  Sender.prototype.pause = function () {\n    throw new Error(\"Method not implemented.\");\n  };\n\n  Sender.prototype.resume = function () {\n    throw new Error(\"Method not implemented.\");\n  };\n\n  Sender.prototype.flush = function () {\n    try {\n      this.triggerSend();\n    } catch (e) {\n      this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FlushFailed, \"flush failed, telemetry will not be collected: \" + Util.getExceptionName(e), {\n        exception: Util.dump(e)\n      });\n    }\n  };\n\n  Sender.prototype.teardown = function () {\n    throw new Error(\"Method not implemented.\");\n  };\n\n  Sender.prototype.initialize = function (config, core, extensions) {\n    var _this = this;\n\n    this._logger = core.logger;\n    this._serializer = new Serializer(core.logger);\n    this._consecutiveErrors = 0;\n    this._retryAt = null;\n    this._lastSend = 0;\n    this._sender = null;\n\n    var defaultConfig = Sender._getDefaultAppInsightsChannelConfig();\n\n    this._config = Sender._getEmptyAppInsightsChannelConfig();\n\n    var _loop_1 = function _loop_1(field) {\n      this_1._config[field] = function () {\n        return ConfigurationManager.getConfig(config, field, _this.identifier, defaultConfig[field]());\n      };\n    };\n\n    var this_1 = this;\n\n    for (var field in defaultConfig) {\n      _loop_1(field);\n    }\n\n    this._buffer = this._config.enableSessionStorageBuffer && Util.canUseSessionStorage() ? new SessionStorageSendBuffer(this._logger, this._config) : new ArraySendBuffer(this._config);\n\n    if (!this._config.isBeaconApiDisabled() && Util.IsBeaconApiSupported()) {\n      this._sender = this._beaconSender;\n    } else {\n      if (typeof XMLHttpRequest != \"undefined\") {\n        var testXhr = new XMLHttpRequest();\n\n        if (\"withCredentials\" in testXhr) {\n          this._sender = this._xhrSender;\n          this._XMLHttpRequestSupported = true;\n        } else if (typeof XDomainRequest !== \"undefined\") {\n          this._sender = this._xdrSender; //IE 8 and 9\n        }\n      }\n    }\n  };\n\n  Sender.prototype.processTelemetry = function (telemetryItem) {\n    var _this = this;\n\n    try {\n      // if master off switch is set, don't send any data\n      if (this._config.disableTelemetry()) {\n        // Do not send/save data\n        return;\n      } // validate input\n\n\n      if (!telemetryItem) {\n        this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSendEmptyTelemetry, \"Cannot send empty telemetry\");\n\n        return;\n      } // ensure a sender was constructed\n\n\n      if (!this._sender) {\n        this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.SenderNotInitialized, \"Sender was not initialized\");\n\n        return;\n      } // first we need to validate that the envelope passed down is valid\n\n\n      var isValid = Sender._validate(telemetryItem);\n\n      if (!isValid) {\n        this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"Invalid telemetry envelope\");\n\n        return;\n      } // construct an envelope that Application Insights endpoint can understand\n\n\n      var aiEnvelope_1 = Sender.constructEnvelope(telemetryItem, this._config.instrumentationKey(), this._logger);\n\n      if (!aiEnvelope_1) {\n        this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CreateEnvelopeError, \"Unable to create an AppInsights envelope\");\n\n        return;\n      }\n\n      var doNotSendItem_1 = false; // this is for running in legacy mode, where customer may already have a custom initializer present\n\n      if (telemetryItem.tags && telemetryItem.tags[ProcessLegacy]) {\n        telemetryItem.tags[ProcessLegacy].forEach(function (callBack) {\n          try {\n            if (callBack && callBack(aiEnvelope_1) === false) {\n              doNotSendItem_1 = true;\n\n              _this._logger.warnToConsole(\"Telemetry processor check returns false\");\n            }\n          } catch (e) {\n            // log error but dont stop executing rest of the telemetry initializers\n            // doNotSendItem = true;\n            _this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, \"One of telemetry initializers failed, telemetry item will not be sent: \" + Util.getExceptionName(e), {\n              exception: Util.dump(e)\n            }, true);\n          }\n        });\n        delete telemetryItem.tags[ProcessLegacy];\n      }\n\n      if (doNotSendItem_1) {\n        return; // do not send, no need to execute next plugin\n      } // check if the incoming payload is too large, truncate if necessary\n\n\n      var payload = this._serializer.serialize(aiEnvelope_1); // flush if we would exceed the max-size limit by adding this item\n\n\n      var bufferPayload = this._buffer.getItems();\n\n      var batch = this._buffer.batchPayloads(bufferPayload);\n\n      if (batch && batch.length + payload.length > this._config.maxBatchSizeInBytes()) {\n        this.triggerSend();\n      } // enqueue the payload\n\n\n      this._buffer.enqueue(payload); // ensure an invocation timeout is set\n\n\n      this._setupTimer();\n    } catch (e) {\n      this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.FailedAddingTelemetryToBuffer, \"Failed adding telemetry to the sender's buffer, some telemetry will be lost: \" + Util.getExceptionName(e), {\n        exception: Util.dump(e)\n      });\n    } // hand off the telemetry item to the next plugin\n\n\n    if (!CoreUtils.isNullOrUndefined(this._nextPlugin)) {\n      this._nextPlugin.processTelemetry(telemetryItem);\n    }\n  };\n\n  Sender.prototype.setNextPlugin = function (next) {\n    this._nextPlugin = next;\n  };\n  /**\r\n   * xhr state changes\r\n   */\n\n\n  Sender.prototype._xhrReadyStateChange = function (xhr, payload, countOfItemsInPayload) {\n    if (xhr.readyState === 4) {\n      var response = null;\n\n      if (!this._appId) {\n        response = this._parseResponse(xhr.responseText || xhr.response);\n\n        if (response && response.appId) {\n          this._appId = response.appId;\n        }\n      }\n\n      if ((xhr.status < 200 || xhr.status >= 300) && xhr.status !== 0) {\n        if (!this._config.isRetryDisabled() && this._isRetriable(xhr.status)) {\n          this._resendPayload(payload);\n\n          this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, \". \" + \"Response code \" + xhr.status + \". Will retry to send \" + payload.length + \" items.\");\n        } else {\n          this._onError(payload, this._formatErrorMessageXhr(xhr));\n        }\n      } else if (Offline.isOffline()) {\n        // Note: Don't check for staus == 0, since adblock gives this code\n        if (!this._config.isRetryDisabled()) {\n          var offlineBackOffMultiplier = 10; // arbritrary number\n\n          this._resendPayload(payload, offlineBackOffMultiplier);\n\n          this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, \". Offline - Response Code: \" + xhr.status + \". Offline status: \" + Offline.isOffline() + \". Will retry to send \" + payload.length + \" items.\");\n        }\n      } else {\n        if (xhr.status === 206) {\n          if (!response) {\n            response = this._parseResponse(xhr.responseText || xhr.response);\n          }\n\n          if (response && !this._config.isRetryDisabled()) {\n            this._onPartialSuccess(payload, response);\n          } else {\n            this._onError(payload, this._formatErrorMessageXhr(xhr));\n          }\n        } else {\n          this._consecutiveErrors = 0;\n\n          this._onSuccess(payload, countOfItemsInPayload);\n        }\n      }\n    }\n  };\n  /**\r\n   * Immediately send buffered data\r\n   * @param async {boolean} - Indicates if the events should be sent asynchronously\r\n   */\n\n\n  Sender.prototype.triggerSend = function (async) {\n    if (async === void 0) {\n      async = true;\n    }\n\n    try {\n      // Send data only if disableTelemetry is false\n      if (!this._config.disableTelemetry()) {\n        if (this._buffer.count() > 0) {\n          var payload = this._buffer.getItems(); // invoke send\n\n\n          this._sender(payload, async);\n        } // update lastSend time to enable throttling\n\n\n        this._lastSend = +new Date();\n      } else {\n        this._buffer.clear();\n      }\n\n      clearTimeout(this._timeoutHandle);\n      this._timeoutHandle = null;\n      this._retryAt = null;\n    } catch (e) {\n      /* Ignore this error for IE under v10 */\n      if (!Util.getIEVersion() || Util.getIEVersion() > 9) {\n        this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TransmissionFailed, \"Telemetry transmission failed, some telemetry will be lost: \" + Util.getExceptionName(e), {\n          exception: Util.dump(e)\n        });\n      }\n    }\n  };\n  /**\r\n   * error handler\r\n   */\n\n\n  Sender.prototype._onError = function (payload, message, event) {\n    this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.OnError, \"Failed to send telemetry.\", {\n      message: message\n    });\n\n    this._buffer.clearSent(payload);\n  };\n  /**\r\n   * partial success handler\r\n   */\n\n\n  Sender.prototype._onPartialSuccess = function (payload, results) {\n    var failed = [];\n    var retry = []; // Iterate through the reversed array of errors so that splicing doesn't have invalid indexes after the first item.\n\n    var errors = results.errors.reverse();\n\n    for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {\n      var error = errors_1[_i];\n      var extracted = payload.splice(error.index, 1)[0];\n\n      if (this._isRetriable(error.statusCode)) {\n        retry.push(extracted);\n      } else {\n        // All other errors, including: 402 (Monthly quota exceeded) and 439 (Too many requests and refresh cache).\n        failed.push(extracted);\n      }\n    }\n\n    if (payload.length > 0) {\n      this._onSuccess(payload, results.itemsAccepted);\n    }\n\n    if (failed.length > 0) {\n      this._onError(failed, this._formatErrorMessageXhr(null, ['partial success', results.itemsAccepted, 'of', results.itemsReceived].join(' ')));\n    }\n\n    if (retry.length > 0) {\n      this._resendPayload(retry);\n\n      this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, \"Partial success. \" + \"Delivered: \" + payload.length + \", Failed: \" + failed.length + \". Will retry to send \" + retry.length + \" our of \" + results.itemsReceived + \" items\");\n    }\n  };\n  /**\r\n   * success handler\r\n   */\n\n\n  Sender.prototype._onSuccess = function (payload, countOfItemsInPayload) {\n    this._buffer.clearSent(payload);\n  };\n  /**\r\n   * xdr state changes\r\n   */\n\n\n  Sender.prototype._xdrOnLoad = function (xdr, payload) {\n    if (xdr && (xdr.responseText + \"\" === \"200\" || xdr.responseText === \"\")) {\n      this._consecutiveErrors = 0;\n\n      this._onSuccess(payload, 0);\n    } else {\n      var results = this._parseResponse(xdr.responseText);\n\n      if (results && results.itemsReceived && results.itemsReceived > results.itemsAccepted && !this._config.isRetryDisabled()) {\n        this._onPartialSuccess(payload, results);\n      } else {\n        this._onError(payload, this._formatErrorMessageXdr(xdr));\n      }\n    }\n  };\n\n  Sender.constructEnvelope = function (orig, iKey, logger) {\n    var envelope;\n\n    if (iKey !== orig.iKey && !CoreUtils.isNullOrUndefined(iKey)) {\n      envelope = tslib_1.__assign({}, orig, {\n        iKey: iKey\n      });\n    } else {\n      envelope = orig;\n    }\n\n    switch (envelope.baseType) {\n      case Event.dataType:\n        return EventEnvelopeCreator.EventEnvelopeCreator.Create(logger, envelope);\n\n      case Trace.dataType:\n        return TraceEnvelopeCreator.TraceEnvelopeCreator.Create(logger, envelope);\n\n      case PageView.dataType:\n        return PageViewEnvelopeCreator.PageViewEnvelopeCreator.Create(logger, envelope);\n\n      case PageViewPerformance.dataType:\n        return PageViewPerformanceEnvelopeCreator.PageViewPerformanceEnvelopeCreator.Create(logger, envelope);\n\n      case Exception.dataType:\n        return ExceptionEnvelopeCreator.ExceptionEnvelopeCreator.Create(logger, envelope);\n\n      case Metric.dataType:\n        return MetricEnvelopeCreator.MetricEnvelopeCreator.Create(logger, envelope);\n\n      case RemoteDependencyData.dataType:\n        return DependencyEnvelopeCreator.DependencyEnvelopeCreator.Create(logger, envelope);\n\n      default:\n        return EventEnvelopeCreator.EventEnvelopeCreator.Create(logger, envelope);\n    }\n  };\n\n  Sender._getDefaultAppInsightsChannelConfig = function () {\n    var resultConfig = {}; // set default values\n\n    resultConfig.endpointUrl = function () {\n      return \"https://dc.services.visualstudio.com/v2/track\";\n    };\n\n    resultConfig.emitLineDelimitedJson = function () {\n      return false;\n    };\n\n    resultConfig.maxBatchInterval = function () {\n      return 15000;\n    };\n\n    resultConfig.maxBatchSizeInBytes = function () {\n      return 102400;\n    }; // 100kb\n\n\n    resultConfig.disableTelemetry = function () {\n      return false;\n    };\n\n    resultConfig.enableSessionStorageBuffer = function () {\n      return true;\n    };\n\n    resultConfig.isRetryDisabled = function () {\n      return false;\n    };\n\n    resultConfig.isBeaconApiDisabled = function () {\n      return true;\n    };\n\n    resultConfig.instrumentationKey = function () {\n      return undefined;\n    }; // Channel doesn't need iKey, it should be set already\n\n\n    return resultConfig;\n  };\n\n  Sender._getEmptyAppInsightsChannelConfig = function () {\n    return {\n      endpointUrl: undefined,\n      emitLineDelimitedJson: undefined,\n      maxBatchInterval: undefined,\n      maxBatchSizeInBytes: undefined,\n      disableTelemetry: undefined,\n      enableSessionStorageBuffer: undefined,\n      isRetryDisabled: undefined,\n      isBeaconApiDisabled: undefined,\n      instrumentationKey: undefined\n    };\n  };\n\n  Sender._validate = function (envelope) {\n    // call the appropriate Validate depending on the baseType\n    switch (envelope.baseType) {\n      case Event.dataType:\n        return EventValidator.EventValidator.Validate(envelope);\n\n      case Trace.dataType:\n        return TraceValidator.TraceValidator.Validate(envelope);\n\n      case Exception.dataType:\n        return ExceptionValidator.ExceptionValidator.Validate(envelope);\n\n      case Metric.dataType:\n        return MetricValidator.MetricValidator.Validate(envelope);\n\n      case PageView.dataType:\n        return PageViewValidator.PageViewValidator.Validate(envelope);\n\n      case PageViewPerformance.dataType:\n        return PageViewPerformanceValidator.PageViewPerformanceValidator.Validate(envelope);\n\n      case RemoteDependencyData.dataType:\n        return RemoteDepdencyValidator.RemoteDepdencyValidator.Validate(envelope);\n\n      default:\n        return EventValidator.EventValidator.Validate(envelope);\n    }\n  };\n  /**\r\n   * Send Beacon API request\r\n   * @param payload {string} - The data payload to be sent.\r\n   * @param isAsync {boolean} - not used\r\n   * Note: Beacon API does not support custom headers and we are not able to get\r\n   * appId from the backend for the correct correlation.\r\n   */\n\n\n  Sender.prototype._beaconSender = function (payload, isAsync) {\n    var url = this._config.endpointUrl();\n\n    var batch = this._buffer.batchPayloads(payload); // Chrome only allows CORS-safelisted values for the sendBeacon data argument\n    // see: https://bugs.chromium.org/p/chromium/issues/detail?id=720283\n\n\n    var plainTextBatch = new Blob([batch], {\n      type: 'text/plain;charset=UTF-8'\n    }); // The sendBeacon method returns true if the user agent is able to successfully queue the data for transfer. Otherwise it returns false.\n\n    var queued = navigator.sendBeacon(url, plainTextBatch);\n\n    if (queued) {\n      this._buffer.markAsSent(payload);\n    } else {\n      this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TransmissionFailed, \". \" + \"Failed to send telemetry with Beacon API.\");\n    }\n  };\n  /**\r\n   * Send XMLHttpRequest\r\n   * @param payload {string} - The data payload to be sent.\r\n   * @param isAsync {boolean} - Indicates if the request should be sent asynchronously\r\n   */\n\n\n  Sender.prototype._xhrSender = function (payload, isAsync) {\n    var _this = this;\n\n    var xhr = new XMLHttpRequest();\n    xhr[DisabledPropertyName] = true;\n    xhr.open(\"POST\", this._config.endpointUrl(), isAsync);\n    xhr.setRequestHeader(\"Content-type\", \"application/json\"); // append Sdk-Context request header only in case of breeze endpoint\n\n    if (Util.isInternalApplicationInsightsEndpoint(this._config.endpointUrl())) {\n      xhr.setRequestHeader(RequestHeaders.sdkContextHeader, RequestHeaders.sdkContextHeaderAppIdRequest);\n    }\n\n    xhr.onreadystatechange = function () {\n      return _this._xhrReadyStateChange(xhr, payload, payload.length);\n    };\n\n    xhr.onerror = function (event) {\n      return _this._onError(payload, _this._formatErrorMessageXhr(xhr), event);\n    }; // compose an array of payloads\n\n\n    var batch = this._buffer.batchPayloads(payload);\n\n    xhr.send(batch);\n\n    this._buffer.markAsSent(payload);\n  };\n  /**\r\n   * Parses the response from the backend.\r\n   * @param response - XMLHttpRequest or XDomainRequest response\r\n   */\n\n\n  Sender.prototype._parseResponse = function (response) {\n    try {\n      if (response && response !== \"\") {\n        var result = JSON.parse(response);\n\n        if (result && result.itemsReceived && result.itemsReceived >= result.itemsAccepted && result.itemsReceived - result.itemsAccepted == result.errors.length) {\n          return result;\n        }\n      }\n    } catch (e) {\n      this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.InvalidBackendResponse, \"Cannot parse the response. \" + Util.getExceptionName(e), {\n        response: response\n      });\n    }\n\n    return null;\n  };\n  /**\r\n   * Resend payload. Adds payload back to the send buffer and setup a send timer (with exponential backoff).\r\n   * @param payload\r\n   */\n\n\n  Sender.prototype._resendPayload = function (payload, linearFactor) {\n    if (linearFactor === void 0) {\n      linearFactor = 1;\n    }\n\n    if (!payload || payload.length === 0) {\n      return;\n    }\n\n    this._buffer.clearSent(payload);\n\n    this._consecutiveErrors++;\n\n    for (var _i = 0, payload_1 = payload; _i < payload_1.length; _i++) {\n      var item = payload_1[_i];\n\n      this._buffer.enqueue(item);\n    } // setup timer\n\n\n    this._setRetryTime(linearFactor);\n\n    this._setupTimer();\n  };\n  /** Calculates the time to wait before retrying in case of an error based on\r\n   * http://en.wikipedia.org/wiki/Exponential_backoff\r\n   */\n\n\n  Sender.prototype._setRetryTime = function (linearFactor) {\n    var SlotDelayInSeconds = 10;\n    var delayInSeconds;\n\n    if (this._consecutiveErrors <= 1) {\n      delayInSeconds = SlotDelayInSeconds;\n    } else {\n      var backOffSlot = (Math.pow(2, this._consecutiveErrors) - 1) / 2; // tslint:disable-next-line:insecure-random\n\n      var backOffDelay = Math.floor(Math.random() * backOffSlot * SlotDelayInSeconds) + 1;\n      backOffDelay = linearFactor * backOffDelay;\n      delayInSeconds = Math.max(Math.min(backOffDelay, 3600), SlotDelayInSeconds);\n    } // TODO: Log the backoff time like the C# version does.\n\n\n    var retryAfterTimeSpan = Date.now() + delayInSeconds * 1000; // TODO: Log the retry at time like the C# version does.\n\n    this._retryAt = retryAfterTimeSpan;\n  };\n  /**\r\n   * Sets up the timer which triggers actually sending the data.\r\n   */\n\n\n  Sender.prototype._setupTimer = function () {\n    var _this = this;\n\n    if (!this._timeoutHandle) {\n      var retryInterval = this._retryAt ? Math.max(0, this._retryAt - Date.now()) : 0;\n      var timerValue = Math.max(this._config.maxBatchInterval(), retryInterval);\n      this._timeoutHandle = setTimeout(function () {\n        _this.triggerSend();\n      }, timerValue);\n    }\n  };\n  /**\r\n   * Checks if the SDK should resend the payload after receiving this status code from the backend.\r\n   * @param statusCode\r\n   */\n\n\n  Sender.prototype._isRetriable = function (statusCode) {\n    return statusCode == 408 // Timeout\n    || statusCode == 429 // Too many requests.\n    || statusCode == 500 // Internal server error.\n    || statusCode == 503; // Service unavailable.\n  };\n\n  Sender.prototype._formatErrorMessageXhr = function (xhr, message) {\n    if (xhr) {\n      return \"XMLHttpRequest,Status:\" + xhr.status + \",Response:\" + xhr.responseText || xhr.response || \"\";\n    }\n\n    return message;\n  };\n  /**\r\n   * Send XDomainRequest\r\n   * @param payload {string} - The data payload to be sent.\r\n   * @param isAsync {boolean} - Indicates if the request should be sent asynchronously\r\n   *\r\n   * Note: XDomainRequest does not support sync requests. This 'isAsync' parameter is added\r\n   * to maintain consistency with the xhrSender's contract\r\n   * Note: XDomainRequest does not support custom headers and we are not able to get\r\n   * appId from the backend for the correct correlation.\r\n   */\n\n\n  Sender.prototype._xdrSender = function (payload, isAsync) {\n    var _this = this;\n\n    var xdr = new XDomainRequest();\n\n    xdr.onload = function () {\n      return _this._xdrOnLoad(xdr, payload);\n    };\n\n    xdr.onerror = function (event) {\n      return _this._onError(payload, _this._formatErrorMessageXdr(xdr), event);\n    }; // XDomainRequest requires the same protocol as the hosting page.\n    // If the protocol doesn't match, we can't send the telemetry :(.\n\n\n    var hostingProtocol = window.location && window.location.protocol;\n\n    if (this._config.endpointUrl().lastIndexOf(hostingProtocol, 0) !== 0) {\n      this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, \". \" + \"Cannot send XDomain request. The endpoint URL protocol doesn't match the hosting page protocol.\");\n\n      this._buffer.clear();\n\n      return;\n    }\n\n    var endpointUrl = this._config.endpointUrl().replace(/^(https?:)/, \"\");\n\n    xdr.open('POST', endpointUrl); // compose an array of payloads\n\n    var batch = this._buffer.batchPayloads(payload);\n\n    xdr.send(batch);\n\n    this._buffer.markAsSent(payload);\n  };\n\n  Sender.prototype._formatErrorMessageXdr = function (xdr, message) {\n    if (xdr) {\n      return \"XDomainRequest,Response:\" + xdr.responseText || \"\";\n    }\n\n    return message;\n  };\n\n  return Sender;\n}();\n\nexport { Sender };","map":null,"metadata":{},"sourceType":"module"}
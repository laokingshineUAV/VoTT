{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Point2D_1 = require(\"../Core/Point2D\");\n\nvar Rect_1 = require(\"../Core/Rect\");\n\nvar IRegionCallbacks_1 = require(\"../Interface/IRegionCallbacks\");\n\nvar RectRegion_1 = require(\"./Rect/RectRegion\");\n\nvar PointRegion_1 = require(\"./Point/PointRegion\");\n\nvar PolygonRegion_1 = require(\"./Polygon/PolygonRegion\");\n\nvar PolylineRegion_1 = require(\"./Polyline/PolylineRegion\");\n\nvar RegionMenu_1 = require(\"./RegionMenu\");\n\nvar RegionData_1 = require(\"../Core/RegionData\");\n/**\r\n * The manager for visual region objects.\r\n */\n\n\nvar RegionsManager =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Creates new `RegionsManager`.\r\n   * @param svgHost - The hosting SVG element.\r\n   * @param callbacks - Reference to the callbacks collection.\r\n   */\n  function RegionsManager(svgHost, callbacks) {\n    var _this = this;\n\n    _classCallCheck(this, RegionsManager);\n\n    /**\r\n     * Global freezing state.\r\n     */\n    this.isFrozenState = false;\n    /**\r\n     * Internal manipulation flag.\r\n     */\n\n    this.justManipulated = false;\n    /**\r\n     * Tags create/redraw options.\r\n     */\n\n    this.tagsUpdateOptions = {\n      showRegionBackground: true\n    };\n    this.baseParent = svgHost;\n    this.paper = Snap(svgHost);\n    this.paperRect = new Rect_1.Rect(svgHost.width.baseVal.value, svgHost.height.baseVal.value);\n    this.regions = new Array();\n\n    if (callbacks !== undefined) {\n      this.callbacks = callbacks;\n\n      if (typeof callbacks.onChange === \"function\") {\n        this.callbacks.onChange = function (region, regionData, state) {\n          var multiSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n          _this.onRegionChange(region, regionData, state, multiSelection);\n\n          callbacks.onChange(region, regionData, state, multiSelection);\n        };\n      } else {\n        this.callbacks.onChange = this.onRegionChange.bind(this);\n      }\n    } else {\n      this.callbacks = {\n        onChange: this.onRegionChange.bind(this),\n        onManipulationBegin: null,\n        onManipulationEnd: null\n      };\n    }\n\n    this.buildOn(this.paper);\n    this.subscribeToEvents();\n  }\n  /**\r\n   * Returns current freezing state.\r\n   */\n\n\n  _createClass(RegionsManager, [{\n    key: \"addRegion\",\n\n    /**\r\n     * Add new region to the manager. Automatically defines region type based on the `type` property.\r\n     * @param id - The region ID.\r\n     * @param regionData - The `RegionData` object defining region.\r\n     * @param tagsDescriptor - The tags descriptor object.\r\n     */\n    value: function addRegion(id, regionData, tagsDescriptor) {\n      if (regionData.type === RegionData_1.RegionDataType.Point) {\n        this.addPointRegion(id, regionData, tagsDescriptor);\n      } else if (regionData.type === RegionData_1.RegionDataType.Polyline) {\n        this.addPolylineRegion(id, regionData, tagsDescriptor);\n      } else if (regionData.type === RegionData_1.RegionDataType.Rect) {\n        this.addRectRegion(id, regionData, tagsDescriptor);\n      } else if (regionData.type === RegionData_1.RegionDataType.Polygon) {\n        this.addPolygonRegion(id, regionData, tagsDescriptor);\n      }\n\n      this.sortRegionsByArea();\n      this.redrawAllRegions();\n    }\n    /**\r\n     * Add new rect region to the manager.\r\n     * @param id - The region ID.\r\n     * @param regionData - The `RegionData` object defining region.\r\n     * @param tagsDescriptor - The tags descriptor object.\r\n     */\n\n  }, {\n    key: \"addRectRegion\",\n    value: function addRectRegion(id, regionData, tagsDescriptor) {\n      this.menu.hide();\n      var region = new RectRegion_1.RectRegion(this.paper, this.paperRect, regionData, this.callbacks, id, tagsDescriptor, this.tagsUpdateOptions);\n      this.registerRegion(region);\n    }\n    /**\r\n     * Add new point region to the manager.\r\n     * @param id - The region ID.\r\n     * @param regionData - The `RegionData` object defining region.\r\n     * @param tagsDescriptor - The tags descriptor object.\r\n     */\n\n  }, {\n    key: \"addPointRegion\",\n    value: function addPointRegion(id, regionData, tagsDescriptor) {\n      this.menu.hide();\n      var region = new PointRegion_1.PointRegion(this.paper, this.paperRect, regionData, this.callbacks, id, tagsDescriptor, this.tagsUpdateOptions);\n      this.registerRegion(region);\n    }\n    /**\r\n     * Add new polyline region to the manager.\r\n     * @param id - The region ID.\r\n     * @param regionData - The `RegionData` object defining region.\r\n     * @param tagsDescriptor - The tags descriptor object.\r\n     */\n\n  }, {\n    key: \"addPolylineRegion\",\n    value: function addPolylineRegion(id, regionData, tagsDescriptor) {\n      this.menu.hide();\n      var region = new PolylineRegion_1.PolylineRegion(this.paper, this.paperRect, regionData, this.callbacks, id, tagsDescriptor, this.tagsUpdateOptions);\n      this.registerRegion(region);\n    }\n    /**\r\n     * Add new polygon region to the manager.\r\n     * @param id - The region ID.\r\n     * @param regionData - The `RegionData` object defining region.\r\n     * @param tagsDescriptor - The tags descriptor object.\r\n     */\n\n  }, {\n    key: \"addPolygonRegion\",\n    value: function addPolygonRegion(id, regionData, tagsDescriptor) {\n      this.menu.hide();\n      var region = new PolygonRegion_1.PolygonRegion(this.paper, this.paperRect, regionData, this.callbacks, id, tagsDescriptor, this.tagsUpdateOptions);\n      this.registerRegion(region);\n    }\n    /*     // REGION CREATION\r\n        public drawRegion(x: number, y: number, rect: Rect, id: string, tagsDescriptor: TagsDescriptor) {\r\n            this.menu.hide();\r\n            let region = new RectRegion(this.paper, this.paperRect, new Point2D(x, y), rect, id, tagsDescriptor,\r\n                this.onManipulationBegin_local.bind(this),\r\n                this.onManipulationEnd_local.bind(this),\r\n                this.tagsUpdateOptions);\r\n            region.area = rect.height * rect.width;\r\n            region.onChange = this.onRegionChange.bind(this);\r\n    \r\n            region.updateTags(region.tags, this.tagsUpdateOptions);\r\n            this.regionManagerLayer.add(region.node);\r\n            this.regions.push(region);\r\n            // Need to do a check for invalid stacking from user generated or older saved json\r\n            if (this.regions.length > 1) {\r\n                this.sortRegionsByArea();\r\n                this.redrawAllRegions();\r\n            }\r\n            //this.menu.showOnRegion(region);\r\n        } */\n\n    /**\r\n     * Redraws all regions. Reinserts regions in actual order.\r\n     */\n\n  }, {\n    key: \"redrawAllRegions\",\n    value: function redrawAllRegions() {\n      var _this2 = this;\n\n      // re-add all elements to DOM based on new order\n      window.requestAnimationFrame(function (e) {\n        _this2.regions.forEach(function (region) {\n          var node = region.node.remove();\n\n          _this2.regionManagerLayer.add(node);\n        });\n      });\n    }\n    /**\r\n     * Returns bounding boxes of the selected regions.\r\n     * @deprecated Use `getSelectedRegions` method instead\r\n     */\n\n  }, {\n    key: \"getSelectedRegionsBounds\",\n    value: function getSelectedRegionsBounds() {\n      var regions = this.lookupSelectedRegions().map(function (region) {\n        return {\n          id: region.ID,\n          x: region.x,\n          y: region.y,\n          width: region.boundRect.width,\n          height: region.boundRect.height\n        };\n      });\n      return regions;\n    }\n    /**\r\n     * Returns a collection of selected regions.\r\n     */\n\n  }, {\n    key: \"getSelectedRegions\",\n    value: function getSelectedRegions() {\n      var regions = this.lookupSelectedRegions().map(function (region) {\n        return {\n          id: region.ID,\n          regionData: region.regionData\n        };\n      });\n      return regions;\n    }\n    /**\r\n     * Deletes a region with specified `id`.\r\n     * @param id - Id of the region to delete.\r\n     */\n\n  }, {\n    key: \"deleteRegionById\",\n    value: function deleteRegionById(id) {\n      var region = this.lookupRegionByID(id);\n\n      if (region != null) {\n        this.deleteRegion(region);\n      }\n\n      if (this.callbacks.onManipulationEnd !== null) {\n        this.callbacks.onManipulationEnd();\n      }\n    }\n    /**\r\n     * Deletes all the regions from the manager.\r\n     */\n\n  }, {\n    key: \"deleteAllRegions\",\n    value: function deleteAllRegions() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.regions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var region = _step.value;\n          region.removeStyles();\n          region.node.remove();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.regions = [];\n      this.menu.hide();\n    }\n    /**\r\n     * Updates tags of the specified region.\r\n     * @param id - The `id` of the region to update.\r\n     * @param tagsDescriptor - The new tags descriptor object.\r\n     */\n\n  }, {\n    key: \"updateTagsById\",\n    value: function updateTagsById(id, tagsDescriptor) {\n      var region = this.lookupRegionByID(id);\n\n      if (region != null) {\n        region.updateTags(tagsDescriptor, this.tagsUpdateOptions);\n      }\n    }\n    /**\r\n     * Updates tags for all selected regions.\r\n     * @param tagsDescriptor - The new tags descriptor object.\r\n     */\n\n  }, {\n    key: \"updateTagsForSelectedRegions\",\n    value: function updateTagsForSelectedRegions(tagsDescriptor) {\n      var _this3 = this;\n\n      var regions = this.lookupSelectedRegions();\n      regions.forEach(function (region) {\n        region.updateTags(tagsDescriptor, _this3.tagsUpdateOptions);\n      });\n    }\n    /**\r\n     * Selects the region specified by `id`.\r\n     * @param id - The `id` of the region to select.\r\n     */\n\n  }, {\n    key: \"selectRegionById\",\n    value: function selectRegionById(id) {\n      var region = this.lookupRegionByID(id);\n      this.selectRegion(region);\n    }\n    /**\r\n     * Resizes the manager to specified `width` and `height`.\r\n     * @param width - The new manager width.\r\n     * @param height - The new manager height.\r\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      var tw = width / this.paperRect.width;\n      var th = height / this.paperRect.height;\n      this.paperRect.resize(width, height);\n      this.menu.hide(); // recalculate size/position for all regions;\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.regions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var region = _step2.value;\n          region.move(new Point2D_1.Point2D(region.x * tw, region.y * th));\n          region.resize(region.boundRect.width * tw, region.boundRect.height * th);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n    /**\r\n     * Freezes the manager and all its current regions.\r\n     * @param nuance - [optional] Additional css-class to add to the manager.\r\n     */\n\n  }, {\n    key: \"freeze\",\n    value: function freeze(nuance) {\n      this.regionManagerLayer.addClass(\"frozen\");\n\n      if (nuance !== undefined) {\n        this.regionManagerLayer.addClass(nuance);\n        this.frozenNuance = nuance;\n      } else {\n        this.frozenNuance = \"\";\n      }\n\n      this.menu.hide();\n      this.regions.forEach(function (region) {\n        region.freeze();\n      });\n      this.isFrozenState = true;\n    }\n    /**\r\n     * Unfreezes the manager and all its regions.\r\n     */\n\n  }, {\n    key: \"unfreeze\",\n    value: function unfreeze() {\n      this.regionManagerLayer.removeClass(\"frozen\");\n\n      if (this.frozenNuance !== \"\") {\n        this.regionManagerLayer.removeClass(this.frozenNuance);\n      }\n\n      var selectedRegions = this.lookupSelectedRegions();\n\n      if (selectedRegions.length > 0) {\n        this.menu.showOnRegion(selectedRegions[0]);\n      }\n\n      this.regions.forEach(function (region) {\n        region.unfreeze();\n      });\n      this.isFrozenState = false;\n    }\n    /**\r\n     * Toggles freezing mode.\r\n     */\n\n  }, {\n    key: \"toggleFreezeMode\",\n    value: function toggleFreezeMode() {\n      if (this.isFrozen) {\n        this.unfreeze();\n      } else {\n        this.freeze();\n      }\n    }\n    /**\r\n     * Finds the region by specified `id`.\r\n     * @param id - The `id` to look for.\r\n     */\n\n  }, {\n    key: \"lookupRegionByID\",\n    value: function lookupRegionByID(id) {\n      var region = null;\n      var i = 0;\n\n      while (i < this.regions.length && region == null) {\n        if (this.regions[i].ID === id) {\n          region = this.regions[i];\n        }\n\n        i++;\n      }\n\n      return region;\n    }\n    /**\r\n     * Internal helper function to sort regions by their area.\r\n     */\n\n  }, {\n    key: \"sortRegionsByArea\",\n    value: function sortRegionsByArea() {\n      function quickSort(arr, left, right) {\n        var pivot;\n        var partitionIndex;\n\n        if (left < right) {\n          pivot = right;\n          partitionIndex = partition(arr, pivot, left, right); // sort left and right\n\n          quickSort(arr, left, partitionIndex - 1);\n          quickSort(arr, partitionIndex + 1, right);\n        }\n\n        return arr;\n      }\n\n      function partition(arr, pivot, left, right) {\n        var pivotValue = arr[pivot].area;\n        var partitionIndex = left;\n\n        for (var i = left; i < right; i++) {\n          if (arr[i].area > pivotValue) {\n            swap(arr, i, partitionIndex);\n            partitionIndex++;\n          }\n        }\n\n        swap(arr, right, partitionIndex);\n        return partitionIndex;\n      }\n\n      function swap(arr, i, j) {\n        var temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n\n      var length = this.regions.length;\n\n      if (length > 1) {\n        quickSort(this.regions, 0, this.regions.length - 1);\n      }\n    }\n    /**\r\n     * Finds all selected regions.\r\n     */\n\n  }, {\n    key: \"lookupSelectedRegions\",\n    value: function lookupSelectedRegions() {\n      var collection = Array();\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.regions[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var region = _step3.value;\n\n          if (region.isSelected) {\n            collection.push(region);\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return collection;\n    }\n    /**\r\n     * Deletes provided region.\r\n     * @param region - The region to delete.\r\n     */\n\n  }, {\n    key: \"deleteRegion\",\n    value: function deleteRegion(region) {\n      // remove style\n      region.removeStyles(); // remove element\n\n      region.node.remove();\n      this.regions = this.regions.filter(function (r) {\n        return r !== region;\n      });\n      this.menu.hide();\n\n      if (typeof this.callbacks.onRegionDelete === \"function\") {\n        this.callbacks.onRegionDelete(region.ID, region.regionData);\n      }\n    }\n    /**\r\n     * Deletes all selected regions.\r\n     */\n\n  }, {\n    key: \"deleteSelectedRegions\",\n    value: function deleteSelectedRegions() {\n      var collection = this.lookupSelectedRegions();\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = collection[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var region = _step4.value;\n          this.deleteRegion(region);\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      this.selectNextRegion();\n\n      if (this.callbacks.onManipulationEnd !== null) {\n        this.callbacks.onManipulationEnd();\n      }\n    }\n    /**\r\n     * Selects specified region.\r\n     * @param region - The region to select.\r\n     */\n\n  }, {\n    key: \"selectRegion\",\n    value: function selectRegion(region) {\n      if (region !== null) {\n        this.unselectRegions(region);\n        region.select();\n        this.menu.showOnRegion(region);\n\n        if (typeof this.callbacks.onRegionSelected === \"function\") {\n          this.callbacks.onRegionSelected(region.ID);\n        }\n      }\n    }\n    /**\r\n     * Selects all the regions.\r\n     */\n\n  }, {\n    key: \"selectAllRegions\",\n    value: function selectAllRegions() {\n      var r = null;\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = this.regions[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var region = _step5.value;\n          r = region;\n          r.select();\n\n          if (typeof this.callbacks.onRegionSelected === \"function\") {\n            this.callbacks.onRegionSelected(r.ID);\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      if (r != null) {\n        this.menu.showOnRegion(r);\n      }\n    }\n    /**\r\n     * Selects the next region (based on current order, e.g., sorted by area).\r\n     */\n\n  }, {\n    key: \"selectNextRegion\",\n    value: function selectNextRegion() {\n      var region = null;\n      var i = 0;\n      var length = this.regions.length;\n\n      if (length === 1) {\n        region = this.regions[0];\n      } else if (length > 1) {\n        while (i < length && region == null) {\n          if (this.regions[i].isSelected) {\n            region = i === length - 1 ? this.regions[0] : this.regions[i + 1];\n          }\n\n          i++;\n        }\n      }\n\n      if (region == null && length > 0) {\n        region = this.regions[0];\n      }\n\n      this.selectRegion(region);\n    }\n    /**\r\n     * Moves or changes region size\r\n     * @param region - The region to be changed.\r\n     * @param dx - x-coordinate shift.\r\n     * @param dy - y-coordinate shift.\r\n     * @param dw - width-shift.\r\n     * @param dh - height-shift.\r\n     * @param inverse - flag if the change is inverted.\r\n     */\n\n  }, {\n    key: \"reshapeRegion\",\n    value: function reshapeRegion(region, dx, dy, dw, dh) {\n      var inverse = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var w;\n      var h;\n      var x;\n      var y;\n\n      if (!inverse) {\n        w = region.boundRect.width + Math.abs(dw);\n        h = region.boundRect.height + Math.abs(dh);\n        x = region.x + dx + (dw > 0 ? 0 : dw);\n        y = region.y + dy + (dh > 0 ? 0 : dh);\n      } else {\n        w = Math.max(0, region.boundRect.width - Math.abs(dw));\n        h = Math.max(0, region.boundRect.height - Math.abs(dh));\n        x = region.x + dx + (dw < 0 ? 0 : dw);\n        y = region.y + dy + (dh < 0 ? 0 : dh);\n      }\n\n      var p1 = new Point2D_1.Point2D(x, y).boundToRect(this.paperRect);\n      var p2 = new Point2D_1.Point2D(x + w, y + h).boundToRect(this.paperRect);\n      region.move(p1);\n      region.resize(p2.x - p1.x, p2.y - p1.y);\n    }\n    /**\r\n     * Moves the selected region with specified shift in coordinates\r\n     * @param dx - x-coordinate shift.\r\n     * @param dy - y-coordinate shift.\r\n     */\n\n  }, {\n    key: \"moveSelectedRegions\",\n    value: function moveSelectedRegions(dx, dy) {\n      var _this4 = this;\n\n      var regions = this.lookupSelectedRegions();\n      regions.forEach(function (r) {\n        _this4.reshapeRegion(r, dx, dy, 0, 0);\n      });\n      this.menu.showOnRegion(regions[0]);\n    }\n    /**\r\n     * Resizes the selected region with specified width and height shifts.\r\n     * @param dw - width-shift.\r\n     * @param dh - height-shift.\r\n     * @param inverse - flag if the change is inverted.\r\n     */\n\n  }, {\n    key: \"resizeSelectedRegions\",\n    value: function resizeSelectedRegions(dw, dh) {\n      var _this5 = this;\n\n      var inverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var regions = this.lookupSelectedRegions();\n      regions.forEach(function (r) {\n        _this5.reshapeRegion(r, 0, 0, dw, dh, inverse);\n      });\n      this.menu.showOnRegion(regions[0]);\n    }\n    /**\r\n     * The callback function fot internal components.\r\n     * @param component - Reference to the UI component.\r\n     * @param regionData - New RegionData object.\r\n     * @param state - New state of the region.\r\n     * @param multiSelection - Flag for multiselection.\r\n     */\n\n  }, {\n    key: \"onRegionChange\",\n    value: function onRegionChange(region, regionData, state) {\n      var multiSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      // resize or drag begin\n      if (state === IRegionCallbacks_1.ChangeEventType.MOVEBEGIN) {\n        if (!multiSelection) {\n          this.unselectRegions(region);\n        }\n\n        this.menu.hide();\n\n        if (typeof this.callbacks.onRegionSelected === \"function\") {\n          this.callbacks.onRegionSelected(region.ID, multiSelection);\n        }\n\n        if (typeof this.callbacks.onRegionMoveBegin === \"function\") {\n          this.callbacks.onRegionMoveBegin(region.ID, regionData);\n        }\n\n        this.justManipulated = false; // resizing or dragging\n      } else if (state === IRegionCallbacks_1.ChangeEventType.MOVING) {\n        if (typeof this.callbacks.onRegionMove === \"function\") {\n          this.callbacks.onRegionMove(region.ID, regionData);\n        }\n\n        this.justManipulated = true; // resize or drag end\n      } else if (state === IRegionCallbacks_1.ChangeEventType.MOVEEND) {\n        if (this.justManipulated) {\n          region.select();\n          this.menu.showOnRegion(region);\n          this.sortRegionsByArea();\n          this.redrawAllRegions();\n\n          if (typeof this.callbacks.onRegionMoveEnd === \"function\") {\n            this.callbacks.onRegionMoveEnd(region.ID, regionData);\n          }\n        }\n      } else if (state === IRegionCallbacks_1.ChangeEventType.SELECTIONTOGGLE && !this.justManipulated) {\n        // select\n        if (!region.isSelected) {\n          if (!multiSelection) {\n            this.unselectRegions(region);\n          }\n\n          region.select();\n          this.menu.showOnRegion(region);\n\n          if (typeof this.callbacks.onRegionSelected === \"function\") {\n            this.callbacks.onRegionSelected(region.ID, multiSelection);\n          } // unselect\n\n        } else {\n          region.unselect();\n          this.menu.hide();\n\n          if (typeof this.callbacks.onRegionSelected === \"function\") {\n            this.callbacks.onRegionSelected(\"\", multiSelection);\n          }\n        }\n      }\n    }\n    /**\r\n     * Unselects all the regions, naybe except the one specified.\r\n     * @param except - Region to ignore.\r\n     */\n\n  }, {\n    key: \"unselectRegions\",\n    value: function unselectRegions(except) {\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = this.regions[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var region = _step6.value;\n\n          if (region !== except) {\n            region.unselect();\n          }\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n    }\n    /**\r\n     * Changes the tags drawing setting to draw background or make it transparent.\r\n     */\n\n  }, {\n    key: \"toggleBackground\",\n    value: function toggleBackground() {\n      var _this6 = this;\n\n      this.tagsUpdateOptions.showRegionBackground = !this.tagsUpdateOptions.showRegionBackground;\n      this.regions.forEach(function (r) {\n        r.updateTags(r.tags, _this6.tagsUpdateOptions);\n      });\n    }\n    /**\r\n     * Inits regions manager UI.\r\n     * @param paper - The `Snap.Paper` element to draw on.\r\n     */\n\n  }, {\n    key: \"buildOn\",\n    value: function buildOn(paper) {\n      var _this7 = this;\n\n      this.regionManagerLayer = paper.g();\n      this.regionManagerLayer.addClass(\"regionManager\");\n      this.menuLayer = paper.g();\n      this.menuLayer.addClass(\"menuManager\");\n      this.menu = new RegionMenu_1.MenuElement(paper, this.paperRect, new RegionData_1.RegionData(0, 0, 0, 0), this.callbacks);\n      this.menu.addAction(\"delete\", \"trash\", function (region) {\n        _this7.deleteRegion(region);\n\n        _this7.menu.hide();\n      });\n      this.menuLayer.add(this.menu.menuGroup);\n      this.menu.hide();\n    }\n    /**\r\n     * Helper function to subscribe manager to pointer and keyboard events.\r\n     */\n\n  }, {\n    key: \"subscribeToEvents\",\n    value: function subscribeToEvents() {\n      var _this8 = this;\n\n      this.regionManagerLayer.mouseover(function (e) {\n        if (_this8.callbacks.onManipulationBegin !== null) {\n          _this8.callbacks.onManipulationBegin();\n        }\n      });\n      this.regionManagerLayer.mouseout(function (e) {\n        if (_this8.callbacks.onManipulationEnd !== null) {\n          _this8.callbacks.onManipulationEnd();\n        }\n      });\n      window.addEventListener(\"keyup\", function (e) {\n        if (!(e.target instanceof HTMLInputElement) && !(e.target instanceof HTMLTextAreaElement) && !(e.target instanceof HTMLSelectElement)) {\n          if (!_this8.isFrozen) {\n            switch (e.keyCode) {\n              // tab\n              case 9:\n                _this8.selectNextRegion();\n\n                break;\n              // delete, backspace\n\n              case 46:\n              case 8:\n                _this8.deleteSelectedRegions();\n\n                break;\n              // ctrl + up\n\n              case 38:\n                if (e.ctrlKey) {\n                  if (!e.shiftKey && !e.altKey) {\n                    _this8.moveSelectedRegions(0, -5);\n                  } else if (e.shiftKey && !e.altKey) {\n                    _this8.resizeSelectedRegions(0, -5);\n                  } else if (e.altKey && !e.shiftKey) {\n                    _this8.resizeSelectedRegions(0, -5, true);\n                  }\n                }\n\n                break;\n              // ctrl + down\n\n              case 40:\n                if (e.ctrlKey) {\n                  if (!e.shiftKey && !e.altKey) {\n                    _this8.moveSelectedRegions(0, 5);\n                  } else if (e.shiftKey && !e.altKey) {\n                    _this8.resizeSelectedRegions(0, 5);\n                  } else if (e.altKey && !e.shiftKey) {\n                    _this8.resizeSelectedRegions(0, 5, true);\n                  }\n                }\n\n                break;\n              // ctrl + left\n\n              case 37:\n                if (e.ctrlKey) {\n                  if (!e.shiftKey && !e.altKey) {\n                    _this8.moveSelectedRegions(-5, 0);\n                  } else if (e.shiftKey && !e.altKey) {\n                    _this8.resizeSelectedRegions(-5, 0);\n                  } else if (e.altKey && !e.shiftKey) {\n                    _this8.resizeSelectedRegions(-5, 0, true);\n                  }\n                }\n\n                break;\n              // ctrl + right\n\n              case 39:\n                if (e.ctrlKey) {\n                  if (!e.shiftKey && !e.altKey) {\n                    _this8.moveSelectedRegions(5, 0);\n                  } else if (e.shiftKey && !e.altKey) {\n                    _this8.resizeSelectedRegions(5, 0);\n                  } else if (e.altKey && !e.shiftKey) {\n                    _this8.resizeSelectedRegions(5, 0, true);\n                  }\n                }\n\n                break;\n              // default\n\n              default:\n                return;\n            }\n\n            e.preventDefault();\n          }\n        }\n      });\n      window.addEventListener(\"keydown\", function (e) {\n        if (!(e.target instanceof HTMLInputElement) && !(e.target instanceof HTMLTextAreaElement) && !(e.target instanceof HTMLSelectElement)) {\n          if (!_this8.isFrozen) {\n            switch (e.code) {\n              // ctrl + A, ctrl + a\n              case \"KeyA\":\n              case \"Numpad1\":\n                if (e.ctrlKey) {\n                  _this8.selectAllRegions();\n                }\n\n                break;\n              // ctrl + B, ctrl + b\n\n              case \"KeyB\":\n                if (e.ctrlKey) {\n                  _this8.toggleBackground();\n                }\n\n                break;\n              // default\n\n              default:\n                return;\n            } // e.preventDefault();\n\n          }\n        }\n      });\n    }\n    /**\r\n     * Registers the provided region in the manager.\r\n     * @param region - The new region to register.\r\n     */\n\n  }, {\n    key: \"registerRegion\",\n    value: function registerRegion(region) {\n      this.unselectRegions();\n      region.select();\n      this.regionManagerLayer.add(region.node);\n      this.regions.push(region);\n      this.menu.showOnRegion(region);\n    }\n  }, {\n    key: \"isFrozen\",\n    get: function get() {\n      return this.isFrozenState;\n    }\n  }]);\n\n  return RegionsManager;\n}();\n\nexports.RegionsManager = RegionsManager;","map":null,"metadata":{},"sourceType":"script"}
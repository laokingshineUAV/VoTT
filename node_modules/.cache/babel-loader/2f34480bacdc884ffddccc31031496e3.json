{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/common/assetPreview/tfrecordAsset.tsx\";\nimport React from \"react\";\nimport HtmlFileReader from \"../../../../common/htmlFileReader\";\nimport { TFRecordsReader } from \"../../../../providers/export/tensorFlowRecords/tensorFlowReader\";\nimport { FeatureType } from \"../../../../providers/export/tensorFlowRecords/tensorFlowBuilder\";\n/**\n * State for TFRecord Asset Image component\n * @member tfRecordImage64 - base64 representation of the image data\n * @member hasError - Whether or not there was an error loading the image data from the tf record\n */\n\n/**\n * React component that displays an image from a TFRecord asset file\n */\nexport var TFRecordAsset =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TFRecordAsset, _React$Component);\n\n  function TFRecordAsset() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TFRecordAsset);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TFRecordAsset)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      tfRecordImage64: \"\",\n      hasError: false\n    };\n    _this.image = React.createRef();\n    _this.updateImage =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var base64ImageData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _this.getTFRecordBase64Image(_this.props.asset);\n\n            case 3:\n              base64ImageData = _context.sent;\n\n              _this.setState({\n                tfRecordImage64: base64ImageData,\n                hasError: !!!base64ImageData\n              });\n\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n\n              _this.setState({\n                hasError: true\n              });\n\n              _this.onError(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 7]]);\n    }));\n\n    _this.onLoad = function () {\n      if (_this.props.onLoaded) {\n        _this.props.onLoaded(_this.image.current);\n      }\n\n      if (_this.props.onActivated) {\n        _this.props.onActivated(_this.image.current);\n      }\n\n      if (_this.props.onDeactivated) {\n        _this.props.onDeactivated(_this.image.current);\n      }\n    };\n\n    _this.onError = function (e) {\n      if (_this.props.onError && (_this.state.tfRecordImage64 || _this.state.hasError)) {\n        _this.props.onError(e);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(TFRecordAsset, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"img\", {\n        ref: this.image,\n        src: this.state.tfRecordImage64,\n        onLoad: this.onLoad,\n        onError: this.onError,\n        crossOrigin: \"anonymous\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.updateImage();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function () {\n      var _componentDidUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(prevProps) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.props.asset !== prevProps.asset)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                _context3.next = 3;\n                return this.updateImage();\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function componentDidUpdate(_x) {\n        return _componentDidUpdate.apply(this, arguments);\n      }\n\n      return componentDidUpdate;\n    }()\n  }, {\n    key: \"getTFRecordBase64Image\",\n    value: function () {\n      var _getTFRecordBase64Image = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(asset) {\n        var tfrecords, reader, buffer, image64;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.t0 = Buffer;\n                _context4.next = 3;\n                return HtmlFileReader.getAssetArray(asset);\n\n              case 3:\n                _context4.t1 = _context4.sent;\n                tfrecords = new _context4.t0(_context4.t1);\n                reader = new TFRecordsReader(tfrecords);\n                buffer = reader.getFeature(0, \"image/encoded\", FeatureType.Binary); // Get Base64\n\n                image64 = btoa(buffer.reduce(function (data, byte) {\n                  return data + String.fromCharCode(byte);\n                }, \"\"));\n                return _context4.abrupt(\"return\", \"data:image;base64,\" + image64);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getTFRecordBase64Image(_x2) {\n        return _getTFRecordBase64Image.apply(this, arguments);\n      }\n\n      return getTFRecordBase64Image;\n    }()\n  }]);\n\n  return TFRecordAsset;\n}(React.Component);","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/common/assetPreview/tfrecordAsset.tsx"],"names":["React","HtmlFileReader","TFRecordsReader","FeatureType","TFRecordAsset","state","tfRecordImage64","hasError","image","createRef","updateImage","getTFRecordBase64Image","props","asset","base64ImageData","setState","onError","onLoad","onLoaded","current","onActivated","onDeactivated","e","prevProps","Buffer","getAssetArray","tfrecords","reader","buffer","getFeature","Binary","image64","btoa","reduce","data","byte","String","fromCharCode","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { IAssetProps } from \"./assetPreview\";\nimport { IAsset } from \"../../../../models/applicationState\";\nimport HtmlFileReader from \"../../../../common/htmlFileReader\";\nimport { TFRecordsReader } from \"../../../../providers/export/tensorFlowRecords/tensorFlowReader\";\nimport { FeatureType } from \"../../../../providers/export/tensorFlowRecords/tensorFlowBuilder\";\n\n/**\n * State for TFRecord Asset Image component\n * @member tfRecordImage64 - base64 representation of the image data\n * @member hasError - Whether or not there was an error loading the image data from the tf record\n */\nexport interface ITFRecordState {\n    tfRecordImage64: string;\n    hasError: boolean;\n}\n\n/**\n * React component that displays an image from a TFRecord asset file\n */\nexport class TFRecordAsset extends React.Component<IAssetProps, ITFRecordState> {\n    public state: ITFRecordState = {\n        tfRecordImage64: \"\",\n        hasError: false,\n    };\n\n    private image: React.RefObject<HTMLImageElement> = React.createRef();\n\n    public render() {\n        return (\n            <img ref={this.image}\n                src={this.state.tfRecordImage64}\n                onLoad={this.onLoad}\n                onError={this.onError}\n                crossOrigin=\"anonymous\" />\n        );\n    }\n\n    public async componentDidMount() {\n        await this.updateImage();\n    }\n\n    public async componentDidUpdate(prevProps: Readonly<IAssetProps>) {\n        if (this.props.asset !== prevProps.asset) {\n            await this.updateImage();\n        }\n    }\n\n    private updateImage = async (): Promise<void> => {\n        try {\n            const base64ImageData = await this.getTFRecordBase64Image(this.props.asset);\n            this.setState({\n                tfRecordImage64: base64ImageData,\n                hasError: !(!!base64ImageData),\n            });\n        } catch (e) {\n            this.setState({\n                hasError: true,\n            });\n\n            this.onError(e);\n        }\n    }\n\n    private onLoad = () => {\n        if (this.props.onLoaded) {\n            this.props.onLoaded(this.image.current);\n        }\n        if (this.props.onActivated) {\n            this.props.onActivated(this.image.current);\n        }\n        if (this.props.onDeactivated) {\n            this.props.onDeactivated(this.image.current);\n        }\n    }\n\n    private onError = (e: React.SyntheticEvent<Element>) => {\n        if (this.props.onError && (this.state.tfRecordImage64 || this.state.hasError)) {\n            this.props.onError(e);\n        }\n    }\n\n    private async getTFRecordBase64Image(asset: IAsset): Promise<string> {\n        const tfrecords = new Buffer(await HtmlFileReader.getAssetArray(asset));\n        const reader = new TFRecordsReader(tfrecords);\n        const buffer = reader.getFeature(0, \"image/encoded\", FeatureType.Binary) as Uint8Array;\n\n        // Get Base64\n        const image64 = btoa(buffer.reduce((data, byte) => data + String.fromCharCode(byte), \"\"));\n        return \"data:image;base64,\" + image64;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
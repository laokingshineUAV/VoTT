{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar CanvasTools_Filter_1 = require(\"./CanvasTools.Filter\");\n\nvar Rect_1 = require(\"./Core/Rect\");\n\nvar ISelectorSettings_1 = require(\"./Interface/ISelectorSettings\");\n\nvar RegionsManager_1 = require(\"./Region/RegionsManager\");\n\nvar AreaSelector_1 = require(\"./Selection/AreaSelector\");\n\nvar ToolbarIcon_1 = require(\"./Toolbar/ToolbarIcon\");\n\nvar Toolbar_1 = require(\"./Toolbar/Toolbar\");\n/**\r\n * Wraps internal CanvasTools components into one Editor experience.\r\n */\n\n\nvar Editor =\n/*#__PURE__*/\nfunction () {\n  function Editor(container, areaSelector, regionsManager, filterPipeline) {\n    var _this = this;\n\n    _classCallCheck(this, Editor);\n\n    /**\r\n     * Auto-resize flag to automatically update editor internals when the container (window) size is changed.\r\n     */\n    this.autoResize = true;\n    /**\r\n     * Internal reference to the RegionsManager freezing state.\r\n     */\n\n    this.isRMFrozen = false; // Create SVG Element\n\n    this.contentCanvas = this.createCanvasElement();\n    this.editorSVG = this.createSVGElement();\n    this.editorDiv = container;\n    this.editorDiv.classList.add(\"CanvasToolsEditor\");\n    this.editorDiv.append(this.contentCanvas);\n    this.editorDiv.append(this.editorSVG); // automatically resize internals on window resize\n\n    window.addEventListener(\"resize\", function (e) {\n      if (_this.autoResize) {\n        _this.resize(_this.editorDiv.offsetWidth, _this.editorDiv.offsetHeight);\n      }\n    }); // Init regionsManager\n\n    var rmCallbacks = {\n      onChange: null,\n      onManipulationBegin: function onManipulationBegin(region) {\n        _this.areaSelector.hide();\n\n        if (typeof _this.onManipulationBegin === \"function\") {\n          _this.onManipulationBegin(region);\n        }\n      },\n      onManipulationEnd: function onManipulationEnd(region) {\n        _this.areaSelector.show();\n\n        if (typeof _this.onManipulationEnd === \"function\") {\n          _this.onManipulationEnd(region);\n        }\n      },\n      onRegionSelected: function onRegionSelected(id, multiselection) {\n        if (typeof _this.onRegionSelected === \"function\") {\n          _this.onRegionSelected(id, multiselection);\n        }\n      },\n      onRegionMove: function onRegionMove(id, regionData) {\n        if (typeof _this.onRegionMove === \"function\") {\n          _this.onRegionMove(id, regionData);\n        }\n      },\n      onRegionMoveBegin: function onRegionMoveBegin(id, regionData) {\n        if (typeof _this.onRegionMoveBegin === \"function\") {\n          _this.onRegionMoveBegin(id, regionData);\n        }\n      },\n      onRegionMoveEnd: function onRegionMoveEnd(id, regionData) {\n        if (typeof _this.onRegionMoveEnd === \"function\") {\n          _this.onRegionMoveEnd(id, regionData);\n        }\n      },\n      onRegionDelete: function onRegionDelete(id, regionData) {\n        if (typeof _this.onRegionDelete === \"function\") {\n          _this.onRegionDelete(id, regionData);\n        }\n      }\n    };\n\n    if (regionsManager !== null && regionsManager !== undefined) {\n      this.regionsManager = regionsManager;\n      regionsManager.callbacks = rmCallbacks;\n    } else {\n      this.regionsManager = new RegionsManager_1.RegionsManager(this.editorSVG, rmCallbacks);\n    } // Init areaSeletor\n\n\n    var asCallbacks = {\n      onSelectionBegin: function onSelectionBegin() {\n        _this.isRMFrozen = _this.regionsManager.isFrozen;\n\n        _this.regionsManager.freeze();\n\n        if (typeof _this.onSelectionBegin === \"function\") {\n          _this.onSelectionBegin();\n        }\n      },\n      onSelectionEnd: function onSelectionEnd(regionData) {\n        if (!_this.isRMFrozen) {\n          _this.regionsManager.unfreeze();\n        }\n\n        if (typeof _this.onSelectionEnd === \"function\") {\n          _this.onSelectionEnd(regionData);\n        }\n      }\n    };\n\n    if (areaSelector !== null && areaSelector !== undefined) {\n      this.areaSelector = areaSelector;\n      this.areaSelector.callbacks = asCallbacks;\n    } else {\n      this.areaSelector = new AreaSelector_1.AreaSelector(this.editorSVG, asCallbacks);\n    } // Init filterPipeline\n\n\n    if (filterPipeline !== undefined && filterPipeline !== null) {\n      this.filterPipeline = filterPipeline;\n    } else {\n      this.filterPipeline = new CanvasTools_Filter_1.FilterPipeline();\n    } // Adjust editor size\n\n\n    this.resize(container.offsetWidth, container.offsetHeight); // Add proxy to regionsManager, areaSelector and filterPipeline;\n\n    this.mergedAPI = new Proxy(this, {\n      get: function get(target, prop) {\n        var p;\n        var t;\n\n        if (prop in target) {\n          t = target;\n          p = t[prop];\n        } else if (prop in target.regionsManager) {\n          t = target.RM;\n          p = t[prop];\n        } else if (prop in target.areaSelector) {\n          t = target.AS;\n          p = t[prop];\n        } else if (prop in target.filterPipeline) {\n          t = target.FP;\n          p = t[prop];\n        } else {\n          p = undefined;\n        }\n\n        if (typeof p === \"function\") {\n          return function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            p.apply(t, args);\n          };\n        } else {\n          return p;\n        }\n      }\n    });\n  }\n  /**\r\n   * A proxi wrapper around internal API for the `Editor` itself, `RegionsManager` (`RM`), `AreaSelector` (`AS`) and\r\n   * `FilterPipeline` (`FP`).\r\n   * @remarks As of now those apis do not overlap, so all methods/properties might be mapped from unified API.\r\n   */\n\n\n  _createClass(Editor, [{\n    key: \"addToolbar\",\n\n    /**\r\n     * Creates a new toolbar in specified div-container\r\n     * @param container - The div-container for the toolbar.\r\n     * @param toolbarSet - Icons set for the toolbar.\r\n     * @param iconsPath - Path to the toolbar icons.\r\n     */\n    value: function addToolbar(container, toolbarSet, iconsPath) {\n      var _this2 = this;\n\n      var svg = this.createSVGElement();\n      container.append(svg);\n      this.toolbar = new Toolbar_1.Toolbar(svg);\n\n      if (toolbarSet === null) {\n        toolbarSet = Editor.FullToolbarSet;\n      }\n\n      var activeSelector;\n      toolbarSet.forEach(function (item) {\n        if (item.type === ToolbarIcon_1.ToolbarItemType.SEPARATOR) {\n          _this2.toolbar.addSeparator();\n        } else if (item.type === ToolbarIcon_1.ToolbarItemType.SELECTOR) {\n          _this2.toolbar.addSelector({\n            action: item.action,\n            iconUrl: iconsPath + item.iconFile,\n            tooltip: item.tooltip,\n            keycode: item.keycode,\n            width: item.width,\n            height: item.height\n          }, function (action) {\n            item.actionCallback(action, _this2.regionsManager, _this2.areaSelector);\n          });\n\n          if (item.activate) {\n            activeSelector = item.action;\n          }\n        } else if (item.type === ToolbarIcon_1.ToolbarItemType.SWITCH) {\n          _this2.toolbar.addSwitch({\n            action: item.action,\n            iconUrl: iconsPath + item.iconFile,\n            tooltip: item.tooltip,\n            keycode: item.keycode,\n            width: item.width,\n            height: item.height\n          }, function (action) {\n            item.actionCallback(action, _this2.regionsManager, _this2.areaSelector);\n          });\n\n          _this2.toolbar.setSwitch(item.action, item.activate);\n        }\n      });\n      this.toolbar.select(activeSelector);\n    }\n    /**\r\n     * Updates the content source for the editor.\r\n     * @param source - Content source.\r\n     * @returns A new `Promise` resolved when content is drawn and Editor is resized.\r\n     */\n\n  }, {\n    key: \"addContentSource\",\n    value: function () {\n      var _addContentSource = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(source) {\n        var _this3 = this;\n\n        var buffCnvs, context;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                buffCnvs = document.createElement(\"canvas\");\n                context = buffCnvs.getContext(\"2d\");\n\n                if (source instanceof HTMLImageElement || source instanceof HTMLCanvasElement) {\n                  this.sourceWidth = source.width;\n                  this.sourceHeight = source.height;\n                } else if (source instanceof HTMLVideoElement) {\n                  this.sourceWidth = source.videoWidth;\n                  this.sourceHeight = source.videoHeight;\n                }\n\n                buffCnvs.width = this.sourceWidth;\n                buffCnvs.height = this.sourceHeight;\n                context.drawImage(source, 0, 0, buffCnvs.width, buffCnvs.height);\n                return _context.abrupt(\"return\", this.filterPipeline.applyToCanvas(buffCnvs).then(function (bcnvs) {\n                  // Copy buffer to the canvas on screen\n                  _this3.contentCanvas.width = bcnvs.width;\n                  _this3.contentCanvas.height = bcnvs.height;\n\n                  var imgContext = _this3.contentCanvas.getContext(\"2d\");\n\n                  imgContext.drawImage(bcnvs, 0, 0, bcnvs.width, bcnvs.height);\n                }).then(function () {\n                  // resize the editor size to adjust to the new content size\n                  _this3.resize(_this3.editorDiv.offsetWidth, _this3.editorDiv.offsetHeight);\n                }));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function addContentSource(_x) {\n        return _addContentSource.apply(this, arguments);\n      }\n\n      return addContentSource;\n    }()\n    /**\r\n     * Resize editor to new width and height.\r\n     * @remarks - Use if the `autoResize` is `false`.\r\n     * @param containerWidth - The new container width.\r\n     * @param containerHeight - The new container height.\r\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize(containerWidth, containerHeight) {\n      this.frameWidth = containerWidth;\n      this.frameHeight = containerHeight;\n      var imgRatio = this.contentCanvas.width / this.contentCanvas.height;\n      var containerRatio = containerWidth / containerHeight;\n      var hpadding = 0;\n      var vpadding = 0;\n\n      if (imgRatio > containerRatio) {\n        vpadding = (containerHeight - containerWidth / imgRatio) / 2;\n        this.editorDiv.style.height = \"calc(100% - \".concat(vpadding * 2, \"px)\");\n        this.editorDiv.style.width = \"\";\n      } else {\n        hpadding = (containerWidth - containerHeight * imgRatio) / 2;\n        this.editorDiv.style.height = \"\";\n        this.editorDiv.style.width = \"calc(100% - \".concat(hpadding * 2, \"px)\");\n      }\n\n      this.editorDiv.style.padding = \"\".concat(vpadding, \"px \").concat(hpadding, \"px\");\n      this.frameWidth = this.editorSVG.clientWidth;\n      this.frameHeight = this.editorSVG.clientHeight;\n      this.areaSelector.resize(this.frameWidth, this.frameHeight);\n      this.regionsManager.resize(this.frameWidth, this.frameHeight);\n    }\n    /**\r\n     * Short reference to the `RegionsManager` component.\r\n     */\n\n  }, {\n    key: \"scaleRegionToSourceSize\",\n\n    /**\r\n     * Scales the `RegionData` object from frame to source size.\r\n     * @param regionData - The `RegionData` object.\r\n     * @param sourceWidth - [Optional] The source width.\r\n     * @param sourceHeight - [Optional] The source height.\r\n     * @returns Resized `RegionData` object.\r\n     */\n    value: function scaleRegionToSourceSize(regionData, sourceWidth, sourceHeight) {\n      var sw = sourceWidth !== undefined ? sourceWidth : this.sourceWidth;\n      var sh = sourceHeight !== undefined ? sourceHeight : this.sourceHeight;\n      var xf = sw / this.frameWidth;\n      var yf = sh / this.frameHeight;\n      var rd = regionData.copy();\n      rd.scale(xf, yf);\n      return rd;\n    }\n    /**\r\n     * Scales the `RegionData` object from source to frame size.\r\n     * @param regionData - The `RegionData` object.\r\n     * @param sourceWidth - [Optional] The source width.\r\n     * @param sourceHeight - [Optional] The source height.\r\n     * @returns Resized `RegionData` object.\r\n     */\n\n  }, {\n    key: \"scaleRegionToFrameSize\",\n    value: function scaleRegionToFrameSize(regionData, sourceWidth, sourceHeight) {\n      var sw = sourceWidth !== undefined ? sourceWidth : this.sourceWidth;\n      var sh = sourceHeight !== undefined ? sourceHeight : this.sourceHeight;\n      var xf = this.frameWidth / sw;\n      var yf = this.frameHeight / sh;\n      var rd = regionData.copy();\n      rd.scale(xf, yf);\n      return rd;\n    }\n    /**\r\n     * Internal helper to create a new SVG element.\r\n     */\n\n  }, {\n    key: \"createSVGElement\",\n    value: function createSVGElement() {\n      var svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n      svg.innerHTML = Editor.SVGDefsTemplate;\n      return svg;\n    }\n    /**\r\n     * Internal helper to create a new HTMLCanvas element.\r\n     */\n\n  }, {\n    key: \"createCanvasElement\",\n    value: function createCanvasElement() {\n      var canvas = document.createElement(\"canvas\");\n      return canvas;\n    }\n  }, {\n    key: \"api\",\n    get: function get() {\n      return this.mergedAPI;\n    }\n  }, {\n    key: \"RM\",\n    get: function get() {\n      return this.regionsManager;\n    }\n    /**\r\n     * Short reference to the `AreaSelector` component.\r\n     */\n\n  }, {\n    key: \"AS\",\n    get: function get() {\n      return this.areaSelector;\n    }\n    /**\r\n     * Short reference to the `FilterPipeline` component.\r\n     */\n\n  }, {\n    key: \"FP\",\n    get: function get() {\n      return this.filterPipeline;\n    }\n  }]);\n\n  return Editor;\n}();\n/**\r\n * The toolbar icons preset with all available features.\r\n */\n\n\nEditor.FullToolbarSet = [{\n  type: ToolbarIcon_1.ToolbarItemType.SELECTOR,\n  action: \"none-select\",\n  iconFile: \"none-selection.svg\",\n  tooltip: \"Regions Manipulation (M)\",\n  keycode: \"KeyM\",\n  actionCallback: function actionCallback(action, rm, sl) {\n    sl.setSelectionMode({\n      mode: ISelectorSettings_1.SelectionMode.NONE\n    });\n  },\n  activate: false\n}, {\n  type: ToolbarIcon_1.ToolbarItemType.SEPARATOR\n}, {\n  type: ToolbarIcon_1.ToolbarItemType.SELECTOR,\n  action: \"point-select\",\n  iconFile: \"point-selection.svg\",\n  tooltip: \"Point-selection (P)\",\n  keycode: \"KeyP\",\n  actionCallback: function actionCallback(action, rm, sl) {\n    sl.setSelectionMode({\n      mode: ISelectorSettings_1.SelectionMode.POINT\n    });\n  },\n  activate: false\n}, {\n  type: ToolbarIcon_1.ToolbarItemType.SELECTOR,\n  action: \"rect-select\",\n  iconFile: \"rect-selection.svg\",\n  tooltip: \"Rectangular box (R)\",\n  keycode: \"KeyR\",\n  actionCallback: function actionCallback(action, rm, sl) {\n    sl.setSelectionMode({\n      mode: ISelectorSettings_1.SelectionMode.RECT\n    });\n  },\n  activate: true\n}, {\n  type: ToolbarIcon_1.ToolbarItemType.SELECTOR,\n  action: \"copy-select\",\n  iconFile: \"copy-t-selection.svg\",\n  tooltip: \"Template-based box (T)\",\n  keycode: \"KeyT\",\n  actionCallback: function actionCallback(action, rm, sl) {\n    var regions = rm.getSelectedRegions();\n\n    if (regions !== undefined && regions.length > 0) {\n      var r = regions[0];\n      sl.setSelectionMode({\n        mode: ISelectorSettings_1.SelectionMode.COPYRECT,\n        template: new Rect_1.Rect(r.regionData.width, r.regionData.height)\n      });\n    } else {\n      sl.setSelectionMode({\n        mode: ISelectorSettings_1.SelectionMode.COPYRECT,\n        template: new Rect_1.Rect(40, 40)\n      });\n    }\n  },\n  activate: false\n}, {\n  type: ToolbarIcon_1.ToolbarItemType.SELECTOR,\n  action: \"polyline-select\",\n  iconFile: \"polyline-selection.svg\",\n  tooltip: \"Polyline-selection (Y)\",\n  keycode: \"KeyY\",\n  actionCallback: function actionCallback(action, rm, sl) {\n    sl.setSelectionMode({\n      mode: ISelectorSettings_1.SelectionMode.POLYLINE\n    });\n  },\n  activate: false\n}, {\n  type: ToolbarIcon_1.ToolbarItemType.SELECTOR,\n  action: \"polygon-select\",\n  iconFile: \"polygon-selection.svg\",\n  tooltip: \"Polygon-selection (O)\",\n  keycode: \"KeyO\",\n  actionCallback: function actionCallback(action, rm, sl) {\n    sl.setSelectionMode({\n      mode: ISelectorSettings_1.SelectionMode.POLYGON\n    });\n  },\n  activate: false\n}, {\n  type: ToolbarIcon_1.ToolbarItemType.SEPARATOR\n}, {\n  type: ToolbarIcon_1.ToolbarItemType.SWITCH,\n  action: \"selection-lock\",\n  iconFile: \"selection-lock.svg\",\n  tooltip: \"Lock/unlock regions (L)\",\n  keycode: \"KeyL\",\n  actionCallback: function actionCallback(action, rm, sl) {\n    rm.toggleFreezeMode();\n  },\n  activate: false\n}];\n/**\r\n * The toolbar icons preset with only rect-related features.\r\n */\n\nEditor.RectToolbarSet = [{\n  type: ToolbarIcon_1.ToolbarItemType.SELECTOR,\n  action: \"none-select\",\n  iconFile: \"none-selection.svg\",\n  tooltip: \"Regions Manipulation (M)\",\n  keycode: \"KeyM\",\n  actionCallback: function actionCallback(action, rm, sl) {\n    sl.setSelectionMode({\n      mode: ISelectorSettings_1.SelectionMode.NONE\n    });\n  },\n  activate: false\n}, {\n  type: ToolbarIcon_1.ToolbarItemType.SEPARATOR\n}, {\n  type: ToolbarIcon_1.ToolbarItemType.SELECTOR,\n  action: \"rect-select\",\n  iconFile: \"rect-selection.svg\",\n  tooltip: \"Rectangular box (R)\",\n  keycode: \"KeyR\",\n  actionCallback: function actionCallback(action, rm, sl) {\n    sl.setSelectionMode({\n      mode: ISelectorSettings_1.SelectionMode.RECT\n    });\n  },\n  activate: true\n}, {\n  type: ToolbarIcon_1.ToolbarItemType.SELECTOR,\n  action: \"copy-select\",\n  iconFile: \"copy-t-selection.svg\",\n  tooltip: \"Template-based box (T)\",\n  keycode: \"KeyT\",\n  actionCallback: function actionCallback(action, rm, sl) {\n    var regions = rm.getSelectedRegions();\n\n    if (regions !== undefined && regions.length > 0) {\n      var r = regions[0];\n      sl.setSelectionMode({\n        mode: ISelectorSettings_1.SelectionMode.COPYRECT,\n        template: new Rect_1.Rect(r.regionData.width, r.regionData.height)\n      });\n    } else {\n      sl.setSelectionMode({\n        mode: ISelectorSettings_1.SelectionMode.COPYRECT,\n        template: new Rect_1.Rect(40, 40)\n      });\n    }\n  },\n  activate: false\n}, {\n  type: ToolbarIcon_1.ToolbarItemType.SEPARATOR\n}, {\n  type: ToolbarIcon_1.ToolbarItemType.SWITCH,\n  action: \"selection-lock\",\n  iconFile: \"selection-lock.svg\",\n  tooltip: \"Lock/unlock regions (L)\",\n  keycode: \"KeyL\",\n  actionCallback: function actionCallback(action, rm, sl) {\n    rm.toggleFreezeMode();\n  },\n  activate: false\n}];\n/**\r\n * Internal SVG template to define shadow filter.\r\n */\n\nEditor.SVGDefsTemplate = \"\\n        <defs>\\n            <filter id=\\\"black-glow\\\">\\n                <feGaussianBlur in=\\\"SourceAlpha\\\" stdDeviation=\\\"2\\\" />\\n                <feOffset dx=\\\"0\\\" dy=\\\"0\\\" result=\\\"offsetblur\\\" />\\n                <feComponentTransfer>\\n                    <feFuncA type=\\\"linear\\\" slope=\\\"0.8\\\" />\\n                </feComponentTransfer>\\n                <feMerge>\\n                    <feMergeNode />\\n                    <feMergeNode in=\\\"SourceGraphic\\\" />\\n                </feMerge>\\n            </filter>\\n        </defs>\";\nexports.Editor = Editor;","map":null,"metadata":{},"sourceType":"script"}
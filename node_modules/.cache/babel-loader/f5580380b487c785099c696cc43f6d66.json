{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Rect_1 = require(\"../Core/Rect\");\n\nvar ISelectorSettings_1 = require(\"../Interface/ISelectorSettings\");\n\nvar PointSelector_1 = require(\"./Selectors/PointSelector\");\n\nvar PolylineSelector_1 = require(\"./Selectors/PolylineSelector\");\n\nvar PolygonSelector_1 = require(\"./Selectors/PolygonSelector\");\n\nvar RectCopySelector_1 = require(\"./Selectors/RectCopySelector\");\n\nvar RectSelector_1 = require(\"./Selectors/RectSelector\");\n/**\r\n * The region selection manager.\r\n * @remarks The naming of the class is historical per the idea to specify the\r\n * region area to be selected. Thus AreaSelector.\r\n * @todo Consider renaming.\r\n */\n\n\nvar AreaSelector =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Creates a new `AreaSelector` manager.\r\n   * @param svgHost - The host SVG element.\r\n   * @param callbacks - The collection of callbacks.\r\n   */\n  function AreaSelector(svgHost, callbacks) {\n    _classCallCheck(this, AreaSelector);\n\n    /**\r\n     * Internal flag to track selector visibility.\r\n     */\n    this.isVisible = true;\n    this.parentNode = svgHost;\n\n    if (callbacks !== undefined) {\n      this.callbacks = callbacks;\n    } else {\n      this.callbacks = {\n        onLocked: null,\n        onSelectionBegin: null,\n        onSelectionEnd: null,\n        onUnlocked: null\n      };\n    }\n\n    this.buildUIElements();\n  }\n  /**\r\n   * Resizes selectors to specified `width` and `height`.\r\n   * @param width - The new `width` for selector.\r\n   * @param height - The new `height` for selector.\r\n   */\n\n\n  _createClass(AreaSelector, [{\n    key: \"resize\",\n    value: function resize(width, height) {\n      if (width !== undefined && height !== undefined) {\n        this.boundRect.resize(width, height);\n      } else {\n        this.boundRect.resize(this.parentNode.width.baseVal.value, this.parentNode.height.baseVal.value);\n      }\n\n      if (this.selector !== null) {\n        this.selector.resize(width, height);\n      }\n    }\n    /**\r\n     * Enables the current selector.\r\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      if (this.selector !== null) {\n        this.selector.enable();\n        this.selector.resize(this.boundRect.width, this.boundRect.height);\n      }\n    }\n    /**\r\n     * Disables the current selector.\r\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this.selector !== null) {\n        this.selector.disable();\n      }\n    }\n    /**\r\n     * Makes current selector visible and enabled.\r\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.enable();\n      this.isVisible = true;\n    }\n    /**\r\n     * Makes current selector hidden and disabled.\r\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.disable();\n      this.isVisible = false;\n    }\n  }, {\n    key: \"setSelectionMode\",\n    value: function setSelectionMode(settings) {\n      this.disable();\n\n      if (settings === null || settings === undefined) {\n        this.selectorSettings = {\n          mode: ISelectorSettings_1.SelectionMode.NONE\n        };\n      } else if (settings.mode !== undefined) {\n        this.selectorSettings = settings;\n      } else {\n        this.selectorSettings = {\n          mode: settings\n        };\n      }\n\n      var selectionMode = this.selectorSettings.mode;\n\n      if (selectionMode === ISelectorSettings_1.SelectionMode.NONE) {\n        this.selector = null;\n        return;\n      } else if (selectionMode === ISelectorSettings_1.SelectionMode.COPYRECT) {\n        this.selector = this.rectCopySelector;\n        var template = this.selectorSettings.template;\n\n        if (template !== undefined) {\n          this.rectCopySelector.setTemplate(template);\n        } else {\n          this.rectCopySelector.setTemplate(AreaSelector.DefaultTemplateSize);\n        }\n      } else if (selectionMode === ISelectorSettings_1.SelectionMode.RECT) {\n        this.selector = this.rectSelector;\n      } else if (selectionMode === ISelectorSettings_1.SelectionMode.POINT) {\n        this.selector = this.pointSelector;\n      } else if (selectionMode === ISelectorSettings_1.SelectionMode.POLYLINE) {\n        this.selector = this.polylineSelector;\n      } else if (selectionMode === ISelectorSettings_1.SelectionMode.POLYGON) {\n        this.selector = this.polygonSelector;\n      } // restore enablement status\n\n\n      this.enable();\n\n      if (this.isVisible) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n    /**\r\n     * Returns current options (settings) for selector.\r\n     */\n\n  }, {\n    key: \"getSelectorSettings\",\n    value: function getSelectorSettings() {\n      return this.selectorSettings;\n    }\n    /**\r\n     * Creates UI of the AreaSelector.\r\n     */\n\n  }, {\n    key: \"buildUIElements\",\n    value: function buildUIElements() {\n      this.paper = Snap(this.parentNode);\n      this.boundRect = new Rect_1.Rect(this.parentNode.width.baseVal.value, this.parentNode.height.baseVal.value);\n      this.areaSelectorLayer = this.paper.g();\n      this.areaSelectorLayer.addClass(\"areaSelector\");\n      this.rectSelector = new RectSelector_1.RectSelector(this.parentNode, this.paper, this.boundRect, this.callbacks);\n      this.rectCopySelector = new RectCopySelector_1.RectCopySelector(this.parentNode, this.paper, this.boundRect, new Rect_1.Rect(0, 0), this.callbacks);\n      this.pointSelector = new PointSelector_1.PointSelector(this.parentNode, this.paper, this.boundRect, this.callbacks);\n      this.polylineSelector = new PolylineSelector_1.PolylineSelector(this.parentNode, this.paper, this.boundRect, this.callbacks);\n      this.polygonSelector = new PolygonSelector_1.PolygonSelector(this.parentNode, this.paper, this.boundRect, this.callbacks);\n      this.selector = this.rectSelector;\n      this.rectSelector.enable();\n      this.rectCopySelector.disable();\n      this.pointSelector.disable();\n      this.polylineSelector.disable();\n      this.polygonSelector.disable();\n      this.selector.hide();\n      this.areaSelectorLayer.add(this.rectSelector.node);\n      this.areaSelectorLayer.add(this.rectCopySelector.node);\n      this.areaSelectorLayer.add(this.pointSelector.node);\n      this.areaSelectorLayer.add(this.polylineSelector.node);\n      this.areaSelectorLayer.add(this.polygonSelector.node);\n    }\n  }]);\n\n  return AreaSelector;\n}();\n/**\r\n * Default template size for the `RectCopySelector`.\r\n * @todo Move to the `RectCopySelector` class.\r\n */\n\n\nAreaSelector.DefaultTemplateSize = new Rect_1.Rect(20, 20);\nexports.AreaSelector = AreaSelector;","map":null,"metadata":{},"sourceType":"script"}
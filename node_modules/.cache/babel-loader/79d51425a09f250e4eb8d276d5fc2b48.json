{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { SamplingScoreGenerator } from '../SamplingScoreGenerator';\nimport { _InternalMessageId, LoggingSeverity, DiagnosticLogger, CoreUtils } from '@microsoft/applicationinsights-core-js';\n\nvar Sample =\n/** @class */\nfunction () {\n  function Sample(sampleRate, logger) {\n    // We're using 32 bit math, hence max value is (2^31 - 1)\n    this.INT_MAX_VALUE = 2147483647;\n\n    if (CoreUtils.isNullOrUndefined(logger)) {\n      this._logger = new DiagnosticLogger();\n    } else {\n      this._logger = logger;\n    }\n\n    if (sampleRate > 100 || sampleRate < 0) {\n      this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.SampleRateOutOfRange, \"Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.\", {\n        samplingRate: sampleRate\n      }, true);\n\n      this.sampleRate = 100;\n    }\n\n    this.sampleRate = sampleRate;\n    this.samplingScoreGenerator = new SamplingScoreGenerator();\n  }\n  /**\r\n  * Determines if an envelope is sampled in (i.e. will be sent) or not (i.e. will be dropped).\r\n  */\n\n\n  Sample.prototype.isSampledIn = function (envelope) {\n    // return true as sampling will move to different extension\n    return true;\n  };\n\n  return Sample;\n}();\n\nexport { Sample };","map":null,"metadata":{},"sourceType":"module"}
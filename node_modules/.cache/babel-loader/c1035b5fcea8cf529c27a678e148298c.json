{"ast":null,"code":"import _toConsumableArray from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/common/tagInput/tagInput.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Align from \"rc-align\";\nimport { randomIntInRange } from \"../../../../common/utils\";\nimport { ColorPicker } from \"../colorPicker\";\nimport \"./tagInput.scss\";\nimport \"../condensedList/condensedList.scss\";\nimport TagInputItem from \"./tagInputItem\";\nimport TagInputToolbar from \"./tagInputToolbar\";\nimport { toast } from \"react-toastify\";\nimport { strings } from \"../../../../common/strings\"; // tslint:disable-next-line:no-var-requires\n\nvar tagColors = require(\"../../common/tagColors.json\");\n\nfunction defaultDOMNode() {\n  return document.createElement(\"div\");\n}\n\nexport var TagInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TagInput, _React$Component);\n\n  function TagInput() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TagInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TagInput)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      tags: _this.props.tags || [],\n      clickedColor: false,\n      showColorPicker: false,\n      addTags: _this.props.showTagInputBox,\n      searchTags: _this.props.showSearchBox,\n      searchQuery: \"\",\n      selectedTag: null,\n      editingTag: null,\n      editingTagNode: null,\n      portalElement: defaultDOMNode()\n    };\n    _this.tagItemRefs = new Map();\n    _this.portalDiv = document.createElement(\"div\");\n\n    _this.getTagNode = function (tag) {\n      var itemRef = tag ? _this.tagItemRefs.get(tag.name) : null;\n      return itemRef ? ReactDOM.findDOMNode(itemRef) : defaultDOMNode();\n    };\n\n    _this.onEditTag = function (tag) {\n      var editingTag = _this.state.editingTag;\n      var newEditingTag = editingTag && editingTag.name === tag.name ? null : tag;\n\n      _this.setState({\n        editingTag: newEditingTag,\n        editingTagNode: _this.getTagNode(newEditingTag)\n      });\n\n      if (_this.state.clickedColor) {\n        _this.setState({\n          showColorPicker: !_this.state.showColorPicker\n        });\n      }\n    };\n\n    _this.onLockTag = function (tag) {\n      if (!tag) {\n        return;\n      }\n\n      var lockedTags = _toConsumableArray(_this.props.lockedTags);\n\n      if (lockedTags.find(function (t) {\n        return t === tag.name;\n      })) {\n        lockedTags = lockedTags.filter(function (t) {\n          return t !== tag.name;\n        });\n      } else {\n        lockedTags.push(tag.name);\n      }\n\n      _this.props.onLockedTagsChange(lockedTags);\n    };\n\n    _this.onReOrder = function (tag, displacement) {\n      if (!tag) {\n        return;\n      }\n\n      var tags = _toConsumableArray(_this.state.tags);\n\n      var currentIndex = tags.indexOf(tag);\n      var newIndex = currentIndex + displacement;\n\n      if (newIndex < 0 || newIndex >= tags.length) {\n        return;\n      }\n\n      tags.splice(currentIndex, 1);\n      tags.splice(newIndex, 0, tag);\n\n      _this.setState({\n        tags: tags\n      }, function () {\n        return _this.props.onChange(tags);\n      });\n    };\n\n    _this.handleColorChange = function (color) {\n      var tag = _this.state.editingTag;\n\n      var tags = _this.state.tags.map(function (t) {\n        return t.name === tag.name ? {\n          name: t.name,\n          color: color\n        } : t;\n      });\n\n      _this.setState({\n        tags: tags,\n        editingTag: null,\n        showColorPicker: false\n      }, function () {\n        return _this.props.onChange(tags);\n      });\n    };\n\n    _this.updateTag = function (tag, newTag) {\n      if (tag.name === newTag.name && tag.color === newTag.color) {\n        return;\n      }\n\n      if (!newTag.name.length) {\n        toast.warn(strings.tags.warnings.emptyName);\n        return;\n      }\n\n      var nameChange = tag.name !== newTag.name;\n\n      if (nameChange && _this.state.tags.some(function (t) {\n        return t.name === newTag.name;\n      })) {\n        toast.warn(strings.tags.warnings.existingName);\n        return;\n      }\n\n      if (nameChange && _this.props.onTagRenamed) {\n        _this.props.onTagRenamed(tag.name, newTag.name);\n\n        return;\n      }\n\n      var tags = _this.state.tags.map(function (t) {\n        return t.name === tag.name ? newTag : t;\n      });\n\n      _this.setState({\n        tags: tags,\n        editingTag: null,\n        selectedTag: newTag\n      }, function () {\n        _this.props.onChange(tags);\n      });\n    };\n\n    _this.getColorPickerPortal = function () {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, ReactDOM.createPortal(React.createElement(Align, {\n        align: _this.getAlignConfig(),\n        target: _this.getTarget,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"tag-input-color-picker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, _this.state.showColorPicker && React.createElement(ColorPicker, {\n        color: _this.state.editingTag && _this.state.editingTag.color,\n        colors: tagColors,\n        onEditColor: _this.handleColorChange,\n        show: _this.state.showColorPicker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }))), _this.state.portalElement));\n    };\n\n    _this.getAlignConfig = function () {\n      var coords = _this.getEditingTagCoords();\n\n      var isNearBottom = coords && coords.top > window.innerHeight / 2;\n      var alignCorner = isNearBottom ? \"b\" : \"t\";\n      var verticalOffset = isNearBottom ? 6 : -6;\n      return {\n        // Align top right of source node (color picker) with top left of target node (tag row)\n        points: [\"\".concat(alignCorner, \"r\"), \"\".concat(alignCorner, \"l\")],\n        // Offset source node by 10px in x and 20px in y\n        offset: [0, verticalOffset] // Offset targetNode by 30% of target node width in x and 40% of target node height\n        // targetOffset: [\"30%\", \"40%\"],\n        // Auto adjust position when source node is overflowed\n        // overflow: {adjustX: true, adjustY: true}\n\n      };\n    };\n\n    _this.getEditingTagCoords = function () {\n      var node = _this.state.editingTagNode;\n      return node ? node.getBoundingClientRect() : null;\n    };\n\n    _this.getTarget = function () {\n      return _this.state.editingTagNode || document;\n    };\n\n    _this.renderTagItems = function () {\n      var props = _this.createTagItemProps();\n\n      var query = _this.state.searchQuery;\n\n      _this.tagItemRefs.clear();\n\n      if (query.length) {\n        props = props.filter(function (prop) {\n          return prop.tag.name.toLowerCase().includes(query.toLowerCase());\n        });\n      }\n\n      return props.map(function (prop) {\n        return React.createElement(TagInputItem, Object.assign({\n          key: prop.tag.name,\n          ref: function ref(item) {\n            return _this.setTagItemRef(item, prop.tag);\n          }\n        }, prop, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 308\n          },\n          __self: this\n        }));\n      });\n    };\n\n    _this.setTagItemRef = function (item, tag) {\n      _this.tagItemRefs.set(tag.name, item);\n\n      return item;\n    };\n\n    _this.createTagItemProps = function () {\n      var tags = _this.state.tags;\n\n      var selectedRegionTagSet = _this.getSelectedRegionTagSet();\n\n      return tags.map(function (tag) {\n        return {\n          tag: tag,\n          index: tags.findIndex(function (t) {\n            return t.name === tag.name;\n          }),\n          isLocked: _this.props.lockedTags && _this.props.lockedTags.findIndex(function (t) {\n            return t === tag.name;\n          }) > -1,\n          isBeingEdited: _this.state.editingTag && _this.state.editingTag.name === tag.name,\n          isSelected: _this.state.selectedTag && _this.state.selectedTag.name === tag.name,\n          appliedToSelectedRegions: selectedRegionTagSet.has(tag.name),\n          onClick: _this.handleClick,\n          onChange: _this.updateTag\n        };\n      });\n    };\n\n    _this.getSelectedRegionTagSet = function () {\n      var result = new Set();\n\n      if (_this.props.selectedRegions) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _this.props.selectedRegions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var region = _step.value;\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = region.tags[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var tag = _step2.value;\n                result.add(tag);\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      return result;\n    };\n\n    _this.onAltClick = function (tag, clickedColor) {\n      var editingTag = _this.state.editingTag;\n      var newEditingTag = editingTag && editingTag.name === tag.name ? null : tag;\n\n      _this.setState({\n        editingTag: newEditingTag,\n        editingTagNode: _this.getTagNode(newEditingTag),\n        clickedColor: clickedColor,\n        showColorPicker: !_this.state.showColorPicker && clickedColor\n      });\n    };\n\n    _this.handleClick = function (tag, props) {\n      // Lock tags\n      if (props.ctrlKey && _this.props.onCtrlTagClick) {\n        _this.props.onCtrlTagClick(tag);\n\n        _this.setState({\n          clickedColor: props.clickedColor\n        });\n      } else if (props.altKey) {\n        // Edit tag\n        _this.onAltClick(tag, props.clickedColor);\n      } else {\n        // Select tag\n        var _this$state = _this.state,\n            _editingTag = _this$state.editingTag,\n            _selectedTag = _this$state.selectedTag;\n        var inEditMode = _editingTag && tag.name === _editingTag.name;\n        var alreadySelected = _selectedTag && _selectedTag.name === tag.name;\n        var newEditingTag = inEditMode ? null : _editingTag;\n\n        _this.setState({\n          editingTag: newEditingTag,\n          editingTagNode: _this.getTagNode(newEditingTag),\n          selectedTag: alreadySelected && !inEditMode ? null : tag,\n          clickedColor: props.clickedColor,\n          showColorPicker: false\n        }); // Only fire click event if a region is selected\n\n\n        if (_this.props.selectedRegions && _this.props.selectedRegions.length > 0 && _this.props.onTagClick && !inEditMode) {\n          _this.props.onTagClick(tag);\n        }\n      }\n    };\n\n    _this.deleteTag = function (tag) {\n      if (!tag) {\n        return;\n      }\n\n      if (_this.props.onTagDeleted) {\n        _this.props.onTagDeleted(tag.name);\n\n        return;\n      }\n\n      var index = _this.state.tags.indexOf(tag);\n\n      var tags = _this.state.tags.filter(function (t) {\n        return t.name !== tag.name;\n      });\n\n      _this.setState({\n        tags: tags,\n        selectedTag: _this.getNewSelectedTag(tags, index)\n      }, function () {\n        return _this.props.onChange(tags);\n      });\n\n      if (_this.props.lockedTags.find(function (l) {\n        return l === tag.name;\n      })) {\n        _this.props.onLockedTagsChange(_this.props.lockedTags.filter(function (lockedTag) {\n          return lockedTag !== tag.name;\n        }));\n      }\n    };\n\n    _this.getNewSelectedTag = function (tags, previouIndex) {\n      return tags.length ? tags[Math.min(tags.length - 1, previouIndex)] : null;\n    };\n\n    _this.onSearchKeyDown = function (event) {\n      if (event.key === \"Escape\") {\n        _this.setState({\n          searchTags: false\n        });\n      }\n    };\n\n    _this.onAddTagKeyDown = function (event) {\n      if (event.key === \"Enter\") {\n        // validate and add\n        var newTag = {\n          name: event.target.value,\n          color: _this.getNextColor()\n        };\n\n        if (newTag.name.length && !_this.state.tags.find(function (t) {\n          return t.name === newTag.name;\n        })) {\n          _this.addTag(newTag);\n\n          event.target.value = \"\";\n        } else if (!newTag.name.length) {\n          toast.warn(strings.tags.warnings.emptyName);\n        } else {\n          toast.warn(strings.tags.warnings.existingName);\n        }\n      }\n\n      if (event.key === \"Escape\") {\n        _this.setState({\n          addTags: false\n        });\n      }\n    };\n\n    _this.getNextColor = function () {\n      var tags = _this.state.tags;\n\n      if (tags.length > 0) {\n        var lastColor = tags[tags.length - 1].color;\n        var lastIndex = tagColors.findIndex(function (color) {\n          return color === lastColor;\n        });\n        var newIndex;\n\n        if (lastIndex > -1) {\n          newIndex = (lastIndex + 1) % tagColors.length;\n        } else {\n          newIndex = randomIntInRange(0, tagColors.length - 1);\n        }\n\n        return tagColors[newIndex];\n      } else {\n        return tagColors[0];\n      }\n    };\n\n    _this.addTag = function (tag) {\n      if (!_this.state.tags.find(function (t) {\n        return t.name === tag.name;\n      })) {\n        var _tags = [].concat(_toConsumableArray(_this.state.tags), [tag]);\n\n        _this.setState({\n          tags: _tags\n        }, function () {\n          return _this.props.onChange(_tags);\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(TagInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"tag-input condensed-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        className: \"condensed-list-header tag-input-header bg-darker-2 p-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"condensed-list-title tag-input-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Tags\"), React.createElement(TagInputToolbar, {\n        selectedTag: this.state.selectedTag,\n        onAddTags: function onAddTags() {\n          return _this2.setState({\n            addTags: !_this2.state.addTags\n          });\n        },\n        onSearchTags: function onSearchTags() {\n          return _this2.setState({\n            searchTags: !_this2.state.searchTags,\n            searchQuery: \"\"\n          });\n        },\n        onEditTag: this.onEditTag,\n        onLockTag: this.onLockTag,\n        onDelete: this.deleteTag,\n        onReorder: this.onReOrder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"condensed-list-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, this.state.searchTags && React.createElement(\"div\", {\n        className: \"tag-input-text-input-row search-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"tag-search-box\",\n        type: \"text\",\n        onKeyDown: this.onSearchKeyDown,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            searchQuery: e.target.value\n          });\n        },\n        placeholder: \"Search tags\",\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(\"i\", {\n        className: \"tag-row-icon fas fa-search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      })), this.getColorPickerPortal(), React.createElement(\"div\", {\n        className: \"tag-input-items\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, this.renderTagItems()), this.state.addTags && React.createElement(\"div\", {\n        className: \"tag-input-text-input-row new-tag-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"tag-input-box\",\n        type: \"text\",\n        onKeyDown: this.onAddTagKeyDown,\n        placeholder: \"Add new tag\",\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(\"i\", {\n        className: \"tag-input-row-icon fas fa-tag\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }))));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.body.appendChild(this.portalDiv);\n      this.setState({\n        portalElement: ReactDOM.findDOMNode(this.portalDiv)\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.body.removeChild(this.portalDiv);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.tags !== this.props.tags) {\n        this.setState({\n          tags: this.props.tags\n        });\n      }\n\n      if (prevProps.selectedRegions !== this.props.selectedRegions && this.props.selectedRegions.length > 0) {\n        this.setState({\n          selectedTag: null\n        });\n      }\n    }\n  }]);\n\n  return TagInput;\n}(React.Component);","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/common/tagInput/tagInput.tsx"],"names":["React","ReactDOM","Align","randomIntInRange","ColorPicker","TagInputItem","TagInputToolbar","toast","strings","tagColors","require","defaultDOMNode","document","createElement","TagInput","state","tags","props","clickedColor","showColorPicker","addTags","showTagInputBox","searchTags","showSearchBox","searchQuery","selectedTag","editingTag","editingTagNode","portalElement","tagItemRefs","Map","portalDiv","getTagNode","tag","itemRef","get","name","findDOMNode","onEditTag","newEditingTag","setState","onLockTag","lockedTags","find","t","filter","push","onLockedTagsChange","onReOrder","displacement","currentIndex","indexOf","newIndex","length","splice","onChange","handleColorChange","color","map","updateTag","newTag","warn","warnings","emptyName","nameChange","some","existingName","onTagRenamed","getColorPickerPortal","createPortal","getAlignConfig","getTarget","coords","getEditingTagCoords","isNearBottom","top","window","innerHeight","alignCorner","verticalOffset","points","offset","node","getBoundingClientRect","renderTagItems","createTagItemProps","query","clear","prop","toLowerCase","includes","item","setTagItemRef","set","selectedRegionTagSet","getSelectedRegionTagSet","index","findIndex","isLocked","isBeingEdited","isSelected","appliedToSelectedRegions","has","onClick","handleClick","result","Set","selectedRegions","region","add","onAltClick","ctrlKey","onCtrlTagClick","altKey","inEditMode","alreadySelected","onTagClick","deleteTag","onTagDeleted","getNewSelectedTag","l","lockedTag","previouIndex","Math","min","onSearchKeyDown","event","key","onAddTagKeyDown","target","value","getNextColor","addTag","lastColor","lastIndex","e","body","appendChild","removeChild","prevProps","Component"],"mappings":"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","sourcesContent":["import React, { KeyboardEvent, RefObject } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Align from \"rc-align\";\nimport { randomIntInRange } from \"../../../../common/utils\";\nimport { IRegion, ITag } from \"../../../../models/applicationState\";\nimport { ColorPicker } from \"../colorPicker\";\nimport \"./tagInput.scss\";\nimport \"../condensedList/condensedList.scss\";\nimport TagInputItem, { ITagInputItemProps, ITagClickProps } from \"./tagInputItem\";\nimport TagInputToolbar from \"./tagInputToolbar\";\nimport { toast } from \"react-toastify\";\nimport { strings } from \"../../../../common/strings\";\n// tslint:disable-next-line:no-var-requires\nconst tagColors = require(\"../../common/tagColors.json\");\n\nexport interface ITagInputProps {\n    /** Current list of tags */\n    tags: ITag[];\n    /** Function called on tags change */\n    onChange: (tags: ITag[]) => void;\n    /** Currently selected regions in canvas */\n    selectedRegions?: IRegion[];\n    /** Tags that are currently locked for editing experience */\n    lockedTags?: string[];\n    /** Updates to locked tags */\n    onLockedTagsChange?: (locked: string[]) => void;\n    /** Place holder for input text box */\n    placeHolder?: string;\n    /** Function to call on clicking individual tag */\n    onTagClick?: (tag: ITag) => void;\n    /** Function to call on clicking individual tag while holding CTRL key */\n    onCtrlTagClick?: (tag: ITag) => void;\n    /** Function to call when tag is renamed */\n    onTagRenamed?: (tagName: string, newTagName: string) => void;\n    /** Function to call when tag is deleted */\n    onTagDeleted?: (tagName: string) => void;\n    /** Always show tag input box */\n    showTagInputBox?: boolean;\n    /** Always show tag search box */\n    showSearchBox?: boolean;\n}\n\nexport interface ITagInputState {\n    tags: ITag[];\n    clickedColor: boolean;\n    showColorPicker: boolean;\n    addTags: boolean;\n    searchTags: boolean;\n    searchQuery: string;\n    selectedTag: ITag;\n    editingTag: ITag;\n    portalElement: Element;\n    editingTagNode: Element;\n}\n\nfunction defaultDOMNode(): Element {\n    return document.createElement(\"div\");\n}\n\nexport class TagInput extends React.Component<ITagInputProps, ITagInputState> {\n\n    public state: ITagInputState = {\n        tags: this.props.tags || [],\n        clickedColor: false,\n        showColorPicker: false,\n        addTags: this.props.showTagInputBox,\n        searchTags: this.props.showSearchBox,\n        searchQuery: \"\",\n        selectedTag: null,\n        editingTag: null,\n        editingTagNode: null,\n        portalElement: defaultDOMNode(),\n    };\n\n    private tagItemRefs: Map<string, TagInputItem> = new Map<string, TagInputItem>();\n    private portalDiv = document.createElement(\"div\");\n\n    public render() {\n        return (\n            <div className=\"tag-input condensed-list\">\n                <h6 className=\"condensed-list-header tag-input-header bg-darker-2 p-2\">\n                    <span className=\"condensed-list-title tag-input-title\">Tags</span>\n                    <TagInputToolbar\n                        selectedTag={this.state.selectedTag}\n                        onAddTags={() => this.setState({ addTags: !this.state.addTags })}\n                        onSearchTags={() => this.setState({\n                            searchTags: !this.state.searchTags,\n                            searchQuery: \"\",\n                        })}\n                        onEditTag={this.onEditTag}\n                        onLockTag={this.onLockTag}\n                        onDelete={this.deleteTag}\n                        onReorder={this.onReOrder}\n                    />\n                </h6>\n                <div className=\"condensed-list-body\">\n                    {\n                        this.state.searchTags &&\n                        <div className=\"tag-input-text-input-row search-input\">\n                            <input\n                                className=\"tag-search-box\"\n                                type=\"text\"\n                                onKeyDown={this.onSearchKeyDown}\n                                onChange={(e) => this.setState({ searchQuery: e.target.value })}\n                                placeholder=\"Search tags\"\n                                autoFocus={true}\n                            />\n                            <i className=\"tag-row-icon fas fa-search\" />\n                        </div>\n                    }\n                    {this.getColorPickerPortal()}\n                    <div className=\"tag-input-items\">\n                        {this.renderTagItems()}\n                    </div>\n                    {\n                        this.state.addTags &&\n                        <div className=\"tag-input-text-input-row new-tag-input\">\n                            <input\n                                className=\"tag-input-box\"\n                                type=\"text\"\n                                onKeyDown={this.onAddTagKeyDown}\n                                placeholder=\"Add new tag\"\n                                autoFocus={true}\n                            />\n                            <i className=\"tag-input-row-icon fas fa-tag\" />\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    public componentDidMount() {\n        document.body.appendChild(this.portalDiv);\n        this.setState({\n            portalElement: ReactDOM.findDOMNode(this.portalDiv) as Element,\n        });\n    }\n\n    public componentWillUnmount() {\n        document.body.removeChild(this.portalDiv);\n    }\n\n    public componentDidUpdate(prevProps: ITagInputProps) {\n        if (prevProps.tags !== this.props.tags) {\n            this.setState({\n                tags: this.props.tags,\n            });\n        }\n\n        if (prevProps.selectedRegions !== this.props.selectedRegions && this.props.selectedRegions.length > 0) {\n            this.setState({\n                selectedTag: null,\n            });\n        }\n    }\n\n    private getTagNode = (tag: ITag): Element => {\n        const itemRef = tag ? this.tagItemRefs.get(tag.name) : null;\n        return (itemRef ? ReactDOM.findDOMNode(itemRef) : defaultDOMNode()) as Element;\n    }\n\n    private onEditTag = (tag: ITag) => {\n        const { editingTag } = this.state;\n        const newEditingTag = (editingTag && editingTag.name === tag.name) ? null : tag;\n        this.setState({\n            editingTag: newEditingTag,\n            editingTagNode: this.getTagNode(newEditingTag),\n        });\n        if (this.state.clickedColor) {\n            this.setState({\n                showColorPicker: !this.state.showColorPicker,\n            });\n        }\n    }\n\n    private onLockTag = (tag: ITag) => {\n        if (!tag) {\n            return;\n        }\n        let lockedTags = [...this.props.lockedTags];\n        if (lockedTags.find((t) => t === tag.name)) {\n            lockedTags = lockedTags.filter((t) => t !== tag.name);\n        } else {\n            lockedTags.push(tag.name);\n        }\n        this.props.onLockedTagsChange(lockedTags);\n    }\n\n    private onReOrder = (tag: ITag, displacement: number) => {\n        if (!tag) {\n            return;\n        }\n        const tags = [...this.state.tags];\n        const currentIndex = tags.indexOf(tag);\n        const newIndex = currentIndex + displacement;\n        if (newIndex < 0 || newIndex >= tags.length) {\n            return;\n        }\n        tags.splice(currentIndex, 1);\n        tags.splice(newIndex, 0, tag);\n        this.setState({\n            tags,\n        }, () => this.props.onChange(tags));\n    }\n\n    private handleColorChange = (color: string) => {\n        const tag = this.state.editingTag;\n        const tags = this.state.tags.map((t) => {\n            return (t.name === tag.name) ? { name: t.name, color } : t;\n        });\n        this.setState({\n            tags,\n            editingTag: null,\n            showColorPicker: false,\n        }, () => this.props.onChange(tags));\n    }\n\n    private updateTag = (tag: ITag, newTag: ITag) => {\n        if (tag.name === newTag.name && tag.color === newTag.color) {\n            return;\n        }\n        if (!newTag.name.length) {\n            toast.warn(strings.tags.warnings.emptyName);\n            return;\n        }\n        const nameChange = tag.name !== newTag.name;\n        if (nameChange && this.state.tags.some((t) => t.name === newTag.name)) {\n            toast.warn(strings.tags.warnings.existingName);\n            return;\n        }\n        if (nameChange && this.props.onTagRenamed) {\n            this.props.onTagRenamed(tag.name, newTag.name);\n            return;\n        }\n        const tags = this.state.tags.map((t) => {\n            return (t.name === tag.name) ? newTag : t;\n        });\n        this.setState({\n            tags,\n            editingTag: null,\n            selectedTag: newTag,\n        }, () => {\n            this.props.onChange(tags);\n        });\n    }\n\n    private getColorPickerPortal = () => {\n        return (\n            <div>\n                {\n                    ReactDOM.createPortal(\n                        <Align align={this.getAlignConfig()} target={this.getTarget}>\n                            <div className=\"tag-input-color-picker\">\n                                {\n                                    this.state.showColorPicker &&\n                                    <ColorPicker\n                                        color={this.state.editingTag && this.state.editingTag.color}\n                                        colors={tagColors}\n                                        onEditColor={this.handleColorChange}\n                                        show={this.state.showColorPicker}\n                                    />\n                                }\n                            </div>\n                        </Align>\n                        , this.state.portalElement)\n                }\n            </div>\n        );\n    }\n\n    private getAlignConfig = () => {\n        const coords = this.getEditingTagCoords();\n        const isNearBottom = coords && coords.top > (window.innerHeight / 2);\n        const alignCorner = isNearBottom ? \"b\" : \"t\";\n        const verticalOffset = isNearBottom ? 6 : -6;\n        return {\n            // Align top right of source node (color picker) with top left of target node (tag row)\n            points: [`${alignCorner}r`, `${alignCorner}l`],\n            // Offset source node by 10px in x and 20px in y\n            offset: [0, verticalOffset],\n            // Offset targetNode by 30% of target node width in x and 40% of target node height\n            // targetOffset: [\"30%\", \"40%\"],\n            // Auto adjust position when source node is overflowed\n            // overflow: {adjustX: true, adjustY: true}\n        };\n    }\n\n    private getEditingTagCoords = () => {\n        const node = this.state.editingTagNode;\n        return (node) ? node.getBoundingClientRect() : null;\n    }\n\n    private getTarget = () => {\n        return this.state.editingTagNode || document;\n    }\n\n    private renderTagItems = () => {\n        let props = this.createTagItemProps();\n        const query = this.state.searchQuery;\n        this.tagItemRefs.clear();\n\n        if (query.length) {\n            props = props.filter((prop) => prop.tag.name.toLowerCase().includes(query.toLowerCase()));\n        }\n\n        return props.map((prop) =>\n            <TagInputItem\n                key={prop.tag.name}\n                ref={(item) => this.setTagItemRef(item, prop.tag)}\n                {...prop}\n            />);\n    }\n\n    private setTagItemRef = (item: TagInputItem, tag: ITag) => {\n        this.tagItemRefs.set(tag.name, item);\n        return item;\n    }\n\n    private createTagItemProps = (): ITagInputItemProps[] => {\n        const tags = this.state.tags;\n        const selectedRegionTagSet = this.getSelectedRegionTagSet();\n\n        return tags.map((tag) => (\n            {\n                tag,\n                index: tags.findIndex((t) => t.name === tag.name),\n                isLocked: this.props.lockedTags && this.props.lockedTags.findIndex((t) => t === tag.name) > -1,\n                isBeingEdited: this.state.editingTag && this.state.editingTag.name === tag.name,\n                isSelected: this.state.selectedTag && this.state.selectedTag.name === tag.name,\n                appliedToSelectedRegions: selectedRegionTagSet.has(tag.name),\n                onClick: this.handleClick,\n                onChange: this.updateTag,\n            } as ITagInputItemProps\n        ));\n    }\n\n    private getSelectedRegionTagSet = (): Set<string> => {\n        const result = new Set<string>();\n        if (this.props.selectedRegions) {\n            for (const region of this.props.selectedRegions) {\n                for (const tag of region.tags) {\n                    result.add(tag);\n                }\n            }\n        }\n        return result;\n    }\n\n    private onAltClick = (tag: ITag, clickedColor: boolean) => {\n        const { editingTag } = this.state;\n        const newEditingTag = editingTag && editingTag.name === tag.name ? null : tag;\n\n        this.setState({\n            editingTag: newEditingTag,\n            editingTagNode: this.getTagNode(newEditingTag),\n            clickedColor,\n            showColorPicker: !this.state.showColorPicker && clickedColor,\n        });\n    }\n\n    private handleClick = (tag: ITag, props: ITagClickProps) => {\n        // Lock tags\n        if (props.ctrlKey && this.props.onCtrlTagClick) {\n            this.props.onCtrlTagClick(tag);\n            this.setState({ clickedColor: props.clickedColor });\n        } else if (props.altKey) { // Edit tag\n            this.onAltClick(tag, props.clickedColor);\n        } else { // Select tag\n            const { editingTag, selectedTag } = this.state;\n            const inEditMode = editingTag && tag.name === editingTag.name;\n            const alreadySelected = selectedTag && selectedTag.name === tag.name;\n            const newEditingTag = inEditMode ? null : editingTag;\n\n            this.setState({\n                editingTag: newEditingTag,\n                editingTagNode: this.getTagNode(newEditingTag),\n                selectedTag: (alreadySelected && !inEditMode) ? null : tag,\n                clickedColor: props.clickedColor,\n                showColorPicker: false,\n            });\n\n            // Only fire click event if a region is selected\n            if (this.props.selectedRegions &&\n                this.props.selectedRegions.length > 0 &&\n                this.props.onTagClick &&\n                !inEditMode) {\n                this.props.onTagClick(tag);\n            }\n        }\n    }\n\n    private deleteTag = (tag: ITag) => {\n        if (!tag) {\n            return;\n        }\n        if (this.props.onTagDeleted) {\n            this.props.onTagDeleted(tag.name);\n            return;\n        }\n\n        const index = this.state.tags.indexOf(tag);\n        const tags = this.state.tags.filter((t) => t.name !== tag.name);\n\n        this.setState({\n            tags,\n            selectedTag: this.getNewSelectedTag(tags, index),\n        }, () => this.props.onChange(tags));\n\n        if (this.props.lockedTags.find((l) => l === tag.name)) {\n            this.props.onLockedTagsChange(\n                this.props.lockedTags.filter((lockedTag) => lockedTag !== tag.name),\n            );\n        }\n    }\n\n    private getNewSelectedTag = (tags: ITag[], previouIndex: number): ITag => {\n        return (tags.length) ? tags[Math.min(tags.length - 1, previouIndex)] : null;\n    }\n\n    private onSearchKeyDown = (event: KeyboardEvent): void => {\n        if (event.key === \"Escape\") {\n            this.setState({\n                searchTags: false,\n            });\n        }\n    }\n\n    private onAddTagKeyDown = (event) => {\n        if (event.key === \"Enter\") {\n            // validate and add\n            const newTag: ITag = {\n                name: event.target.value,\n                color: this.getNextColor(),\n            };\n            if (newTag.name.length && !this.state.tags.find((t) => t.name === newTag.name)) {\n                this.addTag(newTag);\n                event.target.value = \"\";\n            } else if (!newTag.name.length) {\n                toast.warn(strings.tags.warnings.emptyName);\n            } else {\n                toast.warn(strings.tags.warnings.existingName);\n            }\n        }\n        if (event.key === \"Escape\") {\n            this.setState({\n                addTags: false,\n            });\n        }\n    }\n\n    private getNextColor = () => {\n        const tags = this.state.tags;\n        if (tags.length > 0) {\n            const lastColor = tags[tags.length - 1].color;\n            const lastIndex = tagColors.findIndex((color) => color === lastColor);\n            let newIndex;\n            if (lastIndex > -1) {\n                newIndex = (lastIndex + 1) % tagColors.length;\n            } else {\n                newIndex = randomIntInRange(0, tagColors.length - 1);\n            }\n            return tagColors[newIndex];\n        } else {\n            return tagColors[0];\n        }\n    }\n\n    private addTag = (tag: ITag) => {\n        if (!this.state.tags.find((t) => t.name === tag.name)) {\n            const tags = [...this.state.tags, tag];\n            this.setState({\n                tags,\n            }, () => this.props.onChange(tags));\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
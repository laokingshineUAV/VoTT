{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar TagsComponent_1 = require(\"../Component/TagsComponent\");\n/**\r\n * `TagsComponent` for the `PointRegion` class.\r\n */\n\n\nvar TagsElement =\n/*#__PURE__*/\nfunction (_TagsComponent_1$Tags) {\n  _inherits(TagsElement, _TagsComponent_1$Tags);\n\n  /**\r\n   * Creates a new `TagsElement` object.\r\n   * @param paper - The `Snap.Paper` object to draw on.\r\n   * @param paperRect - The parent bounding box for created component.\r\n   * @param regionData - The `RegionData` object shared across components. Used also for initial setup.\r\n   * @param tags - The `TagsDescriptor` object presenting colors and names for region tags.\r\n   * @param styleId - The unique css style id for region.\r\n   * @param styleSheet - The regerence to the stylesheet object for rules insection.\r\n   * @param tagsUpdateOptions - The settings for redrawing tags.\r\n   */\n  function TagsElement(paper, paperRect, regionData, tags, styleId, styleSheet, tagsUpdateOptions) {\n    var _this;\n\n    _classCallCheck(this, TagsElement);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TagsElement).call(this, paper, paperRect, regionData, tags, styleId, styleSheet, tagsUpdateOptions));\n\n    _this.buildOn(paper, tags);\n\n    return _this;\n  }\n  /**\r\n   * Redraws the componnent.\r\n   */\n\n\n  _createClass(TagsElement, [{\n    key: \"redraw\",\n    value: function redraw() {\n      var _this2 = this;\n\n      var size = TagsElement.DEFAULT_SECONDARY_TAG_SIZE;\n      var cx = this.x;\n      var cy = this.y - size - TagsElement.DEFAULT_SECONDARY_TAG_DY;\n      window.requestAnimationFrame(function () {\n        _this2.primaryTagNode.attr({\n          cx: _this2.x,\n          cy: _this2.y\n        }); // Secondary Tags\n\n\n        if (_this2.secondaryTags && _this2.secondaryTags.length > 0) {\n          var length = _this2.secondaryTags.length;\n\n          for (var i = 0; i < length; i++) {\n            var stag = _this2.secondaryTags[i];\n            var x = cx + (2 * i - length + 0.5) * size;\n            stag.attr({\n              x: x,\n              y: cy\n            });\n          }\n        }\n      });\n    }\n    /**\r\n     * Inits style maps.\r\n     */\n\n  }, {\n    key: \"initStyleMaps\",\n    value: function initStyleMaps(tags) {\n      var _this3 = this;\n\n      if (tags !== null) {\n        if (tags.primary !== null) {\n          this.styleMap = [{\n            rule: \".\".concat(this.styleId, \" .primaryTagPointStyle\"),\n            style: \"fill: \".concat(tags.primary.colorAccent, \";\")\n          }, {\n            rule: \".regionStyle.\".concat(this.styleId, \":hover  .primaryTagPointStyle\"),\n            style: \"fill: \".concat(tags.primary.colorHighlight, \";\\n                                    stroke: #fff;\")\n          }, {\n            rule: \".regionStyle.selected.\".concat(this.styleId, \" .primaryTagPointStyle\"),\n            style: \"fill: \".concat(tags.primary.colorAccent, \";\\n                                stroke:\").concat(tags.primary.colorHighlight, \";\")\n          }];\n          this.styleLightMap = [{\n            rule: \".\".concat(this.styleId, \" .primaryTagPointStyle\"),\n            style: \"fill: \".concat(tags.primary.colorNoColor, \";\\n                                    stroke:\").concat(tags.primary.colorAccent, \";\")\n          }, {\n            rule: \".regionStyle.\".concat(this.styleId, \":hover  .primaryTagPointStyle\"),\n            style: \"fill: \".concat(tags.primary.colorHighlight, \";\\n                                stroke: #fff;\")\n          }, {\n            rule: \".regionStyle.selected.\".concat(this.styleId, \" .primaryTagPointStyle\"),\n            style: \"fill: \".concat(tags.primary.colorHighlight, \";\\n                                stroke:\").concat(tags.primary.colorAccent, \";\")\n          }, {\n            rule: \".regionStyle.\".concat(this.styleId, \" .secondaryTagStyle\"),\n            style: \"opacity:0.25;\"\n          }];\n        } else {\n          this.styleMap = [];\n          this.styleLightMap = [];\n        }\n\n        if (tags.secondary !== null && tags.secondary !== undefined) {\n          tags.secondary.forEach(function (tag) {\n            var rule = {\n              rule: \".secondaryTagStyle.secondaryTag-\".concat(tag.name),\n              style: \"fill: \".concat(tag.colorAccent, \";\")\n            };\n\n            _this3.styleMap.push(rule);\n\n            _this3.styleLightMap.push(rule);\n          });\n        }\n      }\n    }\n    /**\r\n     * Internal function to recreate tag labels.\r\n     */\n\n  }, {\n    key: \"rebuildTagLabels\",\n    value: function rebuildTagLabels() {\n      var _this4 = this;\n\n      // Clear secondary tags -> redraw from scratch\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.secondaryTags[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var tag = _step.value;\n          tag.remove();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.secondaryTags = []; // If there are tags assigned\n\n      if (this.tags) {\n        if (this.tags.primary !== undefined && this.tags.primary !== null) {} // Primary Tag\n        // Secondary Tags\n\n\n        if (this.tags.secondary && this.tags.secondary.length > 0) {\n          var length = this.tags.secondary.length;\n\n          var _loop = function _loop(i) {\n            var stag = _this4.tags.secondary[i];\n            var size = TagsElement.DEFAULT_SECONDARY_TAG_SIZE;\n            var x = _this4.x + _this4.boundRect.width / 2 + (2 * i - length + 1) * size - size / 2;\n            var y = _this4.y - size - TagsElement.DEFAULT_SECONDARY_TAG_DY;\n\n            var tagel = _this4.paper.rect(x, y, size, size);\n\n            window.requestAnimationFrame(function () {\n              tagel.addClass(\"secondaryTagStyle\");\n              tagel.addClass(\"secondaryTag-\".concat(stag.name));\n            });\n\n            _this4.secondaryTagsNode.add(tagel);\n\n            _this4.secondaryTags.push(tagel);\n          };\n\n          for (var i = 0; i < length; i++) {\n            _loop(i);\n          }\n        }\n      }\n    }\n    /**\r\n     * Internal function to create tag labels\r\n     * @param paper - The `Snap.Paper` object to draw on.\r\n     * @param tags - The `TagsDescriptor` object defining tags.\r\n     */\n\n  }, {\n    key: \"buildOn\",\n    value: function buildOn(paper, tags) {\n      this.primaryTagNode = paper.circle(this.x, this.y, TagsElement.DEFAULT_PRIMARY_TAG_RADIUS);\n      this.primaryTagNode.addClass(\"primaryTagPointStyle\");\n      this.secondaryTagsNode = paper.g();\n      this.secondaryTagsNode.addClass(\"secondatyTagsLayer\");\n      this.secondaryTags = [];\n      this.node.add(this.primaryTagNode);\n      this.node.add(this.secondaryTagsNode);\n      this.initStyleMaps(tags);\n      this.updateTags(tags, this.tagsUpdateOptions);\n    }\n  }]);\n\n  return TagsElement;\n}(TagsComponent_1.TagsComponent);\n/**\r\n * Default (visual) radius for primary tag point.\r\n */\n\n\nTagsElement.DEFAULT_PRIMARY_TAG_RADIUS = 3;\n/**\r\n * Default (visual) size for secondary tag boxes.\r\n */\n\nTagsElement.DEFAULT_SECONDARY_TAG_SIZE = 6;\n/**\r\n * Default (visual) vertical shift for secondary tag boxes.\r\n */\n\nTagsElement.DEFAULT_SECONDARY_TAG_DY = 6;\nexports.TagsElement = TagsElement;","map":null,"metadata":{},"sourceType":"script"}
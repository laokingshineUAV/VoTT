{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar SRGBColor_1 = require(\"./SRGBColor\");\n/**\r\n * Represents the HSL color space.\r\n */\n\n\nvar HSLColor =\n/*#__PURE__*/\nfunction () {\n  _createClass(HSLColor, [{\n    key: \"h\",\n\n    /**\r\n     * The hue value of the color.\r\n     */\n    get: function get() {\n      return this.values[0];\n    }\n    /**\r\n     * The saturation value of the color.\r\n     */\n\n  }, {\n    key: \"s\",\n    get: function get() {\n      return this.values[1];\n    }\n    /**\r\n     * The lightness value of the color.\r\n     */\n\n  }, {\n    key: \"l\",\n    get: function get() {\n      return this.values[2];\n    }\n    /**\r\n     * Creates new HSLColor\r\n     * @param h - Hue component in the range [0, 1].\r\n     * @param s - Saturation component in the range [0, 1].\r\n     * @param l - Lightness component in the range [0, 1].\r\n     */\n\n  }]);\n\n  function HSLColor(h, s, l) {\n    _classCallCheck(this, HSLColor);\n\n    this.values = [h, s, l];\n  }\n  /**\r\n   * Return a copy of color values in array format as [h, s, l].\r\n   */\n\n\n  _createClass(HSLColor, [{\n    key: \"toArray\",\n    value: function toArray() {\n      // copy\n      return this.values.map(function (v) {\n        return v;\n      });\n    }\n    /**\r\n     * Return an array of color values mapped to the ranges used in CSS:\r\n     * hue - [0, 360]\r\n     * saturation - [0, 100] %\r\n     * lightness - [0, 100] %\r\n     */\n\n  }, {\n    key: \"toCSSValues\",\n    value: function toCSSValues() {\n      return [this.h * 360, this.s * 100, this.l * 100];\n    }\n    /**\r\n     * Composes the CSS color string using the hsl() or hsla() format.\r\n     * @param alpha - The alpha value for hsla() format.\r\n     */\n\n  }, {\n    key: \"toCSSString\",\n    value: function toCSSString(alpha) {\n      var _this$toCSSValues = this.toCSSValues(),\n          _this$toCSSValues2 = _slicedToArray(_this$toCSSValues, 3),\n          h = _this$toCSSValues2[0],\n          s = _this$toCSSValues2[1],\n          l = _this$toCSSValues2[2];\n\n      if (alpha !== undefined) {\n        // cast to [0, 1]\n        alpha = Math.min(1, Math.max(0, alpha));\n        return \"hsla(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%, \").concat(alpha, \")\");\n      } else {\n        return \"hsl(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%)\");\n      }\n    }\n    /**\r\n     * Trasforms color to the RGB format.\r\n     */\n\n  }, {\n    key: \"toSRGB\",\n    value: function toSRGB() {\n      /* https://www.w3.org/TR/css-color-3/\r\n      HOW TO RETURN hsl.to.rgb(h, s, l):\r\n          SELECT:\r\n              l<=0.5: PUT l*(s+1) IN m2\r\n              ELSE: PUT l+s-l*s IN m2\r\n          PUT l*2-m2 IN m1\r\n          PUT hue.to.rgb(m1, m2, h+1/3) IN r\r\n          PUT hue.to.rgb(m1, m2, h    ) IN g\r\n          PUT hue.to.rgb(m1, m2, h-1/3) IN b\r\n          RETURN (r, g, b)\r\n      */\n      var m1;\n      var m2;\n\n      var _this$values = _slicedToArray(this.values, 3),\n          h = _this$values[0],\n          s = _this$values[1],\n          l = _this$values[2];\n\n      if (l <= 0.5) {\n        m2 = l * (s + 1);\n      } else {\n        m2 = l + s - l * s;\n      }\n\n      m1 = l * 2 - m2;\n      var r = this.hue2rgb(m1, m2, h + 1 / 3);\n      var g = this.hue2rgb(m1, m2, h);\n      var b = this.hue2rgb(m1, m2, h - 1 / 3);\n      return new SRGBColor_1.SRGBColor(r, g, b);\n    }\n    /**\r\n     * Internal helper function for the `toRGB` method.\r\n     */\n\n  }, {\n    key: \"hue2rgb\",\n    value: function hue2rgb(m1, m2, h) {\n      /* https://www.w3.org/TR/css-color-3/\r\n      HOW TO RETURN hue.to.rgb(m1, m2, h):\r\n          IF h<0: PUT h+1 IN h\r\n          IF h>1: PUT h-1 IN h\r\n          IF h*6<1: RETURN m1+(m2-m1)*h*6\r\n          IF h*2<1: RETURN m2\r\n          IF h*3<2: RETURN m1+(m2-m1)*(2/3-h)*6\r\n          RETURN m1\r\n      */\n      if (h < 0) {\n        h = h + 1;\n      }\n\n      if (h > 1) {\n        h = h - 1;\n      }\n\n      if (h * 6 < 1) {\n        return m1 + (m2 - m1) * h * 6;\n      } else if (h * 2 < 1) {\n        return m2;\n      } else if (h * 3 < 2) {\n        return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n      } else {\n        return m1;\n      }\n    }\n  }]);\n\n  return HSLColor;\n}();\n\nexports.HSLColor = HSLColor;","map":null,"metadata":{},"sourceType":"script"}
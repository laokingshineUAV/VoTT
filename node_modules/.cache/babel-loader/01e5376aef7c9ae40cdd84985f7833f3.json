{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar RGBColor_1 = require(\"./RGBColor\");\n\nvar LABColor_1 = require(\"./LABColor\");\n/**\r\n * Represents the CIE XYZ color space.\r\n */\n\n\nvar XYZColor =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Creates new XYZ color.\r\n   * @param x - x-component in the range [0, 1].\r\n   * @param y - y-component in the range [0, 1].\r\n   * @param z - z-component in the range [0, 1].\r\n   */\n  function XYZColor(x, y, z) {\n    _classCallCheck(this, XYZColor);\n\n    this.values = [x, y, z];\n  }\n  /**\r\n   * The x-component of the color.\r\n   */\n\n\n  _createClass(XYZColor, [{\n    key: \"toArray\",\n\n    /**\r\n     * Return a copy of color values in array format as [x, y, z].\r\n     */\n    value: function toArray() {\n      // copy\n      return this.values.map(function (v) {\n        return v;\n      });\n    }\n    /**\r\n     * Trasforms color to the RGB format.\r\n     */\n\n  }, {\n    key: \"toRGB\",\n    value: function toRGB() {\n      var _this$values = _slicedToArray(this.values, 3),\n          x = _this$values[0],\n          y = _this$values[1],\n          z = _this$values[2];\n\n      var r = +3.2406255 * x - 1.5372080 * y - 0.4986286 * z;\n      var g = -0.9689307 * x + 1.8757561 * y + 0.0415175 * z;\n      var b = +0.0557101 * x - 0.2040211 * y + 1.0569959 * z;\n      return new RGBColor_1.RGBColor(r, g, b);\n    }\n    /**\r\n     * Trasforms color to the sRGB format.\r\n     */\n\n  }, {\n    key: \"toSRGB\",\n    value: function toSRGB() {\n      return this.toRGB().toSRGB();\n    }\n    /**\r\n     * Trasforms color to the CIE LAB format.\r\n     */\n\n  }, {\n    key: \"toLAB\",\n    value: function toLAB() {\n      var x = this.x / XYZColor.D65.x;\n      var y = this.y / XYZColor.D65.y;\n      var z = this.z / XYZColor.D65.z;\n      var xyz = [x, y, z].map(function (v) {\n        if (v > 0.008856451) {\n          return Math.pow(v, 1 / 3);\n        } else {\n          return 7.787037 * v + 16 / 116;\n        }\n      });\n      return new LABColor_1.LABColor((116 * xyz[1] - 16) / 100, 5 * (xyz[0] - xyz[1]), 2 * (xyz[1] - xyz[2]));\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this.values[0];\n    }\n    /**\r\n     * The y-component of the color.\r\n     */\n\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this.values[1];\n    }\n    /**\r\n     * The z-component of the color.\r\n     */\n\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this.values[2];\n    }\n  }]);\n\n  return XYZColor;\n}();\n/**\r\n * The D65 white point vector.\r\n */\n\n\nXYZColor.D65 = new XYZColor(0.95047, 1.000, 1.08883);\n/**\r\n * The D50 white point vector.\r\n */\n\nXYZColor.D50 = new XYZColor(0.966797, 1.000, 0.825188);\nexports.XYZColor = XYZColor;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { BlobURL } from \"./BlobURL\";\nimport { PageBlob } from \"./generated/lib/operations\";\nimport { rangeToString } from \"./IRange\";\nimport { URLConstants } from \"./utils/constants\";\nimport { appendToURLPath, setURLParameter } from \"./utils/utils.common\";\n/**\n * PageBlobURL defines a set of operations applicable to page blobs.\n *\n * @export\n * @class PageBlobURL\n * @extends {StorageURL}\n */\n\nvar PageBlobURL =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PageBlobURL, _super);\n  /**\n   * Creates an instance of PageBlobURL.\n   * This method accepts an encoded URL or non-encoded URL pointing to a page blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param {string} url A URL string pointing to Azure Storage page blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/pageblob\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/pageblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param {Pipeline} pipeline Call StorageURL.newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof PageBlobURL\n   */\n\n\n  function PageBlobURL(url, pipeline) {\n    var _this = _super.call(this, url, pipeline) || this;\n\n    _this.pageBlobContext = new PageBlob(_this.storageClientContext);\n    return _this;\n  }\n  /**\n   * Creates a PageBlobURL object from ContainerURL instance.\n   *\n   * @static\n   * @param {ContainerURL} containerURL A ContainerURL object\n   * @param {string} blobName A page blob name\n   * @returns {PageBlobURL}\n   * @memberof PageBlobURL\n   */\n\n\n  PageBlobURL.fromContainerURL = function (containerURL, blobName) {\n    return new PageBlobURL(appendToURLPath(containerURL.url, encodeURIComponent(blobName)), containerURL.pipeline);\n  };\n  /**\n   * Creates a PageBlobURL object from BlobURL instance.\n   *\n   * @static\n   * @param {BlobURL} blobURL\n   * @returns {PageBlobURL}\n   * @memberof PageBlobURL\n   */\n\n\n  PageBlobURL.fromBlobURL = function (blobURL) {\n    return new PageBlobURL(blobURL.url, blobURL.pipeline);\n  };\n  /**\n   * Creates a new PageBlobURL object identical to the source but with the\n   * specified request policy pipeline.\n   *\n   * @param {Pipeline} pipeline\n   * @returns {PageBlobURL}\n   * @memberof PageBlobURL\n   */\n\n\n  PageBlobURL.prototype.withPipeline = function (pipeline) {\n    return new PageBlobURL(this.url, pipeline);\n  };\n  /**\n   * Creates a new PageBlobURL object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a URL to the base blob.\n   *\n   * @param {string} snapshot\n   * @returns {PageBlobURL}\n   * @memberof PageBlobURL\n   */\n\n\n  PageBlobURL.prototype.withSnapshot = function (snapshot) {\n    return new PageBlobURL(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n  };\n  /**\n   * Creates a page blob of the specified length. Call uploadPages to upload data\n   * data to a page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {number} size\n   * @param {IPageBlobCreateOptions} [options]\n   * @returns {Promise<Models.PageBlobCreateResponse>}\n   * @memberof PageBlobURL\n   */\n\n\n  PageBlobURL.prototype.create = function (aborter, size, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        options.accessConditions = options.accessConditions || {};\n        return [2\n        /*return*/\n        , this.pageBlobContext.create(0, size, {\n          abortSignal: aborter,\n          blobHTTPHeaders: options.blobHTTPHeaders,\n          blobSequenceNumber: options.blobSequenceNumber,\n          leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n          metadata: options.metadata,\n          modifiedAccessConditions: options.accessConditions.modifiedAccessConditions\n        })];\n      });\n    });\n  };\n  /**\n   * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {HttpRequestBody} body\n   * @param {number} offset Offset of destination page blob\n   * @param {number} count Content length of body, also how many bytes to be uploaded\n   * @param {IPageBlobUploadPagesOptions} [options]\n   * @returns {Promise<Models.PageBlobsUploadPagesResponse>}\n   * @memberof PageBlobURL\n   */\n\n\n  PageBlobURL.prototype.uploadPages = function (aborter, body, offset, count, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        options.accessConditions = options.accessConditions || {};\n        return [2\n        /*return*/\n        , this.pageBlobContext.uploadPages(body, count, {\n          abortSignal: aborter,\n          leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n          modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n          onUploadProgress: options.progress,\n          range: rangeToString({\n            offset: offset,\n            count: count\n          }),\n          sequenceNumberAccessConditions: options.accessConditions.sequenceNumberAccessConditions,\n          transactionalContentMD5: options.transactionalContentMD5\n        })];\n      });\n    });\n  };\n  /**\n   * Frees the specified pages from the page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {number} offset\n   * @param {number} count\n   * @param {IPageBlobClearPagesOptions} [options]\n   * @returns {Promise<Models.PageBlobClearPagesResponse>}\n   * @memberof PageBlobURL\n   */\n\n\n  PageBlobURL.prototype.clearPages = function (aborter, offset, count, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        options.accessConditions = options.accessConditions || {};\n        return [2\n        /*return*/\n        , this.pageBlobContext.clearPages(0, {\n          abortSignal: aborter,\n          leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n          modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n          range: rangeToString({\n            offset: offset,\n            count: count\n          }),\n          sequenceNumberAccessConditions: options.accessConditions.sequenceNumberAccessConditions\n        })];\n      });\n    });\n  };\n  /**\n   * Returns the list of valid page ranges for a page blob or snapshot of a page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {number} offset\n   * @param {number} count\n   * @param {IPageBlobGetPageRangesOptions} [options]\n   * @returns {Promise<Models.PageBlobGetPageRangesResponse>}\n   * @memberof PageBlobURL\n   */\n\n\n  PageBlobURL.prototype.getPageRanges = function (aborter, offset, count, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        options.accessConditions = options.accessConditions || {};\n        return [2\n        /*return*/\n        , this.pageBlobContext.getPageRanges({\n          abortSignal: aborter,\n          leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n          modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n          range: rangeToString({\n            offset: offset,\n            count: count\n          })\n        })];\n      });\n    });\n  };\n  /**\n   * Gets the collection of page ranges that differ between a specified snapshot and this page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {number} offset\n   * @param {number} count\n   * @param {string} prevSnapshot\n   * @param {IPageBlobGetPageRangesDiffOptions} [options]\n   * @returns {Promise<Models.PageBlobGetPageRangesDiffResponse>}\n   * @memberof PageBlobURL\n   */\n\n\n  PageBlobURL.prototype.getPageRangesDiff = function (aborter, offset, count, prevSnapshot, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        options.accessConditions = options.accessConditions || {};\n        return [2\n        /*return*/\n        , this.pageBlobContext.getPageRangesDiff({\n          abortSignal: aborter,\n          leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n          modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n          prevsnapshot: prevSnapshot,\n          range: rangeToString({\n            offset: offset,\n            count: count\n          })\n        })];\n      });\n    });\n  };\n  /**\n   * Resizes the page blob to the specified size (which must be a multiple of 512).\n   * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {number} size\n   * @param {IPageBlobResizeOptions} [options]\n   * @returns {Promise<Models.PageBlobResizeResponse>}\n   * @memberof PageBlobURL\n   */\n\n\n  PageBlobURL.prototype.resize = function (aborter, size, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        options.accessConditions = options.accessConditions || {};\n        return [2\n        /*return*/\n        , this.pageBlobContext.resize(size, {\n          abortSignal: aborter,\n          leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n          modifiedAccessConditions: options.accessConditions.modifiedAccessConditions\n        })];\n      });\n    });\n  };\n  /**\n   * Sets a page blob's sequence number.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {Models.SequenceNumberActionType} sequenceNumberAction\n   * @param {number} [sequenceNumber] Required if sequenceNumberAction is max or update\n   * @param {IPageBlobUpdateSequenceNumberOptions} [options]\n   * @returns {Promise<Models.PageBlobUpdateSequenceNumberResponse>}\n   * @memberof PageBlobURL\n   */\n\n\n  PageBlobURL.prototype.updateSequenceNumber = function (aborter, sequenceNumberAction, sequenceNumber, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        options.accessConditions = options.accessConditions || {};\n        return [2\n        /*return*/\n        , this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, {\n          abortSignal: aborter,\n          blobSequenceNumber: sequenceNumber,\n          leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n          modifiedAccessConditions: options.accessConditions.modifiedAccessConditions\n        })];\n      });\n    });\n  };\n  /**\n   * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.\n   * The snapshot is copied such that only the differential changes between the previously\n   * copied snapshot are transferred to the destination.\n   * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.\n   * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n   * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} copySource Specifies the name of the source page blob snapshot. For example,\n   *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n   * @param {IPageBlobStartCopyIncrementalOptions} [options]\n   * @returns {Promise<Models.PageBlobCopyIncrementalResponse>}\n   * @memberof PageBlobURL\n   */\n\n\n  PageBlobURL.prototype.startCopyIncremental = function (aborter, copySource, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.pageBlobContext.copyIncremental(copySource, {\n          abortSignal: aborter,\n          modifiedAccessConditions: options.modifiedAccessConditions\n        })];\n      });\n    });\n  };\n\n  return PageBlobURL;\n}(BlobURL);\n\nexport { PageBlobURL };","map":null,"metadata":{},"sourceType":"module"}
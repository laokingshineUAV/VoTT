{"ast":null,"code":"import { Util, ProcessLegacy } from \"@microsoft/applicationinsights-common\"; // ToDo: fix properties and measurements once updates are done to common\n\nvar AppInsightsDeprecated =\n/** @class */\nfunction () {\n  function AppInsightsDeprecated(snippet, appInsightsNew) {\n    this._hasLegacyInitializers = false;\n    this._queue = [];\n    this.config = AppInsightsDeprecated.getDefaultConfig(snippet.config);\n    this.appInsightsNew = appInsightsNew;\n    this.context = {\n      addTelemetryInitializer: this.addTelemetryInitializers.bind(this)\n    };\n  }\n  /**\r\n  * The array of telemetry initializers to call before sending each telemetry item.\r\n  */\n\n\n  AppInsightsDeprecated.prototype.addTelemetryInitializers = function (callBack) {\n    var _this = this; // Add initializer to current processing only if there is any old telemetry initializer\n\n\n    if (!this._hasLegacyInitializers) {\n      this.appInsightsNew.addTelemetryInitializer(function (item) {\n        _this._processLegacyInitializers(item); // setup call back for each legacy processor\n\n      });\n      this._hasLegacyInitializers = true;\n    }\n\n    this._queue.push(callBack);\n  };\n\n  AppInsightsDeprecated.prototype._processLegacyInitializers = function (item) {\n    // instead of mapping new to legacy and then back again and repeating in channel, attach callback for channel to call\n    item.tags[ProcessLegacy] = this._queue;\n    return item;\n  };\n\n  AppInsightsDeprecated.prototype.startTrackPage = function (name) {\n    this.appInsightsNew.startTrackPage(name);\n  };\n\n  AppInsightsDeprecated.prototype.stopTrackPage = function (name, url, properties, measurements) {\n    this.appInsightsNew.stopTrackPage(name, url, properties); // update\n  };\n\n  AppInsightsDeprecated.prototype.trackPageView = function (name, url, properties, measurements, duration) {\n    var telemetry = {\n      name: name,\n      uri: url,\n      properties: properties,\n      measurements: measurements\n    }; // fix for props, measurements, duration\n\n    this.appInsightsNew.trackPageView(telemetry);\n  };\n\n  AppInsightsDeprecated.prototype.trackEvent = function (name, properties, measurements) {\n    this.appInsightsNew.trackEvent({\n      name: name\n    });\n  };\n\n  AppInsightsDeprecated.prototype.trackDependency = function (id, method, absoluteUrl, pathName, totalTime, success, resultCode) {\n    this.appInsightsNew.trackDependencyData({\n      id: id,\n      target: absoluteUrl,\n      type: pathName,\n      duration: totalTime,\n      properties: {\n        HttpMethod: method\n      },\n      success: success,\n      responseCode: resultCode\n    });\n  };\n\n  AppInsightsDeprecated.prototype.trackException = function (exception, handledAt, properties, measurements, severityLevel) {\n    this.appInsightsNew.trackException({\n      error: exception\n    });\n  };\n\n  AppInsightsDeprecated.prototype.trackMetric = function (name, average, sampleCount, min, max, properties) {\n    this.appInsightsNew.trackMetric({\n      name: name,\n      average: average,\n      sampleCount: sampleCount,\n      min: min,\n      max: max\n    });\n  };\n\n  AppInsightsDeprecated.prototype.trackTrace = function (message, properties, severityLevel) {\n    this.appInsightsNew.trackTrace({\n      message: message,\n      severityLevel: severityLevel\n    });\n  };\n\n  AppInsightsDeprecated.prototype.flush = function (async) {\n    this.appInsightsNew.flush(async);\n  };\n\n  AppInsightsDeprecated.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\n    this.appInsightsNew.context.user.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);\n  };\n\n  AppInsightsDeprecated.prototype.clearAuthenticatedUserContext = function () {\n    this.appInsightsNew.context.user.clearAuthenticatedUserContext();\n  };\n\n  AppInsightsDeprecated.prototype._onerror = function (message, url, lineNumber, columnNumber, error) {\n    this.appInsightsNew._onerror({\n      message: message,\n      url: url,\n      lineNumber: lineNumber,\n      columnNumber: columnNumber,\n      error: error\n    });\n  };\n\n  AppInsightsDeprecated.prototype.startTrackEvent = function (name) {\n    this.appInsightsNew.startTrackEvent(name);\n  };\n\n  AppInsightsDeprecated.prototype.stopTrackEvent = function (name, properties, measurements) {\n    this.appInsightsNew.stopTrackEvent(name, properties, measurements);\n  };\n\n  AppInsightsDeprecated.prototype.downloadAndSetup = function (config) {\n    throw new Error(\"downloadAndSetup not implemented in web SKU\");\n  };\n\n  AppInsightsDeprecated.prototype.updateSnippetDefinitions = function (snippet) {\n    // apply full appInsights to the global instance\n    // Note: This must be called before loadAppInsights is called\n    for (var field in this) {\n      if (typeof field === 'string') {\n        snippet[field] = this[field];\n      }\n    }\n  }; // note: these are split into methods to enable unit tests\n\n\n  AppInsightsDeprecated.prototype.loadAppInsights = function () {\n    // initialize global instance of appInsights\n    //var appInsights = new Microsoft.ApplicationInsights.AppInsights(this.config);\n    var _this = this; // implement legacy version of trackPageView for 0.10<\n\n\n    if (this.config[\"iKey\"]) {\n      var originalTrackPageView = this.trackPageView;\n\n      this.trackPageView = function (pagePath, properties, measurements) {\n        originalTrackPageView.apply(_this, [null, pagePath, properties, measurements]);\n      };\n    } // implement legacy pageView interface if it is present in the snippet\n\n\n    var legacyPageView = \"logPageView\";\n\n    if (typeof this.snippet[legacyPageView] === \"function\") {\n      this[legacyPageView] = function (pagePath, properties, measurements) {\n        _this.trackPageView(null, pagePath, properties, measurements);\n      };\n    } // implement legacy event interface if it is present in the snippet\n\n\n    var legacyEvent = \"logEvent\";\n\n    if (typeof this.snippet[legacyEvent] === \"function\") {\n      this[legacyEvent] = function (name, props, measurements) {\n        _this.trackEvent(name, props, measurements);\n      };\n    }\n\n    return this;\n  };\n\n  AppInsightsDeprecated.getDefaultConfig = function (config) {\n    if (!config) {\n      config = {};\n    } // set default values\n\n\n    config.endpointUrl = config.endpointUrl || \"https://dc.services.visualstudio.com/v2/track\";\n    config.sessionRenewalMs = 30 * 60 * 1000;\n    config.sessionExpirationMs = 24 * 60 * 60 * 1000;\n    config.maxBatchSizeInBytes = config.maxBatchSizeInBytes > 0 ? config.maxBatchSizeInBytes : 102400; // 100kb\n\n    config.maxBatchInterval = !isNaN(config.maxBatchInterval) ? config.maxBatchInterval : 15000;\n    config.enableDebug = Util.stringToBoolOrDefault(config.enableDebug);\n    config.disableExceptionTracking = Util.stringToBoolOrDefault(config.disableExceptionTracking);\n    config.disableTelemetry = Util.stringToBoolOrDefault(config.disableTelemetry);\n    config.verboseLogging = Util.stringToBoolOrDefault(config.verboseLogging);\n    config.emitLineDelimitedJson = Util.stringToBoolOrDefault(config.emitLineDelimitedJson);\n    config.diagnosticLogInterval = config.diagnosticLogInterval || 10000;\n    config.autoTrackPageVisitTime = Util.stringToBoolOrDefault(config.autoTrackPageVisitTime);\n\n    if (isNaN(config.samplingPercentage) || config.samplingPercentage <= 0 || config.samplingPercentage >= 100) {\n      config.samplingPercentage = 100;\n    }\n\n    config.disableAjaxTracking = Util.stringToBoolOrDefault(config.disableAjaxTracking);\n    config.maxAjaxCallsPerView = !isNaN(config.maxAjaxCallsPerView) ? config.maxAjaxCallsPerView : 500;\n    config.isBeaconApiDisabled = Util.stringToBoolOrDefault(config.isBeaconApiDisabled, true);\n    config.disableCorrelationHeaders = Util.stringToBoolOrDefault(config.disableCorrelationHeaders);\n    config.correlationHeaderExcludedDomains = config.correlationHeaderExcludedDomains || [\"*.blob.core.windows.net\", \"*.blob.core.chinacloudapi.cn\", \"*.blob.core.cloudapi.de\", \"*.blob.core.usgovcloudapi.net\"];\n    config.disableFlushOnBeforeUnload = Util.stringToBoolOrDefault(config.disableFlushOnBeforeUnload);\n    config.enableSessionStorageBuffer = Util.stringToBoolOrDefault(config.enableSessionStorageBuffer, true);\n    config.isRetryDisabled = Util.stringToBoolOrDefault(config.isRetryDisabled);\n    config.isCookieUseDisabled = Util.stringToBoolOrDefault(config.isCookieUseDisabled);\n    config.isStorageUseDisabled = Util.stringToBoolOrDefault(config.isStorageUseDisabled);\n    config.isBrowserLinkTrackingEnabled = Util.stringToBoolOrDefault(config.isBrowserLinkTrackingEnabled);\n    config.enableCorsCorrelation = Util.stringToBoolOrDefault(config.enableCorsCorrelation);\n    return config;\n  };\n\n  return AppInsightsDeprecated;\n}();\n\nexport { AppInsightsDeprecated };","map":null,"metadata":{},"sourceType":"module"}
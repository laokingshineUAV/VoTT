{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Region_1 = require(\"../Region\");\n\nvar DragElement_1 = require(\"./DragElement\");\n\nvar TagsElement_1 = require(\"./TagsElement\");\n/**\r\n * The point-type region class.\r\n */\n\n\nvar PointRegion =\n/*#__PURE__*/\nfunction (_Region_1$Region) {\n  _inherits(PointRegion, _Region_1$Region);\n\n  /**\r\n   * Creates new `PointRegion` object.\r\n   * @param paper - The `Snap.Paper` object to draw on.\r\n   * @param paperRect - The parent bounding box for created component.\r\n   * @param regionData - The `RegionData` object shared across components. Used also for initial setup.\r\n   * @param callbacks - The external callbacks collection.\r\n   * @param id - The region `id` used to identify regions in `RegionsManager`.\r\n   * @param tagsDescriptor - The descriptor of region tags.\r\n   * @param tagsUpdateOptions - The drawing options for tags.\r\n   */\n  function PointRegion(paper) {\n    var _this;\n\n    var paperRect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var regionData = arguments.length > 2 ? arguments[2] : undefined;\n    var callbacks = arguments.length > 3 ? arguments[3] : undefined;\n    var id = arguments.length > 4 ? arguments[4] : undefined;\n    var tagsDescriptor = arguments.length > 5 ? arguments[5] : undefined;\n    var tagsUpdateOptions = arguments.length > 6 ? arguments[6] : undefined;\n\n    _classCallCheck(this, PointRegion);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PointRegion).call(this, paper, paperRect, regionData, callbacks, id, tagsDescriptor, tagsUpdateOptions));\n\n    _this.buildOn(paper);\n\n    return _this;\n  }\n  /**\r\n   * Updates region tags.\r\n   * @param tags - The new tags descriptor object.\r\n   * @param options - The tags drawing options.\r\n   */\n\n\n  _createClass(PointRegion, [{\n    key: \"updateTags\",\n    value: function updateTags(tags, options) {\n      _get(_getPrototypeOf(PointRegion.prototype), \"updateTags\", this).call(this, tags, options);\n\n      this.tagsNode.updateTags(tags, options);\n      this.node.select(\"title\").node.innerHTML = tags !== null ? tags.toString() : \"\";\n    }\n    /**\r\n     * Creates the UI of the region component.\r\n     * @param paper - The `Snap.Paper` element to draw on.\r\n     */\n\n  }, {\n    key: \"buildOn\",\n    value: function buildOn(paper) {\n      this.node = paper.g();\n      this.node.addClass(\"regionStyle\");\n      this.node.addClass(this.styleID);\n      var callbacks = {\n        onChange: this.onChange.bind(this),\n        onManipulationBegin: this.onManipulationBegin.bind(this),\n        onManipulationEnd: this.onManipulationEnd.bind(this)\n      };\n      this.dragNode = new DragElement_1.DragElement(paper, this.paperRect, this.regionData, callbacks);\n      this.tagsNode = new TagsElement_1.TagsElement(paper, this.paperRect, this.regionData, this.tags, this.styleID, this.styleSheet, this.tagsUpdateOptions);\n      this.toolTip = Snap.parse(\"<title>\".concat(this.tags !== null ? this.tags.toString() : \"\", \"</title>\"));\n      this.node.append(this.toolTip);\n      this.node.add(this.dragNode.node);\n      this.node.add(this.tagsNode.node);\n      this.UI.push(this.tagsNode, this.dragNode);\n    }\n  }]);\n\n  return PointRegion;\n}(Region_1.Region);\n\nexports.PointRegion = PointRegion;","map":null,"metadata":{},"sourceType":"script"}
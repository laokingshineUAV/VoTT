{"ast":null,"code":"import os from \"os\";\n/**\n * @name - Host Process\n * @description - Describes the host process\n * @member type - The type of the host process (electron, browser, etc)\n * @member release - The release string of the host process\n */\n\n/**\n * @enum ELECTRON - Electron Host Process Type\n * @enum BROWSER - Browser Host Process Type\n */\nexport var HostProcessType;\n\n(function (HostProcessType) {\n  HostProcessType[HostProcessType[\"Electron\"] = 1] = \"Electron\";\n  HostProcessType[HostProcessType[\"Browser\"] = 2] = \"Browser\";\n  HostProcessType[HostProcessType[\"All\"] = 3] = \"All\";\n})(HostProcessType || (HostProcessType = {}));\n\nexport var PlatformType;\n\n(function (PlatformType) {\n  PlatformType[\"Web\"] = \"web\";\n  PlatformType[\"Windows\"] = \"win32\";\n  PlatformType[\"Linux\"] = \"linux\";\n  PlatformType[\"MacOS\"] = \"darwin\";\n})(PlatformType || (PlatformType = {}));\n\nfunction getHostProcess() {\n  var osRelease = os.release().toLowerCase();\n  var hostProcessType;\n\n  if (osRelease.indexOf(\"electron\") > -1 || process.env.HOST_TYPE === \"electron\") {\n    hostProcessType = HostProcessType.Electron;\n  } else {\n    hostProcessType = HostProcessType.Browser;\n  }\n\n  return {\n    release: osRelease,\n    type: hostProcessType\n  };\n}\n\nexport function isElectron() {\n  return getHostProcess().type === HostProcessType.Electron;\n}\nexport function isBrowser() {\n  return getHostProcess().type === HostProcessType.Browser;\n}\nexport default getHostProcess;","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/common/hostProcess.ts"],"names":["os","HostProcessType","PlatformType","getHostProcess","osRelease","release","toLowerCase","hostProcessType","indexOf","process","env","HOST_TYPE","Electron","Browser","type","isElectron","isBrowser"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AAEA;;;;;;;AAWA;;;;AAIA,WAAYC,eAAZ;;WAAYA,e;AAAAA,EAAAA,e,CAAAA,e;AAAAA,EAAAA,e,CAAAA,e;AAAAA,EAAAA,e,CAAAA,e;GAAAA,e,KAAAA,e;;AAMZ,WAAYC,YAAZ;;WAAYA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAOZ,SAASC,cAAT,GAAwC;AACpC,MAAMC,SAAS,GAAGJ,EAAE,CAACK,OAAH,GAAaC,WAAb,EAAlB;AACA,MAAIC,eAAJ;;AACA,MAAIH,SAAS,CAACI,OAAV,CAAkB,UAAlB,IAAgC,CAAC,CAAjC,IAAsCC,OAAO,CAACC,GAAR,CAAYC,SAAZ,KAA0B,UAApE,EAAgF;AAC5EJ,IAAAA,eAAe,GAAGN,eAAe,CAACW,QAAlC;AACH,GAFD,MAEO;AACHL,IAAAA,eAAe,GAAGN,eAAe,CAACY,OAAlC;AACH;;AAED,SAAO;AACHR,IAAAA,OAAO,EAAED,SADN;AAEHU,IAAAA,IAAI,EAAEP;AAFH,GAAP;AAIH;;AAED,OAAO,SAASQ,UAAT,GAA+B;AAClC,SAAOZ,cAAc,GAAGW,IAAjB,KAA0Bb,eAAe,CAACW,QAAjD;AACH;AAED,OAAO,SAASI,SAAT,GAA8B;AACjC,SAAOb,cAAc,GAAGW,IAAjB,KAA0Bb,eAAe,CAACY,OAAjD;AACH;AAED,eAAeV,cAAf","sourcesContent":["import os from \"os\";\n\n/**\n * @name - Host Process\n * @description - Describes the host process\n * @member type - The type of the host process (electron, browser, etc)\n * @member release - The release string of the host process\n */\nexport interface IHostProcess {\n    type: HostProcessType;\n    release: string;\n}\n\n/**\n * @enum ELECTRON - Electron Host Process Type\n * @enum BROWSER - Browser Host Process Type\n */\nexport enum HostProcessType {\n    Electron = 1, // bits: 01\n    Browser = 2,  // bits: 10\n    All = 3,      // bits: 11\n}\n\nexport enum PlatformType {\n    Web = \"web\",\n    Windows = \"win32\",\n    Linux = \"linux\",\n    MacOS = \"darwin\",\n}\n\nfunction getHostProcess(): IHostProcess {\n    const osRelease = os.release().toLowerCase();\n    let hostProcessType: HostProcessType;\n    if (osRelease.indexOf(\"electron\") > -1 || process.env.HOST_TYPE === \"electron\") {\n        hostProcessType = HostProcessType.Electron;\n    } else {\n        hostProcessType = HostProcessType.Browser;\n    }\n\n    return {\n        release: osRelease,\n        type: hostProcessType,\n    };\n}\n\nexport function isElectron(): boolean {\n    return getHostProcess().type === HostProcessType.Electron;\n}\n\nexport function isBrowser(): boolean {\n    return getHostProcess().type === HostProcessType.Browser;\n}\n\nexport default getHostProcess;\n"]},"metadata":{},"sourceType":"module"}
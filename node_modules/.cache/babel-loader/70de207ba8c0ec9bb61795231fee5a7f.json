{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/common/assetPreview/assetPreview.tsx\";\nimport React from \"react\";\nimport { AssetType } from \"../../../../models/applicationState\";\nimport { strings } from \"../../../../common/strings\";\nimport { ImageAsset } from \"./imageAsset\";\nimport { VideoAsset } from \"./videoAsset\";\nimport { TFRecordAsset } from \"./tfrecordAsset\";\n\n/**\n * @name - Asset Preview\n * @description - Small preview of assets for selection in editor page\n */\nexport var AssetPreview =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AssetPreview, _React$Component);\n\n  function AssetPreview() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AssetPreview);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AssetPreview)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loaded: false,\n      hasError: false\n    };\n\n    _this.renderAsset = function () {\n      var _this$props = _this.props,\n          asset = _this$props.asset,\n          childAssets = _this$props.childAssets,\n          autoPlay = _this$props.autoPlay;\n      var rootAsset = asset.parent || asset;\n\n      switch (asset.type) {\n        case AssetType.Image:\n          return React.createElement(ImageAsset, {\n            asset: rootAsset,\n            additionalSettings: _this.props.additionalSettings,\n            onLoaded: _this.onAssetLoad,\n            onError: _this.onError,\n            onActivated: _this.props.onActivated,\n            onDeactivated: _this.props.onDeactivated,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 145\n            },\n            __self: this\n          });\n\n        case AssetType.Video:\n        case AssetType.VideoFrame:\n          return React.createElement(VideoAsset, {\n            asset: rootAsset,\n            controlsEnabled: _this.props.controlsEnabled,\n            additionalSettings: _this.props.additionalSettings,\n            childAssets: childAssets,\n            timestamp: asset.timestamp,\n            autoPlay: autoPlay,\n            onLoaded: _this.onAssetLoad,\n            onError: _this.onError,\n            onBeforeAssetChanged: _this.props.onBeforeAssetChanged,\n            onChildAssetSelected: _this.onChildAssetSelected,\n            onActivated: _this.props.onActivated,\n            onDeactivated: _this.props.onDeactivated,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 153\n            },\n            __self: this\n          });\n\n        case AssetType.TFRecord:\n          return React.createElement(TFRecordAsset, {\n            asset: asset,\n            onLoaded: _this.onAssetLoad,\n            onError: _this.onError,\n            onActivated: _this.props.onActivated,\n            onDeactivated: _this.props.onDeactivated,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 166\n            },\n            __self: this\n          });\n\n        default:\n          return React.createElement(\"div\", {\n            className: \"asset-error\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172\n            },\n            __self: this\n          }, strings.editorPage.assetError);\n      }\n    };\n\n    _this.onAssetLoad = function (contentSource) {\n      _this.setState({\n        loaded: true\n      }, function () {\n        if (_this.props.onLoaded) {\n          _this.props.onLoaded(contentSource);\n        }\n      });\n    };\n\n    _this.onError = function (e) {\n      _this.setState({\n        hasError: true,\n        loaded: true\n      }, function () {\n        if (_this.props.onError) {\n          _this.props.onError(e);\n        }\n      });\n    };\n\n    _this.onChildAssetSelected = function (asset) {\n      if (_this.props.onBeforeAssetChanged) {\n        if (!_this.props.onBeforeAssetChanged()) {\n          return;\n        }\n      }\n\n      if (_this.props.onChildAssetSelected) {\n        _this.props.onChildAssetSelected(asset);\n      }\n\n      if (_this.props.onAssetChanged) {\n        _this.props.onAssetChanged(asset);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(AssetPreview, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.asset.id !== prevProps.asset.id) {\n        this.setState({\n          loaded: false,\n          hasError: false\n        });\n\n        if (this.props.onAssetChanged) {\n          this.props.onAssetChanged(this.props.asset);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          loaded = _this$state.loaded,\n          hasError = _this$state.hasError;\n      var size = this.props.asset.size;\n      var classNames = [\"asset-preview\"];\n\n      if (size) {\n        if (size.width > size.height) {\n          classNames.push(\"landscape\");\n        } else {\n          classNames.push(\"portrait\");\n        }\n      }\n\n      return React.createElement(\"div\", {\n        className: classNames.join(\" \"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"asset-preview-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, !loaded && React.createElement(\"div\", {\n        className: \"asset-loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"asset-loading-spinner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-circle-notch fa-spin\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }))), hasError && React.createElement(\"div\", {\n        className: \"asset-error text-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-2x fa-exclamation-circle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"m-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, strings.editorPage.assetError)), !hasError && this.renderAsset()));\n    }\n  }]);\n\n  return AssetPreview;\n}(React.Component);\nAssetPreview.defaultProps = {\n  asset: null,\n  childAssets: [],\n  autoPlay: false,\n  controlsEnabled: true\n};","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/common/assetPreview/assetPreview.tsx"],"names":["React","AssetType","strings","ImageAsset","VideoAsset","TFRecordAsset","AssetPreview","state","loaded","hasError","renderAsset","props","asset","childAssets","autoPlay","rootAsset","parent","type","Image","additionalSettings","onAssetLoad","onError","onActivated","onDeactivated","Video","VideoFrame","controlsEnabled","timestamp","onBeforeAssetChanged","onChildAssetSelected","TFRecord","editorPage","assetError","contentSource","setState","onLoaded","e","onAssetChanged","prevProps","id","size","classNames","width","height","push","join","Component","defaultProps"],"mappings":"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","sourcesContent":["import React, { SyntheticEvent } from \"react\";\nimport { IAsset, AssetType, IProjectVideoSettings } from \"../../../../models/applicationState\";\nimport { strings } from \"../../../../common/strings\";\nimport { ImageAsset } from \"./imageAsset\";\nimport { VideoAsset } from \"./videoAsset\";\nimport { TFRecordAsset } from \"./tfrecordAsset\";\n\nexport interface IGenericContentSource {\n    width: number;\n    height: number;\n    offsetWidth: number;\n    offsetHeight: number;\n    offsetTop: number;\n    offsetLeft: number;\n}\nexport type ContentSource = HTMLImageElement | HTMLVideoElement | IGenericContentSource;\n\n/**\n * AssetPreview component properties\n */\nexport interface IAssetProps {\n    /** The Asset to preview */\n    asset: IAsset;\n    /** The child assets (ex. video frames) of the parent asset */\n    childAssets?: IAsset[];\n    /** Additional settings for this asset */\n    additionalSettings?: IAssetPreviewSettings;\n    /** Specifies whether the asset controls are enabled */\n    controlsEnabled?: boolean;\n    /** Event handler that fires when the asset has been loaded */\n    onLoaded?: (ContentSource: ContentSource) => void;\n    /** Event handler that fires when the asset has been activated (ex. Video resumes playing) */\n    onActivated?: (contentSource: ContentSource) => void;\n    /** Event handler that fires when the asset has been deactivated (ex. Canvas tools takes over) */\n    onDeactivated?: (contentSource: ContentSource) => void;\n    /** Event handler that fires when a child asset is selected (ex. Paused on a video frame) */\n    onChildAssetSelected?: (asset: IAsset) => void;\n    /** Event handler that fires when an error occurred loading an asset */\n    onError?: (event: React.SyntheticEvent) => void;\n    /** Event handler that fires when the loaded asset has changed */\n    onAssetChanged?: (asset: IAsset) => void;\n    /** Event handler that fires right before an asset has changed */\n    onBeforeAssetChanged?: () => boolean;\n}\n\n/**\n * Properties for Asset Preview\n * @member asset - Asset for preview\n */\nexport interface IAssetPreviewProps extends IAssetProps, React.Props<AssetPreview> {\n    autoPlay?: boolean;\n}\n\n/**\n * State for Asset Preview\n * @member loaded - Asset is loaded\n */\nexport interface IAssetPreviewState {\n    loaded: boolean;\n    hasError: boolean;\n}\n\n/**\n * Settings used by the various asset previews\n * @member videoSettings - Video settings for this asset\n */\nexport interface IAssetPreviewSettings {\n    videoSettings: IProjectVideoSettings;\n}\n\n/**\n * @name - Asset Preview\n * @description - Small preview of assets for selection in editor page\n */\nexport class AssetPreview extends React.Component<IAssetPreviewProps, IAssetPreviewState> {\n    /** Default properties for component if not defined */\n    public static defaultProps: IAssetPreviewProps = {\n        asset: null,\n        childAssets: [],\n        autoPlay: false,\n        controlsEnabled: true,\n    };\n\n    /** The internal state for the component */\n    public state: IAssetPreviewState = {\n        loaded: false,\n        hasError: false,\n    };\n\n    public componentDidUpdate(prevProps: Readonly<IAssetPreviewProps>) {\n        if (this.props.asset.id !== prevProps.asset.id) {\n            this.setState({\n                loaded: false,\n                hasError: false,\n            });\n\n            if (this.props.onAssetChanged) {\n                this.props.onAssetChanged(this.props.asset);\n            }\n        }\n    }\n\n    public render() {\n        const { loaded, hasError } = this.state;\n        const size = this.props.asset.size;\n        const classNames = [\"asset-preview\"];\n        if (size) {\n            if (size.width > size.height) {\n                classNames.push(\"landscape\");\n            } else {\n                classNames.push(\"portrait\");\n            }\n        }\n\n        return (\n            <div className={classNames.join(\" \")}>\n                <div className=\"asset-preview-container\">\n                    {!loaded &&\n                        <div className=\"asset-loading\">\n                            <div className=\"asset-loading-spinner\">\n                                <i className=\"fas fa-circle-notch fa-spin\" />\n                            </div>\n                        </div>\n                    }\n                    {hasError &&\n                        <div className=\"asset-error text-danger\">\n                            <i className=\"fas fa-2x fa-exclamation-circle\" />\n                            <p className=\"m-2\">{strings.editorPage.assetError}</p>\n                        </div>\n                    }\n                    {!hasError &&\n                        this.renderAsset()\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    private renderAsset = () => {\n        const { asset, childAssets, autoPlay } = this.props;\n        const rootAsset = asset.parent || asset;\n\n        switch (asset.type) {\n            case AssetType.Image:\n                return <ImageAsset asset={rootAsset}\n                    additionalSettings={this.props.additionalSettings}\n                    onLoaded={this.onAssetLoad}\n                    onError={this.onError}\n                    onActivated={this.props.onActivated}\n                    onDeactivated={this.props.onDeactivated} />;\n            case AssetType.Video:\n            case AssetType.VideoFrame:\n                return <VideoAsset asset={rootAsset}\n                    controlsEnabled={this.props.controlsEnabled}\n                    additionalSettings={this.props.additionalSettings}\n                    childAssets={childAssets}\n                    timestamp={asset.timestamp}\n                    autoPlay={autoPlay}\n                    onLoaded={this.onAssetLoad}\n                    onError={this.onError}\n                    onBeforeAssetChanged={this.props.onBeforeAssetChanged}\n                    onChildAssetSelected={this.onChildAssetSelected}\n                    onActivated={this.props.onActivated}\n                    onDeactivated={this.props.onDeactivated} />;\n            case AssetType.TFRecord:\n                return <TFRecordAsset asset={asset}\n                    onLoaded={this.onAssetLoad}\n                    onError={this.onError}\n                    onActivated={this.props.onActivated}\n                    onDeactivated={this.props.onDeactivated} />;\n            default:\n                return <div className=\"asset-error\">{strings.editorPage.assetError}</div>;\n        }\n    }\n\n    /**\n     * Internal event handler for when the referenced asset has been loaded\n     * @param contentSource The visual HTML element of the asset (img/video tag)\n     */\n    private onAssetLoad = (contentSource: ContentSource) => {\n        this.setState({\n            loaded: true,\n        }, () => {\n            if (this.props.onLoaded) {\n                this.props.onLoaded(contentSource);\n            }\n        });\n    }\n\n    private onError = (e: SyntheticEvent) => {\n        this.setState({\n            hasError: true,\n            loaded: true,\n        }, () => {\n            if (this.props.onError) {\n                this.props.onError(e);\n            }\n        });\n    }\n\n    private onChildAssetSelected = (asset: IAsset) => {\n        if (this.props.onBeforeAssetChanged) {\n            if (!this.props.onBeforeAssetChanged()) {\n                return;\n            }\n        }\n\n        if (this.props.onChildAssetSelected) {\n            this.props.onChildAssetSelected(asset);\n        }\n\n        if (this.props.onAssetChanged) {\n            this.props.onAssetChanged(asset);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
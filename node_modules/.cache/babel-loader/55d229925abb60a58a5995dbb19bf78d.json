{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport { reactAI } from \"./ReactAI\";\n/**\r\n * Higher-order component function to hook Application Insights tracking\r\n * in a React component's lifecycle.\r\n *\r\n * @param Component the component to be instrumented with Application Insights tracking\r\n * @param componentName (optional) component name\r\n */\n\nexport default function withAITracking(Component, componentName) {\n  if (componentName === undefined || componentName === null || typeof componentName !== 'string') {\n    componentName = Component.prototype.constructor.name;\n  }\n\n  return (\n    /** @class */\n    function (_super) {\n      tslib_1.__extends(class_1, _super);\n\n      function class_1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n\n        _this.mountTimestamp = 0;\n        _this.firstActiveTimestamp = 0;\n        _this.idleStartTimestamp = 0;\n        _this.lastActiveTimestamp = 0;\n        _this.totalIdleTime = 0;\n        _this.idleCount = 0;\n        _this.idleTimeout = 5000;\n\n        _this.trackActivity = function (e) {\n          if (_this.firstActiveTimestamp === 0) {\n            _this.firstActiveTimestamp = Date.now();\n            _this.lastActiveTimestamp = _this.firstActiveTimestamp;\n          } else {\n            _this.lastActiveTimestamp = Date.now();\n          }\n\n          if (_this.idleStartTimestamp > 0) {\n            var lastIdleTime = _this.lastActiveTimestamp - _this.idleStartTimestamp;\n            _this.totalIdleTime += lastIdleTime;\n\n            _this.debugLog(\"trackActivity\", \"Idle to active added \" + lastIdleTime / 1000 + \" seconds of idle time.\");\n\n            _this.idleStartTimestamp = 0;\n          }\n        };\n\n        return _this;\n      }\n\n      class_1.prototype.componentDidMount = function () {\n        var _this = this;\n\n        this.mountTimestamp = Date.now();\n        this.firstActiveTimestamp = 0;\n        this.totalIdleTime = 0;\n        this.lastActiveTimestamp = 0;\n        this.idleStartTimestamp = 0;\n        this.idleCount = 0;\n        this.intervalId = setInterval(function () {\n          if (_this.lastActiveTimestamp > 0 && _this.idleStartTimestamp === 0 && Date.now() - _this.lastActiveTimestamp >= _this.idleTimeout) {\n            _this.idleStartTimestamp = Date.now();\n            _this.idleCount++;\n\n            _this.debugLog(\"componentDidMount\", \"Starting idle time.\");\n          }\n        }, 100);\n      };\n\n      class_1.prototype.componentWillUnmount = function () {\n        if (this.mountTimestamp === 0) {\n          throw new Error(\"withAITracking:componentWillUnmount: mountTimestamp isn't initialized.\");\n        }\n\n        if (!reactAI.appInsights) {\n          throw new Error(\"withAITracking:componentWillUnmount: ReactAI isn't initialized.\");\n        }\n\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n        }\n\n        if (this.firstActiveTimestamp === 0) {\n          this.debugLog(\"componentWillUnmount\", \"Nothing to track.\");\n          return;\n        }\n\n        var engagementTime = this.getEngagementTimeSeconds();\n        var metricData = {\n          average: engagementTime,\n          name: \"React Component Engaged Time (seconds)\",\n          sampleCount: 1\n        };\n        var additionalProperties = {\n          \"Component Name\": componentName\n        };\n        this.debugLog(\"componentWillUnmount\", \"Tracking \" + engagementTime + \" seconds of engagement time for \" + componentName + \".\");\n        reactAI.appInsights.trackMetric(metricData, additionalProperties);\n      };\n\n      class_1.prototype.render = function () {\n        return React.createElement(\"div\", {\n          onKeyDown: this.trackActivity,\n          onMouseMove: this.trackActivity,\n          onScroll: this.trackActivity,\n          onMouseDown: this.trackActivity,\n          onTouchStart: this.trackActivity,\n          onTouchMove: this.trackActivity\n        }, React.createElement(Component, tslib_1.__assign({}, this.props)));\n      };\n\n      class_1.prototype.debugLog = function (from, message) {\n        if (reactAI.isDebugMode) {\n          console.log(\"withAITracking:\" + componentName + \":\" + from + \": \" + message, {\n            engagementTime: this.getEngagementTimeSeconds(),\n            firstActiveTime: this.firstActiveTimestamp,\n            idleStartTime: this.idleStartTimestamp,\n            idleTimeMs: this.totalIdleTime,\n            lastActiveTime: this.lastActiveTimestamp,\n            mountTimestamp: this.mountTimestamp\n          });\n        }\n      };\n\n      class_1.prototype.getEngagementTimeSeconds = function () {\n        return (Date.now() - this.firstActiveTimestamp - this.totalIdleTime - this.idleCount * this.idleTimeout) / 1000;\n      };\n\n      return class_1;\n    }(React.Component)\n  );\n}","map":null,"metadata":{},"sourceType":"module"}
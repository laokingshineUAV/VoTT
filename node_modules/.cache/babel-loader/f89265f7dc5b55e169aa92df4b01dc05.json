{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Mappers from \"../models/blobMappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class representing a Blob. */\n\nvar Blob =\n/** @class */\nfunction () {\n  /**\n   * Create a Blob.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  function Blob(client) {\n    this.client = client;\n  }\n\n  Blob.prototype.download = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, downloadOperationSpec, callback);\n  };\n\n  Blob.prototype.getProperties = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, getPropertiesOperationSpec, callback);\n  };\n\n  Blob.prototype.deleteMethod = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, deleteMethodOperationSpec, callback);\n  };\n\n  Blob.prototype.undelete = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, undeleteOperationSpec, callback);\n  };\n\n  Blob.prototype.setHTTPHeaders = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, setHTTPHeadersOperationSpec, callback);\n  };\n\n  Blob.prototype.setMetadata = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, setMetadataOperationSpec, callback);\n  };\n\n  Blob.prototype.acquireLease = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, acquireLeaseOperationSpec, callback);\n  };\n\n  Blob.prototype.releaseLease = function (leaseId, options, callback) {\n    return this.client.sendOperationRequest({\n      leaseId: leaseId,\n      options: options\n    }, releaseLeaseOperationSpec, callback);\n  };\n\n  Blob.prototype.renewLease = function (leaseId, options, callback) {\n    return this.client.sendOperationRequest({\n      leaseId: leaseId,\n      options: options\n    }, renewLeaseOperationSpec, callback);\n  };\n\n  Blob.prototype.changeLease = function (leaseId, proposedLeaseId, options, callback) {\n    return this.client.sendOperationRequest({\n      leaseId: leaseId,\n      proposedLeaseId: proposedLeaseId,\n      options: options\n    }, changeLeaseOperationSpec, callback);\n  };\n\n  Blob.prototype.breakLease = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, breakLeaseOperationSpec, callback);\n  };\n\n  Blob.prototype.createSnapshot = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, createSnapshotOperationSpec, callback);\n  };\n\n  Blob.prototype.startCopyFromURL = function (copySource, options, callback) {\n    return this.client.sendOperationRequest({\n      copySource: copySource,\n      options: options\n    }, startCopyFromURLOperationSpec, callback);\n  };\n\n  Blob.prototype.abortCopyFromURL = function (copyId, options, callback) {\n    return this.client.sendOperationRequest({\n      copyId: copyId,\n      options: options\n    }, abortCopyFromURLOperationSpec, callback);\n  };\n\n  Blob.prototype.setTier = function (tier, options, callback) {\n    return this.client.sendOperationRequest({\n      tier: tier,\n      options: options\n    }, setTierOperationSpec, callback);\n  };\n\n  Blob.prototype.getAccountInfo = function (options, callback) {\n    return this.client.sendOperationRequest({\n      options: options\n    }, getAccountInfoOperationSpec, callback);\n  };\n\n  return Blob;\n}();\n\nexport { Blob }; // Operation Specifications\n\nvar serializer = new msRest.Serializer(Mappers, true);\nvar downloadOperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.snapshot, Parameters.timeout],\n  headerParameters: [Parameters.range, Parameters.rangeGetContentMD5, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    206: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar getPropertiesOperationSpec = {\n  httpMethod: \"HEAD\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.snapshot, Parameters.timeout],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar deleteMethodOperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.snapshot, Parameters.timeout],\n  headerParameters: [Parameters.deleteSnapshots, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch],\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar undeleteOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp6],\n  headerParameters: [Parameters.version, Parameters.requestId],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobUndeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar setHTTPHeadersOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp0],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetHTTPHeadersHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar setMetadataOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp3],\n  headerParameters: [Parameters.metadata, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar acquireLeaseOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp5],\n  headerParameters: [Parameters.duration, Parameters.proposedLeaseId0, Parameters.version, Parameters.requestId, Parameters.action0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch],\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar releaseLeaseOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp5],\n  headerParameters: [Parameters.leaseId1, Parameters.version, Parameters.requestId, Parameters.action1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar renewLeaseOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp5],\n  headerParameters: [Parameters.leaseId1, Parameters.version, Parameters.requestId, Parameters.action2, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar changeLeaseOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp5],\n  headerParameters: [Parameters.leaseId1, Parameters.proposedLeaseId1, Parameters.version, Parameters.requestId, Parameters.action4, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar breakLeaseOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp5],\n  headerParameters: [Parameters.breakPeriod, Parameters.version, Parameters.requestId, Parameters.action3, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch],\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar createSnapshotOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp7],\n  headerParameters: [Parameters.metadata, Parameters.version, Parameters.requestId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.leaseId0],\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobCreateSnapshotHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar startCopyFromURLOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout],\n  headerParameters: [Parameters.metadata, Parameters.copySource, Parameters.version, Parameters.requestId, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.leaseId0],\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobStartCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar abortCopyFromURLOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.copyId, Parameters.timeout, Parameters.comp8],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.copyActionAbortConstant, Parameters.leaseId0],\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobAbortCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar setTierOperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.timeout, Parameters.comp9],\n  headerParameters: [Parameters.tier, Parameters.version, Parameters.requestId, Parameters.leaseId0],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    202: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};\nvar getAccountInfoOperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}/{blobName}\",\n  urlParameters: [Parameters.url],\n  queryParameters: [Parameters.restype1, Parameters.comp0],\n  headerParameters: [Parameters.version],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer: serializer\n};","map":null,"metadata":{},"sourceType":"module"}
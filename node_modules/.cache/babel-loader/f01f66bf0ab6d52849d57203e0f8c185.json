{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/common/messageBox/messageBox.tsx\";\nimport React from \"react\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n/**\n * Accepts any number of parameters and returns a string\n */\n\n/**\n * Generic modal that displays a message\n */\nvar MessageBox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MessageBox, _React$Component);\n\n  function MessageBox(props, context) {\n    var _this;\n\n    _classCallCheck(this, MessageBox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MessageBox).call(this, props, context));\n\n    _this.getMessage = function (message) {\n      if (typeof message === \"function\") {\n        return message.apply(_assertThisInitialized(_assertThisInitialized(_this)), _this.props.params);\n      } else {\n        return message;\n      }\n    };\n\n    _this.state = {\n      isOpen: props.show,\n      isRendered: props.show,\n      isButtonSelected: false\n    };\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.open = _this.open.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.close = _this.close.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onFooterClick = _this.onFooterClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onClosed = _this.onClosed.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MessageBox, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.state.isRendered) {\n        return null;\n      }\n\n      return React.createElement(Modal, {\n        className: \"messagebox-modal\",\n        isOpen: this.state.isOpen,\n        onClosed: this.onClosed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, this.props.title), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, this.getMessage(this.props.message)), !this.props.hideFooter && React.createElement(ModalFooter, {\n        onClick: this.onFooterClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, this.props.children));\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      this.setState({\n        isOpen: true,\n        isRendered: true,\n        isButtonSelected: false\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this2 = this;\n\n      this.setState({\n        isOpen: false\n      }, function () {\n        if (!_this2.state.isButtonSelected && _this2.props.onCancel) {\n          _this2.props.onCancel();\n        }\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.show !== this.props.show) {\n        this.setState({\n          isOpen: this.props.show,\n          isRendered: this.props.show\n        });\n      }\n    }\n  }, {\n    key: \"onFooterClick\",\n    value: function onFooterClick(evt) {\n      var _this3 = this;\n\n      var htmlElement = evt.target;\n\n      if (htmlElement.tagName === \"BUTTON\") {\n        this.setState({\n          isButtonSelected: true\n        }, function () {\n          _this3.close();\n\n          if (_this3.props.onButtonSelect) {\n            _this3.props.onButtonSelect(htmlElement);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (this.state.isOpen) {\n        this.close();\n      } else {\n        this.open();\n      }\n    }\n  }, {\n    key: \"onClosed\",\n    value: function onClosed() {\n      this.setState({\n        isRendered: false\n      });\n    }\n  }]);\n\n  return MessageBox;\n}(React.Component);\n\nexport { MessageBox as default };","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/common/messageBox/messageBox.tsx"],"names":["React","Modal","ModalHeader","ModalBody","ModalFooter","MessageBox","props","context","getMessage","message","apply","params","state","isOpen","show","isRendered","isButtonSelected","toggle","bind","open","close","onFooterClick","onClosed","title","hideFooter","children","setState","onCancel","prevProps","evt","htmlElement","target","tagName","onButtonSelect","Component"],"mappings":"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","sourcesContent":["import React, { SyntheticEvent, ReactElement } from \"react\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n\n/**\n * Accepts any number of parameters and returns a string\n */\nexport type MessageFormatHandler = (...params: any[]) => string;\n\n/**\n * Properties for Message Box component\n * @member title - Title for message box\n * @member message - Message for message box\n * @member params - Array of additional parameters\n * @member onButtonSelect - Function to call when button is selected\n * @member onCancel - Function to call upon cancel\n */\nexport interface IMessageBoxProps {\n    title: string;\n    message: string | ReactElement<any> | MessageFormatHandler;\n    params?: any[];\n    onButtonSelect?: (button: HTMLButtonElement) => void;\n    onCancel?: () => void;\n    show?: boolean;\n    hideFooter?: boolean;\n}\n\n/**\n * State for Message Box\n * @member isOpen - Message box is open\n * @member isRendered - Message box is rendered\n * @member isButtonSelected - Message box button is selected\n */\nexport interface IMessageBoxState {\n    isOpen: boolean;\n    isRendered: boolean;\n    isButtonSelected: boolean;\n}\n\n/**\n * Generic modal that displays a message\n */\nexport default class MessageBox extends React.Component<IMessageBoxProps, IMessageBoxState> {\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            isOpen: props.show,\n            isRendered: props.show,\n            isButtonSelected: false,\n        };\n\n        this.toggle = this.toggle.bind(this);\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onFooterClick = this.onFooterClick.bind(this);\n        this.onClosed = this.onClosed.bind(this);\n    }\n\n    public render() {\n        if (!this.state.isRendered) {\n            return null;\n        }\n\n        return (\n            <Modal className=\"messagebox-modal\"\n                isOpen={this.state.isOpen}\n                onClosed={this.onClosed}>\n                <ModalHeader toggle={this.toggle}>{this.props.title}</ModalHeader>\n                <ModalBody>{this.getMessage(this.props.message)}</ModalBody>\n                {!this.props.hideFooter && <ModalFooter onClick={this.onFooterClick}>\n                    {this.props.children}\n                </ModalFooter>}\n            </Modal>\n        );\n    }\n\n    public open(): void {\n        this.setState({\n            isOpen: true,\n            isRendered: true,\n            isButtonSelected: false,\n        });\n    }\n\n    public close(): void {\n        this.setState({\n            isOpen: false,\n        }, () => {\n            if (!this.state.isButtonSelected && this.props.onCancel) {\n                this.props.onCancel();\n            }\n        });\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IMessageBoxProps>): void {\n        if (prevProps.show !== this.props.show) {\n            this.setState({\n                isOpen: this.props.show,\n                isRendered: this.props.show,\n            });\n        }\n    }\n\n    private getMessage = (message: string | MessageFormatHandler | ReactElement<any>) => {\n        if (typeof message === \"function\") {\n            return message.apply(this, this.props.params);\n        } else {\n            return message;\n        }\n    }\n\n    private onFooterClick(evt: SyntheticEvent) {\n        const htmlElement = evt.target as HTMLButtonElement;\n        if (htmlElement.tagName === \"BUTTON\") {\n            this.setState({\n                isButtonSelected: true,\n            }, () => {\n                this.close();\n                if (this.props.onButtonSelect) {\n                    this.props.onButtonSelect(htmlElement);\n                }\n            });\n        }\n    }\n\n    private toggle() {\n        if (this.state.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    private onClosed() {\n        this.setState({\n            isRendered: false,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
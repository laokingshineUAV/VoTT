{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Guard from \"../guard\";\n/**\n * Processes items in the map within the specified batch size (default: 5)\n * @param this The map to process\n * @param action The action to perform on each item in the map\n * @param batchSize The batch size for actions to perform in parallel (default: 5)\n */\n\nexport function forEachAsync(_x) {\n  return _forEachAsync.apply(this, arguments);\n}\n\nfunction _forEachAsync() {\n  _forEachAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(action) {\n    var batchSize,\n        all,\n        batch,\n        tasks,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            batchSize = _args.length > 1 && _args[1] !== undefined ? _args[1] : 5;\n            Guard.null(this);\n            Guard.null(action);\n            Guard.expression(batchSize, function (value) {\n              return value > 0;\n            });\n            all = _toConsumableArray(this.entries());\n\n          case 5:\n            if (!(all.length > 0)) {\n              _context.next = 13;\n              break;\n            }\n\n            batch = [];\n\n            while (all.length > 0 && batch.length < batchSize) {\n              batch.push(all.pop());\n            }\n\n            tasks = batch.map(function (item) {\n              return action(item[1], item[0]);\n            });\n            _context.next = 11;\n            return Promise.all(tasks);\n\n          case 11:\n            _context.next = 5;\n            break;\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _forEachAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/common/extensions/map.ts"],"names":["Guard","forEachAsync","action","batchSize","null","expression","value","all","entries","length","batch","push","pop","tasks","map","item","Promise"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA;;;;;;;AAMA,gBAAsBC,YAAtB;AAAA;AAAA;;;;;2BAAO,iBAEHC,MAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGHC,YAAAA,SAHG,2DAGiB,CAHjB;AAIHH,YAAAA,KAAK,CAACI,IAAN,CAAW,IAAX;AACAJ,YAAAA,KAAK,CAACI,IAAN,CAAWF,MAAX;AACAF,YAAAA,KAAK,CAACK,UAAN,CAAiBF,SAAjB,EAA4B,UAACG,KAAD;AAAA,qBAAWA,KAAK,GAAG,CAAnB;AAAA,aAA5B;AAEMC,YAAAA,GARH,sBAQ4B,KAAKC,OAAL,EAR5B;;AAAA;AAAA,kBAUID,GAAG,CAACE,MAAJ,GAAa,CAVjB;AAAA;AAAA;AAAA;;AAWOC,YAAAA,KAXP,GAW8B,EAX9B;;AAaC,mBAAOH,GAAG,CAACE,MAAJ,GAAa,CAAb,IAAkBC,KAAK,CAACD,MAAN,GAAeN,SAAxC,EAAmD;AAC/CO,cAAAA,KAAK,CAACC,IAAN,CAAWJ,GAAG,CAACK,GAAJ,EAAX;AACH;;AAEKC,YAAAA,KAjBP,GAiBeH,KAAK,CAACI,GAAN,CAAU,UAACC,IAAD;AAAA,qBAAUb,MAAM,CAACa,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAhB;AAAA,aAAV,CAjBf;AAAA;AAAA,mBAkBOC,OAAO,CAACT,GAAR,CAAYM,KAAZ,CAlBP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import Guard from \"../guard\";\n\n/**\n * Processes items in the map within the specified batch size (default: 5)\n * @param this The map to process\n * @param action The action to perform on each item in the map\n * @param batchSize The batch size for actions to perform in parallel (default: 5)\n */\nexport async function forEachAsync<K, V>(\n    this: Map<K, V>,\n    action: (value: V, key: K) => Promise<void>,\n    batchSize: number = 5): Promise<void> {\n    Guard.null(this);\n    Guard.null(action);\n    Guard.expression(batchSize, (value) => value > 0);\n\n    const all: Array<[K, V]> = [...this.entries()];\n\n    while (all.length > 0) {\n        const batch: Array<[K, V]> = [];\n\n        while (all.length > 0 && batch.length < batchSize) {\n            batch.push(all.pop());\n        }\n\n        const tasks = batch.map((item) => action(item[1], item[0]));\n        await Promise.all(tasks);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
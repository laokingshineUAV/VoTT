{"ast":null,"code":"/**\r\n * PropertiesPlugin.ts\r\n * @copyright Microsoft 2018\r\n */\nimport { Session, _SessionManager } from './Context/Session';\nimport { Extensions, CtxTagKeys, SDKExtensionKeys } from '@microsoft/applicationinsights-common';\nimport { Application } from './Context/Application';\nimport { Device } from './Context/Device';\nimport { Internal } from './Context/Internal';\nimport { Sample } from './Context/Sample';\nimport { User } from './Context/User';\nimport { Location } from './Context/Location';\nimport { TelemetryTrace } from './Context/TelemetryTrace';\n\nvar TelemetryContext =\n/** @class */\nfunction () {\n  function TelemetryContext(logger, defaultConfig) {\n    if (typeof window !== 'undefined') {\n      this.sessionManager = new _SessionManager(defaultConfig, logger);\n      this.application = new Application();\n      this.device = new Device();\n      this.internal = new Internal(defaultConfig);\n      this.location = new Location();\n      this.user = new User(defaultConfig, logger);\n      this.telemetryTrace = new TelemetryTrace();\n      this.session = new Session();\n      this.sample = new Sample(defaultConfig.samplingPercentage(), logger);\n    }\n  }\n\n  TelemetryContext.prototype.applySessionContext = function (event) {\n    var sessionContext = this.session || this.sessionManager.automaticSession;\n\n    if (sessionContext) {\n      if (typeof sessionContext.id === \"string\") {\n        event.ext.app.sesId = sessionContext.id;\n      }\n    }\n\n    if (this.session) {\n      // If customer set session info, apply his context; otherwise apply context automatically generated \n      if (typeof this.session.id === \"string\") {\n        event.ext.app.sesId = this.session.id;\n      } else {\n        event.ext.app.sesId = this.sessionManager.automaticSession.id;\n      }\n    }\n  };\n\n  TelemetryContext.prototype.applyOperatingSystemContxt = function (event) {\n    if (this.os && this.os.name) {\n      event.ext.os = this.os;\n    }\n  };\n\n  TelemetryContext.prototype.applyApplicationContext = function (event) {\n    if (this.application) {\n      if (typeof this.application.ver === \"string\") {\n        event.tags.push((_a = {}, _a[CtxTagKeys.applicationVersion] = this.application.ver, _a));\n      }\n\n      if (typeof this.application.build === \"string\") {\n        event.tags.push((_b = {}, _b[CtxTagKeys.applicationBuild] = this.application.build, _b));\n      }\n    }\n\n    var _a, _b;\n  };\n\n  TelemetryContext.prototype.applyDeviceContext = function (event) {\n    if (this.device) {\n      if (typeof this.device.id === \"string\") {\n        event.ext.device.localId = this.device.id;\n      }\n\n      if (typeof this.device.ip === \"string\") {\n        event.ext.device.ip = this.device.ip;\n      }\n\n      if (typeof this.device.model === \"string\") {\n        event.ext.device.model = this.device.model;\n      }\n\n      if (typeof this.device.deviceClass === \"string\") {\n        event.ext.device.deviceClass = this.device.deviceClass;\n      }\n    }\n  };\n\n  TelemetryContext.prototype.applyInternalContext = function (event) {\n    if (this.internal) {\n      if (typeof this.internal.agentVersion === \"string\") {\n        event.tags.push((_a = {}, _a[CtxTagKeys.internalAgentVersion] = this.internal.agentVersion, _a)); // not mapped in CS 4.0\n      }\n\n      if (typeof this.internal.sdkVersion === \"string\") {\n        event.tags.push((_b = {}, _b[CtxTagKeys.internalSdkVersion] = this.internal.sdkVersion, _b));\n      } else {\n        // store the version provided by core\n        if (event[Extensions.SDKExt] && event[Extensions.SDKExt][SDKExtensionKeys.libVer]) {\n          event.tags.push((_c = {}, _c[CtxTagKeys.internalSdkVersion] = event[Extensions.SDKExt][SDKExtensionKeys.libVer], _c)); // map sdk.libVer \n        }\n      }\n    }\n\n    var _a, _b, _c;\n  };\n\n  TelemetryContext.prototype.applyLocationContext = function (event) {\n    if (this.location) {\n      if (typeof this.location.ip === \"string\") {\n        event.tags.push((_a = {}, _a[CtxTagKeys.locationIp] = this.location.ip, _a));\n      }\n    }\n\n    var _a;\n  };\n\n  TelemetryContext.prototype.applySampleContext = function (event) {\n    if (this.sample) {\n      event.tags.push({\n        SampleRate: this.sample.sampleRate\n      }); // tags.sampleRate -> mapped in CS 4.0\n    }\n  };\n\n  TelemetryContext.prototype.applyOperationContext = function (event) {\n    if (this.telemetryTrace) {\n      var trace = event.ext.trace || {\n        traceID: undefined,\n        parentID: undefined\n      };\n\n      if (typeof this.telemetryTrace.traceID === \"string\") {\n        trace.traceID = this.telemetryTrace.traceID;\n      }\n\n      if (typeof this.telemetryTrace.name === \"string\") {\n        trace.name = this.telemetryTrace.name;\n      }\n\n      if (typeof this.telemetryTrace.parentID === \"string\") {\n        trace.parentID = this.telemetryTrace.parentID;\n      }\n\n      event.ext.trace = trace;\n    }\n  };\n\n  TelemetryContext.prototype.applyWebContext = function (event) {\n    if (this.web) {\n      event.ext.web = event.ext.web || {};\n      event.ext.web = this.web;\n    }\n  };\n\n  TelemetryContext.prototype.applyUserContext = function (event) {\n    if (this.user) {\n      if (!event.tags) {\n        event.tags = [];\n      } // stays in tags\n\n\n      if (typeof this.user.accountId === \"string\") {\n        var item = {};\n        event.tags.push((_a = {}, _a[CtxTagKeys.userAccountId] = this.user.accountId, _a));\n      } // CS 4.0            \n\n\n      if (typeof this.user.id === \"string\") {\n        event.ext.user.id = this.user.id;\n      }\n\n      if (typeof this.user.authenticatedId === \"string\") {\n        event.ext.user.authId = this.user.authenticatedId;\n      }\n    }\n\n    var _a;\n  };\n\n  TelemetryContext.prototype.cleanUp = function (event) {\n    if (event.ext[Extensions.DeviceExt] && Object.keys(event.ext[Extensions.DeviceExt]).length === 0) {\n      delete event.ext[Extensions.DeviceExt];\n    }\n\n    if (event.ext[Extensions.UserExt] && Object.keys(event.ext[Extensions.UserExt]).length === 0) {\n      delete event.ext[Extensions.UserExt];\n    }\n\n    if (event.ext[Extensions.WebExt] && Object.keys(event.ext[Extensions.WebExt]).length === 0) {\n      delete event.ext[Extensions.WebExt];\n    }\n\n    if (event.ext[Extensions.OSExt] && Object.keys(event.ext[Extensions.OSExt]).length === 0) {\n      delete event.ext[Extensions.OSExt];\n    }\n\n    if (event.ext[Extensions.AppExt] && Object.keys(event.ext[Extensions.AppExt]).length === 0) {\n      delete event.ext[Extensions.AppExt];\n    }\n\n    if (event.ext[Extensions.TraceExt] && Object.keys(event.ext[Extensions.TraceExt]).length === 0) {\n      delete event.ext[Extensions.TraceExt];\n    }\n  };\n\n  return TelemetryContext;\n}();\n\nexport { TelemetryContext };","map":null,"metadata":{},"sourceType":"module"}
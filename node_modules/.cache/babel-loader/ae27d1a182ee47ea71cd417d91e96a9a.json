{"ast":null,"code":"import _toConsumableArray from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\nimport { mergeInitialState } from \"../middleware/localStorage\";\nimport { createAppInsightsLogger } from \"../middleware/appInsights\";\nimport { Env } from \"../../common/environment\";\n/**\n * Creates initial redux store from initial application state\n * @param initialState - Initial state of application\n * @param useLocalStorage - Whether or not to use localStorage middleware\n */\n\nexport default function createReduxStore(initialState) {\n  var useLocalStorage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var paths = [\"appSettings\", \"connections\", \"recentProjects\"];\n  var middlewares = [thunk, createAppInsightsLogger()];\n\n  if (useLocalStorage) {\n    var localStorage = require(\"../middleware/localStorage\");\n\n    var storage = localStorage.createLocalStorage({\n      paths: paths\n    });\n    middlewares = [].concat(_toConsumableArray(middlewares), [storage]);\n  }\n\n  if (Env.get() === \"development\") {\n    var logger = require(\"redux-logger\");\n\n    var reduxImmutableStateInvariant = require(\"redux-immutable-state-invariant\");\n\n    middlewares = [].concat(_toConsumableArray(middlewares), [reduxImmutableStateInvariant.default(), logger.createLogger()]);\n  }\n\n  return createStore(rootReducer, useLocalStorage ? mergeInitialState(initialState, paths) : initialState, applyMiddleware.apply(void 0, _toConsumableArray(middlewares)));\n}","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/redux/store/store.ts"],"names":["applyMiddleware","createStore","thunk","rootReducer","mergeInitialState","createAppInsightsLogger","Env","createReduxStore","initialState","useLocalStorage","paths","middlewares","localStorage","require","storage","createLocalStorage","get","logger","reduxImmutableStateInvariant","default","createLogger"],"mappings":";AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAAoD,OAApD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,SAASC,uBAAT,QAAwC,2BAAxC;AACA,SAASC,GAAT,QAAoB,0BAApB;AAEA;;;;;;AAKA,eAAe,SAASC,gBAAT,CACXC,YADW,EAE8B;AAAA,MAAzCC,eAAyC,uEAAd,KAAc;AACzC,MAAMC,KAAe,GAAG,CAAC,aAAD,EAAgB,aAAhB,EAA+B,gBAA/B,CAAxB;AAEA,MAAIC,WAAW,GAAG,CAACT,KAAD,EAAQG,uBAAuB,EAA/B,CAAlB;;AAEA,MAAII,eAAJ,EAAqB;AACjB,QAAMG,YAAY,GAAGC,OAAO,CAAC,4BAAD,CAA5B;;AACA,QAAMC,OAAO,GAAGF,YAAY,CAACG,kBAAb,CAAgC;AAACL,MAAAA,KAAK,EAALA;AAAD,KAAhC,CAAhB;AACAC,IAAAA,WAAW,gCACJA,WADI,IAEPG,OAFO,EAAX;AAIH;;AAED,MAAIR,GAAG,CAACU,GAAJ,OAAc,aAAlB,EAAiC;AAC7B,QAAMC,MAAM,GAAGJ,OAAO,CAAC,cAAD,CAAtB;;AACA,QAAMK,4BAA4B,GAAGL,OAAO,CAAC,iCAAD,CAA5C;;AACAF,IAAAA,WAAW,gCACJA,WADI,IAEPO,4BAA4B,CAACC,OAA7B,EAFO,EAGPF,MAAM,CAACG,YAAP,EAHO,EAAX;AAKH;;AAED,SAAOnB,WAAW,CACdE,WADc,EAEdM,eAAe,GAAGL,iBAAiB,CAACI,YAAD,EAAeE,KAAf,CAApB,GAA4CF,YAF7C,EAGdR,eAAe,MAAf,4BAAmBW,WAAnB,EAHc,CAAlB;AAKH","sourcesContent":["import { applyMiddleware, createStore, Store } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\nimport { IApplicationState } from \"../../models/applicationState\";\nimport { mergeInitialState } from \"../middleware/localStorage\";\nimport { createAppInsightsLogger } from \"../middleware/appInsights\";\nimport { Env } from \"../../common/environment\";\n\n/**\n * Creates initial redux store from initial application state\n * @param initialState - Initial state of application\n * @param useLocalStorage - Whether or not to use localStorage middleware\n */\nexport default function createReduxStore(\n    initialState?: IApplicationState,\n    useLocalStorage: boolean = false): Store {\n    const paths: string[] = [\"appSettings\", \"connections\", \"recentProjects\"];\n\n    let middlewares = [thunk, createAppInsightsLogger()];\n\n    if (useLocalStorage) {\n        const localStorage = require(\"../middleware/localStorage\");\n        const storage = localStorage.createLocalStorage({paths});\n        middlewares = [\n            ...middlewares,\n            storage,\n        ];\n    }\n\n    if (Env.get() === \"development\") {\n        const logger = require(\"redux-logger\");\n        const reduxImmutableStateInvariant = require(\"redux-immutable-state-invariant\");\n        middlewares = [\n            ...middlewares,\n            reduxImmutableStateInvariant.default(),\n            logger.createLogger(),\n        ];\n    }\n\n    return createStore(\n        rootReducer,\n        useLocalStorage ? mergeInitialState(initialState, paths) : initialState,\n        applyMiddleware(...middlewares),\n    );\n}\n"]},"metadata":{},"sourceType":"module"}
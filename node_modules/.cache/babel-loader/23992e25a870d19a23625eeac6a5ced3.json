{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { IpcRendererProxy } from \"../../common/ipcRendererProxy\";\nvar PROXY_NAME = \"LocalFileSystem\";\n/**\n * Options for Local File System\n * @member folderPath - Path to folder being used in provider\n */\n\n/**\n * Storage Provider for Local File System. Only available in Electron application\n * Leverages the IpcRendererProxy\n */\nexport var LocalFileSystemProxy =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @returns - StorageType.Local\n   */\n  function LocalFileSystemProxy(options) {\n    _classCallCheck(this, LocalFileSystemProxy);\n\n    this.options = options;\n\n    if (!this.options) {\n      this.options = {\n        folderPath: null\n      };\n    }\n  }\n  /**\n   * Select container for use in provider\n   */\n\n\n  _createClass(LocalFileSystemProxy, [{\n    key: \"selectContainer\",\n    value: function selectContainer() {\n      return IpcRendererProxy.send(\"\".concat(PROXY_NAME, \":selectContainer\"));\n    }\n    /**\n     * Read text from file\n     * @param fileName - Name of file from which to read text\n     */\n\n  }, {\n    key: \"readText\",\n    value: function readText(fileName) {\n      var filePath = [this.options.folderPath, fileName].join(\"/\");\n      return IpcRendererProxy.send(\"\".concat(PROXY_NAME, \":readText\"), [filePath]);\n    }\n    /**\n     * Read buffer from file\n     * @param fileName Name of file from which to read buffer\n     */\n\n  }, {\n    key: \"readBinary\",\n    value: function readBinary(fileName) {\n      var filePath = [this.options.folderPath, fileName].join(\"/\");\n      return IpcRendererProxy.send(\"\".concat(PROXY_NAME, \":readBinary\"), [filePath]);\n    }\n    /**\n     * Delete file\n     * @param fileName Name of file to delete\n     */\n\n  }, {\n    key: \"deleteFile\",\n    value: function deleteFile(fileName) {\n      var filePath = [this.options.folderPath, fileName].join(\"/\");\n      return IpcRendererProxy.send(\"\".concat(PROXY_NAME, \":deleteFile\"), [filePath]);\n    }\n    /**\n     * Write text to file\n     * @param fileName Name of target file\n     * @param contents Contents to be written\n     */\n\n  }, {\n    key: \"writeText\",\n    value: function writeText(fileName, contents) {\n      var filePath = [this.options.folderPath, fileName].join(\"/\");\n      return IpcRendererProxy.send(\"\".concat(PROXY_NAME, \":writeText\"), [filePath, contents]);\n    }\n    /**\n     * Write buffer to file\n     * @param fileName Name of target file\n     * @param contents Contents to be written\n     */\n\n  }, {\n    key: \"writeBinary\",\n    value: function writeBinary(fileName, contents) {\n      var filePath = [this.options.folderPath, fileName].join(\"/\");\n      return IpcRendererProxy.send(\"\".concat(PROXY_NAME, \":writeBinary\"), [filePath, contents]);\n    }\n    /**\n     * List files in directory\n     * @param folderName - Name of folder from which to list files\n     * @param ext - NOT CURRENTLY USED IN IMPLEMENTATION.\n     */\n\n  }, {\n    key: \"listFiles\",\n    value: function listFiles(folderName, ext) {\n      var folderPath = folderName ? [this.options.folderPath, folderName].join(\"/\") : this.options.folderPath;\n      return IpcRendererProxy.send(\"\".concat(PROXY_NAME, \":listFiles\"), [folderPath]);\n    }\n    /**\n     * List directories inside another directory\n     * @param folderName - Directory from which to list directories\n     */\n\n  }, {\n    key: \"listContainers\",\n    value: function listContainers(folderName) {\n      var folderPath = folderName ? [this.options.folderPath, folderName].join(\"/\") : this.options.folderPath;\n      return IpcRendererProxy.send(\"\".concat(PROXY_NAME, \":listContainers\"), [folderPath]);\n    }\n    /**\n     * Create local directory\n     * @param folderName - Name of directory to create\n     */\n\n  }, {\n    key: \"createContainer\",\n    value: function createContainer(folderName) {\n      var folderPath = [this.options.folderPath, folderName].join(\"/\");\n      return IpcRendererProxy.send(\"\".concat(PROXY_NAME, \":createContainer\"), [folderPath]);\n    }\n    /**\n     * Delete directory\n     * @param folderName - Name of directory to delete\n     */\n\n  }, {\n    key: \"deleteContainer\",\n    value: function deleteContainer(folderName) {\n      var folderPath = [this.options.folderPath, folderName].join(\"/\");\n      return IpcRendererProxy.send(\"\".concat(PROXY_NAME, \":deleteContainer\"), [folderPath]);\n    }\n    /**\n     * Retrieve assets from directory\n     * @param folderName - Directory containing assets\n     */\n\n  }, {\n    key: \"getAssets\",\n    value: function getAssets(folderName) {\n      var folderPath = [this.options.folderPath, folderName].join(\"/\");\n      return IpcRendererProxy.send(\"\".concat(PROXY_NAME, \":getAssets\"), [folderPath]);\n    }\n  }]);\n\n  return LocalFileSystemProxy;\n}();","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/providers/storage/localFileSystemProxy.ts"],"names":["IpcRendererProxy","PROXY_NAME","LocalFileSystemProxy","options","folderPath","send","fileName","filePath","join","contents","folderName","ext"],"mappings":"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","sourcesContent":["import { IpcRendererProxy } from \"../../common/ipcRendererProxy\";\nimport { IStorageProvider } from \"./storageProviderFactory\";\nimport { IAssetProvider } from \"./assetProviderFactory\";\nimport { IAsset, StorageType } from \"../../models/applicationState\";\n\nconst PROXY_NAME = \"LocalFileSystem\";\n\n/**\n * Options for Local File System\n * @member folderPath - Path to folder being used in provider\n */\nexport interface ILocalFileSystemProxyOptions {\n    folderPath: string;\n}\n\n/**\n * Storage Provider for Local File System. Only available in Electron application\n * Leverages the IpcRendererProxy\n */\nexport class LocalFileSystemProxy implements IStorageProvider, IAssetProvider {\n    /**\n     * @returns - StorageType.Local\n     */\n    public storageType: StorageType.Local;\n    constructor(private options?: ILocalFileSystemProxyOptions) {\n        if (!this.options) {\n            this.options = {\n                folderPath: null,\n            };\n        }\n    }\n\n    /**\n     * Select container for use in provider\n     */\n    public selectContainer(): Promise<string> {\n        return IpcRendererProxy.send(`${PROXY_NAME}:selectContainer`);\n    }\n\n    /**\n     * Read text from file\n     * @param fileName - Name of file from which to read text\n     */\n    public readText(fileName: string): Promise<string> {\n        const filePath = [this.options.folderPath, fileName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:readText`, [filePath]);\n    }\n\n    /**\n     * Read buffer from file\n     * @param fileName Name of file from which to read buffer\n     */\n    public readBinary(fileName: string): Promise<Buffer> {\n        const filePath = [this.options.folderPath, fileName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:readBinary`, [filePath]);\n    }\n\n    /**\n     * Delete file\n     * @param fileName Name of file to delete\n     */\n    public deleteFile(fileName: string): Promise<void> {\n        const filePath = [this.options.folderPath, fileName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:deleteFile`, [filePath]);\n    }\n\n    /**\n     * Write text to file\n     * @param fileName Name of target file\n     * @param contents Contents to be written\n     */\n    public writeText(fileName: string, contents: string): Promise<void> {\n        const filePath = [this.options.folderPath, fileName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:writeText`, [filePath, contents]);\n    }\n\n    /**\n     * Write buffer to file\n     * @param fileName Name of target file\n     * @param contents Contents to be written\n     */\n    public writeBinary(fileName: string, contents: Buffer): Promise<void> {\n        const filePath = [this.options.folderPath, fileName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:writeBinary`, [filePath, contents]);\n    }\n\n    /**\n     * List files in directory\n     * @param folderName - Name of folder from which to list files\n     * @param ext - NOT CURRENTLY USED IN IMPLEMENTATION.\n     */\n    public listFiles(folderName?: string, ext?: string): Promise<string[]> {\n        const folderPath = folderName ? [this.options.folderPath, folderName].join(\"/\") : this.options.folderPath;\n        return IpcRendererProxy.send(`${PROXY_NAME}:listFiles`, [folderPath]);\n    }\n\n    /**\n     * List directories inside another directory\n     * @param folderName - Directory from which to list directories\n     */\n    public listContainers(folderName?: string): Promise<string[]> {\n        const folderPath = folderName ? [this.options.folderPath, folderName].join(\"/\") : this.options.folderPath;\n        return IpcRendererProxy.send(`${PROXY_NAME}:listContainers`, [folderPath]);\n    }\n\n    /**\n     * Create local directory\n     * @param folderName - Name of directory to create\n     */\n    public createContainer(folderName: string): Promise<void> {\n        const folderPath = [this.options.folderPath, folderName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:createContainer`, [folderPath]);\n    }\n\n    /**\n     * Delete directory\n     * @param folderName - Name of directory to delete\n     */\n    public deleteContainer(folderName: string): Promise<void> {\n        const folderPath = [this.options.folderPath, folderName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:deleteContainer`, [folderPath]);\n    }\n\n    /**\n     * Retrieve assets from directory\n     * @param folderName - Directory containing assets\n     */\n    public getAssets(folderName?: string): Promise<IAsset[]> {\n        const folderPath = [this.options.folderPath, folderName].join(\"/\");\n        return IpcRendererProxy.send(`${PROXY_NAME}:getAssets`, [folderPath]);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/jw/Documents/code/VoTT/src/react/components/common/cloudFilePicker/cloudFilePicker.tsx\";\nimport React from \"react\";\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\nimport { strings } from \"../../../../common/strings\";\nimport { StorageType } from \"../../../../models/applicationState\";\nimport { StorageProviderFactory } from \"../../../../providers/storage/storageProviderFactory\";\nimport CondensedList, { ListItem } from \"../condensedList/condensedList\";\n/**\n * Properties for Cloud File Picker\n * @member connections - Array of connections to choose from\n * @member onSubmit - Function to call with contents of selected file\n * @member onCancel - Optional function to call on modal closed\n * @member fileExtension - Filter on files with extension\n */\n\n/**\n * @name - Cloud File Picker\n * @description - Modal to choose and read file from cloud connections\n */\nexport var CloudFilePicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CloudFilePicker, _React$Component);\n\n  function CloudFilePicker(props) {\n    var _this;\n\n    _classCallCheck(this, CloudFilePicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CloudFilePicker).call(this, props));\n    _this.open = _this.open.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.close = _this.close.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getInitialState = _this.getInitialState.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.ok = _this.ok.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.back = _this.back.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.connectionList = _this.connectionList.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onClickConnection = _this.onClickConnection.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fileList = _this.fileList.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onClickFile = _this.onClickFile.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = _this.getInitialState();\n    return _this;\n  }\n\n  _createClass(CloudFilePicker, [{\n    key: \"render\",\n    value: function render() {\n      var closeBtn = React.createElement(\"button\", {\n        className: \"close\",\n        onClick: this.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"\\xD7\");\n      return React.createElement(Modal, {\n        isOpen: this.state.isOpen,\n        centered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.close,\n        close: closeBtn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, this.state.modalHeader), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, this.state.condensedList), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, this.state.selectedFile || \"\", React.createElement(Button, {\n        className: \"btn btn-success mr-1\",\n        onClick: this.ok,\n        disabled: this.state.okDisabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Ok\"), React.createElement(Button, {\n        onClick: this.back,\n        disabled: this.state.backDisabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Go Back\")));\n    }\n    /**\n     * Open Cloud File Picker\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      this.setState({\n        isOpen: true\n      });\n    }\n    /**\n     * Close Cloud File Picker\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this2 = this;\n\n      this.setState(this.getInitialState(), function () {\n        if (_this2.props.onCancel) {\n          _this2.props.onCancel();\n        }\n      });\n    }\n  }, {\n    key: \"getInitialState\",\n    value: function getInitialState() {\n      return {\n        isOpen: false,\n        modalHeader: strings.homePage.openCloudProject.selectConnection,\n        condensedList: this.connectionList(),\n        selectedConnection: null,\n        selectedFile: null,\n        okDisabled: true,\n        backDisabled: true\n      };\n    }\n  }, {\n    key: \"ok\",\n    value: function () {\n      var _ok = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var storageProvider, content;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.state.selectedConnection && this.state.selectedFile)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                storageProvider = StorageProviderFactory.createFromConnection(this.state.selectedConnection);\n                _context.next = 4;\n                return storageProvider.readText(this.state.selectedFile);\n\n              case 4:\n                content = _context.sent;\n                this.props.onSubmit(content);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function ok() {\n        return _ok.apply(this, arguments);\n      }\n\n      return ok;\n    }()\n  }, {\n    key: \"back\",\n    value: function back() {\n      this.setState(_objectSpread({}, this.getInitialState(), {\n        isOpen: true\n      }));\n    }\n  }, {\n    key: \"getCondensedList\",\n    value: function getCondensedList(title, items, onClick) {\n      return React.createElement(CondensedList, {\n        title: title,\n        items: items,\n        Component: ListItem,\n        onClick: onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"isCloudConnection\",\n    value: function isCloudConnection(connection) {\n      try {\n        var storageProvider = StorageProviderFactory.createFromConnection(connection);\n        return storageProvider.storageType === StorageType.Cloud;\n      } catch (e) {\n        // Catches connections that are not registered as StorageProviders (e.g. Bing Image search)\n        return false;\n      }\n    }\n  }, {\n    key: \"getCloudConnections\",\n    value: function getCloudConnections(connections) {\n      return connections.filter(this.isCloudConnection);\n    }\n  }, {\n    key: \"connectionList\",\n    value: function connectionList() {\n      var _this3 = this;\n\n      var connections = this.getCloudConnections(this.props.connections);\n      return this.getCondensedList(\"Cloud Connections\", connections, function (args) {\n        return _this3.onClickConnection(args);\n      });\n    }\n  }, {\n    key: \"onClickConnection\",\n    value: function () {\n      var _onClickConnection = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(args) {\n        var connection, fileList;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                connection = _objectSpread({}, args);\n                _context2.next = 3;\n                return this.fileList(connection);\n\n              case 3:\n                fileList = _context2.sent;\n                this.setState({\n                  selectedConnection: connection,\n                  modalHeader: \"Select a file from \\\"\".concat(connection.name, \"\\\"\"),\n                  condensedList: fileList,\n                  backDisabled: false\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function onClickConnection(_x) {\n        return _onClickConnection.apply(this, arguments);\n      }\n\n      return onClickConnection;\n    }()\n  }, {\n    key: \"fileList\",\n    value: function () {\n      var _fileList = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(connection) {\n        var storageProvider, files, fileItems, i;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                storageProvider = StorageProviderFactory.createFromConnection(connection);\n                _context3.next = 3;\n                return storageProvider.listFiles(connection.providerOptions[\"containerName\"], this.props.fileExtension);\n\n              case 3:\n                files = _context3.sent;\n                fileItems = [];\n\n                for (i = 0; i < files.length; i++) {\n                  fileItems.push({\n                    id: \"file-\".concat(i + 1),\n                    name: files[i]\n                  });\n                }\n\n                return _context3.abrupt(\"return\", this.getCondensedList(\"\".concat(this.props.fileExtension || \"All\", \" Files in \\\"\").concat(connection.name, \"\\\"\"), fileItems, this.onClickFile));\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function fileList(_x2) {\n        return _fileList.apply(this, arguments);\n      }\n\n      return fileList;\n    }()\n  }, {\n    key: \"onClickFile\",\n    value: function onClickFile(args) {\n      var fileName = args.name;\n      this.setState({\n        selectedFile: fileName,\n        okDisabled: false\n      });\n    }\n  }]);\n\n  return CloudFilePicker;\n}(React.Component);","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/react/components/common/cloudFilePicker/cloudFilePicker.tsx"],"names":["React","Button","Modal","ModalBody","ModalFooter","ModalHeader","strings","StorageType","StorageProviderFactory","CondensedList","ListItem","CloudFilePicker","props","open","bind","close","getInitialState","ok","back","connectionList","onClickConnection","fileList","onClickFile","state","closeBtn","isOpen","modalHeader","condensedList","selectedFile","okDisabled","backDisabled","setState","onCancel","homePage","openCloudProject","selectConnection","selectedConnection","storageProvider","createFromConnection","readText","content","onSubmit","title","items","onClick","connection","storageType","Cloud","e","connections","filter","isCloudConnection","getCloudConnections","getCondensedList","args","name","listFiles","providerOptions","fileExtension","files","fileItems","i","length","push","id","fileName","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\nimport { strings } from \"../../../../common/strings\";\nimport { IConnection, StorageType } from \"../../../../models/applicationState\";\nimport { StorageProviderFactory } from \"../../../../providers/storage/storageProviderFactory\";\nimport CondensedList, { ListItem } from \"../condensedList/condensedList\";\n\n/**\n * Properties for Cloud File Picker\n * @member connections - Array of connections to choose from\n * @member onSubmit - Function to call with contents of selected file\n * @member onCancel - Optional function to call on modal closed\n * @member fileExtension - Filter on files with extension\n */\nexport interface ICloudFilePickerProps {\n    connections: IConnection[];\n    onSubmit: (content: string) => void;\n\n    onCancel?: () => void;\n    fileExtension?: string;\n}\n\n/**\n * State for Cloud File Picker\n * @member isOpen - Cloud File Picker is open\n * @member modalHeader - Header for Picker modal\n * @member condensedList - List of rendered objects for picking\n * @member selectedConnection - Connection selected in picker\n * @member selectedFile - File selected in picker\n * @member okDisabled - Ok button is disabled\n * @member backDisabled - Back button is disabled\n */\nexport interface ICloudFilePickerState {\n    isOpen: boolean;\n    modalHeader: string;\n    condensedList: any;\n    selectedConnection: IConnection;\n    selectedFile: string;\n    okDisabled: boolean;\n    backDisabled: boolean;\n}\n\n/**\n * @name - Cloud File Picker\n * @description - Modal to choose and read file from cloud connections\n */\nexport class CloudFilePicker extends React.Component<ICloudFilePickerProps, ICloudFilePickerState> {\n\n    constructor(props) {\n        super(props);\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n\n        this.getInitialState = this.getInitialState.bind(this);\n        this.ok = this.ok.bind(this);\n        this.back = this.back.bind(this);\n        this.connectionList = this.connectionList.bind(this);\n        this.onClickConnection = this.onClickConnection.bind(this);\n        this.fileList = this.fileList.bind(this);\n        this.onClickFile = this.onClickFile.bind(this);\n\n        this.state = this.getInitialState();\n    }\n\n    public render() {\n        const closeBtn = <button className=\"close\" onClick={this.close}>&times;</button>;\n\n        return(\n            <Modal isOpen={this.state.isOpen} centered={true}>\n                <ModalHeader toggle={this.close} close={closeBtn}>\n                    {this.state.modalHeader}\n                </ModalHeader>\n                <ModalBody>\n                    {this.state.condensedList}\n                </ModalBody>\n                <ModalFooter>\n                    {this.state.selectedFile || \"\"}\n                    <Button\n                        className=\"btn btn-success mr-1\"\n                        onClick={this.ok}\n                        disabled={this.state.okDisabled}>\n                        Ok\n                    </Button>\n                    <Button\n                        onClick={this.back}\n                        disabled={this.state.backDisabled}>\n                        Go Back\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n\n    /**\n     * Open Cloud File Picker\n     */\n    public open(): void {\n        this.setState({isOpen: true});\n    }\n\n    /**\n     * Close Cloud File Picker\n     */\n    public close(): void {\n        this.setState(this.getInitialState(),\n            () => {\n                if (this.props.onCancel) {\n                    this.props.onCancel();\n                }\n            },\n        );\n    }\n\n    private getInitialState(): ICloudFilePickerState {\n        return {\n            isOpen: false,\n            modalHeader: strings.homePage.openCloudProject.selectConnection,\n            condensedList: this.connectionList(),\n            selectedConnection: null,\n            selectedFile: null,\n            okDisabled: true,\n            backDisabled: true,\n        };\n    }\n\n    private async ok() {\n        if (this.state.selectedConnection && this.state.selectedFile) {\n            const storageProvider = StorageProviderFactory.createFromConnection(this.state.selectedConnection);\n            const content = await storageProvider.readText(this.state.selectedFile);\n            this.props.onSubmit(content);\n        }\n    }\n\n    private back() {\n        this.setState({\n            ...this.getInitialState(),\n            isOpen: true,\n        });\n    }\n\n    private getCondensedList(title: string, items: any[], onClick) {\n        return <CondensedList\n            title={title}\n            items={items}\n            Component={ListItem}\n            onClick={onClick}\n        />;\n    }\n\n    private isCloudConnection(connection: IConnection): boolean {\n        try {\n            const storageProvider = StorageProviderFactory.createFromConnection(connection);\n            return storageProvider.storageType === StorageType.Cloud;\n        } catch (e) {\n            // Catches connections that are not registered as StorageProviders (e.g. Bing Image search)\n            return false;\n        }\n    }\n\n    private getCloudConnections(connections: IConnection[]): IConnection[] {\n        return connections.filter(this.isCloudConnection);\n    }\n\n    private connectionList() {\n        const connections = this.getCloudConnections(this.props.connections);\n        return this.getCondensedList(\"Cloud Connections\", connections, (args) => this.onClickConnection(args));\n    }\n\n    private async onClickConnection(args) {\n        const connection: IConnection = {\n            ...args,\n        };\n        const fileList = await this.fileList(connection);\n        this.setState({\n            selectedConnection: connection,\n            modalHeader: `Select a file from \"${connection.name}\"`,\n            condensedList: fileList,\n            backDisabled: false,\n        });\n    }\n\n    private async fileList(connection: IConnection) {\n        const storageProvider = StorageProviderFactory.createFromConnection(connection);\n        const files = await storageProvider.listFiles(\n            connection.providerOptions[\"containerName\"],\n            this.props.fileExtension);\n        const fileItems = [];\n        for (let i = 0; i < files.length; i++) {\n            fileItems.push({\n                id: `file-${i + 1}`,\n                name: files[i],\n            });\n        }\n        return this.getCondensedList(\n            `${this.props.fileExtension || \"All\"} Files in \"${connection.name}\"`,\n            fileItems,\n            this.onClickFile,\n        );\n    }\n\n    private onClickFile(args) {\n        const fileName = args.name;\n        this.setState({\n            selectedFile: fileName,\n            okDisabled: false,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
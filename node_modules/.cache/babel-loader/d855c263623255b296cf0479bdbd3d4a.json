{"ast":null,"code":"import _toConsumableArray from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\n * A helper function to split train and test assets\n * @param template String containing variables\n * @param params Params containing substitution values\n */\nexport function splitTestAsset(allAssets, tags, testSplitRatio) {\n  if (testSplitRatio <= 0 || testSplitRatio > 1) {\n    return [];\n  }\n\n  var testAssets = [];\n  var tagsAssetDict = {};\n  tags.forEach(function (tag) {\n    return tagsAssetDict[tag.name] = {\n      assetList: new Set()\n    };\n  });\n  allAssets.forEach(function (assetMetadata) {\n    assetMetadata.regions.forEach(function (region) {\n      region.tags.forEach(function (tagName) {\n        if (tagsAssetDict[tagName]) {\n          tagsAssetDict[tagName].assetList.add(assetMetadata.asset.name);\n        }\n      });\n    });\n  });\n\n  var _arr = Object.keys(tagsAssetDict);\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var tagKey = _arr[_i];\n    var _assetList = tagsAssetDict[tagKey].assetList;\n    var testCount = Math.ceil(_assetList.size * testSplitRatio);\n    testAssets.push.apply(testAssets, _toConsumableArray(Array.from(_assetList).slice(0, testCount)));\n  }\n\n  return testAssets;\n}","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/providers/export/testAssetsSplitHelper.ts"],"names":["splitTestAsset","allAssets","tags","testSplitRatio","testAssets","tagsAssetDict","forEach","tag","name","assetList","Set","assetMetadata","regions","region","tagName","add","asset","Object","keys","tagKey","testCount","Math","ceil","size","push","Array","from","slice"],"mappings":";;AAEA;;;;;AAKA,OAAO,SAASA,cAAT,CAAwBC,SAAxB,EAAqDC,IAArD,EAAmEC,cAAnE,EAAqG;AACxG,MAAIA,cAAc,IAAI,CAAlB,IAAuBA,cAAc,GAAG,CAA5C,EAA+C;AAAE,WAAO,EAAP;AAAY;;AAE7D,MAAMC,UAAoB,GAAG,EAA7B;AACA,MAAMC,aAA8D,GAAG,EAAvE;AACAH,EAAAA,IAAI,CAACI,OAAL,CAAa,UAACC,GAAD;AAAA,WAASF,aAAa,CAACE,GAAG,CAACC,IAAL,CAAb,GAA0B;AAAEC,MAAAA,SAAS,EAAE,IAAIC,GAAJ;AAAb,KAAnC;AAAA,GAAb;AACAT,EAAAA,SAAS,CAACK,OAAV,CAAkB,UAACK,aAAD,EAAmB;AACjCA,IAAAA,aAAa,CAACC,OAAd,CAAsBN,OAAtB,CAA8B,UAACO,MAAD,EAAY;AACtCA,MAAAA,MAAM,CAACX,IAAP,CAAYI,OAAZ,CAAoB,UAACQ,OAAD,EAAa;AAC7B,YAAIT,aAAa,CAACS,OAAD,CAAjB,EAA4B;AACxBT,UAAAA,aAAa,CAACS,OAAD,CAAb,CAAuBL,SAAvB,CAAiCM,GAAjC,CAAqCJ,aAAa,CAACK,KAAd,CAAoBR,IAAzD;AACH;AACJ,OAJD;AAKH,KAND;AAOH,GARD;;AANwG,aAgBnFS,MAAM,CAACC,IAAP,CAAYb,aAAZ,CAhBmF;;AAgBxG,2CAAiD;AAA5C,QAAMc,MAAM,WAAZ;AACD,QAAMV,UAAS,GAAGJ,aAAa,CAACc,MAAD,CAAb,CAAsBV,SAAxC;AACA,QAAMW,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUb,UAAS,CAACc,IAAV,GAAiBpB,cAA3B,CAAlB;AACAC,IAAAA,UAAU,CAACoB,IAAX,OAAApB,UAAU,qBAASqB,KAAK,CAACC,IAAN,CAAWjB,UAAX,EAAsBkB,KAAtB,CAA4B,CAA5B,EAA+BP,SAA/B,CAAT,EAAV;AACH;;AACD,SAAOhB,UAAP;AACH","sourcesContent":["import { IAssetMetadata, ITag } from \"../../models/applicationState\";\n\n/**\n * A helper function to split train and test assets\n * @param template String containing variables\n * @param params Params containing substitution values\n */\nexport function splitTestAsset(allAssets: IAssetMetadata[], tags: ITag[], testSplitRatio: number): string[] {\n    if (testSplitRatio <= 0 || testSplitRatio > 1) { return []; }\n\n    const testAssets: string[] = [];\n    const tagsAssetDict: { [index: string]: { assetList: Set<string> } } = {};\n    tags.forEach((tag) => tagsAssetDict[tag.name] = { assetList: new Set() });\n    allAssets.forEach((assetMetadata) => {\n        assetMetadata.regions.forEach((region) => {\n            region.tags.forEach((tagName) => {\n                if (tagsAssetDict[tagName]) {\n                    tagsAssetDict[tagName].assetList.add(assetMetadata.asset.name);\n                }\n            });\n        });\n    });\n\n    for (const tagKey of Object.keys(tagsAssetDict)) {\n        const assetList = tagsAssetDict[tagKey].assetList;\n        const testCount = Math.ceil(assetList.size * testSplitRatio);\n        testAssets.push(...Array.from(assetList).slice(0, testCount));\n    }\n    return testAssets;\n}\n"]},"metadata":{},"sourceType":"module"}
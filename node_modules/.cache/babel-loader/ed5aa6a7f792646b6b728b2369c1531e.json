{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _ from \"lodash\";\nimport { ExportProvider } from \"./exportProvider\";\nimport Guard from \"../../common/guard\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\nimport { itemTemplate, annotationTemplate, objectTemplate } from \"./pascalVOC/pascalVOCTemplates\";\nimport { interpolate } from \"../../common/strings\";\nimport os from \"os\";\nimport { splitTestAsset } from \"./testAssetsSplitHelper\";\n\n/**\n * @name - PascalVOC Export Provider\n * @description - Exports a project into a Pascal VOC\n */\nexport var PascalVOCExportProvider =\n/*#__PURE__*/\nfunction (_ExportProvider) {\n  _inherits(PascalVOCExportProvider, _ExportProvider);\n\n  function PascalVOCExportProvider(project, options) {\n    var _this;\n\n    _classCallCheck(this, PascalVOCExportProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PascalVOCExportProvider).call(this, project, options));\n    _this.imagesInfo = new Map();\n    Guard.null(options);\n    return _this;\n  }\n  /**\n   * Export project to PascalVOC\n   */\n\n\n  _createClass(PascalVOCExportProvider, [{\n    key: \"export\",\n    value: function () {\n      var _export2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var allAssets, exportObject, exportFolderName, testSplit;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getAssetsForExport();\n\n              case 2:\n                allAssets = _context.sent;\n                exportObject = _objectSpread({}, this.project);\n                exportObject.assets = _.keyBy(allAssets, function (assetMetadata) {\n                  return assetMetadata.asset.id;\n                }); // Create Export Folder\n\n                exportFolderName = \"\".concat(this.project.name.replace(/\\s/g, \"-\"), \"-PascalVOC-export\");\n                _context.next = 8;\n                return this.storageProvider.createContainer(exportFolderName);\n\n              case 8:\n                _context.next = 10;\n                return this.exportImages(exportFolderName, allAssets);\n\n              case 10:\n                _context.next = 12;\n                return this.exportPBTXT(exportFolderName, this.project);\n\n              case 12:\n                _context.next = 14;\n                return this.exportAnnotations(exportFolderName, allAssets);\n\n              case 14:\n                // TestSplit && exportUnassignedTags are optional parameter in the UI Exporter configuration\n                testSplit = (100 - (this.options.testTrainSplit || 80)) / 100;\n                _context.next = 17;\n                return this.exportImageSets(exportFolderName, allAssets, this.project.tags, testSplit, this.options.exportUnassigned);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _export() {\n        return _export2.apply(this, arguments);\n      }\n\n      return _export;\n    }()\n  }, {\n    key: \"exportImages\",\n    value: function () {\n      var _exportImages = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(exportFolderName, allAssets) {\n        var _this2 = this;\n\n        var jpegImagesFolderName;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // Create JPEGImages Sub Folder\n                jpegImagesFolderName = \"\".concat(exportFolderName, \"/JPEGImages\");\n                _context3.next = 3;\n                return this.storageProvider.createContainer(jpegImagesFolderName);\n\n              case 3:\n                _context3.next = 5;\n                return allAssets.mapAsync(\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee2(assetMetadata) {\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return _this2.exportSingleImage(jpegImagesFolderName, assetMetadata);\n\n                          case 2:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n\n                  return function (_x3) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function exportImages(_x, _x2) {\n        return _exportImages.apply(this, arguments);\n      }\n\n      return exportImages;\n    }()\n  }, {\n    key: \"exportSingleImage\",\n    value: function () {\n      var _exportSingleImage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(jpegImagesFolderName, assetMetadata) {\n        var arrayBuffer, buffer, imageFileName, tagObjects, imageInfo;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return HtmlFileReader.getAssetArray(assetMetadata.asset);\n\n              case 3:\n                arrayBuffer = _context4.sent;\n                buffer = Buffer.from(arrayBuffer);\n                imageFileName = \"\".concat(jpegImagesFolderName, \"/\").concat(assetMetadata.asset.name); // Write Binary\n\n                _context4.next = 8;\n                return this.storageProvider.writeBinary(imageFileName, buffer);\n\n              case 8:\n                // Get Array of all Box shaped tag for the Asset\n                tagObjects = this.getAssetTagArray(assetMetadata);\n                imageInfo = {\n                  width: assetMetadata.asset.size ? assetMetadata.asset.size.width : 0,\n                  height: assetMetadata.asset.size ? assetMetadata.asset.size.height : 0,\n                  objects: tagObjects\n                };\n                this.imagesInfo.set(assetMetadata.asset.name, imageInfo);\n\n                if (!(!assetMetadata.asset.size || assetMetadata.asset.size.width === 0 || assetMetadata.asset.size.height === 0)) {\n                  _context4.next = 14;\n                  break;\n                }\n\n                _context4.next = 14;\n                return this.updateImageSizeInfo(arrayBuffer, imageFileName, assetMetadata.asset.name);\n\n              case 14:\n                _context4.next = 19;\n                break;\n\n              case 16:\n                _context4.prev = 16;\n                _context4.t0 = _context4[\"catch\"](0);\n                // Ignore the error at the moment\n                // TODO: Refactor ExportProvider abstract class export() method\n                //       to return Promise<object> with an object containing\n                //       the number of files successfully exported out of total\n                console.log(\"Error downloading asset \".concat(assetMetadata.asset.path, \" - \").concat(_context4.t0));\n\n              case 19:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 16]]);\n      }));\n\n      function exportSingleImage(_x4, _x5) {\n        return _exportSingleImage.apply(this, arguments);\n      }\n\n      return exportSingleImage;\n    }()\n  }, {\n    key: \"getAssetTagArray\",\n    value: function getAssetTagArray(element) {\n      var tagObjects = [];\n      element.regions.forEach(function (region) {\n        region.tags.forEach(function (tagName) {\n          var objectInfo = {\n            name: tagName,\n            xmin: region.boundingBox.left,\n            ymin: region.boundingBox.top,\n            xmax: region.boundingBox.left + region.boundingBox.width,\n            ymax: region.boundingBox.top + region.boundingBox.height\n          };\n          tagObjects.push(objectInfo);\n        });\n      });\n      return tagObjects;\n    }\n  }, {\n    key: \"updateImageSizeInfo\",\n    value: function () {\n      var _updateImageSizeInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(imageBuffer, imageFileName, assetName) {\n        var image64, assetProps, imageInfo;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // Get Base64\n                image64 = btoa(new Uint8Array(imageBuffer).reduce(function (data, byte) {\n                  return data + String.fromCharCode(byte);\n                }, \"\"));\n\n                if (!(image64.length < 10)) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                // Ignore the error at the moment\n                // TODO: Refactor ExportProvider abstract class export() method\n                //       to return Promise<object> with an object containing\n                //       the number of files successfully exported out of total\n                console.log(\"Image not valid \".concat(imageFileName));\n                _context5.next = 10;\n                break;\n\n              case 5:\n                _context5.next = 7;\n                return HtmlFileReader.readAssetAttributesWithBuffer(image64);\n\n              case 7:\n                assetProps = _context5.sent;\n                imageInfo = this.imagesInfo.get(assetName);\n\n                if (imageInfo && assetProps) {\n                  imageInfo.width = assetProps.width;\n                  imageInfo.height = assetProps.height;\n                } else {\n                  console.log(\"imageInfo for element \".concat(assetName, \" not found (\").concat(assetProps, \")\"));\n                }\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function updateImageSizeInfo(_x6, _x7, _x8) {\n        return _updateImageSizeInfo.apply(this, arguments);\n      }\n\n      return updateImageSizeInfo;\n    }()\n  }, {\n    key: \"exportPBTXT\",\n    value: function () {\n      var _exportPBTXT = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(exportFolderName, project) {\n        var pbtxtFileName, id, items;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(project.tags && project.tags.length > 0)) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                // Save pascal_label_map.pbtxt\n                pbtxtFileName = \"\".concat(exportFolderName, \"/pascal_label_map.pbtxt\");\n                id = 1;\n                items = project.tags.map(function (element) {\n                  var params = {\n                    id: (id++).toString(),\n                    tag: element.name\n                  };\n                  return interpolate(itemTemplate, params);\n                });\n                _context6.next = 6;\n                return this.storageProvider.writeText(pbtxtFileName, items.join(\"\"));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function exportPBTXT(_x9, _x10) {\n        return _exportPBTXT.apply(this, arguments);\n      }\n\n      return exportPBTXT;\n    }()\n  }, {\n    key: \"exportAnnotations\",\n    value: function () {\n      var _exportAnnotations = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(exportFolderName, allAssets) {\n        var _this3 = this;\n\n        var annotationsFolderName;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                // Create Annotations Sub Folder\n                annotationsFolderName = \"\".concat(exportFolderName, \"/Annotations\");\n                _context8.next = 3;\n                return this.storageProvider.createContainer(annotationsFolderName);\n\n              case 3:\n                _context8.prev = 3;\n                _context8.next = 6;\n                return this.imagesInfo.forEachAsync(\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee7(imageInfo, imageName) {\n                    var imageFilePath, assetFilePath, objectsXML, params;\n                    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                      while (1) {\n                        switch (_context7.prev = _context7.next) {\n                          case 0:\n                            imageFilePath = \"\".concat(annotationsFolderName, \"/\").concat(imageName);\n                            assetFilePath = \"\".concat(imageFilePath.substr(0, imageFilePath.lastIndexOf(\".\")) || imageFilePath, \".xml\");\n                            objectsXML = imageInfo.objects.map(function (o) {\n                              var params = {\n                                name: o.name,\n                                xmin: o.xmin.toString(),\n                                ymin: o.ymin.toString(),\n                                xmax: o.xmax.toString(),\n                                ymax: o.ymax.toString()\n                              };\n                              return interpolate(objectTemplate, params);\n                            });\n                            params = {\n                              fileName: imageName,\n                              filePath: imageFilePath,\n                              width: imageInfo.width.toString(),\n                              height: imageInfo.height.toString(),\n                              objects: objectsXML.join(\"\")\n                            }; // Save Annotation File\n\n                            _context7.next = 6;\n                            return _this3.storageProvider.writeText(assetFilePath, interpolate(annotationTemplate, params));\n\n                          case 6:\n                          case \"end\":\n                            return _context7.stop();\n                        }\n                      }\n                    }, _callee7, this);\n                  }));\n\n                  return function (_x13, _x14) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }());\n\n              case 6:\n                _context8.next = 11;\n                break;\n\n              case 8:\n                _context8.prev = 8;\n                _context8.t0 = _context8[\"catch\"](3);\n                console.log(\"Error writing Pascal VOC annotation file\");\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[3, 8]]);\n      }));\n\n      function exportAnnotations(_x11, _x12) {\n        return _exportAnnotations.apply(this, arguments);\n      }\n\n      return exportAnnotations;\n    }()\n  }, {\n    key: \"exportImageSets\",\n    value: function () {\n      var _exportImageSets = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11(exportFolderName, allAssets, tags, testSplit, exportUnassignedTags) {\n        var _this4 = this;\n\n        var imageSetsFolderName, imageSetsMainFolderName, assetUsage, tagUsage, _tags, testAssets;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (tags) {\n                  _context11.next = 2;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\");\n\n              case 2:\n                // Create ImageSets Sub Folder (Main ?)\n                imageSetsFolderName = \"\".concat(exportFolderName, \"/ImageSets\");\n                _context11.next = 5;\n                return this.storageProvider.createContainer(imageSetsFolderName);\n\n              case 5:\n                imageSetsMainFolderName = \"\".concat(exportFolderName, \"/ImageSets/Main\");\n                _context11.next = 8;\n                return this.storageProvider.createContainer(imageSetsMainFolderName);\n\n              case 8:\n                assetUsage = new Map();\n                tagUsage = new Map(); // Generate tag usage per asset\n\n                allAssets.forEach(function (assetMetadata) {\n                  var appliedTags = new Set();\n                  assetUsage.set(assetMetadata.asset.name, appliedTags);\n\n                  if (assetMetadata.regions.length > 0) {\n                    assetMetadata.regions.forEach(function (region) {\n                      tags.forEach(function (tag) {\n                        var tagInstances = tagUsage.get(tag.name) || 0;\n\n                        if (region.tags.filter(function (tagName) {\n                          return tagName === tag.name;\n                        }).length > 0) {\n                          appliedTags.add(tag.name);\n                          tagUsage.set(tag.name, tagInstances += 1);\n                        }\n                      });\n                    });\n                  }\n                });\n\n                if (!(testSplit > 0 && testSplit <= 1)) {\n                  _context11.next = 18;\n                  break;\n                }\n\n                _tags = this.project.tags;\n                testAssets = splitTestAsset(allAssets, _tags, testSplit);\n                _context11.next = 16;\n                return _tags.forEachAsync(\n                /*#__PURE__*/\n                function () {\n                  var _ref3 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee9(tag) {\n                    var tagInstances, testArray, trainArray, testImageSetFileName, trainImageSetFileName;\n                    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                      while (1) {\n                        switch (_context9.prev = _context9.next) {\n                          case 0:\n                            tagInstances = tagUsage.get(tag.name) || 0;\n\n                            if (!(!exportUnassignedTags && tagInstances === 0)) {\n                              _context9.next = 3;\n                              break;\n                            }\n\n                            return _context9.abrupt(\"return\");\n\n                          case 3:\n                            testArray = [];\n                            trainArray = [];\n                            assetUsage.forEach(function (tags, assetName) {\n                              var assetString = \"\";\n\n                              if (tags.has(tag.name)) {\n                                assetString = \"\".concat(assetName, \" 1\");\n                              } else {\n                                assetString = \"\".concat(assetName, \" -1\");\n                              }\n\n                              if (testAssets.find(function (am) {\n                                return am === assetName;\n                              })) {\n                                testArray.push(assetString);\n                              } else {\n                                trainArray.push(assetString);\n                              }\n                            });\n                            testImageSetFileName = \"\".concat(imageSetsMainFolderName, \"/\").concat(tag.name, \"_val.txt\");\n                            _context9.next = 9;\n                            return _this4.storageProvider.writeText(testImageSetFileName, testArray.join(os.EOL));\n\n                          case 9:\n                            trainImageSetFileName = \"\".concat(imageSetsMainFolderName, \"/\").concat(tag.name, \"_train.txt\");\n                            _context9.next = 12;\n                            return _this4.storageProvider.writeText(trainImageSetFileName, trainArray.join(os.EOL));\n\n                          case 12:\n                          case \"end\":\n                            return _context9.stop();\n                        }\n                      }\n                    }, _callee9, this);\n                  }));\n\n                  return function (_x20) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }());\n\n              case 16:\n                _context11.next = 20;\n                break;\n\n              case 18:\n                _context11.next = 20;\n                return tags.forEachAsync(\n                /*#__PURE__*/\n                function () {\n                  var _ref4 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee10(tag) {\n                    var tagInstances, assetList, imageSetFileName;\n                    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n                      while (1) {\n                        switch (_context10.prev = _context10.next) {\n                          case 0:\n                            tagInstances = tagUsage.get(tag.name) || 0;\n\n                            if (!(!exportUnassignedTags && tagInstances === 0)) {\n                              _context10.next = 3;\n                              break;\n                            }\n\n                            return _context10.abrupt(\"return\");\n\n                          case 3:\n                            assetList = [];\n                            assetUsage.forEach(function (tags, assetName) {\n                              if (tags.has(tag.name)) {\n                                assetList.push(\"\".concat(assetName, \" 1\"));\n                              } else {\n                                assetList.push(\"\".concat(assetName, \" -1\"));\n                              }\n                            });\n                            imageSetFileName = \"\".concat(imageSetsMainFolderName, \"/\").concat(tag.name, \".txt\");\n                            _context10.next = 8;\n                            return _this4.storageProvider.writeText(imageSetFileName, assetList.join(os.EOL));\n\n                          case 8:\n                          case \"end\":\n                            return _context10.stop();\n                        }\n                      }\n                    }, _callee10, this);\n                  }));\n\n                  return function (_x21) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }());\n\n              case 20:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function exportImageSets(_x15, _x16, _x17, _x18, _x19) {\n        return _exportImageSets.apply(this, arguments);\n      }\n\n      return exportImageSets;\n    }()\n  }]);\n\n  return PascalVOCExportProvider;\n}(ExportProvider);","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/providers/export/pascalVOC.ts"],"names":["_","ExportProvider","Guard","HtmlFileReader","itemTemplate","annotationTemplate","objectTemplate","interpolate","os","splitTestAsset","PascalVOCExportProvider","project","options","imagesInfo","Map","null","getAssetsForExport","allAssets","exportObject","assets","keyBy","assetMetadata","asset","id","exportFolderName","name","replace","storageProvider","createContainer","exportImages","exportPBTXT","exportAnnotations","testSplit","testTrainSplit","exportImageSets","tags","exportUnassigned","jpegImagesFolderName","mapAsync","exportSingleImage","getAssetArray","arrayBuffer","buffer","Buffer","from","imageFileName","writeBinary","tagObjects","getAssetTagArray","imageInfo","width","size","height","objects","set","updateImageSizeInfo","console","log","path","element","regions","forEach","region","tagName","objectInfo","xmin","boundingBox","left","ymin","top","xmax","ymax","push","imageBuffer","assetName","image64","btoa","Uint8Array","reduce","data","byte","String","fromCharCode","length","readAssetAttributesWithBuffer","assetProps","get","pbtxtFileName","items","map","params","toString","tag","writeText","join","annotationsFolderName","forEachAsync","imageName","imageFilePath","assetFilePath","substr","lastIndexOf","objectsXML","o","fileName","filePath","exportUnassignedTags","imageSetsFolderName","imageSetsMainFolderName","assetUsage","tagUsage","appliedTags","Set","tagInstances","filter","add","testAssets","testArray","trainArray","assetString","has","find","am","testImageSetFileName","EOL","trainImageSetFileName","assetList","imageSetFileName"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport { ExportProvider } from \"./exportProvider\";\nimport { IProject, IAssetMetadata, ITag, IExportProviderOptions } from \"../../models/applicationState\";\nimport Guard from \"../../common/guard\";\nimport HtmlFileReader from \"../../common/htmlFileReader\";\nimport { itemTemplate, annotationTemplate, objectTemplate } from \"./pascalVOC/pascalVOCTemplates\";\nimport { interpolate } from \"../../common/strings\";\nimport os from \"os\";\nimport { splitTestAsset } from \"./testAssetsSplitHelper\";\n\ninterface IObjectInfo {\n    name: string;\n    xmin: number;\n    ymin: number;\n    xmax: number;\n    ymax: number;\n}\n\ninterface IImageInfo {\n    width: number;\n    height: number;\n    objects: IObjectInfo[];\n}\n\n/**\n * Export options for Pascal VOC Export Provider\n */\nexport interface IPascalVOCExportProviderOptions extends IExportProviderOptions {\n    /** The test / train split ratio for exporting data */\n    testTrainSplit?: number;\n    /** Whether or not to include unassigned tags in exported data */\n    exportUnassigned?: boolean;\n}\n\n/**\n * @name - PascalVOC Export Provider\n * @description - Exports a project into a Pascal VOC\n */\nexport class PascalVOCExportProvider extends ExportProvider<IPascalVOCExportProviderOptions> {\n    private imagesInfo = new Map<string, IImageInfo>();\n\n    constructor(project: IProject, options: IPascalVOCExportProviderOptions) {\n        super(project, options);\n        Guard.null(options);\n    }\n\n    /**\n     * Export project to PascalVOC\n     */\n    public async export(): Promise<void> {\n        const allAssets = await this.getAssetsForExport();\n        const exportObject: any = { ...this.project };\n        exportObject.assets = _.keyBy(allAssets, (assetMetadata) => assetMetadata.asset.id);\n\n        // Create Export Folder\n        const exportFolderName = `${this.project.name.replace(/\\s/g, \"-\")}-PascalVOC-export`;\n        await this.storageProvider.createContainer(exportFolderName);\n\n        await this.exportImages(exportFolderName, allAssets);\n        await this.exportPBTXT(exportFolderName, this.project);\n        await this.exportAnnotations(exportFolderName, allAssets);\n\n        // TestSplit && exportUnassignedTags are optional parameter in the UI Exporter configuration\n        const testSplit = (100 - (this.options.testTrainSplit || 80)) / 100;\n        await this.exportImageSets(\n            exportFolderName,\n            allAssets,\n            this.project.tags,\n            testSplit,\n            this.options.exportUnassigned,\n        );\n    }\n\n    private async exportImages(exportFolderName: string, allAssets: IAssetMetadata[]) {\n        // Create JPEGImages Sub Folder\n        const jpegImagesFolderName = `${exportFolderName}/JPEGImages`;\n        await this.storageProvider.createContainer(jpegImagesFolderName);\n\n        await allAssets.mapAsync(async (assetMetadata) => {\n            await this.exportSingleImage(jpegImagesFolderName, assetMetadata);\n        });\n    }\n\n    private async exportSingleImage(jpegImagesFolderName: string, assetMetadata: IAssetMetadata): Promise<void> {\n        try {\n            const arrayBuffer = await HtmlFileReader.getAssetArray(assetMetadata.asset);\n            const buffer = Buffer.from(arrayBuffer);\n            const imageFileName = `${jpegImagesFolderName}/${assetMetadata.asset.name}`;\n\n            // Write Binary\n            await this.storageProvider.writeBinary(imageFileName, buffer);\n\n            // Get Array of all Box shaped tag for the Asset\n            const tagObjects = this.getAssetTagArray(assetMetadata);\n\n            const imageInfo: IImageInfo = {\n                width: assetMetadata.asset.size ? assetMetadata.asset.size.width : 0,\n                height: assetMetadata.asset.size ? assetMetadata.asset.size.height : 0,\n                objects: tagObjects,\n            };\n\n            this.imagesInfo.set(assetMetadata.asset.name, imageInfo);\n\n            if (!assetMetadata.asset.size ||\n                assetMetadata.asset.size.width === 0 ||\n                assetMetadata.asset.size.height === 0) {\n                await this.updateImageSizeInfo(arrayBuffer, imageFileName, assetMetadata.asset.name);\n            }\n        } catch (err) {\n            // Ignore the error at the moment\n            // TODO: Refactor ExportProvider abstract class export() method\n            //       to return Promise<object> with an object containing\n            //       the number of files successfully exported out of total\n            console.log(`Error downloading asset ${assetMetadata.asset.path} - ${err}`);\n        }\n    }\n\n    private getAssetTagArray(element: IAssetMetadata): IObjectInfo[] {\n        const tagObjects = [];\n        element.regions.forEach((region) => {\n            region.tags.forEach((tagName) => {\n                const objectInfo: IObjectInfo = {\n                    name: tagName,\n                    xmin: region.boundingBox.left,\n                    ymin: region.boundingBox.top,\n                    xmax: region.boundingBox.left + region.boundingBox.width,\n                    ymax: region.boundingBox.top + region.boundingBox.height,\n                };\n\n                tagObjects.push(objectInfo);\n            });\n        });\n\n        return tagObjects;\n    }\n\n    private async updateImageSizeInfo(imageBuffer: ArrayBuffer, imageFileName: string, assetName: string) {\n        // Get Base64\n        const image64 = btoa(new Uint8Array(imageBuffer).\n            reduce((data, byte) => data + String.fromCharCode(byte), \"\"));\n\n        if (image64.length < 10) {\n            // Ignore the error at the moment\n            // TODO: Refactor ExportProvider abstract class export() method\n            //       to return Promise<object> with an object containing\n            //       the number of files successfully exported out of total\n            console.log(`Image not valid ${imageFileName}`);\n        } else {\n            const assetProps = await HtmlFileReader.readAssetAttributesWithBuffer(image64);\n            const imageInfo = this.imagesInfo.get(assetName);\n            if (imageInfo && assetProps) {\n                imageInfo.width = assetProps.width;\n                imageInfo.height = assetProps.height;\n            } else {\n                console.log(`imageInfo for element ${assetName} not found (${assetProps})`);\n            }\n        }\n    }\n\n    private async exportPBTXT(exportFolderName: string, project: IProject) {\n        if (project.tags && project.tags.length > 0) {\n            // Save pascal_label_map.pbtxt\n            const pbtxtFileName = `${exportFolderName}/pascal_label_map.pbtxt`;\n\n            let id = 1;\n            const items = project.tags.map((element) => {\n                const params = {\n                    id: (id++).toString(),\n                    tag: element.name,\n                };\n\n                return interpolate(itemTemplate, params);\n            });\n\n            await this.storageProvider.writeText(pbtxtFileName, items.join(\"\"));\n        }\n    }\n\n    private async exportAnnotations(exportFolderName: string, allAssets: IAssetMetadata[]) {\n        // Create Annotations Sub Folder\n        const annotationsFolderName = `${exportFolderName}/Annotations`;\n        await this.storageProvider.createContainer(annotationsFolderName);\n\n        try {\n            // Save Annotations\n            await this.imagesInfo.forEachAsync(async (imageInfo, imageName) => {\n                const imageFilePath = `${annotationsFolderName}/${imageName}`;\n                const assetFilePath = `${imageFilePath.substr(0, imageFilePath.lastIndexOf(\".\"))\n                    || imageFilePath}.xml`;\n\n                const objectsXML = imageInfo.objects.map((o) => {\n                    const params = {\n                        name: o.name,\n                        xmin: o.xmin.toString(),\n                        ymin: o.ymin.toString(),\n                        xmax: o.xmax.toString(),\n                        ymax: o.ymax.toString(),\n                    };\n\n                    return interpolate(objectTemplate, params);\n                });\n\n                const params = {\n                    fileName: imageName,\n                    filePath: imageFilePath,\n                    width: imageInfo.width.toString(),\n                    height: imageInfo.height.toString(),\n                    objects: objectsXML.join(\"\"),\n                };\n\n                // Save Annotation File\n                await this.storageProvider.writeText(assetFilePath, interpolate(annotationTemplate, params));\n            });\n        } catch (err) {\n            console.log(\"Error writing Pascal VOC annotation file\");\n        }\n    }\n\n    private async exportImageSets(\n        exportFolderName: string,\n        allAssets: IAssetMetadata[],\n        tags: ITag[],\n        testSplit: number,\n        exportUnassignedTags: boolean) {\n        if (!tags) {\n            return;\n        }\n\n        // Create ImageSets Sub Folder (Main ?)\n        const imageSetsFolderName = `${exportFolderName}/ImageSets`;\n        await this.storageProvider.createContainer(imageSetsFolderName);\n\n        const imageSetsMainFolderName = `${exportFolderName}/ImageSets/Main`;\n        await this.storageProvider.createContainer(imageSetsMainFolderName);\n\n        const assetUsage = new Map<string, Set<string>>();\n        const tagUsage = new Map<string, number>();\n\n        // Generate tag usage per asset\n        allAssets.forEach((assetMetadata) => {\n            const appliedTags = new Set<string>();\n            assetUsage.set(assetMetadata.asset.name, appliedTags);\n\n            if (assetMetadata.regions.length > 0) {\n                assetMetadata.regions.forEach((region) => {\n                    tags.forEach((tag) => {\n                        let tagInstances = tagUsage.get(tag.name) || 0;\n                        if (region.tags.filter((tagName) => tagName === tag.name).length > 0) {\n                            appliedTags.add(tag.name);\n                            tagUsage.set(tag.name, tagInstances += 1);\n                        }\n                    });\n                });\n            }\n        });\n\n        if (testSplit > 0 && testSplit <= 1) {\n            const tags = this.project.tags;\n            const testAssets: string[] = splitTestAsset(allAssets, tags, testSplit);\n\n            await tags.forEachAsync(async (tag) => {\n                const tagInstances = tagUsage.get(tag.name) || 0;\n                if (!exportUnassignedTags && tagInstances === 0) {\n                    return;\n                }\n                const testArray = [];\n                const trainArray = [];\n                assetUsage.forEach((tags, assetName) => {\n                    let assetString = \"\";\n                    if (tags.has(tag.name)) {\n                        assetString = `${assetName} 1`;\n                    } else {\n                        assetString = `${assetName} -1`;\n                    }\n                    if (testAssets.find((am) => am === assetName)) {\n                        testArray.push(assetString);\n                    } else {\n                        trainArray.push(assetString);\n                    }\n                });\n\n                const testImageSetFileName = `${imageSetsMainFolderName}/${tag.name}_val.txt`;\n                await this.storageProvider.writeText(testImageSetFileName, testArray.join(os.EOL));\n\n                const trainImageSetFileName = `${imageSetsMainFolderName}/${tag.name}_train.txt`;\n                await this.storageProvider.writeText(trainImageSetFileName, trainArray.join(os.EOL));\n            });\n        } else {\n\n            // Save ImageSets\n            await tags.forEachAsync(async (tag) => {\n                const tagInstances = tagUsage.get(tag.name) || 0;\n                if (!exportUnassignedTags && tagInstances === 0) {\n                    return;\n                }\n\n                const assetList = [];\n                assetUsage.forEach((tags, assetName) => {\n                    if (tags.has(tag.name)) {\n                        assetList.push(`${assetName} 1`);\n                    } else {\n                        assetList.push(`${assetName} -1`);\n                    }\n                });\n\n                const imageSetFileName = `${imageSetsMainFolderName}/${tag.name}.txt`;\n                await this.storageProvider.writeText(imageSetFileName, assetList.join(os.EOL));\n            });\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Point2D_1 = require(\"../../Core/Point2D\");\n\nvar RegionData_1 = require(\"../../Core/RegionData\");\n\nvar CrossElement_1 = require(\"../Component/CrossElement\");\n\nvar Selector_1 = require(\"./Selector\");\n/**\r\n * The selector to define a polyline-region.\r\n */\n\n\nvar PolylineSelector =\n/*#__PURE__*/\nfunction (_Selector_1$Selector) {\n  _inherits(PolylineSelector, _Selector_1$Selector);\n\n  /**\r\n   * Creates new `PolylineSelector` object.\r\n   * @param parent - The parent SVG-element.\r\n   * @param paper - The `Snap.Paper` element to draw on.\r\n   * @param boundRect - The bounding box.\r\n   * @param callbacks - The collection of callbacks.\r\n   */\n  function PolylineSelector(parent, paper, boundRect, callbacks) {\n    var _this;\n\n    _classCallCheck(this, PolylineSelector);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PolylineSelector).call(this, parent, paper, boundRect, callbacks));\n    /**\r\n     * Default point radius.\r\n     */\n\n    _this.pointRadius = 3;\n    /**\r\n     * Current state of selector.\r\n     */\n\n    _this.isCapturing = false;\n\n    _this.buildUIElements();\n\n    _this.reset();\n\n    _this.hide();\n\n    return _this;\n  }\n  /**\r\n   * Resizes the selector to specified `width` and `height`.\r\n   * @param width - The new `width`.\r\n   * @param height - The new `height`.\r\n   */\n\n\n  _createClass(PolylineSelector, [{\n    key: \"resize\",\n    value: function resize(width, height) {\n      _get(_getPrototypeOf(PolylineSelector.prototype), \"resize\", this).call(this, width, height);\n\n      this.crossA.resize(width, height);\n    }\n    /**\r\n     * Hides the selector.\r\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      _get(_getPrototypeOf(PolylineSelector.prototype), \"hide\", this).call(this);\n\n      this.crossA.hide();\n      this.nextPoint.node.setAttribute(\"visibility\", \"hidden\");\n      this.nextSegment.node.setAttribute(\"visibility\", \"hidden\");\n      this.polyline.node.setAttribute(\"visibility\", \"hidden\");\n      this.pointsGroup.node.setAttribute(\"visibility\", \"hidden\");\n    }\n    /**\r\n     * Shows the selector.\r\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      _get(_getPrototypeOf(PolylineSelector.prototype), \"show\", this).call(this);\n\n      this.crossA.show();\n      this.nextPoint.node.setAttribute(\"visibility\", \"visible\");\n      this.nextSegment.node.setAttribute(\"visibility\", \"visible\");\n      this.polyline.node.setAttribute(\"visibility\", \"visible\");\n      this.pointsGroup.node.setAttribute(\"visibility\", \"visible\");\n    }\n    /**\r\n     * Disables and hides this selector.\r\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.reset();\n\n      _get(_getPrototypeOf(PolylineSelector.prototype), \"disable\", this).call(this);\n    }\n    /**\r\n     * Builds selector's UI.\r\n     */\n\n  }, {\n    key: \"buildUIElements\",\n    value: function buildUIElements() {\n      this.node = this.paper.g();\n      this.node.addClass(\"polylineSelector\");\n      this.crossA = new CrossElement_1.CrossElement(this.paper, this.boundRect);\n      this.nextPoint = this.paper.circle(0, 0, this.pointRadius);\n      this.nextPoint.addClass(\"nextPointStyle\");\n      this.nextSegment = this.paper.line(0, 0, 0, 0);\n      this.nextSegment.addClass(\"nextSegmentStyle\");\n      this.pointsGroup = this.paper.g();\n      this.pointsGroup.addClass(\"polylineGroupStyle\");\n      this.polyline = this.paper.polyline([]);\n      this.polyline.addClass(\"polylineStyle\");\n      this.node.add(this.polyline);\n      this.node.add(this.pointsGroup);\n      this.node.add(this.crossA.node);\n      this.node.add(this.nextSegment);\n      this.node.add(this.nextPoint);\n      var listeners = [{\n        event: \"pointerenter\",\n        listener: this.onPointerEnter,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"pointerleave\",\n        listener: this.onPointerLeave,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"pointerdown\",\n        listener: this.onPointerDown,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"click\",\n        listener: this.onClick,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"pointermove\",\n        listener: this.onPointerMove,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"dblclick\",\n        listener: this.onDoubleClick,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"keyup\",\n        listener: this.onKeyUp,\n        base: window,\n        bypass: true\n      }];\n      this.subscribeToEvents(listeners);\n    }\n    /**\r\n     * Resets the selector.\r\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.points = new Array();\n      this.lastPoint = null;\n      var ps = this.pointsGroup.children();\n\n      while (ps.length > 0) {\n        ps[0].remove();\n        ps = this.pointsGroup.children();\n      }\n\n      this.polyline.attr({\n        points: \"\"\n      });\n\n      if (this.isCapturing) {\n        this.isCapturing = false;\n      }\n    }\n    /**\r\n     * Adds a new point to polyline at specified coordinates\r\n     * @param x - x-coordinate of the new point.\r\n     * @param y - y-coordinate of the new point.\r\n     */\n\n  }, {\n    key: \"addPoint\",\n    value: function addPoint(x, y) {\n      this.points.push(new Point2D_1.Point2D(x, y));\n      var point = this.paper.circle(x, y, this.pointRadius);\n      point.addClass(\"polylinePointStyle\");\n      this.pointsGroup.add(point);\n      var pointsStr = \"\";\n      this.points.forEach(function (p) {\n        pointsStr += \"\".concat(p.x, \",\").concat(p.y, \",\");\n      });\n      this.polyline.attr({\n        points: pointsStr.substr(0, pointsStr.length - 1)\n      });\n    }\n    /**\r\n     * Listener for the pointer enter event.\r\n     * @param e PointerEvent\r\n     */\n\n  }, {\n    key: \"onPointerEnter\",\n    value: function onPointerEnter(e) {\n      var _this2 = this;\n\n      window.requestAnimationFrame(function () {\n        _this2.show();\n      });\n    }\n    /**\r\n     * Listener for the pointer leave event.\r\n     * @param e PointerEvent\r\n     */\n\n  }, {\n    key: \"onPointerLeave\",\n    value: function onPointerLeave(e) {\n      var _this3 = this;\n\n      if (!this.isCapturing) {\n        window.requestAnimationFrame(function () {\n          _this3.hide();\n        });\n      } else {\n        var rect = this.parentNode.getClientRects();\n        var p = new Point2D_1.Point2D(e.clientX - rect[0].left, e.clientY - rect[0].top);\n        this.moveCross(this.crossA, p);\n        this.movePoint(this.nextPoint, p);\n      }\n    }\n    /**\r\n     * Listener for the pointer down event.\r\n     * @param e PointerEvent\r\n     */\n\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(e) {\n      if (!this.isCapturing) {\n        this.isCapturing = true;\n\n        if (typeof this.callbacks.onSelectionBegin === \"function\") {\n          this.callbacks.onSelectionBegin();\n        }\n      }\n    }\n    /**\r\n     * Listener for the mouse click event.\r\n     * @param e MouseEvent\r\n     */\n\n  }, {\n    key: \"onClick\",\n    value: function onClick(e) {\n      var _this4 = this;\n\n      if (e.detail <= 1) {\n        window.requestAnimationFrame(function () {\n          var p = new Point2D_1.Point2D(_this4.crossA.x, _this4.crossA.y);\n\n          _this4.addPoint(p.x, p.y);\n\n          _this4.lastPoint = p;\n        });\n      }\n    }\n    /**\r\n     * Listener for the pointer move event.\r\n     * @param e PointerEvent\r\n     */\n\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(e) {\n      var _this5 = this;\n\n      window.requestAnimationFrame(function () {\n        var rect = _this5.parentNode.getClientRects();\n\n        var p = new Point2D_1.Point2D(e.clientX - rect[0].left, e.clientY - rect[0].top);\n\n        _this5.show();\n\n        _this5.moveCross(_this5.crossA, p);\n\n        _this5.movePoint(_this5.nextPoint, p);\n\n        if (_this5.lastPoint != null) {\n          _this5.moveLine(_this5.nextSegment, _this5.lastPoint, p);\n        } else {\n          _this5.moveLine(_this5.nextSegment, p, p);\n        }\n      });\n      e.preventDefault();\n    }\n    /**\r\n     * Listener for the mouse double click event.\r\n     * @param e MouseEvent\r\n     */\n\n  }, {\n    key: \"onDoubleClick\",\n    value: function onDoubleClick(e) {\n      this.submitPolyline();\n    }\n    /**\r\n     * Submits the new polygon region to the callback function.\r\n     */\n\n  }, {\n    key: \"submitPolyline\",\n    value: function submitPolyline() {\n      if (typeof this.callbacks.onSelectionEnd === \"function\") {\n        var box = this.polyline.getBBox();\n        this.callbacks.onSelectionEnd(new RegionData_1.RegionData(box.x, box.y, box.width, box.height, this.getPolylinePoints(), RegionData_1.RegionDataType.Polyline));\n      }\n\n      this.reset();\n    }\n    /**\r\n     * Returns the polyline points, closes it if required.\r\n     * @param close - A flag to \"close\" the polyline if last point is near to the first one.\r\n     * @param threshold - The threshold to calculate what is \"near\".\r\n     */\n\n  }, {\n    key: \"getPolylinePoints\",\n    value: function getPolylinePoints() {\n      var close = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n      var points = this.points.map(function (p) {\n        return p.copy();\n      });\n\n      if (points.length >= 3 && close) {\n        var fp = points[0];\n        var lp = points[points.length - 1];\n        var distanceSquare = (fp.x - lp.x) * (fp.x - lp.x) + (fp.y - lp.y) * (fp.y - lp.y);\n\n        if (distanceSquare <= threshold * threshold) {\n          points[points.length - 1] = fp.copy();\n        }\n      }\n\n      return points;\n    }\n    /**\r\n     * Listener for the key up event.\r\n     * @param e KeyboardEvent\r\n     */\n\n  }, {\n    key: \"onKeyUp\",\n    value: function onKeyUp(e) {\n      // Holding shift key enable square drawing mode\n      if (e.code === \"Escape\") {\n        this.submitPolyline();\n      }\n    }\n  }]);\n\n  return PolylineSelector;\n}(Selector_1.Selector);\n\nexports.PolylineSelector = PolylineSelector;","map":null,"metadata":{},"sourceType":"script"}
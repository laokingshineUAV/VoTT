{"ast":null,"code":"import _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { TFRecordsImageMessage, Features, Feature, BytesList, Int64List, FloatList } from \"./tensorFlowRecordsProtoBuf_pb\";\nimport { crc32c, maskCrc, getInt64Buffer, getInt32Buffer, textEncode } from \"./tensorFlowHelpers\";\n/**\n * @name - TFRecords Feature Type\n * @description - Defines the type of TFRecords Feature\n * @member String - Specifies a Feature as a string\n * @member Binary - Specifies a Feature as a binary UInt8Array\n * @member Int64 - Specifies a Feature as a Int64\n * @member Float - Specifies a Feature as a Float\n */\n\nexport var FeatureType;\n/**\n * @name - TFRecords Builder Class\n * @description - Create a TFRecords object\n */\n\n(function (FeatureType) {\n  FeatureType[FeatureType[\"String\"] = 0] = \"String\";\n  FeatureType[FeatureType[\"Binary\"] = 1] = \"Binary\";\n  FeatureType[FeatureType[\"Int64\"] = 2] = \"Int64\";\n  FeatureType[FeatureType[\"Float\"] = 3] = \"Float\";\n})(FeatureType || (FeatureType = {}));\n\nexport var TFRecordsBuilder =\n/*#__PURE__*/\nfunction () {\n  _createClass(TFRecordsBuilder, null, [{\n    key: \"buildTFRecords\",\n\n    /**\n     * @records - An Array of TFRecord Buffer created with releaseTFRecord()\n     * @description - Return a Buffer representation of a TFRecords object\n     */\n    value: function buildTFRecords(records) {\n      return Buffer.concat(records.map(function (record) {\n        var length = record.length; // Get TFRecords CRCs for TFRecords Header and Footer\n\n        var bufferLength = getInt64Buffer(length);\n        var bufferLengthMaskedCRC = getInt32Buffer(maskCrc(crc32c(bufferLength)));\n        var bufferDataMaskedCRC = getInt32Buffer(maskCrc(crc32c(record))); // Concatenate all TFRecords Header, Data and Footer buffer\n\n        return Buffer.concat([bufferLength, bufferLengthMaskedCRC, record, bufferDataMaskedCRC]);\n      }));\n    }\n  }]);\n\n  function TFRecordsBuilder() {\n    _classCallCheck(this, TFRecordsBuilder);\n\n    this.features = new Features();\n  }\n  /**\n   * @key - Feature Key\n   * @type - Feature Type\n   * @value - A Int64 | Float | String | Binary value\n   * @description - Add a Int64 | Float | String | Binary value feature\n   */\n\n\n  _createClass(TFRecordsBuilder, [{\n    key: \"addFeature\",\n    value: function addFeature(key, type, value) {\n      this.addArrayFeature(key, type, [value]);\n    }\n    /**\n     * @key - Feature Key\n     * @type - Feature Type\n     * @value - An Array of Int64 | Float | String | Binary values\n     * @description - Add an Array of Int64 | Float | String | Binary values feature\n     */\n\n  }, {\n    key: \"addArrayFeature\",\n    value: function addArrayFeature(key, type, values) {\n      var feature = new Feature();\n\n      switch (type) {\n        case FeatureType.String:\n          var stringList = new BytesList();\n          values.forEach(function (value) {\n            stringList.addValue(textEncode(value));\n          });\n          feature.setBytesList(stringList);\n          break;\n\n        case FeatureType.Binary:\n          var byteList = new BytesList();\n          values.forEach(function (value) {\n            byteList.addValue(value);\n          });\n          feature.setBytesList(byteList);\n          break;\n\n        case FeatureType.Int64:\n          var intList = new Int64List();\n          values.forEach(function (value) {\n            intList.addValue(value);\n          });\n          feature.setInt64List(intList);\n          break;\n\n        case FeatureType.Float:\n          var floatList = new FloatList();\n          values.forEach(function (value) {\n            floatList.addValue(value);\n          });\n          feature.setFloatList(floatList);\n          break;\n\n        default:\n          break;\n      }\n\n      var featuresMap = this.features.getFeatureMap();\n      featuresMap.set(key, feature);\n    }\n    /**\n     * @description - Return a Buffer representation of a single TFRecord\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      // Get Protocol Buffer TFRecords object with exported image features\n      var imageMessage = new TFRecordsImageMessage();\n      imageMessage.setContext(this.features); // Serialize Protocol Buffer in a buffer\n\n      var bytes = imageMessage.serializeBinary();\n      return new Buffer(bytes);\n    }\n  }]);\n\n  return TFRecordsBuilder;\n}();","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/providers/export/tensorFlowRecords/tensorFlowBuilder.ts"],"names":["TFRecordsImageMessage","Features","Feature","BytesList","Int64List","FloatList","crc32c","maskCrc","getInt64Buffer","getInt32Buffer","textEncode","FeatureType","TFRecordsBuilder","records","Buffer","concat","map","record","length","bufferLength","bufferLengthMaskedCRC","bufferDataMaskedCRC","features","key","type","value","addArrayFeature","values","feature","String","stringList","forEach","addValue","setBytesList","Binary","byteList","Int64","intList","setInt64List","Float","floatList","setFloatList","featuresMap","getFeatureMap","set","imageMessage","setContext","bytes","serializeBinary"],"mappings":"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","sourcesContent":["import { TFRecordsImageMessage, Features, Feature, FeatureList,\n    BytesList, Int64List, FloatList } from \"./tensorFlowRecordsProtoBuf_pb\";\nimport { crc32c, maskCrc, getInt64Buffer, getInt32Buffer, textEncode } from \"./tensorFlowHelpers\";\n\n/**\n * @name - TFRecords Feature Type\n * @description - Defines the type of TFRecords Feature\n * @member String - Specifies a Feature as a string\n * @member Binary - Specifies a Feature as a binary UInt8Array\n * @member Int64 - Specifies a Feature as a Int64\n * @member Float - Specifies a Feature as a Float\n */\nexport enum FeatureType {\n    String = 0,\n    Binary = 1,\n    Int64 = 2,\n    Float = 3,\n}\n\n/**\n * @name - TFRecords Builder Class\n * @description - Create a TFRecords object\n */\nexport class TFRecordsBuilder {\n    /**\n     * @records - An Array of TFRecord Buffer created with releaseTFRecord()\n     * @description - Return a Buffer representation of a TFRecords object\n     */\n    public static buildTFRecords(records: Buffer[]): Buffer {\n        return Buffer.concat(records.map((record) => {\n            const length = record.length;\n\n            // Get TFRecords CRCs for TFRecords Header and Footer\n            const bufferLength = getInt64Buffer(length);\n            const bufferLengthMaskedCRC = getInt32Buffer(maskCrc(crc32c(bufferLength)));\n            const bufferDataMaskedCRC = getInt32Buffer(maskCrc(crc32c(record)));\n\n            // Concatenate all TFRecords Header, Data and Footer buffer\n            return Buffer.concat([bufferLength,\n                                  bufferLengthMaskedCRC,\n                                  record,\n                                  bufferDataMaskedCRC]);\n        }));\n    }\n\n    private features: Features;\n\n    constructor() {\n        this.features = new Features();\n    }\n\n    /**\n     * @key - Feature Key\n     * @type - Feature Type\n     * @value - A Int64 | Float | String | Binary value\n     * @description - Add a Int64 | Float | String | Binary value feature\n     */\n    public addFeature(key: string, type: FeatureType, value: string | number | Uint8Array) {\n        this.addArrayFeature(key, type, [value]);\n    }\n\n    /**\n     * @key - Feature Key\n     * @type - Feature Type\n     * @value - An Array of Int64 | Float | String | Binary values\n     * @description - Add an Array of Int64 | Float | String | Binary values feature\n     */\n    public addArrayFeature<T extends string | number | Uint8Array>(key: string, type: FeatureType, values: T[]) {\n        const feature = new Feature();\n\n        switch (type) {\n            case FeatureType.String:\n                const stringList = new BytesList();\n                values.forEach((value) => {\n                    stringList.addValue(textEncode(value as string));\n                });\n                feature.setBytesList(stringList);\n                break;\n            case FeatureType.Binary:\n                const byteList = new BytesList();\n                values.forEach((value) => {\n                    byteList.addValue(value);\n                });\n                feature.setBytesList(byteList);\n                break;\n            case FeatureType.Int64:\n                const intList = new Int64List();\n                values.forEach((value) => {\n                    intList.addValue(value);\n                });\n                feature.setInt64List(intList);\n                break;\n            case FeatureType.Float:\n                const floatList = new FloatList();\n                values.forEach((value) => {\n                    floatList.addValue(value);\n                });\n                feature.setFloatList(floatList);\n                break;\n            default:\n                break;\n        }\n\n        const featuresMap = this.features.getFeatureMap();\n        featuresMap.set(key, feature);\n    }\n\n    /**\n     * @description - Return a Buffer representation of a single TFRecord\n     */\n    public build(): Buffer {\n        // Get Protocol Buffer TFRecords object with exported image features\n        const imageMessage = new TFRecordsImageMessage();\n        imageMessage.setContext(this.features);\n\n        // Serialize Protocol Buffer in a buffer\n        const bytes = imageMessage.serializeBinary();\n        return new Buffer(bytes);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
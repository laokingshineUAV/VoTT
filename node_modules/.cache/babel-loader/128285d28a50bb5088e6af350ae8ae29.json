{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Point2D_1 = require(\"../../Core/Point2D\");\n\nvar Rect_1 = require(\"../../Core/Rect\");\n\nvar RegionData_1 = require(\"../../Core/RegionData\");\n\nvar CrossElement_1 = require(\"../Component/CrossElement\");\n\nvar RectElement_1 = require(\"../Component/RectElement\");\n\nvar Selector_1 = require(\"./Selector\");\n/**\r\n * The selector to define a rect-region using a template.\r\n */\n\n\nvar RectCopySelector =\n/*#__PURE__*/\nfunction (_Selector_1$Selector) {\n  _inherits(RectCopySelector, _Selector_1$Selector);\n\n  /**\r\n   * Creates new `RectCopySelector` object.\r\n   * @param parent - The parent SVG-element.\r\n   * @param paper - The `Snap.Paper` element to draw on.\r\n   * @param boundRect - The bounding box.\r\n   * @param copyRect - The template rect for selection.\r\n   * @param callbacks - The collection of callbacks.\r\n   */\n  function RectCopySelector(parent, paper, boundRect, copyRect, callbacks) {\n    var _this;\n\n    _classCallCheck(this, RectCopySelector);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RectCopySelector).call(this, parent, paper, boundRect, callbacks));\n    _this.copyRect = copyRect;\n\n    _this.buildUIElements();\n\n    _this.hide();\n\n    return _this;\n  }\n  /**\r\n   * Updates the template for selector.\r\n   * @param copyRect - New template rect.\r\n   */\n\n\n  _createClass(RectCopySelector, [{\n    key: \"setTemplate\",\n    value: function setTemplate(copyRect) {\n      this.copyRect = new Rect_1.Rect(copyRect.width, copyRect.height);\n      this.copyRectEl.resize(copyRect.width, copyRect.height);\n      this.moveCopyRect(this.copyRectEl, this.crossA);\n    }\n    /**\r\n     * Resizes the selector to specified `width` and `height`.\r\n     * @param width - The new `width`.\r\n     * @param height - The new `height`.\r\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      _get(_getPrototypeOf(RectCopySelector.prototype), \"resize\", this).call(this, width, height);\n\n      this.crossA.resize(width, height);\n    }\n    /**\r\n     * Hides the selector.\r\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      _get(_getPrototypeOf(RectCopySelector.prototype), \"hide\", this).call(this);\n\n      this.hideAll([this.crossA, this.copyRectEl]);\n    }\n    /**\r\n     * Shows the selector.\r\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      _get(_getPrototypeOf(RectCopySelector.prototype), \"show\", this).call(this);\n\n      this.showAll([this.crossA, this.copyRectEl]);\n    }\n    /**\r\n     * Builds selector's UI.\r\n     */\n\n  }, {\n    key: \"buildUIElements\",\n    value: function buildUIElements() {\n      this.node = this.paper.g();\n      this.node.addClass(\"rectCopySelector\");\n      this.crossA = new CrossElement_1.CrossElement(this.paper, this.boundRect);\n      this.copyRectEl = new RectElement_1.RectElement(this.paper, this.boundRect, this.copyRect);\n      this.copyRectEl.node.addClass(\"copyRectStyle\");\n      this.node.add(this.crossA.node);\n      this.node.add(this.copyRectEl.node);\n      var listeners = [{\n        event: \"pointerenter\",\n        listener: this.onPointerEnter,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"pointerleave\",\n        listener: this.onPointerLeave,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"pointerdown\",\n        listener: this.onPointerDown,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"pointerup\",\n        listener: this.onPointerUp,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"pointermove\",\n        listener: this.onPointerMove,\n        base: this.parentNode,\n        bypass: false\n      }, {\n        event: \"wheel\",\n        listener: this.onWheel,\n        base: this.parentNode,\n        bypass: false\n      }];\n      this.subscribeToEvents(listeners);\n    }\n    /**\r\n     * Helper function to move rect to specified point.\r\n     * @param copyRect - The rect element to move.\r\n     * @param p - The new location.\r\n     */\n\n  }, {\n    key: \"moveCopyRect\",\n    value: function moveCopyRect(copyRect, p) {\n      var x = p.x - copyRect.rect.width / 2;\n      var y = p.y - copyRect.rect.height / 2;\n      copyRect.move(new Point2D_1.Point2D(x, y));\n    }\n    /**\r\n     * Listener for the pointer enter event.\r\n     * @param e PointerEvent\r\n     */\n\n  }, {\n    key: \"onPointerEnter\",\n    value: function onPointerEnter(e) {\n      var _this2 = this;\n\n      window.requestAnimationFrame(function () {\n        _this2.crossA.show();\n\n        _this2.copyRectEl.show();\n      });\n    }\n    /**\r\n     * Listener for the pointer leave event.\r\n     * @param e PointerEvent\r\n     */\n\n  }, {\n    key: \"onPointerLeave\",\n    value: function onPointerLeave(e) {\n      var _this3 = this;\n\n      window.requestAnimationFrame(function () {\n        _this3.hide();\n      });\n    }\n    /**\r\n     * Listener for the pointer down event.\r\n     * @param e PointerEvent\r\n     */\n\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(e) {\n      var _this4 = this;\n\n      window.requestAnimationFrame(function () {\n        _this4.show();\n\n        _this4.moveCopyRect(_this4.copyRectEl, _this4.crossA);\n\n        if (typeof _this4.callbacks.onSelectionBegin === \"function\") {\n          _this4.callbacks.onSelectionBegin();\n        }\n      });\n    }\n    /**\r\n     * Listener for the pointer up event.\r\n     * @param e PointerEvent\r\n     */\n\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(e) {\n      var _this5 = this;\n\n      window.requestAnimationFrame(function () {\n        if (typeof _this5.callbacks.onSelectionEnd === \"function\") {\n          var p1 = new Point2D_1.Point2D(_this5.crossA.x - _this5.copyRect.width / 2, _this5.crossA.y - _this5.copyRect.height / 2);\n          var p2 = new Point2D_1.Point2D(_this5.crossA.x + _this5.copyRect.width / 2, _this5.crossA.y + _this5.copyRect.height / 2);\n          p1 = p1.boundToRect(_this5.boundRect);\n          p2 = p2.boundToRect(_this5.boundRect);\n          var width = p2.x - p1.x;\n          var height = p2.y - p1.y;\n          var regionData = RegionData_1.RegionData.BuildRectRegionData(p1.x, p1.y, width, height);\n\n          _this5.callbacks.onSelectionEnd(regionData);\n        }\n      });\n    }\n    /**\r\n     * Listener for the pointer move event.\r\n     * @param e PointerEvent\r\n     */\n\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(e) {\n      var _this6 = this;\n\n      window.requestAnimationFrame(function () {\n        var rect = _this6.parentNode.getClientRects();\n\n        var p = new Point2D_1.Point2D(e.clientX - rect[0].left, e.clientY - rect[0].top);\n\n        _this6.crossA.show();\n\n        _this6.copyRectEl.show();\n\n        _this6.moveCross(_this6.crossA, p);\n\n        _this6.moveCopyRect(_this6.copyRectEl, _this6.crossA);\n      });\n      e.preventDefault();\n    }\n    /**\r\n     * Listener for the wheel event.\r\n     * @param e WheelEvent\r\n     */\n\n  }, {\n    key: \"onWheel\",\n    value: function onWheel(e) {\n      var _this7 = this;\n\n      var width = this.copyRect.width;\n      var height = this.copyRect.height;\n      var k = height / width;\n\n      if (e.shiftKey) {\n        if (e.deltaY > 0) {\n          width *= 1.1;\n          height *= 1.1;\n        } else {\n          width /= 1.1;\n          height /= 1.1;\n        }\n      } else {\n        if (e.deltaY > 0) {\n          width += 1.0;\n          height += k;\n        } else {\n          width -= 1.0;\n          height -= k;\n        }\n      }\n\n      if (width < 1.0) {\n        width = 1.0;\n        height = k;\n      }\n\n      if (height < 1.0) {\n        height = 1.0;\n        width = 1.0 / k;\n      }\n\n      window.requestAnimationFrame(function () {\n        _this7.copyRect.resize(width, height);\n\n        _this7.copyRectEl.resize(width, height);\n\n        _this7.moveCopyRect(_this7.copyRectEl, _this7.crossA);\n      });\n    }\n  }]);\n\n  return RectCopySelector;\n}(Selector_1.Selector);\n\nexports.RectCopySelector = RectCopySelector;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _regeneratorRuntime from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jw/Documents/code/VoTT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _ from \"lodash\";\nimport shortid from \"shortid\";\nimport { StorageProviderFactory } from \"../providers/storage/storageProviderFactory\";\nimport { AppError, ErrorCode, ModelPathType } from \"../models/applicationState\";\nimport Guard from \"../common/guard\";\nimport { constants } from \"../common/constants\";\nimport { ExportProviderFactory } from \"../providers/export/exportProviderFactory\";\nimport { decryptProject, encryptProject } from \"../common/utils\";\nimport packageJson from \"../../package.json\";\nimport { ExportAssetState } from \"../providers/export/exportProvider\";\nvar defaultActiveLearningSettings = {\n  autoDetect: false,\n  predictTag: true,\n  modelPathType: ModelPathType.Coco\n};\nvar defaultExportOptions = {\n  providerType: \"vottJson\",\n  providerOptions: {\n    assetState: ExportAssetState.Visited,\n    includeImages: true\n  }\n};\n/**\n * @name - Project Service\n * @description - Functions for dealing with projects\n */\n\nvar ProjectService =\n/*#__PURE__*/\nfunction () {\n  function ProjectService() {\n    _classCallCheck(this, ProjectService);\n  }\n\n  _createClass(ProjectService, [{\n    key: \"load\",\n\n    /**\n     * Loads a project\n     * @param project The project JSON to load\n     * @param securityToken The security token used to decrypt sensitive project settings\n     */\n    value: function load(project, securityToken) {\n      Guard.null(project);\n\n      try {\n        var loadedProject = decryptProject(project, securityToken); // Ensure tags is always initialized to an array\n\n        if (!loadedProject.tags) {\n          loadedProject.tags = [];\n        } // Initialize active learning settings if they don't exist\n\n\n        if (!loadedProject.activeLearningSettings) {\n          loadedProject.activeLearningSettings = defaultActiveLearningSettings;\n        } // Initialize export settings if they don't exist\n\n\n        if (!loadedProject.exportFormat) {\n          loadedProject.exportFormat = defaultExportOptions;\n        }\n\n        this.ensureBackwardsCompatibility(loadedProject);\n        return Promise.resolve(_objectSpread({}, loadedProject));\n      } catch (e) {\n        var error = new AppError(ErrorCode.ProjectInvalidSecurityToken, \"Error decrypting project settings\");\n        return Promise.reject(error);\n      }\n    }\n    /**\n     * Save a project\n     * @param project - Project to save\n     * @param securityToken - Security Token to encrypt\n     */\n\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(project, securityToken) {\n        var storageProvider;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Guard.null(project);\n\n                if (!project.id) {\n                  project.id = shortid.generate();\n                } // Ensure tags is always initialized to an array\n\n\n                if (!project.tags) {\n                  project.tags = [];\n                } // Initialize active learning settings if they don't exist\n\n\n                if (!project.activeLearningSettings) {\n                  project.activeLearningSettings = defaultActiveLearningSettings;\n                } // Initialize export settings if they don't exist\n\n\n                if (!project.exportFormat) {\n                  project.exportFormat = defaultExportOptions;\n                }\n\n                project.version = packageJson.version;\n                storageProvider = StorageProviderFactory.createFromConnection(project.targetConnection);\n                _context.next = 9;\n                return this.saveExportSettings(project);\n\n              case 9:\n                project = encryptProject(project, securityToken);\n                _context.next = 12;\n                return storageProvider.writeText(\"\".concat(project.name).concat(constants.projectFileExtension), JSON.stringify(project, null, 4));\n\n              case 12:\n                return _context.abrupt(\"return\", project);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function save(_x, _x2) {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n    /**\n     * Delete a project\n     * @param project - Project to delete\n     */\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(project) {\n        var storageProvider, deleteFiles;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                Guard.null(project);\n                storageProvider = StorageProviderFactory.createFromConnection(project.targetConnection); // Delete all asset metadata files created for project\n\n                deleteFiles = _.values(project.assets).map(function (asset) {\n                  return storageProvider.deleteFile(\"\".concat(asset.id).concat(constants.assetMetadataFileExtension));\n                });\n                _context2.next = 5;\n                return Promise.all(deleteFiles);\n\n              case 5:\n                _context2.next = 7;\n                return storageProvider.deleteFile(\"\".concat(project.name).concat(constants.projectFileExtension));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _delete(_x3) {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n    /**\n     * Checks whether or not the project would cause a duplicate at the target connection\n     * @param project The project to validate\n     * @param projectList The list of known projects\n     */\n\n  }, {\n    key: \"isDuplicate\",\n    value: function isDuplicate(project, projectList) {\n      var duplicateProjects = projectList.find(function (p) {\n        return p.id !== project.id && p.name === project.name && JSON.stringify(p.targetConnection.providerOptions) === JSON.stringify(project.targetConnection.providerOptions);\n      });\n      return duplicateProjects !== undefined;\n    }\n  }, {\n    key: \"saveExportSettings\",\n    value: function () {\n      var _saveExportSettings = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(project) {\n        var exportProvider;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(!project.exportFormat || !project.exportFormat.providerType)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", Promise.resolve());\n\n              case 2:\n                exportProvider = ExportProviderFactory.createFromProject(project);\n\n                if (exportProvider.save) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", Promise.resolve());\n\n              case 5:\n                _context3.next = 7;\n                return exportProvider.save(project.exportFormat);\n\n              case 7:\n                project.exportFormat.providerOptions = _context3.sent;\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function saveExportSettings(_x4) {\n        return _saveExportSettings.apply(this, arguments);\n      }\n\n      return saveExportSettings;\n    }()\n    /**\n     * Ensures backwards compatibility with project\n     * @param project The project to update\n     */\n\n  }, {\n    key: \"ensureBackwardsCompatibility\",\n    value: function ensureBackwardsCompatibility(project) {\n      var projectVersion = project.version.toLowerCase();\n\n      if (projectVersion.startsWith(\"2.0.0\")) {\n        // Required for backwards compatibility with v2.0.0 release\n        if (project.exportFormat.providerType === \"tensorFlowPascalVOC\") {\n          project.exportFormat.providerType = \"pascalVOC\";\n        }\n      }\n    }\n  }]);\n\n  return ProjectService;\n}();\n\nexport { ProjectService as default };","map":{"version":3,"sources":["/home/jw/Documents/code/VoTT/src/services/projectService.ts"],"names":["_","shortid","StorageProviderFactory","AppError","ErrorCode","ModelPathType","Guard","constants","ExportProviderFactory","decryptProject","encryptProject","packageJson","ExportAssetState","defaultActiveLearningSettings","autoDetect","predictTag","modelPathType","Coco","defaultExportOptions","providerType","providerOptions","assetState","Visited","includeImages","ProjectService","project","securityToken","null","loadedProject","tags","activeLearningSettings","exportFormat","ensureBackwardsCompatibility","Promise","resolve","e","error","ProjectInvalidSecurityToken","reject","id","generate","version","storageProvider","createFromConnection","targetConnection","saveExportSettings","writeText","name","projectFileExtension","JSON","stringify","deleteFiles","values","assets","map","asset","deleteFile","assetMetadataFileExtension","all","projectList","duplicateProjects","find","p","undefined","exportProvider","createFromProject","save","projectVersion","toLowerCase","startsWith"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport shortid from \"shortid\";\nimport { StorageProviderFactory } from \"../providers/storage/storageProviderFactory\";\nimport {\n    IProject, ISecurityToken, AppError,\n    ErrorCode, ModelPathType, IActiveLearningSettings,\n} from \"../models/applicationState\";\nimport Guard from \"../common/guard\";\nimport { constants } from \"../common/constants\";\nimport { ExportProviderFactory } from \"../providers/export/exportProviderFactory\";\nimport { decryptProject, encryptProject } from \"../common/utils\";\nimport packageJson from \"../../package.json\";\nimport { ExportAssetState } from \"../providers/export/exportProvider\";\nimport { IExportFormat } from \"vott-react\";\n\n/**\n * Functions required for a project service\n * @member save - Save a project\n * @member delete - Delete a project\n */\nexport interface IProjectService {\n    load(project: IProject, securityToken: ISecurityToken): Promise<IProject>;\n    save(project: IProject, securityToken: ISecurityToken): Promise<IProject>;\n    delete(project: IProject): Promise<void>;\n    isDuplicate(project: IProject, projectList: IProject[]): boolean;\n}\n\nconst defaultActiveLearningSettings: IActiveLearningSettings = {\n    autoDetect: false,\n    predictTag: true,\n    modelPathType: ModelPathType.Coco,\n};\n\nconst defaultExportOptions: IExportFormat = {\n    providerType: \"vottJson\",\n    providerOptions: {\n        assetState: ExportAssetState.Visited,\n        includeImages: true,\n    },\n};\n\n/**\n * @name - Project Service\n * @description - Functions for dealing with projects\n */\nexport default class ProjectService implements IProjectService {\n    /**\n     * Loads a project\n     * @param project The project JSON to load\n     * @param securityToken The security token used to decrypt sensitive project settings\n     */\n    public load(project: IProject, securityToken: ISecurityToken): Promise<IProject> {\n        Guard.null(project);\n\n        try {\n            const loadedProject = decryptProject(project, securityToken);\n\n            // Ensure tags is always initialized to an array\n            if (!loadedProject.tags) {\n                loadedProject.tags = [];\n            }\n\n            // Initialize active learning settings if they don't exist\n            if (!loadedProject.activeLearningSettings) {\n                loadedProject.activeLearningSettings = defaultActiveLearningSettings;\n            }\n\n            // Initialize export settings if they don't exist\n            if (!loadedProject.exportFormat) {\n                loadedProject.exportFormat = defaultExportOptions;\n            }\n\n            this.ensureBackwardsCompatibility(loadedProject);\n\n            return Promise.resolve({ ...loadedProject });\n        } catch (e) {\n            const error = new AppError(ErrorCode.ProjectInvalidSecurityToken, \"Error decrypting project settings\");\n            return Promise.reject(error);\n        }\n    }\n\n    /**\n     * Save a project\n     * @param project - Project to save\n     * @param securityToken - Security Token to encrypt\n     */\n    public async save(project: IProject, securityToken: ISecurityToken): Promise<IProject> {\n        Guard.null(project);\n\n        if (!project.id) {\n            project.id = shortid.generate();\n        }\n\n        // Ensure tags is always initialized to an array\n        if (!project.tags) {\n            project.tags = [];\n        }\n\n        // Initialize active learning settings if they don't exist\n        if (!project.activeLearningSettings) {\n            project.activeLearningSettings = defaultActiveLearningSettings;\n        }\n\n        // Initialize export settings if they don't exist\n        if (!project.exportFormat) {\n            project.exportFormat = defaultExportOptions;\n        }\n\n        project.version = packageJson.version;\n\n        const storageProvider = StorageProviderFactory.createFromConnection(project.targetConnection);\n        await this.saveExportSettings(project);\n        project = encryptProject(project, securityToken);\n\n        await storageProvider.writeText(\n            `${project.name}${constants.projectFileExtension}`,\n            JSON.stringify(project, null, 4),\n        );\n\n        return project;\n    }\n\n    /**\n     * Delete a project\n     * @param project - Project to delete\n     */\n    public async delete(project: IProject): Promise<void> {\n        Guard.null(project);\n\n        const storageProvider = StorageProviderFactory.createFromConnection(project.targetConnection);\n\n        // Delete all asset metadata files created for project\n        const deleteFiles = _.values(project.assets)\n            .map((asset) => storageProvider.deleteFile(`${asset.id}${constants.assetMetadataFileExtension}`));\n\n        await Promise.all(deleteFiles);\n        await storageProvider.deleteFile(`${project.name}${constants.projectFileExtension}`);\n    }\n\n    /**\n     * Checks whether or not the project would cause a duplicate at the target connection\n     * @param project The project to validate\n     * @param projectList The list of known projects\n     */\n    public isDuplicate(project: IProject, projectList: IProject[]): boolean {\n        const duplicateProjects = projectList.find((p) =>\n            p.id !== project.id &&\n            p.name === project.name &&\n            JSON.stringify(p.targetConnection.providerOptions) ===\n            JSON.stringify(project.targetConnection.providerOptions),\n        );\n        return (duplicateProjects !== undefined);\n    }\n\n    private async saveExportSettings(project: IProject): Promise<void> {\n        if (!project.exportFormat || !project.exportFormat.providerType) {\n            return Promise.resolve();\n        }\n\n        const exportProvider = ExportProviderFactory.createFromProject(project);\n\n        if (!exportProvider.save) {\n            return Promise.resolve();\n        }\n\n        project.exportFormat.providerOptions = await exportProvider.save(project.exportFormat);\n    }\n\n    /**\n     * Ensures backwards compatibility with project\n     * @param project The project to update\n     */\n    private ensureBackwardsCompatibility(project: IProject) {\n        const projectVersion = project.version.toLowerCase();\n\n        if (projectVersion.startsWith(\"2.0.0\")) {\n            // Required for backwards compatibility with v2.0.0 release\n            if (project.exportFormat.providerType === \"tensorFlowPascalVOC\") {\n                project.exportFormat.providerType = \"pascalVOC\";\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}